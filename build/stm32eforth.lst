ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              	// exception stack is at RAM_END and reserve 128 bytes 
  48              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) reserve 128 bytes growing down */
  49              		.equ TIBB ,	RPP-208	/*terminal input buffer (TIB) reserve 80 bytes */
  50              		.equ TIB_SIZE, 80  // 80 bytes,  input transaction buffer size. 
ARM GAS  forth.s 			page 9


  51              		.equ SPP ,	RPP-208	/*top of data stack (SP0) groing down */
  52              		.equ VID_BUFF, SPP-128-32000 /* video buffer */
  53              		.equ WB_BUFF, VID_BUFF-4096 /* flash memory write back buffer */ 
  54              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  55              		.equ DTOP,  RAM_ADR+0x512 
  56              		.equ DEND , WB_BUFF-4  /*usable RAM end */
  57              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  58              	
  59              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  60              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  61              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  62              	
  63              		.equ CELLL ,	4	/*size of a cell */
  64              		.equ BASEE ,	10	/*default radix */
  65              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  66              	
  67              		.equ BKSPP ,	8	/*backspace */
  68              		.equ LF ,	10	  /*line feed */
  69              		.equ CRR ,	13	/*carriage return */
  70              		.equ ERR ,	27	/*error escape */
  71              		.equ TIC ,	39	/*tick */
  72              	
  73              	/*************************************
  74              	   system variables offset from UPP
  75              	*************************************/
  76              	  .equ RNDSEED, 4    // prng seed 
  77              	  .equ TICKS, RNDSEED+4  // millseconds counter
  78              	  .equ CD_TIMER, TICKS+4  // count down timer
  79              	  .equ BOOT, CD_TIMER+4  // boot program address
  80              	  .equ STDIN, BOOT+4   //character ouput device 
  81              	  .equ STDOUT, STDIN+4 // character input device 
  82              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  83              	  .equ BCHAR, NBASE+4   // display base character flag 
  84              	  .equ TMP, BCHAR+4   // temporary variable
  85              	  .equ CSPAN, TMP+4  // character count received by expect  
  86              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  87              	  .equ SRC, TOIN+4    // SOURCE 
  88              	  .equ NTIBB, SRC  // #TIB  characters in TIB 
  89              	  .equ TIBUF, SRC+4   // TIB buffer address 
  90              	  .equ SRCID, TIBUF+4  // evaluation source string or user interface
  91              	  .equ EVAL, SRCID+4  // eval|compile vector 
  92              	  .equ VHOLD, EVAL+4   // hold pointer 
  93              	  .equ CTXT, VHOLD+4  // context pointer 
  94              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  95              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  96              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  97              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  98              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  99              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
 100              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
 101              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
 102              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
 103              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
 104              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 105              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 106              	  .equ KBD_QUEUE_SIZE, 16 
 107              	  .equ KBD_QUEUE, KBD_STRUCT+4 
ARM GAS  forth.s 			page 10


 108              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 109              	  .equ KBD_QTAIL,KBD_QHEAD+4
 110              	  .equ ROW,KBD_QTAIL+4 
 111              	  .equ COL,ROW+4 
 112              	  .equ BK_COLOR,COL+4 
 113              	  .equ PEN_COLOR,BK_COLOR+4
 114              	  .equ VFPSW, PEN_COLOR+4 
 115              	  .equ VFBASE, VFPSW+4 
 116              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 117              	  .equ CSTATE, BEEP_DTMR+4 // compilation state 
 118              	
 119              	
 120              	/***********************************************
 121              	* MACROS
 122              	*	Assemble inline direct threaded code ending.
 123              	***********************************************/
 124              		.macro _CALL fn /* low level routine call */ 
 125              	 	PUSH {LR}
 126              		BL \fn  
 127              		POP {LR}
 128              		.endm
 129              		
 130              		.macro _RET /* exit sub-routine */ 
 131              		BX LR 
 132              		.endm 
 133              	
 134              		// dictionary header  
 135              		.macro _HEADER  label, nlen, name
 136              			.word LINK 
 137              			.equ LINK , . 
 138              		_\label: .byte \nlen    // name field
 139              			.ascii "\name"
 140              			.p2align 2 
 141              		\label:   // code field 
 142              		.endm 
 143              		
 144              	
 145              	// local function header 
 146              		.macro _FUNC label 
 147              		.section .text, "ax", %progbits 
 148              		.p2align 2 
 149              		.type \label, %function  
 150              		\label:
 151              		.endm 
 152              	
 153              	// global function header 
 154              		.macro _GBL_FUNC label 
 155              		.global \label 
 156              		_FUNC \label 
 157              		.endm 
 158              	
 159              	
 160              	// load large constant to register 
 161              		.macro _MOV32 r, value 
 162              		mov \r,#(\value&0xffff)
 163              		movt \r,#(\value>>16)
 164              		.endm 
ARM GAS  forth.s 			page 11


 165              	
 166              		.macro _NEXT /* direct jump INEXT */ 
 167              		B INEXT   
 168              		.endm 
 169              	
 170              	 	.macro	_NEST /*start high level word */
 171              		BX INX  
 172              		NOP.N 
 173              		.endm
 174              	
 175              		.macro _ADR label 
 176              		.word 1+\label  
 177              		.endm 
 178              	
 179              	 	.macro	_UNNEST	/*end high level word */
 180              		_ADR UNNEST 
 181              		.endm
 182              	
 183              	 	.macro	_DOLIT u /*long literals */
 184              		_ADR	DOLIT
 185              		.word	\u 
 186              		.endm
 187              	
 188              		.macro _DOTQP len, text 
 189              		_ADR DOTQP 
 190              		.byte \len 
 191              		.ascii "\text" 
 192              		.p2align 2 
 193              		.endm
 194              	
 195              		// POSTPONE COMPILE 
 196              		.macro _COMPI name 
 197              		_DOLIT	\name + 1
 198              		_ADR	COMMA 
 199              		.endm 
 200              	
 201              		.macro _ABORQ len,name 
 202              		_ADR ABORQ 
 203              		.byte \len 
 204              		.ascii "\name"
 205              		.p2align 2 
 206              		.endm
 207              	
 208              		.macro _BRAN label 
 209              		_ADR BRAN 
 210              		.word \label 
 211              		.endm 
 212              	
 213              		.macro _QBRAN label 
 214              		_ADR QBRAN 
 215              		.word \label
 216              		.endm 
 217              	
 218              		.macro _TBRAN label 
 219              		_ADR TBRAN 
 220              		.word \label 
 221              		.endm 
ARM GAS  forth.s 			page 12


 222              	
 223              		.macro _DONXT label 
 224              		_ADR DONXT
 225              		.word \label 
 226              		.endm 
 227              	
 228              	 	.macro	_PUSH	/*push TOS on data stack*/
 229              		STR	TOS,[DSP,#-4]!
 230              		.endm
 231              	
 232              	 	.macro	_POP /*pop data stack to TOS */
 233              		LDR	TOS,[DSP],#4
 234              		.endm
 235              	
 236              		// calling a colon word 
 237              		// from a code word   
 238              		.macro _CALL_COLWORD target 
 239              	    ldr WP,=\target 
 240              		orr WP,#1
 241              		b \target  
 242              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
ARM GAS  forth.s 			page 13


  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
ARM GAS  forth.s 			page 14


 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF828C9 	  ldr IP,=dh
 159 000e 02F0DBBF 	  b INEXT  
 160              	dh:
 161 0012 B1530000 	  _ADR PRESE
 162 0016 CD470000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 15300000 	  _ADR CFSR 
 164 0038 A9330000 	  _ADR DUPP
 165 003c 15330000 	  _ADR TOR 
 166 0040 EF310000 	  _DOLIT 16 
 166      10000000 
 167 0048 053A0000 	  _ADR BASE 
 168 004c 71320000 	  _ADR STORE 
 169 0050 C9480000 	  _ADR UDOT 
ARM GAS  forth.s 			page 15


 170 0054 CD470000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 B1320000 	  _ADR RFROM
 172 0068 EF310000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 65340000 	  _ADR ANDD
 174 0074 2F320000 	  _QBRAN 1f
 174      94000000 
 175 007c 35300000 	  _ADR BFAR
 176 0080 EF310000 	  _DOLIT ','
 176      2C000000 
 177 0088 91300000 	  _ADR EMIT 
 178 008c B5460000 	  _ADR SPACE 
 179 0090 C9480000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 CD470000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 11230000 	  _ADR FPSCR
 184 00a8 C9480000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F04DFB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF874C8 	  ldr IP,=fpu_except
 202 00c4 02F080BF 	  b INEXT 
 203              	fpu_except:  
 204 00c8 71470000 	  _ADR CR 
 205 00cc 053A0000 	  _ADR BASE 
 206 00d0 85320000 	  _ADR AT 
 207 00d4 15330000 	  _ADR TOR  
 208 00d8 EF310000 	  _DOLIT 16 
 208      10000000 
 209 00e0 053A0000 	  _ADR BASE 
 210 00e4 71320000 	  _ADR STORE
 211 00e8 EF310000 	  _DOLIT 4 
 211      04000000 
 212 00f0 F5340000 	  _ADR SUBB  
 213 00f4 CD470000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
ARM GAS  forth.s 			page 16


 214 0100 FD480000 	  _ADR DOT 
 215 0104 CD470000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 11230000 	  _ADR FPSCR 
 217 0124 A9330000 	  _ADR DUPP 
 218 0128 FD480000 	  _ADR DOT
 219 012c F5350000 	  _ADR QDUP 
 220 0130 2F320000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 EF310000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 91300000 	  _ADR EMIT 
 223 0144 EF310000 	  _DOLIT ' ' 
 223      20000000 
 224 014c 91300000 	  _ADR EMIT
 225 0150 A9330000 	  _ADR DUPP 
 226 0154 EF310000 	  _DOLIT 0x10 
 226      10000000 
 227 015c 65340000 	  _ADR ANDD
 228 0160 F5350000 	  _ADR QDUP  
 229 0164 2F320000 	  _QBRAN 1f 
 229      84010000 
 230 016c EF310000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 E5340000 	  _ADR PLUS 
 232 0178 85320000 	  _ADR AT 
 233 017c 59390000 	  _ADR COUNT 
 234 0180 09470000 	  _ADR TYPEE
 235 0184 EF310000 	1: _DOLIT 15 
 235      0F000000 
 236 018c 65340000 	  _ADR ANDD
 237 0190 B1370000 	  _ADR CLZ 
 238 0194 EF310000 	  _DOLIT 31 
 238      1F000000 
 239 019c B9330000 	  _ADR SWAP 
 240 01a0 F5340000 	  _ADR SUBB 
 241 01a4 EF310000 	  _DOLIT 2 
 241      02000000 
 242 01ac D5340000 	  _ADR LSHIFT 
 243 01b0 EF310000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 E5340000 	  _ADR PLUS 
 245 01bc 85320000 	  _ADR AT 
 246 01c0 59390000 	  _ADR COUNT 
 247 01c4 09470000 	  _ADR TYPEE 
 248 01c8 71470000 	2: _ADR CR 
 249 01cc EF310000 	  _DOLIT 0
 249      00000000 
 250 01d4 31230000 	  _ADR CLR_FPSCR 
 251 01d8 B1320000 	  _ADR RFROM  
 252 01dc 053A0000 	  _ADR BASE 
 253 01e0 71320000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
ARM GAS  forth.s 			page 17


 256              	exit_fpu_isr:
 257 01e8 DFF850C7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F094FA 	   bl nvic_enable_irq 
 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
ARM GAS  forth.s 			page 18


 295              	
 296              	
 297              	/*********************************
 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8D8C6 	  ldr IP,=nmi_hl 
 306 0268 02F0AEBE 	  b  INEXT
 307              	nmi_hl:
 308 026c B1530000 	  _ADR PRESE 
 309 0270 71470000 	  _ADR CR 
 310 0274 CD470000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 71470000 	  _ADR CR 
 312 0298 39510000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF89CC6 	  ldr IP,=hardfault_hl 
 326 02aa 02F08DBE 	  b INEXT
 327              	hardfault_hl:
 328 02ae B1530000 	  _ADR PRESE
 329 02b2 71470000 	  _ADR CR  
 330 02b6 CD470000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 71470000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
ARM GAS  forth.s 			page 19


 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF864C6 	  ldr IP,=memfault_hl 
 345 02e6 02F06FBE 	  b INEXT 
 346              	memfault_hl: 
 347 02ea B1530000 	  _ADR PRESE
 348 02ee 71470000 	  _ADR CR  
 349 02f2 CD470000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 EF310000 	  _DOLIT 16 
 350      10000000 
 351 0320 053A0000 	  _ADR BASE 
 352 0324 71320000 	  _ADR STORE   
 353 0328 15300000 	  _ADR CFSR
 354 032c EF310000 	  _DOLIT 255 
 354      FF000000 
 355 0334 65340000 	  _ADR ANDD 
 356 0338 C9480000 	  _ADR UDOT 
 357 033c 71470000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8FCC5 	  ldr IP,=busfault_hl 
 372 0352 02F039BE 	  b INEXT 
 373              	busfault_hl:
 374 0356 B1530000 	  _ADR PRESE
 375 035a EF310000 	  _DOLIT 1 
 375      01000000 
 376 0362 59310000 	  _ADR ULED 
 377 0366 EF310000 	  _DOLIT  100 
 377      64000000 
 378 036e C1390000 	  _ADR MSEC 
 379 0372 35300000 	  _ADR BFAR 
 380 0376 15300000 	  _ADR CFSR 
 381 037a 71470000 	  _ADR CR  
 382 037e CD470000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 EF310000 	  _DOLIT 16 
 383      10000000 
 384 03a8 053A0000 	  _ADR BASE 
ARM GAS  forth.s 			page 20


 385 03ac 71320000 	  _ADR STORE   
 386 03b0 EF310000 	  _DOLIT 0XFF00 
 386      00FF0000 
 387 03b8 65340000 	  _ADR ANDD   
 388 03bc C9480000 	  _ADR UDOT 
 389 03c0 CD470000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 03cc C9480000 	  _ADR UDOT 
 391 03d0 71470000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF86CC5 	  ldr IP,=usagefault_hl
 405 03e6 02F0EFBD 	  b INEXT 
 406              	usagefault_hl:
 407 03ea B1530000 	  _ADR PRESE
 408 03ee 71470000 	  _ADR CR  
 409 03f2 CD470000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 EF310000 	  _DOLIT 16 
 410      10000000 
 411 0418 053A0000 	  _ADR BASE 
 412 041c 71320000 	  _ADR STORE   
 413 0420 15300000 	  _ADR CFSR
 414 0424 EF310000 	  _DOLIT 16 
 414      10000000 
 415 042c BD340000 	  _ADR RSHIFT 
 416 0430 C9480000 	  _ADR UDOT 
 417 0434 71470000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8B000 	    ldr r0,[r3,#BEEP_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
ARM GAS  forth.s 			page 21


 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8B000 	  ldr r0,[r3,#BEEP_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8B000 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF8B0C4 	  ldr IP,=ur
 474 04a4 02F090BD 	  b INEXT  
 475              	ur:
 476 04a8 B1530000 	  _ADR PRESE
 477 04ac 71470000 	  _ADR CR   
 478 04b0 EF310000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 59390000 		_ADR COUNT 
 480 04bc 09470000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
ARM GAS  forth.s 			page 22


 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F0C7FE 	  bl  fpu_init 
 518 0524 00F011FB 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F00AFC 	  bl  flash_spi_init   
 522 0534 06F0E4B9 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF6B067 		_MOV32 DSP,SPP
 530      C2F20107 
ARM GAS  forth.s 			page 23


 531 0548 4FF68078 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF804A4 	  ldr INX,=NEST
 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
ARM GAS  forth.s 			page 24


 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      E6F85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      35F95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure console select pin 
 616              	   PA8 with pullup
 617              	   hi -> local console 
 618              	   low -> serial console (jumper on) 
 619              	*/
 620 060c 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR // port A 
 620      C4F20200 
 621 0614 C168     	  ldr r1,[r0,#GPIO_PUPDR]
 622 0616 41F48031 	  orr r1,#(1<<(2*8))
 623 061a C160     	  str r1,[r0,#GPIO_PUPDR]
 624              	
 625              	/* configure audio output 
 626              	   PB6 Aout 
 627              	   T4-CH1  PWM mode
 628              	   Fck = 96Mhz/16  
 629              	*/
 630 061c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 630      C4F20200 
ARM GAS  forth.s 			page 25


 631              	  // select AF02 on PB6 // T4-CH1 
 632 0624 016A     	  ldr r1,[r0,#GPIO_AFRL]
 633 0626 41F00071 	  orr r1,#(2<<24)
 634 062a 0162     	  str r1,[r0,#GPIO_AFRL] 
 635 062c 4FF00601 	  mov r1,#6 // pin 
 636 0630 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 637 0634 00B500F0 	  _CALL gpio_config 
 637      BBF85DF8 
 637      04EB
 638              	// enable timer4 clock 
 639 063e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 639      C4F20202 
 640 0646 4FF00400 	  mov r0,#4
 641 064a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 642 064c 41EA0001 	  orr r1,r0 
 643 0650 1164     	  str r1,[r2,#RCC_APB1ENR]
 644              	// configure TIMER4 CH1  pwm mode   
 645 0652 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 645      C4F20002 
 646              	// prÃ©scale / 16 
 647 065a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 647      C4F20000 
 648 0662 4FF00F01 	  mov r1,#15 
 649 0666 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 650              	// pwm mode 
 651 0668 4FF07001 	  mov r1,#7<<4 
 652 066c 8161     	  str r1,[r0,#TIM_CCMR1]
 653 066e 016A     	  ldr r1,[r0,TIM_CCER]
 654 0670 41F00101 	  orr r1,#1
 655 0674 0162     	  str r1,[r0,#TIM_CCER]
 656              	  // enable interrupt 
 657 0676 C168     	  ldr r1,[r0,#TIM_DIER]
 658 0678 41F00101 	  orr r1,#1 
 659 067c C160     	  str r1,[r0,#TIM_DIER]
 660 067e 4FF01E00 	  mov r0,#TIM4_IRQ 
 661 0682 00B500F0 	  _CALL  nvic_enable_irq
 661      51F85DF8 
 661      04EB
 662              	
 663              	
 664              	/* configure systicks for 1msec ticks */
 665              	// set priority to 15 (lowest)
 666 068c 4FF0FF30 	  mov r0,#STCK_IRQ
 667 0690 4FF00F01 	  mov r1,#15 
 668 0694 00B500F0 	  _CALL nvic_set_priority
 668      2FF85DF8 
 668      04EB
 669 069e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 669      CEF20000 
 670 06a6 47F2FF61 	  _MOV32 r1,95999 
 670      C0F20101 
 671 06ae 4160     	  str r1,[r0,#STK_LOAD]
 672 06b0 4FF00701 	  mov r1,#7
 673 06b4 0160     	  str r1,[r0,STK_CTL]
 674 06b6 7047     	  _RET  
 675              	
 676              	  
ARM GAS  forth.s 			page 26


 677              	/* copy system variables to RAM */ 
 678              		.type remap, %function 
 679              	    .global remap 
 680              	remap:
 681              	// copy system to RAM 	
 682 06b8 4FF00000 		_MOV32 r0,RAM_ADR 
 682      C2F20000 
 683 06c0 A649     		ldr r1,=UZERO 
 684 06c2 4FF0C002 		mov r2,#ULAST-UZERO 
 685 06c6 02F10302 		add r2,r2,#3
 686 06ca 22F00302 		and r2,r2,#~3 
 687 06ce 51F8043B 	1:	ldr r3,[r1],#4 
 688 06d2 40F8043B 		str r3,[r0],#4 
 689 06d6 043A     		subs R2,#4 
 690 06d8 F9D1     		bne 1b
 691              	// zero end of RAM 
 692 06da 4FF00002 		_MOV32 r2,RAM_END 
 692      C2F20202 
 693 06e2 83EA0303 		eor r3,r3,r3 
 694 06e6 40F8043B 	2:  str r3,[r0],#4
 695 06ea 9042     		cmp r0,r2 
 696 06ec FBDB     		blt 2b 
 697 06ee 4FF00004 		_MOV32 UP,RAM_ADR  
 697      C2F20004 
 698 06f6 7047     		_RET 
 699              	
 700              	// set irq priority 
 701              	// 0 highest 
 702              	// 15 lowest
 703              	// input: r0 IRQn  
 704              	//        r1  ipr 
 705              	nvic_set_priority:
 706 06f8 08B4     	    push {r3}
 707 06fa 0028     	    cmp r0,#0 
 708 06fc 08D4     	    bmi negative_irq 
 709 06fe 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 709      CEF20003 
 710 0706 4FEA0111 	    lsl r1,#4 
 711 070a 1954     	    strb r1,[r3,r0]
 712 070c 08BC     	    pop {r3}
 713 070e 7047     	    _RET 
 714              	negative_irq:
 715 0710 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 715      CEF20003 
 716 0718 00F00F00 	    and r0,#0XF 
 717 071c A0F10400 	    sub r0,#4 
 718 0720 4FEA0111 	    lsl r1,#4 
 719 0724 1954     	    strb r1,[r3,r0]
 720 0726 08BC     	    pop {r3}
 721 0728 7047     	    _RET 
 722              	
 723              	
 724              	// enable interrupt in nvic 
 725              	// input: r0 = IRQn 
 726              	nvic_enable_irq: 
 727 072a 0EB4     	    push {r1,r2,r3}
 728 072c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
ARM GAS  forth.s 			page 27


 728      CEF20003 
 729 0734 0146     	    mov r1,r0 
 730 0736 4FEA5111 	    lsr r1,#5  
 731 073a 4FEA8101 	    lsl r1,#2  // ISERn  
 732 073e 00F01F00 	    and r0,#31 // bit#
 733 0742 4FF00102 	    mov r2,#1 
 734 0746 02FA00F2 	    lsl r2,r0
 735 074a 72B6     	    cpsid I
 736 074c 5A50     	    str r2,[r3,r1]
 737 074e 62B6     	    cpsie I 
 738 0750 0EBC     	    pop {r1,r2,r3}
 739 0752 7047     	    _RET 
 740              	
 741              	// disable interrupt in nvic
 742              	// input: r0 = IRQn
 743              	nvic_disable_irq:
 744 0754 0EB4     	    push {r1,r2,r3}
 745 0756 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 745      CEF20003 
 746 075e 0146     	    mov r1,r0 
 747 0760 4FEA5111 	    lsr r1,#5  
 748 0764 4FEA8101 	    lsl r1,#2  // ISERn
 749 0768 00F01F00 	    and r0,#31 // bit#
 750 076c 4FF00102 	    mov r2,#1 
 751 0770 02FA00F2 	    lsl r2,r0
 752 0774 5A50     	    str r2,[r3,r1]
 753 0776 BFF34F8F 	    dsb 
 754 077a BFF36F8F 	    isb 
 755 077e 0EBC     	    pop {r1,r2,r3}
 756 0780 7047     	    _RET 
 757              	
 758              	// clear interrupt pending flag 
 759              	// input: r0 = IRQn
 760              	nvic_clear_irq_pending:
 761 0782 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 761      CEF20003 
 762 078a 0EB4     	    push {r1,r2,r3}
 763 078c 0146     	    mov r1,r0 
 764 078e 4FEA5111 	    lsr r1,#5 
 765 0792 4FEA8101 	    lsl r1,#2  // IABRn
 766 0796 00F01F00 	    and r0,#31 // bit#
 767 079a 4FF00102 	    mov r2,#1 
 768 079e 02FA00F2 	    lsl r2,r0
 769 07a2 5A50     	    str r2,[r3,r1]
 770 07a4 BFF34F8F 	    dsb 
 771 07a8 BFF36F8F 	    isb 
 772 07ac 0EBC     	    pop {r1,r2,r3}
 773 07ae 7047     	    _RET 
 774              	
 775              	
 776              	/**********************************
 777              	  gpio_config 
 778              	  Configure gpio mode 
 779              	  input:
 780              	    r0   GPIOx 
 781              	    r1   pin 
 782              	    r2   mode 
ARM GAS  forth.s 			page 28


 783              	  output:
 784              	    none 
 785              	  use:
 786              	    r3,r5,r11  
 787              	**********************************/
 788              	gpio_config:
 789 07b0 2DE92808 	    push {r3,r5,r11}
 790              	//  clear registers field 
 791 07b4 4FF00105 	    mov r5,#1
 792 07b8 05FA01F5 	    lsl r5,r1
 793 07bc 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 794 07c0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 795 07c2 03EA0503 	    and r3,r5 
 796 07c6 4360     	    str r3,[r0,#GPIO_OTYPER]
 797 07c8 4FF00305 	    mov r5,#3 
 798 07cc 4FF0020B 	    mov r11,#2 
 799 07d0 01FB0BFB 	    mul r11,r1 
 800 07d4 05FA0BF5 	    lsl r5,r11 
 801 07d8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 802 07dc 0368     	    ldr r3,[r0,#GPIO_MODER]
 803 07de 03EA0503 	    and r3,r5 
 804 07e2 0360     	    str r3,[r0,#GPIO_MODER]
 805 07e4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 806 07e6 03EA0503 	    and r3,r5 
 807 07ea C360     	    str r3,[r0,#GPIO_PUPDR]
 808              	// set mode register, r2 low nibble  
 809 07ec 02F00305 	    and r5,r2,#3    
 810 07f0 05FA0BF5 	    lsl r5,r11 // mode 
 811 07f4 0368     	    ldr r3,[r0,#GPIO_MODER]
 812 07f6 43EA0503 	    orr r3,r5 
 813 07fa 0360     	    str r3,[r0,#GPIO_MODER]
 814 07fc 032A     	    cmp r2,#3
 815 07fe 13D0     	    beq 9f // analog input 
 816 0800 12F00305 	    ands r5,r2,#3 
 817 0804 08D0     	    beq input_pull 
 818              	output_type:
 819 0806 4FEA1212 	    lsr r2,#4 
 820 080a 02FA01F2 	    lsl r2,r1 // 1 bit field 
 821 080e 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 822 0810 43EA0203 	    orr r3,r2 
 823 0814 4360     	    str r3,[r0,#GPIO_OTYPER]
 824 0816 07E0     	    b 9f 
 825              	input_pull:
 826 0818 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 827 081a 4FEA1212 	    lsr r2,#4 
 828 081e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 829 0822 43EA0203 	    orr r3,r2 
 830 0826 C360     	    str r3,[r0,#GPIO_PUPDR]
 831 0828 BDE82808 	9:  pop {r3,r5,r11}
 832 082c 7047     	    _RET 
 833              	
 834              	// configure gpio speed 
 835              	// input:
 836              	//    r0   GPIO_BASE_ADR 
 837              	//    r1   pin 
 838              	//    r2   speed
 839              	// use:
ARM GAS  forth.s 			page 29


 840              	//  r3,r5,r11 
 841              	gpio_speed:
 842 082e 2DE92808 	    push {r3,r5,r11}
 843 0832 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 844 0834 4FF00305 	    mov r5,#3
 845 0838 4FF0020B 	    mov r11,#2 
 846 083c 01FB0BFB 	    mul r11,r1 
 847 0840 05FA0BF5 	    lsl r5,r11
 848 0844 6FEA0505 	    mvn r5,r5 
 849 0848 03EA0503 	    and r3,r5   
 850 084c 02FA0BF2 	    lsl r2,r11  
 851 0850 43EA0203 	    orr r3,r2 
 852 0854 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 853 0856 BDE82808 	    pop {r3,r5,r11}
 854 085a 7047     	    _RET
 855              	
 856              	/**************************** 
 857              	  gpio_out port,pin,0|1
 858              	  input:
 859              	    r0   gpio_base_adr 
 860              	    r1   pin 
 861              	    r2   data 0|1 
 862              	**************************/
 863              	gpio_out:
 864 085c 08B4     	    push {r3}
 865 085e 4FF00103 	    mov r3,#1 
 866 0862 03FA01F3 	    lsl r3,r1 
 867 0866 0AB9     	    cbnz r2, 1f 
 868 0868 4FEA0343 	    lsl r3,#16 
 869 086c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 870 086e 08BC     	    pop {r3}
 871 0870 7047     	    _RET 
 872              	
 873              	/******************************************************
 874              	*  COLD start moves the following to USER variables.
 875              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 876              	******************************************************/
 877 0872 00BF     		.p2align 2
 878              	UZERO:
 879 0874 00000000 		.word 0  			/*Reserved */
 880 0878 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 881 087c 00000000 		.word 0      /* TICKS */
 882 0880 00000000 	    .word 0     /* CD_TIMER */
 883 0884 10680000 		.word HI_BOTH  /*'BOOT */
 884 0888 301A0000 		.word PS2_QKEY /* query for character */
 885 088c F8120000 	  .word TV_EMIT  /* char output device */
 886 0890 0A000000 	  .word BASEE 	/*BASE */
 887 0894 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 888 0898 00000000 		.word 0			/*tmp */
 889 089c 00000000 		.word 0			/*SPAN */
 890 08a0 00000000 		.word 0			/*>IN */
 891 08a4 00000000 		.word 0			/*#TIB */
 892 08a8 B0FE0120 		.word TIBB	/*TIBU */
 893 08ac 00000000 	  .word 0     // SRCID 
 894 08b0 E8510000 		.word INTER	/*'EVAL */
 895 08b4 00000000 		.word 0			/*HLD */
 896 08b8 F8680000 		.word _LASTN	/*CONTEXT */
ARM GAS  forth.s 			page 30


 897 08bc 64690000 		.word CTOP  	/* FCP end of system dictionnary */
 898 08c0 F0600020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 899 08c4 F8680000 		.word _LASTN	/*LAST word in dictionary */
 900 08c8 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 900      00000000 
 900      00000000 
 900      00000000 
 901 08d8 00000000 		.word 0  /* RX_HEAD */
 902 08dc 00000000 		.word 0  /* RX_TAIL */ 
 903 08e0 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 904 08e4 00000000 		.word 0  /* VID_STATE, video state */  
 905 08e8 00000000 	    .word 0  /* VID_FIELD, field */
 906 08ec 30810120 		.word VID_BUFF /* video_buffer address */ 
 907 08f0 00000000 	    .word 0 /* kbd struct */
 908 08f4 00000000 		.space KBD_QUEUE_SIZE,0  
 908      00000000 
 908      00000000 
 908      00000000 
 909 0904 00000000 		.word 0  /* kbd queue head */
 910 0908 00000000 		.word 0 /* kbd queue tail */ 
 911 090c 00000000 	    .word 0 /* tv cursor row */
 912 0910 00000000 	    .word 0 /* tv cursor column */ 
 913 0914 00000000 	    .word 0 /* tv back color */
 914 0918 07000000 	    .word 7 /* tv font color */
 915 091c 00000000 	    .word 0 /* FPSW */
 916 0920 00000000 	    .word 0 /* FBASE */ 
 917 0924 00000000 	    .word 0 /* BEEP_DTMR */
 918 0928 00000000 	    .word 0 /* CSTATE */ 
 919 092c 00000000 	    .word 0,0 
 919      00000000 
 920              	
 921              	ULAST:
 922              	
 923              	// used by _HEADER macro 
 924              	// to link names field
 925              	// in dictionary  
 926 0934 12000000 	    .equ LINK, 0 
 926      C8000000 
 926      C8530000 
 926      6C020000 
 926      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
ARM GAS  forth.s 			page 31


  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	    ENVIRONMENT? 
  22              	    constants 
  23              	    vocabulary separate from 
  24              	    main dictionary  
  25              	*******************************/
  26              	
  27              	
  28              	/*******************************
  29              	    ENVIRONMENT? 
  30              	    ( c-addr u -- false | i * x true ) 
  31              	********************************/
  32 0960 00000000 	    _HEADER ENVQ,12,"ENVIRONMENT?"
  32      0C454E56 
  32      49524F4E 
  32      4D454E54 
  32      3F0000BF 
  33 0974 504700BF 	    _NEST 
  34              	    // save normal context 
  35 0978 B13A0000 	    _ADR CNTXT 
  36 097c 85320000 	    _ADR AT 
  37 0980 15330000 	    _ADR TOR 
  38              	    // set environment context 
  39 0984 EF310000 	    _DOLIT _ENVLASTN  
  39      FA0A0000 
  40 098c B13A0000 	    _ADR   CNTXT 
  41 0990 71320000 	    _ADR   STORE 
  42              	    // search string 
  43 0994 89330000 	    _ADR   DROP 
  44 0998 51350000 	    _ADR   ONEM 
  45 099c 294E0000 	    _ADR   NAMEQ
  46 09a0 A9330000 	    _ADR   DUPP 
  47 09a4 2F320000 	    _QBRAN  1f
  47      BC090000 
  48 09ac 89330000 	    _ADR   DROP 
  49 09b0 05320000 	    _ADR   EXECU 
  50 09b4 57320000 	    _BRAN  2f
  50      C4090000 
  51 09bc B9330000 	1:  _ADR  SWAP 
  52 09c0 89330000 	    _ADR  DROP 
  53              	2:  // restore normal context 
  54 09c4 B1320000 	    _ADR RFROM
  55 09c8 B13A0000 	    _ADR CNTXT 
  56 09cc 71320000 	    _ADR STORE 
  57 09d0 CF2F0000 	    _UNNEST 
  58              	
  59              	
  60              	    .equ ENVLNK , 0 
  61              	
  62              		// dictionary header  
  63              		.macro _ENV_HEADER  label, nlen, name
  64              			.word ENVLNK 
  65              			.equ ENVLNK , . 
  66              		_\label: .byte \nlen    // name field
ARM GAS  forth.s 			page 32


  67              			.ascii "\name"
  68              			.p2align 2 
  69              		\label:   // code field 
  70              		.endm 
  71              		
  72              	
  73              	/***********************************
  74              	    envronment constants 
  75              	***********************************/
  76              	
  77              	/**********************************
  78              	    /COUNTED-STRING ( -- 255 t )
  79              	constant:
  80              	    255 maximum counted string length
  81              	*************************************/
  82 09d4 00000000 	    _ENV_HEADER CNTDSTR,15,"/COUNTED-STRING"
  82      0F2F434F 
  82      554E5445 
  82      442D5354 
  82      52494E47 
  83 09e8 47F8046D 	    _PUSH 
  84 09ec 4FF0FF06 	    MOV  TOS,#255
  85 09f0 8EE0     	    B flag_true
  86              	
  87              	
  88              	/******************************************
  89              	    /HOLD  ( -- 80 t )
  90              	    size of the pictured numeric 
  91              	    output string buffer, in characters
  92              	constant:
  93              	    80 bytes   
  94              	*******************************************/
  95 09f2 D8090000 	    _ENV_HEADER SLHOLD,5,"/HOLD"
  95      052F484F 
  95      4C44
  96 09fc 47F8046D 	    _PUSH
  97 0a00 4FF05006 	    MOV TOS,#80
  98 0a04 84E0     	    B flag_true
  99              	
 100              	/***************************************
 101              	    /PAD ( -- 80 t )	
 102              	    size of the scratch area 
 103              	    pointed to by PAD, in characters
 104              	constant: 
 105              	    80 bytes 
 106              	***************************************/
 107 0a06 F6090000 	    _ENV_HEADER SLPAD,4,"/PAD"
 107      042F5041 
 107      4400
 108 0a10 47F8046D 	    _PUSH 
 109 0a14 4FF05006 	    MOV TOS,#80
 110 0a18 7AE0     	    B flag_true
 111              	
 112              	/**************************************
 113              	    ADDRESS-UNIT-BITS ( -- 32 t )
 114              	    size of one address unit, in bits
 115              	constant:
ARM GAS  forth.s 			page 33


 116              	    32 bits
 117              	**************************************/
 118 0a1a 0A0A0000 	    _ENV_HEADER ADRBITS,17,"ADDRESS-UNIT-BITS"
 118      11414444 
 118      52455353 
 118      2D554E49 
 118      542D4249 
 119 0a30 47F8046D 	    _PUSH 
 120 0a34 4FF02006 	    MOV TOS,#32
 121 0a38 6AE0     	    B flag_true
 122              	
 123              	/***************************************
 124              	    FLOORED	( -- t ) 
 125              	    flag true if floored division 
 126              	    is the default
 127              	constant:
 128              	    true 
 129              	***************************************/
 130 0a3a 1E0A0000 	    _ENV_HEADER FLOORED,7,"FLOORED"
 130      07464C4F 
 130      4F524544 
 130      00BF
 131 0a48 62E0     	    b flag_true
 132              	
 133              	/*************************************
 134              	    MAX-CHAR  ( -- 127 -1 t )
 135              	    maximum value of any character in 
 136              	    the implementation-defined 
 137              	    character set.
 138              	constant:
 139              	    127 
 140              	*************************************/
 141 0a4a 3E0A0000 	    _ENV_HEADER MAXCHAR,8,"MAX-CHAR"
 141      084D4158 
 141      2D434841 
 141      5200
 142 0a58 47F8046D 	    _PUSH 
 143 0a5c 4FF07F06 	    MOV TOS,#127 
 144 0a60 56E0     	    b flag_true 
 145              	
 146              	/************************************
 147              	    MAX-D	(-- 0xffffffff 0x7fffffff t )
 148              	    largest usable signed double number
 149              	constant:
 150              	    0x7FFF_FFFF_FFFF_FFFF 
 151              	************************************/
 152 0a62 4E0A0000 	    _ENV_HEADER MAXD,5,"MAX-D"
 152      054D4158 
 152      2D44
 153 0a6c 47F8046D 	    _PUSH 
 154 0a70 4FF6FF76 	    _MOV32 TOS,0xFFFFFFFF 
 154      CFF6FF76 
 155 0a78 47F8046D 	    _PUSH
 156 0a7c 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 156      C7F6FF76 
 157 0a84 44E0     	    B flag_true
 158              	
ARM GAS  forth.s 			page 34


 159              	/************************************
 160              	    MAX-N ( -- 0x7FFFFFFF t ) 
 161              	    largest usable signed integer
 162              	constant:
 163              	    0x7FFFFFFF
 164              	*************************************/
 165 0a86 660A0000 	    _ENV_HEADER MAXN,5,"MAX-N"
 165      054D4158 
 165      2D4E
 166 0a90 47F8046D 	    _PUSH 
 167 0a94 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 167      C7F6FF76 
 168 0a9c 38E0     	    B flag_true 
 169              	
 170              	/************************************
 171              	    MAX-U ( -- 0xFFFFFFFF t ) 
 172              	    largest usable unsigned integer
 173              	constant:
 174              	    0xFFFFFFFF 
 175              	************************************/
 176 0a9e 8A0A0000 	    _ENV_HEADER MAXU,5,"MAX-U"
 176      054D4158 
 176      2D55
 177 0aa8 47F8046D 	    _PUSH 
 178 0aac 4FF0FF36 	    MOV TOS,#-1 
 179 0ab0 2EE0     	    B flag_true 
 180              	
 181              	/**********************************
 182              	    MAX-UD ( -- 0xFFFFFFFF 0xFFFFFFFFF t )
 183              	    largest usable unsigned double number
 184              	constant:
 185              	    0xFFFF_FFFF_FFFF_FFFF 
 186              	*************************************/
 187 0ab2 A20A0000 	    _ENV_HEADER MAXUD,6,"MAX-UD"
 187      064D4158 
 187      2D554400 
 187      00BF
 188 0ac0 47F8046D 	    _PUSH 
 189 0ac4 4FF0FF36 	    MOV  TOS,#-1 
 190 0ac8 47F8046D 	    _PUSH 
 191 0acc 4FF0FF36 	    MOV TOS,#-1 
 192 0ad0 1EE0     	    B flag_true
 193              	
 194              	/*************************************
 195              	    RETURN-STACK-CELLS ( -- 32 t )
 196              	    maximum size of the return stack, 
 197              	    in cells
 198              	constant:
 199              	    32 cells 
 200              	************************************/
 201 0ad2 B60A0000 	    _ENV_HEADER RSTKCELLS,18,"RETURN-STACK-CELLS"
 201      12524554 
 201      55524E2D 
 201      53544143 
 201      4B2D4345 
 202 0aec 47F8046D 	    _PUSH 
 203 0af0 4FF02006 	    MOV TOS,#32 
ARM GAS  forth.s 			page 35


 204 0af4 0CE0     	    B flag_true
 205              	
 206              	/*************************************
 207              	    STACK-CELLS ( -- 32 t ) 
 208              	    maximum size of the data stack, 
 209              	    in cells
 210              	constant:
 211              	    32 cells 
 212              	*************************************/
 213 0af6 D60A0000 		.word	ENVLNK 
 214              		ENVLINK = . 
 215 0afa 0B       	_ENVLASTN:	.byte 11
 216 0afb 53544143 		.ascii "STACK-CELLS"
 216      4B2D4345 
 216      4C4C53
 217 0b06 00BF     		.p2align 2	
 218              	STKCELLS: 
 219 0b08 47F8046D 	    _PUSH 
 220 0b0c 4FF02006 	    MOV TOS,#32 
 221              	//    B flag_true 
 222              	
 223              	flag_true:
 224 0b10 47F8046D 	    _PUSH 
 225 0b14 4FF0FF36 	    MOV TOS,#-1 
 226 0b18 02F056BA 	    _NEXT 
 227              	
 228              	
 229              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
ARM GAS  forth.s 			page 36


  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0b1c 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0b24 1868     		ldr r0,[r3,#USART_SR]
  38 0b26 5968     		ldr r1,[r3,#USART_DR]
  39 0b28 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0b2c 0CD0     		beq 2f // no char received 
  41 0b2e B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0b32 3FF4B0AC 		beq user_reboot // received CTRL-C then reboot MCU 
  43 0b36 04F15400 		add r0,UP,#RX_QUEUE
  44 0b3a A26E     		ldr r2,[UP,#RX_TAIL]
  45 0b3c 8154     		strb r1,[r0,r2]
  46 0b3e 02F10102 		add r2,#1 
  47 0b42 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0b46 A266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0b48 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0b4a 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0b52 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0b54 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0b58 01EA0201 	  and r1,r1,r2
  62 0b5c 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0b60 41EA0201 	  orr r1,r1,r2 
  64 0b64 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0b66 4FF4EE61 	  mov r1,#0x77<<4 
  67 0b6a 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0b6c 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0b74 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0b78 8160     	  str r1,[r0,#USART_BRR]
  73 0b7a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0b7e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0b80 4FF02500 	  mov r0,#USART1_IRQ 
  77 0b84 4FF00701 	  mov r1,#7
  78 0b88 00B5FFF7 	  _CALL nvic_set_priority
  78      B5FD5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0b92 4FF02500 	  mov r0,#USART1_IRQ 
  81 0b96 00B5FFF7 	  _CALL nvic_enable_irq  
ARM GAS  forth.s 			page 37


  81      C7FD5DF8 
  81      04EB
  82 0ba0 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0ba2 64090000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0bb0 47F8046D 		_PUSH
  92 0bb4 A06E     		ldr T0,[UP,#RX_TAIL] 
  93 0bb6 616E     		ldr T1,[UP,#RX_HEAD]
  94 0bb8 90EA0106 		eors TOS,T0,T1 
  95 0bbc 0CD0     		beq 1f
  96 0bbe 04F15400 		add T0,UP,#RX_QUEUE 
  97 0bc2 0844     		add T0,T1 
  98 0bc4 0678     		ldrb TOS,[T0]
  99 0bc6 01F10101 		add T1,#1 
 100 0bca 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0bce 6166     		str T1,[UP,#RX_HEAD]
 102 0bd0 47F8046D 		_PUSH 
 103 0bd4 4FF0FF36 		mov TOS,#-1
 104 0bd8 02F0F6B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0bdc A60B0000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0bec 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0bf4 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0bf6 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0bfa FBD0     		beq 1b 
 115 0bfc 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0bfe 57F8046B 		_POP
 117 0c02 02F0E1B9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0c06 E00B0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0c10 47F8046D 	        _PUSH 
 126 0c14 4FF00006 	        mov TOS,#0
 127 0c18 02F0D6B9 	        _NEXT 
ARM GAS  forth.s 			page 38


 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0c1c 0A0C0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0c28 47F8046D 	        _PUSH 
 135 0c2c 4FF00106 	        mov TOS,#1
 136 0c30 02F0CAB9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0c34 200C0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0c40 3046     	        mov T0,TOS
 144 0c42 57F8046B 	        _POP 
 145 0c46 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0c48 4B48     	        ldr T0,=SER_QKEY 
 148 0c4a 6061     	        str T0,[UP,#STDIN]
 149 0c4c 4B48     	        ldr T0,=SER_EMIT
 150 0c4e A061     	        str T0,[UP,#STDOUT]
 151 0c50 02F0BAB9 	        _NEXT 
 152              	4: // local console 
 153 0c54 4A48     	        ldr T0,=PS2_QKEY
 154 0c56 6061     	        str T0,[UP,#STDIN]
 155 0c58 4A48     	        ldr T0,=TV_EMIT
 156 0c5a A061     	        str T0,[UP,#STDOUT]
 157 0c5c 02F0B4B9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0c60 380C0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0c70 504700BF 	      _NEST 
 166 0c74 EF310000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0c7c 41350000 	1:    _ADR ONEP  // c+1
 168 0c80 15330000 	      _ADR TOR   
 169 0c84 EF310000 	      _DOLIT 10 
 169      0A000000 
 170 0c8c 5D3E0000 	      _ADR SLMOD // r q  
 171 0c90 F5350000 	      _ADR QDUP  // r q q | r 0  
 172 0c94 2F320000 	      _QBRAN 2f  // r 0 
 172      A80C0000 
 173 0c9c B1320000 	      _ADR RFROM // r q c 
 174 0ca0 57320000 	      _BRAN 1b
ARM GAS  forth.s 			page 39


 174      7C0C0000 
 175 0ca8 EF310000 	2:    _DOLIT '0'  
 175      30000000 
 176 0cb0 E5340000 	      _ADR PLUS 
 177 0cb4 91300000 	      _ADR EMIT 
 178 0cb8 B1320000 	      _ADR RFROM 
 179 0cbc F5350000 	      _ADR QDUP 
 180 0cc0 2F320000 	      _QBRAN 3f
 180      D80C0000 
 181 0cc8 51350000 	      _ADR ONEM 
 182 0ccc 15330000 	      _ADR TOR 
 183 0cd0 57320000 	      _BRAN 2b 
 183      A80C0000 
 184              	3:    
 185 0cd8 CF2F0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0cdc 640C0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0ce8 504700BF 	      _NEST 
 193 0cec EF310000 	      _DOLIT 27 
 193      1B000000 
 194 0cf4 91300000 	      _ADR EMIT 
 195 0cf8 EF310000 	      _DOLIT '['
 195      5B000000 
 196 0d00 91300000 	      _ADR EMIT 
 197 0d04 CF2F0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0d08 E00C0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0d14 504700BF 	      _NEST
 205 0d18 E90C0000 	      _ADR ANSI_ESC
 206 0d1c B9330000 	      _ADR SWAP 
 207 0d20 710C0000 	      _ADR ANSI_PARAM 
 208 0d24 EF310000 	      _DOLIT ';'
 208      3B000000 
 209 0d2c 91300000 	      _ADR EMIT
 210 0d30 710C0000 	      _ADR ANSI_PARAM
 211 0d34 EF310000 	      _DOLIT 'H'
 211      48000000 
 212 0d3c 91300000 	      _ADR EMIT 
 213 0d40 CF2F0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0d44 0C0D0000 	    _HEADER SER_CLS,7,"SER-CLS"
ARM GAS  forth.s 			page 40


 219      07534552 
 219      2D434C53 
 220 0d50 504700BF 	    _NEST
 221 0d54 EF310000 	    _DOLIT 1 
 221      01000000 
 222 0d5c A9330000 	    _ADR DUPP 
 223 0d60 150D0000 	    _ADR SER_AT  
 224 0d64 E90C0000 	    _ADR ANSI_ESC
 225 0d68 EF310000 	    _DOLIT 'J'
 225      4A000000 
 226 0d70 91300000 	    _ADR EMIT 
 227 0d74 CF2F0000 	    _UNNEST 
 228 0d78 B00B0000 	
 228      EC0B0000 
 228      301A0000 
 228      F8120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
ARM GAS  forth.s 			page 41


  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	  .equ HRES, 320  // horizontal resolution
  20              	  .equ VRES, 200   // vertical resolution
  21              	  .equ BPP, 4     // bits per pixel
  22              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  23              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  24              	
  25              	  .equ CHAR_WIDTH, 6 
  26              	  .equ CHAR_HEIGHT, 8
  27              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
ARM GAS  forth.s 			page 42


  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0d88 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0d90 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0d92 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0d9a 41EA0201 	  orr r1,r2
  82 0d9e 0160     	  str r1,[r0,#GPIO_MODER]
  83 0da0 81EA0101 	  eor r1,r1 
  84 0da4 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0da6 4FF00101 	  mov r1,#1 // pin 1 
  88 0daa 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0dae 00B5FFF7 	  _CALL gpio_config 
  89      FEFC5DF8 
  89      04EB
  90 0db8 4FF00101 	  mov r1,#1 
  91 0dbc 4FF00202 	  mov r2,#2
  92 0dc0 00B5FFF7 	  _CALL gpio_speed 
  92      34FD5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0dca 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0dcc 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0dd0 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0dd2 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0dda 4FF00200 	  mov r0,#2 
 100 0dde 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0de0 41EA0001 	  orr r1,r0 
 102 0de4 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0de6 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0dee 41F2D470 	  mov r0,#HPER
 106 0df2 D062     	  str r0,[r2,#TIM_ARR]
 107 0df4 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0df8 D063     	  str r0,[r2,#TIM_CCR3]
 109 0dfa 4FF4E170 	  mov r0,#HPULSE 
 110 0dfe 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0e00 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0e04 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0e06 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0e0a 1062     	  str r0,[r2,#TIM_CCER]
 115 0e0c 4FF00100 	  mov r0,#1 
 116 0e10 D060     	  str r0,[r2,#TIM_DIER]
 117 0e12 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0e14 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0e18 4FF00201 	  mov r1,#2
ARM GAS  forth.s 			page 43


 121 0e1c 00B5FFF7 	  _CALL nvic_set_priority
 121      6BFC5DF8 
 121      04EB
 122 0e26 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0e2a 00B5FFF7 	  _CALL nvic_enable_irq
 123      7DFC5DF8 
 123      04EB
 124 0e34 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0e36 00BF     	  _GBL_FUNC tv_out_isr
 132 0e38 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0e40 81EA0101 	  eor T1,T1
 134 0e44 0161     	  str T1,[T0,#TIM_SR]
 135 0e46 E16E     	  ldr T1,[UP,#VID_CNTR]
 136 0e48 01F10101 	  add T1,#1 
 137 0e4c E166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0e4e 226F     	  ldr T2,[UP,#VID_STATE]
 140 0e50 002A     	  cmp T2,#ST_VSYNC 
 141 0e52 07D0     	  beq state_vsync
 142 0e54 012A     	  cmp T2,#ST_PREVID 
 143 0e56 2FD0     	  beq state_pre_video 
 144 0e58 022A     	  cmp T2,#ST_VIDEO 
 145 0e5a 36D0     	  beq state_video_out 
 146 0e5c 032A     	  cmp T2,#ST_POSTVID 
 147 0e5e 63D0     	  beq state_post_video
 148 0e60 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0e64 0129     	  cmp T1,#1
 152 0e66 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0e68 4FF0DB01 	  mov T1,#SERRATION
 155 0e6c 0164     	  str T1,[T0,#TIM_CCR4]
 156 0e6e 40F6E931 	  mov T1,#SYNC_LINE 
 157 0e72 C162     	  str T1,[T0,#TIM_ARR]
 158 0e74 6BE0     	  b tv_isr_exit 
 159 0e76 0729     	1: cmp T1,#7
 160 0e78 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0e7a 40F62821 	  mov T1,#VSYNC_PULSE
 163 0e7e 0164     	  str T1,[T0,#TIM_CCR4]
 164 0e80 65E0     	  b tv_isr_exit
 165 0e82 0D29     	2: cmp T1,#13
 166 0e84 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0e86 4FF0DB01 	   mov T1,#SERRATION 
 169 0e8a 0164     	   str T1,[T0,#TIM_CCR4]
 170 0e8c 5FE0     	   b tv_isr_exit   
 171 0e8e 1229     	3: cmp T1,#18
 172 0e90 03D1     	   bne 4f 
ARM GAS  forth.s 			page 44


 173              	// if even field full line  
 174 0e92 616F     	   ldr T1,[UP,#VID_FIELD]
 175 0e94 0029     	   cmp T1,#ODD_FIELD  
 176 0e96 5AD0     	   beq tv_isr_exit 
 177 0e98 01E0     	   b sync_end 
 178 0e9a 1329     	4: cmp T1,#19 
 179 0e9c 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0e9e 4FF00901 	   mov T1,#9
 182 0ea2 E166     	   str T1,[UP,#VID_CNTR]
 183 0ea4 4FF4E171 	   mov T1,#HPULSE 
 184 0ea8 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0eaa 41F2D471 	   mov T1,#HPER 
 186 0eae C162     	   str T1,[T0,#TIM_ARR] 
 187 0eb0 4FF00101 	   mov T1,#ST_PREVID 
 188 0eb4 2167     	   str T1,[UP,#VID_STATE]
 189 0eb6 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0eb8 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0eba 48D4     	   bmi tv_isr_exit 
 194 0ebc 4FF00201 	   mov T1,#ST_VIDEO 
 195 0ec0 2167     	   str T1,[UP,#VID_STATE]
 196 0ec2 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0ec6 C160     	   str T1,[T0,#TIM_DIER]
 198 0ec8 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0eca F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ecc 06D9     	   bls 1f 
 205 0ece 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ed2 2167     	   str T1,[UP,#VID_STATE]
 207 0ed4 4FF00101 	   mov T1,#1 
 208 0ed8 C160     	   str T1,[T0,#TIM_DIER]
 209 0eda 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0edc A06F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ede A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ee2 4FF0A003 	   mov T3,#BPR 
 214 0ee6 03FB01F1 	   mul T1,T3 
 215 0eea 0844     	   add T0,T1  
 216 0eec 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0ef4 10F8012B 	2: ldrb T2,[T0],#1 
 222 0ef8 4FEA0222 	   lsl T2,#8 
 223 0efc 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0efe AFF30080 	   nop.w 
 225 0f02 AFF30080 	   nop.w
 226 0f06 AFF30080 	   nop.w 
 227 0f0a AFF30080 	   nop.w 
 228 0f0e 4FEA0212 	   lsl T2,#4  
ARM GAS  forth.s 			page 45


 229 0f12 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0f14 AFF30080 	   nop.w
 231 0f18 AFF30080 	   nop.w  
 232 0f1c 013B     	   subs T3,#1
 233 0f1e E9D1     	   bne 2b  
 234 0f20 4FF47022 	   mov T2,#(15<<16) 
 235 0f24 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0f26 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0f28 4FF48372 	   mov T2,#262
 239 0f2c 9142     	   cmp T1,T2
 240 0f2e 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0f30 616F     	   ldr T1,[UP,VID_FIELD]
 243 0f32 11B9     	   cbnz T1, frame_end 
 244 0f34 40F6E931 	   mov T1,#SYNC_LINE
 245 0f38 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0f3a 4FF00001 	   mov T1,#ST_VSYNC 
 248 0f3e 2167     	   str T1,[UP,#VID_STATE]
 249 0f40 81EA0101 	   eor T1,T1 
 250 0f44 E166     	   str T1,[UP,#VID_CNTR]
 251 0f46 616F     	   ldr T1,[UP,#VID_FIELD]
 252 0f48 6FEA0101 	   mvn T1,T1  
 253 0f4c 6167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0f4e 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0f50 480D0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0f60 47F8046D 		_PUSH 
 266 0f64 04F1A006 		ADD TOS,UP,#BK_COLOR
 267 0f68 02F02EB8 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0f6c 540F0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0f7c 47F8046D 		_PUSH 
 273 0f80 04F1A406 		ADD TOS,UP,#PEN_COLOR
 274 0f84 02F020B8 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0f88 700F0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
ARM GAS  forth.s 			page 46


 278      554D4E00 
 279 0f94 47F8046D 	  _PUSH 
 280 0f98 04F19C06 	  ADD TOS,UP,#COL 
 281 0f9c 02F014B8 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0fa0 8C0F0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0fa8 47F8046D 	  _PUSH 
 287 0fac 04F19806 	  ADD TOS,UP,#ROW 
 288 0fb0 02F00AB8 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0fb4 A40F0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0fc0 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0fc4 00FB06F6 	  mul TOS,T0 
 295 0fc8 01F0FEBF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0fcc B80F0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0fd8 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0fdc 00FB06F6 	  mul TOS,T0 
 302 0fe0 01F0F2BF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0fe4 D00F0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0ff0 47F8046D 	  _PUSH 
 308 0ff4 DFF88C65 	  ldr TOS,=font_6x8 
 309 0ff8 01F0E6BF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0ffc E80F0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 1008 47F8046D 	  _PUSH 
 315 100c A66F     	  LDR TOS,[UP,#VID_BUFFER]
 316 100e 01F0DBBF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 1012 00100000 	    _HEADER PLOT,4,"PLOT"
ARM GAS  forth.s 			page 47


 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 101c 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 101e 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 1022 02FB00F0 	    mul T0,T2 
 330 1026 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 102a 1044     	    add T0,T2 
 332 102c A36F     	    ldr T3,[UP,#VID_BUFFER] 
 333 102e 0344     	    add T3,T0 // T3 -> byte address 
 334 1030 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 1032 4FF00F02 	    mov T2,#15 // AND mask 
 336 1036 11F0010F 	    tst T1,#1 
 337 103a 01D0     	    beq 1f 
 338 103c 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 1040 DFF84405 	1:  ldr T0,=plot_op 
 340 1044 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 1048 05EA0205 	    and WP,T2 // mask out nibble 
 343 104c 94F8A000 	    ldrb T0,[UP,#BK_COLOR]
 344 1050 11F0010F 	    tst T1,#1 
 345 1054 01D1     	    bne 1f 
 346 1056 4FEA0010 	    lsl T0,#4 // high nibble  
 347 105a 45EA0005 	1:  orr WP,T0  
 348 105e 1D70     	    strb WP,[T3]
 349 1060 1AE0     	    b 9f 
 350              	op_pen: 
 351 1062 05EA0205 	    and WP,T2 
 352 1066 94F8A400 	    ldrb T0,[UP,#PEN_COLOR]
 353 106a 11F0010F 	    tst T1,#1
 354 106e 01D1     	    bne 1f 
 355 1070 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 1074 45EA0005 	1:	orr WP,T0 
 357 1078 1D70     	    strb WP,[T3]
 358 107a 0DE0     	    b 9f 
 359              	op_invert:
 360 107c 85EA0205 	    eor WP,T2 
 361 1080 1D70     	    strb WP,[T3]
 362 1082 09E0     	    b 9f 
 363              	op_xor:
 364 1084 D4F8A400 	    ldr T0,[UP,#PEN_COLOR]
 365 1088 11F0010F 	    tst T1,#1 
 366 108c 01D1     	    bne 1f 
 367 108e 4FEA0010 	    lsl T0,#4 
 368 1092 85EA0005 	1:  eor WP,T0 
 369 1096 1D70     	    strb WP,[T3]
 370 1098 57F8046B 	9:  _POP 
 371 109c 01F094BF 	    _NEXT 
 372              	
 373 10a0 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 10a4 16100000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
ARM GAS  forth.s 			page 48


 379 10b0 E06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 10b2 0028     	    cmp T0,#0
 381 10b4 FCD1     	    bne 1b
 382 10b6 01F087BF 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 10ba A8100000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 10c4 80EA0000 	    eor T0,T0 
 388 10c8 94F8A010 	    ldrb T1,[UP,#BK_COLOR]
 389 10cc 40EA0100 	    orr T0,T1 
 390 10d0 4FEA0111 	    lsl T1,#4 
 391 10d4 40EA0100 	    orr T0,T1 
 392 10d8 4FEA0021 	    lsl T1,T0,#8 
 393 10dc 40EA0100 	    orr T0,T1 
 394 10e0 4FEA0041 	    lsl T1,T0,#16
 395 10e4 40EA0100 	    orr T0,T1 
 396 10e8 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 10ec A26F     	    ldr T2,[UP,#VID_BUFFER]
 398 10ee 5050     	1:	str T0,[T2,T1]
 399 10f0 0439     	    subs T1,#4
 400 10f2 FCD1     	    bne 1b
 401 10f4 1060     	    str T0,[T2]
 402 10f6 80EA0000 	    eor T0,T0 
 403 10fa C4F89800 	    str T0,[UP,#ROW]
 404 10fe C4F89C00 	    str T0,[UP,#COL]
 405 1102 01F061BF 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 1106 BE100000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 1114 504700BF 	  _NEST
 412 1118 EF310000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 1120 A9330000 	  _ADR DUPP  
 414 1124 15330000 	  _ADR TOR 
 415 1128 05350000 	  _ADR STAR
 416 112c 09100000 	  _ADR VIDBUFF
 417 1130 E5340000 	  _ADR PLUS
 418 1134 B1320000 	  _ADR RFROM   
 419 1138 EF310000 	  _DOLIT 0 
 419      00000000 
 420 1140 2D410000 	  _ADR FILL 
 421 1144 CF2F0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 1148 0A110000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
ARM GAS  forth.s 			page 49


 427      4F4C4C55 
 427      500000BF 
 428 1158 504700BF 	    _NEST 
 429 115c 09100000 	    _ADR VIDBUFF 
 430 1160 A9330000 	    _ADR DUPP 
 431 1164 EF310000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 116c A9330000 	    _ADR DUPP 
 433 1170 15330000 	    _ADR TOR 
 434 1174 E5340000 	    _ADR PLUS 
 435 1178 B9330000 	    _ADR SWAP 
 436 117c EF310000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 1184 B1320000 	    _ADR RFROM  
 438 1188 F5340000 	    _ADR SUBB 
 439 118c E5400000 	    _ADR WMOVE
 440 1190 EF310000 	    _DOLIT 24 
 440      18000000 
 441 1198 15110000 	    _ADR CLRLINE 
 442 119c CF2F0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 11a0 4C110000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 11b0 504700BF 	    _NEST 
 450 11b4 09100000 	    _ADR VIDBUFF
 451 11b8 A9330000 	    _ADR DUPP 
 452 11bc EF310000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 11c4 E5340000 	    _ADR PLUS 
 454 11c8 EF310000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 11d0 EF310000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 11d8 F5340000 	    _ADR SUBB  
 457 11dc E5400000 	    _ADR WMOVE
 458 11e0 EF310000 	    _DOLIT 0 
 458      00000000 
 459 11e8 15110000 	    _ADR CLRLINE
 460 11ec CF2F0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 11f0 A4110000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 11fc E34D     	    ldr WP,=SCROLLUP 
 469 11fe 45F00105 	    orr WP,#1
 470 1202 80EA0000 	    eor T0,T0 
ARM GAS  forth.s 			page 50


 471 1206 C4F89C00 	    str T0,[UP,#COL]
 472 120a D4F89800 	    ldr T0,[UP,#ROW]
 473 120e 1828     	    cmp T0,#24 
 474 1210 A2D0     	    beq SCROLLUP  
 475 1212 00F10100 	    add T0,#1 
 476 1216 C4F89800 	    str T0,[UP,#ROW]
 477 121a 01F0D5BE 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 121e F4110000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 1228 D4F89C00 	  ldr T0,[UP,#COL]
 484 122c 00F10100 	  add T0,#1
 485 1230 3528     	  cmp T0,#53
 486 1232 E3D5     	  bpl TV_CRLF  
 487 1234 C4F89C00 	  str T0,[UP,#COL]
 488 1238 01F0C6BE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 123c 22120000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 1248 D4F89C00 	    ldr T0,[UP,#COL]
 497 124c 28B1     	    cbz T0,1f 
 498 124e A0F10100 	    sub T0,#1 
 499 1252 C4F89C00 	    str T0,[UP,#COL]
 500 1256 01F0B7BE 	    _NEXT 
 501 125a D4F89800 	1:  ldr T0,[UP,#ROW]
 502 125e 38B1     	    cbz T0,9f
 503 1260 A0F10100 	    sub T0,#1
 504 1264 C4F89800 	    str T0,[UP,#ROW]
 505 1268 4FF03400 	    mov T0,#52 
 506 126c C4F89C00 	    str T0,[UP,#COL]
 507 1270 01F0AABE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 1274 4FF08000 	    mov T0,#128 
 513 1278 06EA0006 	    and TOS,T0 
 514 127c 4FEAD616 	    lsr TOS,#7
 515 1280 01F0A2BE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 1284 3868     	  ldr T0,[DSP]
 520 1286 00F10100 	  add T0,#1 
 521 128a 3860     	  str T0,[DSP]
 522 128c 01F09CBE 	  _NEXT 
 523              	
ARM GAS  forth.s 			page 51


 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 1290 4FEA4606 	    lsl TOS,#1
 527 1294 01F098BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 1298 504700BF 	    _NEST 
 536 129c EF310000 	    _DOLIT 5 
 536      05000000 
 537 12a4 15330000 	    _ADR TOR 
 538 12a8 15330000 	1:  _ADR TOR 
 539 12ac DD360000 	    _ADR DDUP 
 540 12b0 E5320000 	    _ADR RAT
 541 12b4 75120000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 12b8 1D100000 	    _ADR PLOT 
 543 12bc 85120000 	    _ADR INCR_X 
 544 12c0 B1320000 	    _ADR RFROM 
 545 12c4 91120000 	    _ADR NEXT_PIXEL
 546 12c8 11320000 	    _DONXT 1b
 546      A8120000 
 547 12d0 C9360000 	    _ADR TDROP 
 548 12d4 CF2F0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 12d8 A6F12006 	   sub TOS,#32
 553 12dc 4FF00800 	   mov T0,#8 
 554 12e0 00FB06F6 	   mul TOS,T0 
 555 12e4 A748     	   ldr T0,=font_6x8
 556 12e6 0644     	   add TOS,T0 
 557 12e8 01F06EBE 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 12ec 40120000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 12f8 504700BF 	    _NEST
 565 12fc A9330000 	    _ADR DUPP 
 566 1300 EF310000 	    _DOLIT 32 
 566      20000000 
 567 1308 6D380000 	    _ADR ULESS
 568 130c 2F320000 	    _QBRAN 1f
 568      1C130000 
 569 1314 57320000 	    _BRAN CTRL_KEY
 569      80130000 
 570 131c D9120000 	1:  _ADR CHAR_FONT 
 571 1320 950F0000 	    _ADR CURSOR_COL 
 572 1324 85320000 	    _ADR AT
 573 1328 D90F0000 	    _ADR COLX  // x coord 
ARM GAS  forth.s 			page 52


 574 132c A90F0000 	    _ADR CURSOR_ROW 
 575 1330 85320000 	    _ADR AT    
 576 1334 C10F0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1338 8D360000 	    _ADR ROT  // TEST 
 578 133c EF310000 	    _DOLIT 7   
 578      07000000 
 579 1344 15330000 	    _ADR TOR  
 580 1348 15330000 	1:  _ADR TOR  // { x y }
 581 134c DD360000 	    _ADR DDUP  // { x y x y }
 582 1350 E5320000 	    _ADR RAT 
 583 1354 A5320000 	    _ADR CAT   // { x y x y r }
 584 1358 99120000 	    _ADR CHAR_ROW 
 585 135c 41350000 	    _ADR ONEP // {x y' }
 586 1360 B1320000 	    _ADR RFROM 
 587 1364 41350000 	    _ADR ONEP // {x y' c-adr' }
 588 1368 11320000 	    _DONXT 1b
 588      48130000 
 589 1370 C9360000 	    _ADR TDROP  
 590 1374 29120000 	    _ADR RIGHT
 591 1378 69140000 	9:  _ADR SHOW_CURSOR 
 592 137c CF2F0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 1380 F1140000 	    _ADR HIDE_CURSOR
 595 1384 A9330000 	    _ADR DUPP 
 596 1388 EF310000 	    _DOLIT BKSPP  
 596      08000000 
 597 1390 2D380000 	    _ADR EQUAL 
 598 1394 2F320000 	    _QBRAN 1f 
 598      AC130000 
 599 139c 49140000 	    _ADR BACK_SPACE 
 600 13a0 89330000 	8:  _ADR DROP 
 601 13a4 57320000 	    _BRAN 9b 
 601      78130000 
 602 13ac A9330000 	1:  _ADR DUPP 
 603 13b0 EF310000 	    _DOLIT CRR 
 603      0D000000 
 604 13b8 2D380000 	    _ADR EQUAL 
 605 13bc 2F320000 	    _QBRAN 1f 
 605      D0130000 
 606 13c4 F1130000 	    _ADR CAR_RET
 607 13c8 57320000 	    _BRAN 8b
 607      A0130000 
 608 13d0 EF310000 	1:  _DOLIT LF 
 608      0A000000 
 609 13d8 2D380000 	    _ADR EQUAL 
 610 13dc 2F320000 	    _QBRAN 9b 
 610      78130000 
 611 13e4 09140000 	    _ADR LN_FEED
 612 13e8 57320000 	    _BRAN 9b  
 612      78130000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 13f0 504700BF 	   _NEST
ARM GAS  forth.s 			page 53


 620 13f4 EF310000 	   _DOLIT 0 
 620      00000000 
 621 13fc 950F0000 	   _ADR CURSOR_COL 
 622 1400 71320000 	   _ADR STORE 
 623 1404 CF2F0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1408 504700BF 	    _NEST 
 631 140c A90F0000 	    _ADR CURSOR_ROW 
 632 1410 85320000 	    _ADR AT 
 633 1414 A9330000 	    _ADR DUPP 
 634 1418 EF310000 	    _DOLIT 24 
 634      18000000 
 635 1420 8D340000 	    _ADR XORR 
 636 1424 2F320000 	    _QBRAN 1f
 636      3C140000 
 637 142c 41350000 	    _ADR ONEP 
 638 1430 A90F0000 	    _ADR CURSOR_ROW 
 639 1434 71320000 	    _ADR STORE 
 640 1438 CF2F0000 	    _UNNEST    
 641 143c 89330000 	1:  _ADR DROP 
 642 1440 59110000 	    _ADR SCROLLUP 
 643 1444 CF2F0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1448 504700BF 	  _NEST 
 652 144c 49120000 	  _ADR LEFT 
 653 1450 69140000 	  _ADR SHOW_CURSOR
 654 1454 CF2F0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1458 F0120000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1468 504700BF 	    _NEST 
 663 146c EF310000 	    _DOLIT 0xFF
 663      FF000000 
 664 1474 A90F0000 	0:  _ADR CURSOR_ROW
 665 1478 85320000 	    _ADR AT  
 666 147c 41350000 	    _ADR ONEP 
 667 1480 C10F0000 	    _ADR ROWY 
 668 1484 EF310000 	    _DOLIT BPR
 668      A0000000 
ARM GAS  forth.s 			page 54


 669 148c 05350000 	    _ADR STAR
 670 1490 EF310000 	    _DOLIT BPR  
 670      A0000000 
 671 1498 F5340000 	    _ADR SUBB 
 672 149c 950F0000 	    _ADR CURSOR_COL
 673 14a0 85320000 	    _ADR AT 
 674 14a4 D90F0000 	    _ADR COLX 
 675 14a8 E5350000 	    _ADR TWOSL  
 676 14ac E5340000 	    _ADR PLUS
 677 14b0 09100000 	    _ADR VIDBUFF
 678 14b4 E5340000 	    _ADR PLUS
 679 14b8 EF310000 	    _DOLIT 2
 679      02000000 
 680 14c0 15330000 	    _ADR TOR  
 681 14c4 DD360000 	1:  _ADR DDUP 
 682 14c8 91320000 	    _ADR CSTOR 
 683 14cc 41350000 	    _ADR ONEP 
 684 14d0 11320000 	    _DONXT 1b
 684      C4140000 
 685 14d8 B5360000 	2:  _ADR DDROP // drop 3 elements 
 686 14dc CF2F0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 14e0 5C140000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 14f0 504700BF 	    _NEST 
 694 14f4 610F0000 	    _ADR BACKCOLOR 
 695 14f8 85320000 	    _ADR AT 
 696 14fc A9330000 	    _ADR DUPP  
 697 1500 EF310000 	    _DOLIT 4 
 697      04000000 
 698 1508 D5340000 	    _ADR LSHIFT 
 699 150c 79340000 	    _ADR ORR 
 700 1510 57320000 	    _BRAN 0b
 700      74140000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1518 E4140000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1524 352E     	    cmp TOS,#53
 706 1526 01D4     	    bmi 1f 
 707 1528 4FF03406 	    mov TOS,#52
 708 152c C4F89C60 	1:  str TOS,[UP,#COL]
 709 1530 57F8046B 	    _POP
 710 1534 192E     	    cmp TOS,#25
 711 1536 01D4     	    bmi 1f 
 712 1538 4FF01806 	    mov TOS,#24 
 713 153c C4F89860 	1:  str TOS,[UP,#ROW]
 714 1540 57F8046B 	    _POP 
 715 1544 01F040BD 	    _NEXT 
ARM GAS  forth.s 			page 55


 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1548 1C150000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1554 504700BF 	    _NEST 
 721 1558 0D400000 	    _ADR PAD 
 722 155c A9330000 	    _ADR DUPP 
 723 1560 41350000 	    _ADR ONEP 
 724 1564 EF310000 	    _DOLIT 53
 724      35000000 
 725 156c E94F0000 	    _ADR ACCEP
 726 1570 B9330000 	    _ADR SWAP 
 727 1574 89330000 	    _ADR DROP 
 728 1578 E9330000 	    _ADR OVER 
 729 157c 91320000 	    _ADR CSTOR  
 730 1580 CF2F0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
ARM GAS  forth.s 			page 56


 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
ARM GAS  forth.s 			page 57


 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
ARM GAS  forth.s 			page 58


 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
ARM GAS  forth.s 			page 59


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
ARM GAS  forth.s 			page 60


  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
ARM GAS  forth.s 			page 61


  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
ARM GAS  forth.s 			page 62


 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 1590 1C61     	   .byte 0x1c,'a' 
   9 1592 3262     	   .byte 0x32,'b'
  10 1594 2163     	   .byte 0x21,'c'
  11 1596 2364     	   .byte 0x23,'d'
  12 1598 2465     	   .byte 0x24,'e'
  13 159a 2B66     	   .byte 0x2b,'f'
  14 159c 3467     	   .byte 0x34,'g'
  15 159e 3368     	   .byte 0x33,'h'
  16 15a0 4369     	   .byte 0x43,'i'
  17 15a2 3B6A     	   .byte 0x3B,'j'
  18 15a4 426B     	   .byte 0x42,'k'
  19 15a6 4B6C     	   .byte 0x4b,'l'
  20 15a8 3A6D     	   .byte 0x3a,'m'
  21 15aa 316E     	   .byte 0x31,'n'
  22 15ac 446F     	   .byte 0x44,'o'
  23 15ae 4D70     	   .byte 0x4d,'p'
  24 15b0 1571     	   .byte 0x15,'q'
  25 15b2 2D72     	   .byte 0x2d,'r'
  26 15b4 1B73     	   .byte 0x1b,'s'
  27 15b6 2C74     	   .byte 0x2c,'t'
  28 15b8 3C75     	   .byte 0x3c,'u'
  29 15ba 2A76     	   .byte 0x2a,'v'
  30 15bc 1D77     	   .byte 0x1d,'w'
  31 15be 2278     	   .byte 0x22,'x'
  32 15c0 3579     	   .byte 0x35,'y'
  33 15c2 1A7A     	   .byte 0x1a,'z'
  34 15c4 4530     	   .byte 0x45,'0'
  35 15c6 1631     	   .byte 0x16,'1'
  36 15c8 1E32     	   .byte 0x1e,'2'
  37 15ca 2633     	   .byte 0x26,'3'
  38 15cc 2534     	   .byte 0x25,'4'
  39 15ce 2E35     	   .byte 0x2e,'5'
ARM GAS  forth.s 			page 63


  40 15d0 3636     	   .byte 0x36,'6'
  41 15d2 3D37     	   .byte 0x3d,'7'
  42 15d4 3E38     	   .byte 0x3e,'8'
  43 15d6 4639     	   .byte 0x46,'9'
  44 15d8 0E60     	   .byte 0x0e,'`'
  45 15da 4E2D     	   .byte 0x4e,'-'
  46 15dc 553D     	   .byte 0x55,'='
  47 15de 5D5C     	   .byte 0x5d,'\\'
  48 15e0 545B     	   .byte 0x54,'['
  49 15e2 5B5D     	   .byte 0x5b,']'
  50 15e4 4C3B     	   .byte 0x4c,';'
  51 15e6 5227     	   .byte 0x52,'\''
  52 15e8 412C     	   .byte 0x41,','
  53 15ea 492E     	   .byte 0x49,'.'
  54 15ec 7C2A     	   .byte 0x7c,'*'
  55 15ee 792B     	   .byte 0x79,'+'
  56 15f0 2920     	   .byte 0x29,' '
  57 15f2 5A0D     	   .byte SC_ENTER,CRR 
  58 15f4 6608     	   .byte SC_BKSP,BKSPP 
  59 15f6 0D09     	   .byte SC_TAB,9
  60 15f8 761B     	   .byte SC_ESC,27
  61 15fa 119E     	   .byte SC_LALT,VK_LALT 
  62 15fc 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 15fe 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 1600 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 1602 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1604 5800     	   .byte SC_CAPS,0
  67 1606 0580     	   .byte SC_F1,VK_F1
  68 1608 0681     	   .byte SC_F2,VK_F2
  69 160a 0482     	   .byte SC_F3,VK_F3
  70 160c 0C83     	   .byte SC_F4,VK_F4
  71 160e 0384     	   .byte SC_F5,VK_F5
  72 1610 0B85     	   .byte SC_F6,VK_F6
  73 1612 8386     	   .byte SC_F7,VK_F7
  74 1614 0A87     	   .byte SC_F8,VK_F8
  75 1616 0188     	   .byte SC_F9,VK_F9
  76 1618 098A     	   .byte SC_F10,VK_F10
  77 161a 788B     	   .byte SC_F11,VK_F11
  78 161c 078C     	   .byte SC_F12,VK_F12
  79 161e 7030     	   .byte SC_KP0,'0'
  80 1620 6931     	   .byte SC_KP1,'1'
  81 1622 7232     	   .byte SC_KP2,'2'
  82 1624 7A33     	   .byte SC_KP3,'3'
  83 1626 6B34     	   .byte SC_KP4,'4'
  84 1628 7335     	   .byte SC_KP5,'5'
  85 162a 7436     	   .byte SC_KP6,'6'
  86 162c 6C37     	   .byte SC_KP7,'7'
  87 162e 7538     	   .byte SC_KP8,'8'
  88 1630 7D39     	   .byte SC_KP9,'9'
  89 1632 7C2A     	   .byte SC_KPMUL,'*'
  90 1634 4A2F     	   .byte SC_KPDIV,'/'
  91 1636 792B     	   .byte SC_KPPLUS,'+'
  92 1638 7B2D     	   .byte SC_KPMINUS,'-'
  93 163a 712E     	   .byte SC_KPDOT,'.'
  94 163c 5A0D     	   .byte SC_KPENTER,'\r'
  95 163e FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 1640 AAAA     	   .byte BAT_OK,BAT_OK  
ARM GAS  forth.s 			page 64


  97 1642 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1644 6141     	   .byte 'a','A'
 102 1646 6242     	   .byte 'b','B'
 103 1648 6343     	   .byte 'c','C'
 104 164a 6444     	   .byte 'd','D'
 105 164c 6545     	   .byte 'e','E'
 106 164e 6646     	   .byte 'f','F'
 107 1650 6747     	   .byte 'g','G'
 108 1652 6848     	   .byte 'h','H'
 109 1654 6949     	   .byte 'i','I'
 110 1656 6A4A     	   .byte 'j','J'
 111 1658 6B4B     	   .byte 'k','K'
 112 165a 6C4C     	   .byte 'l','L'
 113 165c 6D4D     	   .byte 'm','M'
 114 165e 6E4E     	   .byte 'n','N'
 115 1660 6F4F     	   .byte 'o','O'
 116 1662 7050     	   .byte 'p','P'
 117 1664 7151     	   .byte 'q','Q'
 118 1666 7252     	   .byte 'r','R'
 119 1668 7353     	   .byte 's','S'
 120 166a 7454     	   .byte 't','T'
 121 166c 7555     	   .byte 'u','U'
 122 166e 7656     	   .byte 'v','V'
 123 1670 7757     	   .byte 'w','W'
 124 1672 7858     	   .byte 'x','X'
 125 1674 7959     	   .byte 'y','Y'
 126 1676 7A5A     	   .byte 'z','Z'
 127 1678 3121     	   .byte '1','!'
 128 167a 3240     	   .byte '2','@'
 129 167c 3323     	   .byte '3','#'
 130 167e 3424     	   .byte '4','$'
 131 1680 3525     	   .byte '5','%'
 132 1682 365E     	   .byte '6','^'
 133 1684 3726     	   .byte '7','&'
 134 1686 382A     	   .byte '8','*'
 135 1688 3928     	   .byte '9','('
 136 168a 3029     	   .byte '0',')'
 137 168c 2D5F     	   .byte '-','_'
 138 168e 3D2B     	   .byte '=','+'
 139 1690 607E     	   .byte '`','~'
 140 1692 2722     	   .byte '\'','"'
 141 1694 2C3C     	   .byte ',','<'
 142 1696 2E3E     	   .byte '.','>'
 143 1698 2F3F     	   .byte '/','?'
 144 169a 5C7C     	   .byte '\\','|'
 145 169c 3B3A     	   .byte ';',':'
 146 169e 5B7B     	   .byte '[','{'
 147 16a0 5D7D     	   .byte ']','}'
 148 16a2 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 16a4 315C     	   .byte '1','\\'
 153 16a6 3240     	   .byte '2','@'
ARM GAS  forth.s 			page 65


 154 16a8 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 16aa 363F     	   .byte '6','?'
 158 16ac 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 16ae 397B     	   .byte '9','{'
 161 16b0 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 16b2 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 16b4 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 16b6 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 16b8 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 16ba 11A3     	    .byte SC_RALT,VK_RALT
 172 16bc 2F97     	    .byte SC_APPS,VK_APPS
 173 16be 758D     	    .byte SC_UP,VK_UP
 174 16c0 728E     	    .byte SC_DOWN,VK_DOWN
 175 16c2 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 16c4 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 16c6 7095     	    .byte SC_INSERT,VK_INSERT
 178 16c8 6C91     	    .byte SC_HOME,VK_HOME
 179 16ca 7D93     	    .byte SC_PGUP,VK_PGUP
 180 16cc 7A94     	    .byte SC_PGDN,VK_PGDN
 181 16ce 717F     	    .byte SC_DEL,VK_DELETE
 182 16d0 6992     	    .byte SC_END,VK_END
 183 16d2 4A2F     	    .byte SC_KPDIV,'/'
 184 16d4 5A0D     	    .byte SC_KPENTER,'\r'
 185 16d6 1200     	    .byte 0x12,0
 186 16d8 7C00     	    .byte 0x7c,0
 187 16da 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 16dc 6303     	   .byte 'c', VK_CTRL_C 
 193 16de 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 16e0 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 16e2 27A2     	   .byte SC_RGUI,VK_RGUI
 196 16e4 11A3     	   .byte SC_RALT,VK_RALT
 197 16e6 2F97     	   .byte SC_APPS,VK_APPS
 198 16e8 7095     	   .byte SC_INSERT,VK_INSERT
 199 16ea 6C91     	   .byte SC_HOME,VK_HOME
 200 16ec 7D93     	   .byte SC_PGUP,VK_PGUP
 201 16ee 717F     	   .byte SC_DEL,VK_DELETE
 202 16f0 6992     	   .byte SC_END,VK_END
 203 16f2 7A94     	   .byte SC_PGDN,VK_PGDN
 204 16f4 758D     	   .byte SC_UP,VK_UP
 205 16f6 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 16f8 728E     	   .byte SC_DOWN,VK_DOWN
 207 16fa 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 16fc 4A2F     	   .byte SC_KPDIV,'/'
 209 16fe 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1700 129C     	   .byte SC_LSHIFT,VK_LSHIFT
ARM GAS  forth.s 			page 66


 211 1702 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1704 119E     	   .byte SC_LALT,VK_LALT
 213 1706 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1708 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 170a 761B     	   .byte SC_ESC,VK_ESC
 216 170c 779A     	   .byte SC_NUM,VK_NLOCK
 217 170e 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1710 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 1712 00BF     	    _GBL_FUNC kbd_isr 
  79 1714 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 171c 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 1720 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 1722 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
ARM GAS  forth.s 			page 67


  83 172a D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
  84 172e 10F0020F 	    tst r0,#KBD_TX 
  85 1732 40F08480 	    bne send_bit  
  86 1736 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1738 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 173c 01F10102 	    add r2,r1,#1
  89 1740 84F87C20 	    strb r2,[UP,#KBD_BITCNTR]
  90 1744 0029     	    cmp r1,#0
  91 1746 15D0     	    beq start_bit 
  92 1748 0929     	    cmp r1,#9 
  93 174a 25D0     	    beq parity_bit 
  94 174c 0A29     	    cmp r1,#10 
  95 174e 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 1750 94F87D20 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1754 4FEA5202 	    lsr r2,#1 
  99 1758 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 175c 07D0     	    beq 1f 
 101 175e 42F08002 	    orr r2,#(1<<7)
 102 1762 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 103 1766 00F10100 	    add r0,#1 
 104 176a 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 105 176e 84F87D20 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 1772 63E0     	    b 9f         
 107              	start_bit:
 108 1774 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1778 60D1     	    bne 9f // not a start bit 
 110 177a 80EA0000 	    eor r0,r0 
 111 177e 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 112 1782 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 113 1786 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 178a 6FF00101 	    mvn r1,#1
 115 178e 00EA0100 	    and r0,r1 // clear error flag 
 116 1792 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 117 1796 51E0     	    b 9f 
 118              	parity_bit:
 119 1798 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 120 179c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 17a0 4CD0     	    beq 9f  
 122 17a2 01F10101 	    add r1,#1 
 123 17a6 84F87F10 	    strb r1,[UP,#KBD_PARITY]  
 124 17aa 47E0     	    b 9f      
 125              	stop_bit:
 126 17ac 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 17b0 40D0     	    beq 8f // error stop bit expected 
 128 17b2 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 129 17b6 11F0010F 	    tst r1,#1 
 130 17ba 3BD0     	    beq 8f // error parity
 131 17bc 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 17c0 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 17c4 E028     	    cmp r0,#XT_KEY
 134 17c6 04D1     	    bne 1f
 135 17c8 41F04001 	    orr r1,#KBD_F_XT
 136 17cc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 137 17d0 30E0     	    b 8f  
 138 17d2 11F0800F 	1:  tst r1,#KBD_F_REL
 139 17d6 14D0     	    beq store_code
ARM GAS  forth.s 			page 68


 140 17d8 5828     	    cmp r0,#SC_CAPS
 141 17da 04D1     	    bne 1f
 142 17dc 81F00401 	    eor r1,#KBD_F_CAPS
 143 17e0 41F00101 	    orr r1,#KBD_F_CTGL 
 144 17e4 06E0     	    b 2f 
 145 17e6 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 17f0 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 17f4 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 17f8 01EA0201 	    and r1,r2
 149 17fc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 150 1800 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 1802 F028     	    cmp r0,#KEY_REL
 154 1804 04D1     	    bne 1f
 155              	// set release flags 
 156 1806 41F08001 	    orr r1,#KBD_F_REL 
 157 180a 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 158 180e 11E0     	    b 8f     
 159 1810 0146     	1:  mov r1,r0 
 160 1812 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 181c 0AD1     	    bne 8f // was async key 
 162 181e D4F89400 	    ldr r0,[UP,#KBD_QTAIL]
 163 1822 04F18002 	    add r2,UP,#KBD_QUEUE
 164 1826 1154     	    strb r1,[r2,r0]
 165 1828 00F10100 	    add r0,#1
 166 182c 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 1830 84F89400 	    strb r0,[UP,#KBD_QTAIL]
 168 1834 80EA0000 	8:  eor r0,r0 
 169 1838 A4F87C00 	    strh r0,[UP,#KBD_BITCNTR]
 170 183c 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 183e 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 1842 01F10100 	    add r0,r1,#1
 182 1846 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 183 184a 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 184e 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 1852 0829     	1:  cmp r1,#8 
 187 1854 15D0     	    beq send_parity 
 188 1856 0929     	    cmp r1,#9 
 189 1858 1CD0     	    beq send_stop
 190 185a 0A29     	    cmp r1,#10
 191 185c 1FD0     	    beq rx_ack_bit  
 192              	// data bits
ARM GAS  forth.s 			page 69


 193 185e 10F0010F 	    tst r0,#1
 194 1862 4FEA5000 	    lsr r0,#1
 195 1866 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 196 186a 02D1     	    bne 1f 
 197 186c 4FEA0242 	    lsl r2,#16
 198 1870 05E0     	    b 2f  
 199 1872 94F87F00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1876 00F10100 	    add r0,#1 
 201 187a 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 202 187e 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 1880 1CE0     	    b 9f 
 204              	send_parity:
 205 1882 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 206 1886 10F0010F 	    tst r0,#1
 207 188a 01D0     	    beq 1f 
 208 188c 4FEA0242 	    lsl r2,#16
 209 1890 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1892 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1894 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1896 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 189a 1960     	    str r1,[r3,#GPIO_MODER]
 217 189c 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 189e 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 18a2 6FF00201 	    mvn r1,#KBD_TX 
 221 18a6 00EA0100 	    and r0,r1 
 222 18aa 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 18ac 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 18b0 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 225 18b4 80EA0000 	    eor r0,r0 
 226 18b8 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 227 18bc 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 18be 02B4     	    push {r1}
 238 18c0 DFF86414 	    ldr r1,=async_keys
 239 18c4 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 18ce 02BC     	    pop {r1}
 241 18d0 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
ARM GAS  forth.s 			page 70


 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 18d2 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 18dc FF28     	    cmp r0,#255
 256 18de 01D1     	    bne set_async_key 
 257 18e0 0020     	    movs r0,#0 
 258 18e2 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 18e4 06B4     	    push {r1,r2}
 262 18e6 94F87E20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 18ea DFF84014 	    ldr r1,=async_jump 
 264 18ee D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 18f2 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 18f6 04E0     	    b set_reset
 268              	ctrl_key:
 269 18f8 4FF01000 	    mov r0,#KBD_F_CTRL
 270 18fc 01E0     	    b set_reset 
 271              	alt_key:
 272 18fe 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 1902 12F0800F 	    tst r2,#KBD_F_REL 
 275 1906 04D0     	    beq 1f 
 276 1908 6FEA0000 	    mvn r0,r0
 277 190c 02EA0002 	    and r2,r0
 278 1910 01E0     	    b 2f
 279 1912 42EA0002 	1:  orr r2,r0 
 280 1916 84F87E20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 191a 5FF0FF30 	    movs r0,#-1
 282 191e 06BC     	9:  pop {r1,r2}
 283 1920 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 1922 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1924 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1926 1401     	    .byte SC_LCTRL,1  // left control 
 290 1928 1401     	    .byte SC_RCTRL,1  // right control 
 291 192a 1102     	    .byte SC_LALT,2  // left alt 
 292 192c 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 192e 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 1930 00       	    .byte 0 // shift  key 
 297 1931 03       	    .byte (ctrl_key-shift_key)/2
 298 1932 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
ARM GAS  forth.s 			page 71


 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 1933 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1934 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 193c 1846     	    mov r0,r3 
 311 193e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 1942 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1946 00B5FEF7 	    _CALL gpio_config
 313      32FF5DF8 
 313      04EB
 314 1950 1846     	    mov r0,r3 
 315 1952 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1956 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 195a 00B5FEF7 	    _CALL gpio_config
 317      28FF5DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1964 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 196c 4FF40050 	    mov r0,#(2<<12)
 321 1970 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1972 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 197a 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 197e 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1980 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1982 80EA0000 	   eor r0,r0 
 328 1986 C4F89000 	   str r0,[UP,#KBD_QHEAD]
 329 198a C4F89400 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 198e 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1992 4FF00101 	   mov r1,#1 
 333 1996 00B5FEF7 	   _CALL nvic_set_priority
 333      AEFE5DF8 
 333      04EB
 334 19a0 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 19a4 00B5FEF7 	   _CALL nvic_enable_irq 
 335      C0FE5DF8 
 335      04EB
 336 19ae 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 19b0 4C150000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 19c0 47F8046D 	    _PUSH 
 342 19c4 94F87E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 19c8 06F0FC06 	    and TOS,#0xFC  
 344 19cc 01F0FCBA 	    _NEXT 
 345              	
ARM GAS  forth.s 			page 72


 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 19d0 0EB4     	    push {T1,T2,T3}
 352 19d2 80EA0000 	    eor T0,T0  
 353 19d6 04F18003 	    add T3,UP,#KBD_QUEUE
 354 19da D4F89010 	    ldr T1,[UP,#KBD_QHEAD]
 355 19de D4F89420 	    ldr T2,[UP,#KBD_QTAIL]
 356 19e2 9142     	    cmp T1,T2 
 357 19e4 06D0     	    beq 2f  
 358 19e6 585C     	    ldrb T0,[T3,T1]
 359 19e8 01F10101 	    add T1,#1 
 360 19ec 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 19f0 C4F89010 	    str T1,[UP,#KBD_QHEAD]
 362 19f4 0EBC     	2:  pop {T1,T2,T3}
 363 19f6 7047     	    _RET 
 364              	
 365              	wait_code:
 366 19f8 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 1a02 0000     	    movs T0,T0
 368 1a04 F8D0     	    beq wait_code  
 369 1a06 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1a08 04B4     	    push {T2}
 380 1a0a 11F8012B 	1:  ldrb T2,[T1],#1
 381 1a0e 22B1     	    cbz T2,2f 
 382 1a10 8242     	    cmp T2,T0
 383 1a12 02D0     	    beq 2f 
 384 1a14 01F10101 	    add T1,#1 
 385 1a18 F7E7     	    b 1b 
 386 1a1a 0878     	2:  ldrb T0,[T1]
 387 1a1c 0000     	    movs T0,T0 // set/reset zero flag 
 388 1a1e 04BC     	9:  pop {T2}
 389 1a20 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 1a22 B4190000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 1a30 47F8046D 	    _PUSH 
ARM GAS  forth.s 			page 73


 398 1a34 86EA0606 	    eor TOS,TOS 
 399 1a38 BD49     	    ldr T1,=sc_ascii // translation table
 400 1a3a 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 1a3e 4FF04002 	    mov T2,#KBD_F_XT 
 402 1a42 1042     	    tst T0,T2
 403 1a44 00D0     	    beq 1f
 404 1a46 BB49     	    ldr T1,=extended // extended code translation
 405 1a48 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 1a52 98B1     	    cbz T0,inkey_exit
 407 1a54 E128     	    cmp T0,#XT2_KEY // pause 
 408 1a56 13D0     	    beq pause_key
 409 1a58 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 1a62 0646     	    mov TOS,T0
 411 1a64 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1a6e 032E     	    cmp TOS,#VK_CTRL_C 
 413 1a70 3EF411AD 	    beq user_reboot 
 414 1a74 47F8046D 	    _PUSH 
 415 1a78 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1a7c 01F0A4BA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1a80 4FF00701 	    mov T1,#7 
 420 1a84 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1a8e 0139     	    subs T1,#1
 422 1a90 F8D1     	    bne 1b 
 423 1a92 01F099BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1a96 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1a9a 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1a9e 06D1     	    bne shift_down 
 431 1aa0 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1aa4 06D1     	    bne altchar_down 
 433 1aa6 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1aaa 06D1     	    bne ctrl_down 
 435 1aac 0DE0     	    b 9f 
 436              	shift_down:
 437 1aae 3046     	    mov T0,TOS 
 438 1ab0 A149     	    ldr T1,=shifted 
 439 1ab2 04E0     	    b 8f 
 440              	altchar_down:
 441 1ab4 3046     	    mov T0,TOS 
 442 1ab6 A149     	    ldr T1,=altchar
 443 1ab8 01E0     	    b 8f
 444              	ctrl_down:
 445 1aba 3046     	    mov T0,TOS 
 446 1abc A049     	    ldr T1,=controls 
ARM GAS  forth.s 			page 74


 447 1abe 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1ac8 0646     	    mov TOS,T0
 449 1aca 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1ad4 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 1ad6 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1ada 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1ade 0BD0     	    beq 9f 
 456 1ae0 412E     	    cmp TOS,#'A'
 457 1ae2 09D4     	    bmi 9f 
 458 1ae4 5B2E     	    cmp TOS,#'Z'+1 
 459 1ae6 03D4     	    bmi 3f 
 460 1ae8 612E     	    cmp TOS,#'a'
 461 1aea 05D4     	    bmi 9f 
 462 1aec 7B2E     	    cmp TOS,#'z'+1
 463 1aee 03D5     	    bpl 9f 
 464 1af0 4FF02000 	3:  mov T0,#(1<<5)
 465 1af4 86EA0006 	    eor TOS,T0 
 466 1af8 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1afa 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1afc 206F     	1:  ldr r0,[UP,#VID_STATE]
 483 1afe 0128     	    cmp r0,ST_PREVID 
 484 1b00 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 1b02 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1b06 00B5FEF7 	    _CALL nvic_disable_irq
 487      24FE5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 1b10 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1b18 1846     	    mov r0,r3 
 491 1b1a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 1b1e 4FF01102 	    mov r2,#OUTPUT_OD
 493 1b22 00B5FEF7 	    _CALL gpio_config 
 493      44FE5DF8 
 493      04EB
 494 1b2c 1846     	    mov r0,r3 
ARM GAS  forth.s 			page 75


 495 1b2e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 1b32 82EA0202 	    eor r2,r2 
 497 1b36 00B5FEF7 	    _CALL gpio_out 
 497      90FE5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 1b40 4FF4E150 	    mov r0,#150*48
 500 1b44 0138     	1:  subs r0,#1 
 501 1b46 FDD1     	    bne 1b
 502 1b48 01BC     	    pop {r0}
 503 1b4a 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 504 1b4e D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
 505 1b52 40F00200 	    orr r0,#KBD_TX 
 506 1b56 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 507 1b5a 80EA0000 	    eor r0,r0 
 508 1b5e 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 509 1b62 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1b66 1846     	    mov r0,r3 
 513 1b68 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1b6c 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1b70 00B5FEF7 	    _CALL gpio_config 
 515      1DFE5DF8 
 515      04EB
 516 1b7a 1846     	    mov r0,r3 
 517 1b7c 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1b80 82EA0202 	    eor r2,r2 
 519 1b84 00B5FEF7 	    _CALL gpio_out
 519      69FE5DF8 
 519      04EB
 520              	// release clock line 
 521 1b8e 1846     	    mov r0,r3 
 522 1b90 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1b94 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1b98 00B5FEF7 	    _CALL gpio_config
 524      09FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 1ba2 4FF00A00 	    mov r0,#10
 528 1ba6 E060     	    str r0,[UP,#CD_TIMER]
 529 1ba8 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1baa 20B1     	    cbz r0, 4f 
 531 1bac 94F87E00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1bb0 10F0020F 	    tst r0,#KBD_TX
 533 1bb4 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 1bb6 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1bba 00B5FEF7 	    _CALL nvic_enable_irq
 536      B5FD5DF8 
 536      04EB
 537 1bc4 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1bc8 20F00201 	    bic r1,r0,#KBD_TX
 539 1bcc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 540 1bd0 00F00200 	    and r0,#KBD_TX
 541 1bd4 48B1     	    cbz r0, 5f
ARM GAS  forth.s 			page 76


 542 1bd6 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1bd8 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1bdc 1960     	    str r1,[r3,#GPIO_MODER]
 545 1bde 80EA0000 	    eor r0,r0 
 546 1be2 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1be6 6FEA0000 	    mvn r0,r0   
 548 1bea 0EBC     	5:  pop {r1,r2,r3}
 549 1bec 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1bee 80EA0000 	    eor T0,T0 
 555 1bf2 C4F89000 	    str T0,[UP,#KBD_QHEAD]
 556 1bf6 C4F89400 	    str T0,[UP,#KBD_QTAIL]
 557 1bfa 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1bfe 6FF00301 	    mvn T1,#3
 559 1c02 00EA0100 	    and T0,T1 
 560 1c06 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 561 1c0a 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1c0c 261A0000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1c18 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1c1c 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1c26 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1c28 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1c32 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1c3c FE28     	    cmp r0,KBD_CMD_RESEND
 574 1c3e EBD0     	    beq 1b 
 575 1c40 4FF4FA70 	    mov T0,#500 
 576 1c44 E060     	    str T0,[UP,#CD_TIMER]
 577 1c46 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1c50 10B9     	    cbnz T0,3f
 579 1c52 E068     	    ldr T0,[UP,#CD_TIMER]
 580 1c54 0028     	    cmp T0,#0 
 581 1c56 F6D1     	    bne 2b 
 582 1c58 47F8046D 	3:  _PUSH 
 583 1c5c 0646     	    mov TOS,T0  
 584 1c5e 01F0B3B9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
ARM GAS  forth.s 			page 77


 589              	 keyboard LEDS 
 590              	*****************************/
 591 1c62 101C0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1c70 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1c7a 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1c7e 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1c88 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1c92 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1c94 ECD0     	    beq 1b
 598 1c96 FA28     	    cmp T0,#KBD_ACK  
 599 1c98 F6D1     	    bne 2b 
 600 1c9a 3046     	2:  mov T0,TOS 
 601 1c9c 00F00700 	    and T0,#7 
 602 1ca0 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1caa 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1cb4 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1cb6 F0D0     	    beq 2b
 606 1cb8 FA28     	    cmp T0,#KBD_ACK 
 607 1cba F6D1     	    bne 3b  
 608 1cbc 57F8046B 	    _POP 
 609 1cc0 01F082B9 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1cc4 661C0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1cd4 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1cd8 10F0010F 	    tst T0,#1
 619 1cdc 01D1     	    bne 1f 
 620 1cde 01F073B9 	    _NEXT 
 621 1ce2 47F8046D 	1: _PUSH 
 622 1ce6 6FF00101 	    mvn T1,#1 
 623 1cea 00EA0100 	    and T0,T1 
 624 1cee 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 625 1cf2 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1cf6 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
ARM GAS  forth.s 			page 78


 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1cfe C81C0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1d0c 504700BF 	    _NEST
 635 1d10 D51C0000 	1:  _ADR CAPS_LED  
 636 1d14 311A0000 	    _ADR PS2_QKEY 
 637 1d18 F5350000 	    _ADR QDUP 
 638 1d1c 2F320000 	    _QBRAN 1b  
 638      101D0000 
 639 1d24 CF2F0000 	    _UNNEST 
 640 1d28 22190000 	
 640      30190000 
 640      90150000 
 640      B4160000 
 640      44160000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	    FLASH_SECTOR_SIZE= 4096 
  34              	
  35              	/*****************************
  36              	  initialize SPI peripheral 
  37              	  pinout:
ARM GAS  forth.s 			page 79


  38              	     PA4 F_CS 
  39              	     PA5 SCK 
  40              	     PA6 MISO 
  41              	     PA7 MOSI    
  42              	******************************/
  43              	flash_spi_init:
  44 1d48 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  44      C4F20200 
  45 1d50 0346     	    mov r3,r0 
  46 1d52 4FF00401 	    mov r1,#PIN_F_SC 
  47 1d56 4FF00102 	    mov r2,#OUTPUT_PP
  48 1d5a 00B5FEF7 	    _CALL gpio_config 
  48      28FD5DF8 
  48      04EB
  49 1d64 1846     	    mov r0,r3 
  50 1d66 4FF00401 	    mov r1,#PIN_F_SC  
  51 1d6a 4FF00102 	    MOV r2,#1
  52 1d6e 00B5FEF7 	    _CALL gpio_out 
  52      74FD5DF8 
  52      04EB
  53 1d78 1846     	    mov r0,r3 
  54 1d7a 4FF00501 	    mov r1,#PIN_SCK  
  55 1d7e 4FF00202 	    mov r2,#OUTPUT_AFPP
  56 1d82 00B5FEF7 	    _CALL gpio_config 
  56      14FD5DF8 
  56      04EB
  57 1d8c 1846     	    mov r0,r3 
  58 1d8e 4FF00701 	    mov r1,#PIN_MOSI 
  59 1d92 4FF00202 	    mov r2,#OUTPUT_AFPP 
  60 1d96 00B5FEF7 	    _CALL gpio_config 
  60      0AFD5DF8 
  60      04EB
  61 1da0 1846     	    mov r0,r3
  62 1da2 4FF00601 	    mov r1,#PIN_MISO
  63 1da6 4FF00202 	    mov r2,#INPUT_AFO  
  64 1daa 00B5FEF7 	    _CALL gpio_config
  64      00FD5DF8 
  64      04EB
  65              	// PA5:7 at max speed 
  66 1db4 4CF6AA40 	    mov r0,#0xCCAA
  67 1db8 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  68 1dba 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  68      C4F20200 
  69 1dc2 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  70 1dc4 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  71 1dc8 4164     	    str r1,[r0,#RCC_APB2ENR]
  72 1dca 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  72      C4F20100 
  73 1dd2 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  74 1dd6 0180     	    strh r1,[r0,#SPI_CR1]
  75 1dd8 196A     	    ldr r1,[r3,#GPIO_AFRL]
  76 1dda 80EA0000 	    eor r0,r0 
  77 1dde C5F25050 	    movt r0,#0x5550 
  78 1de2 40EA0100 	    orr r0,r1 
  79 1de6 1862     	    str r0,[r3,#GPIO_AFRL]
  80 1de8 7047     	    _RET 
  81              	
ARM GAS  forth.s 			page 80


  82              	
  83              	/**********************
  84              	    CHIP-SEL ( -- )
  85              	    drive F_SC low 
  86              	*********************/
  87 1dea 021D0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  87      08434849 
  87      502D5345 
  87      4C00
  88 1df8 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  88      C4F20200 
  89 1e00 4FF00401 	    mov r1,#PIN_F_SC 
  90 1e04 4FF00002 	    mov r2,#0 
  91 1e08 00B5FEF7 	    _CALL gpio_out 
  91      27FD5DF8 
  91      04EB
  92 1e12 01F0D9B8 	    _NEXT 
  93              	
  94              	
  95              	/*********************
  96              	    CHIP-DSEL 
  97              	    drive F_SC high 
  98              	*********************/
  99 1e16 EE1D0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  99      09434849 
  99      502D4453 
  99      454C
 100 1e24 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
 100      C4F20100 
 101 1e2c 0189     	1:  ldrh T1,[T0,#SPI_SR]
 102 1e2e 11F0800F 	    tst T1,(1<<7) // BSY 
 103 1e32 FBD1     	    bne 1b 
 104 1e34 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 104      C4F20200 
 105 1e3c 4FF00401 	    mov r1,#PIN_F_SC 
 106 1e40 4FF00102 	    mov r2,#1 
 107 1e44 00B5FEF7 	    _CALL gpio_out 
 107      09FD5DF8 
 107      04EB
 108 1e4e 01F0BBB8 	    _NEXT 
 109              	
 110              	
 111              	/****************************
 112              	    WB-BUFF ( -- a-adr )
 113              	    return address of 
 114              	    flash write back buffer 
 115              	****************************/
 116 1e52 1A1E0000 	    _HEADER WB_BUF,7,"WB-BUFF"
 116      0757422D 
 116      42554646 
 116      00BF
 117 1e60 47F8046D 	    _PUSH 
 118 1e64 47F23016 	    _MOV32     TOS,WB_BUFF
 118      C2F20106 
 119 1e6c 01F0ACB8 	    _NEXT
 120              	
 121              	/****************************
ARM GAS  forth.s 			page 81


 122              	    RD-SECTOR ( a -- )
 123              	    read a W25Q128FV sector 
 124              	    in WB-BUFFER 
 125              	****************************/ 
 126 1e70 561E0000 	    _HEADER RD_SECT,9,"RD-SECTOR"
 126      0952442D 
 126      53454354 
 126      4F5200BF 
 127 1e80 504700BF 	    _NEST 
 128 1e84 EF310000 	    _DOLIT  WB_BUFF 
 128      30710120 
 129 1e8c EF310000 	    _DOLIT  FLASH_SECTOR_SIZE 
 129      00100000 
 130 1e94 8D360000 	    _ADR    ROT 
 131 1e98 39210000 	    _ADR    RD_BLK 
 132 1e9c CF2F0000 	    _UNNEST 
 133              	
 134              	/*****************************
 135              	    WR-SECTOR ( a -- )
 136              	    write WB-BUFF to W25Q128FV
 137              	    at address 'a' 
 138              	input:
 139              	    a   flash chip address
 140              	        a is sector aligned 
 141              	        The sector must be erased
 142              	******************************/
 143 1ea0 741E0000 	    _HEADER WR_SECT,9,"WR-SECTOR"
 143      0957522D 
 143      53454354 
 143      4F5200BF 
 144 1eb0 504700BF 	    _NEST 
 145 1eb4 611E0000 	    _ADR    WB_BUF // a b
 146 1eb8 B9330000 	    _ADR    SWAP   // b a 
 147 1ebc DD360000 	    _ADR    DDUP   // b a b a   
 148 1ec0 EF310000 	    _DOLIT  16 
 148      10000000 
 149 1ec8 15330000 	    _ADR    TOR 
 150 1ecc 57320000 	    _BRAN   4f 
 150      F81E0000 
 151 1ed4 EF310000 	1:  _DOLIT  256
 151      00010000 
 152 1edc B9330000 	    _ADR    SWAP  // b a b 256 a    
 153 1ee0 8D210000 	    _ADR    WR_BLK  
 154 1ee4 EF310000 	    _DOLIT  256  //  b a 256 
 154      00010000 
 155 1eec A9330000 	    _ADR    DUPP  // b a 256 256  
 156 1ef0 F1360000 	    _ADR    DPLUS // b+256 a+256
 157 1ef4 DD360000 	    _ADR    DDUP // b a b a 
 158 1ef8 11320000 	4:  _DONXT  1b
 158      D41E0000 
 159 1f00 B5360000 	    _ADR    DDROP
 160 1f04 B5360000 	    _ADR    DDROP           
 161 1f08 CF2F0000 	    _UNNEST 
 162              	
 163              	
 164              	/****************************
 165              	    RD-BYTE ( -- )
ARM GAS  forth.s 			page 82


 166              	    read flash byte 
 167              	***************************/
 168 1f0c A41E0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 168      0752442D 
 168      42595445 
 169 1f18 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 169      C4F20100 
 170 1f20 0189     	0:  ldrh T1,[T0,#SPI_SR]
 171 1f22 11F0020F 	    tst T1,#(1<<1) //TXE
 172 1f26 FBD0     	    beq 0b 
 173 1f28 6FF00001 	    mvn T1,#0 
 174 1f2c 0173     	    strb T1,[T0,#SPI_DR]
 175 1f2e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 176 1f30 11F0010F 	    tst T1,#(1<<0) // RXNE  
 177 1f34 FBD0     	    beq 1b     
 178              	2:  
 179 1f36 47F8046D 	    _PUSH 
 180 1f3a 067B     	    ldrb TOS,[T0,#SPI_DR]
 181 1f3c 01F044B8 	    _NEXT 
 182              	
 183              	
 184              	/*********************************
 185              	    WR-BYTE  ( c -- )
 186              	    write flash byte 
 187              	*************************/
 188 1f40 101F0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 188      0757522D 
 188      42595445 
 189 1f4c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 189      C4F20100 
 190 1f54 0189     	0:  ldrh T1,[T0,#SPI_SR]
 191 1f56 11F0020F 	    tst T1,#(1<<1) //TXE
 192 1f5a FBD0     	    beq 0b 
 193 1f5c 0673     	    strb TOS,[T0,#SPI_DR]
 194 1f5e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 195 1f60 11F0010F 	    tst T1,#(1<<0) // RXNE  
 196 1f64 FBD0     	    beq 1b 
 197 1f66 8189     	    ldrh T1,[T0,#SPI_DR]
 198 1f68 57F8046B 	    _POP 
 199 1f6c 01F02CB8 	    _NEXT 
 200              	
 201              	/*************************
 202              	    WR-DIS ( -- )
 203              	    write disable 
 204              	    reset WEL bit 
 205              	*************************/
 206 1f70 441F0000 	    _HEADER WR_DIS,6,"WR-DIS"
 206      0657522D 
 206      44495300 
 207 1f7c 504700BF 	    _NEST 
 208 1f80 F91D0000 	    _ADR CHIP_SEL 
 209 1f84 EF310000 	    _DOLIT 4
 209      04000000 
 210 1f8c 4D1F0000 	    _ADR WR_BYTE
 211 1f90 251E0000 	    _ADR CHIP_DSEL
 212 1f94 CF2F0000 	    _UNNEST
 213              	
ARM GAS  forth.s 			page 83


 214              	/*************************
 215              	    WR-ENBL ( -- )
 216              	    set WEL flag in SR0 
 217              	************************/
 218 1f98 741F0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 218      0757522D 
 218      454E424C 
 219 1fa4 504700BF 	    _NEST 
 220 1fa8 F91D0000 	    _ADR CHIP_SEL 
 221 1fac EF310000 	    _DOLIT 6 
 221      06000000 
 222 1fb4 4D1F0000 	    _ADR WR_BYTE 
 223 1fb8 251E0000 	    _ADR CHIP_DSEL 
 224 1fbc CF2F0000 	    _UNNEST 
 225              	
 226              	/********************************
 227              	    RD-SR ( n -- c )
 228              	    read status register  
 229              	********************************/
 230 1fc0 9C1F0000 	    _HEADER RD_SR,5,"RD-SR"
 230      0552442D 
 230      535200BF 
 231 1fcc 504700BF 	    _NEST
 232 1fd0 F91D0000 	    _ADR CHIP_SEL  
 233 1fd4 EF310000 	    _DOLIT sr_cmd 
 233      F41F0000 
 234 1fdc E5340000 	    _ADR PLUS 
 235 1fe0 A5320000 	    _ADR CAT
 236 1fe4 4D1F0000 	    _ADR WR_BYTE
 237 1fe8 191F0000 	    _ADR RD_BYTE
 238 1fec 251E0000 	    _ADR CHIP_DSEL  
 239 1ff0 CF2F0000 	    _UNNEST 
 240 1ff4 053515   	sr_cmd: .byte 5,0x35,0x15      
 241              	
 242              	/*********************************
 243              	    SEND-ADR ( a -- )
 244              	    send 24 bits address 
 245              	*******************************/
 246 1ff7 C41F0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 246      0853454E 
 246      442D4144 
 246      52
 247 2004 504700BF 	    _NEST 
 248 2008 A9330000 	    _ADR DUPP 
 249 200c EF310000 	    _DOLIT 16
 249      10000000 
 250 2014 BD340000 	    _ADR RSHIFT 
 251 2018 4D1F0000 	    _ADR WR_BYTE 
 252 201c A9330000 	    _ADR DUPP
 253 2020 EF310000 	    _DOLIT 8 
 253      08000000 
 254 2028 BD340000 	    _ADR RSHIFT 
 255 202c 4D1F0000 	    _ADR WR_BYTE 
 256 2030 4D1F0000 	    _ADR WR_BYTE 
 257 2034 CF2F0000 	    _UNNEST 
 258              	
 259              	/**********************************
ARM GAS  forth.s 			page 84


 260              	    WAIT-DONE ( -- )
 261              	    wait write operation completed 
 262              	**********************************/
 263 2038 FB1F0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 263      09574149 
 263      542D444F 
 263      4E4500BF 
 264 2048 504700BF 	    _NEST 
 265 204c EF310000 	1:  _DOLIT 0 
 265      00000000 
 266 2054 CD1F0000 	    _ADR RD_SR 
 267 2058 EF310000 	    _DOLIT 3 
 267      03000000 
 268 2060 65340000 	    _ADR ANDD 
 269 2064 2F320000 	    _QBRAN 2f
 269      74200000 
 270 206c 57320000 	    _BRAN 1b
 270      4C200000 
 271 2074 CF2F0000 	2:  _UNNEST 
 272              	
 273              	
 274              	/****************************
 275              	   ERASE-SECTOR ( a -- )
 276              	   erase 4Ko sector 
 277              	input:
 278              	    a     sector address on 
 279              	          flash memory.
 280              	***************************/
 281 2078 3C200000 	    _HEADER ERASE_SECT,12,"ERASE-SECTOR"
 281      0C455241 
 281      53452D53 
 281      4543544F 
 281      520000BF 
 282 208c 504700BF 	    _NEST 
 283 2090 A51F0000 	    _ADR WR_ENBL
 284 2094 F91D0000 	    _ADR CHIP_SEL 
 285 2098 EF310000 	    _DOLIT 0x20 
 285      20000000 
 286 20a0 4D1F0000 	    _ADR WR_BYTE 
 287 20a4 05200000 	    _ADR SEND_ADR
 288 20a8 251E0000 	    _ADR CHIP_DSEL 
 289 20ac 49200000 	    _ADR WAIT_DONE 
 290 20b0 CF2F0000 	    _UNNEST 
 291              	
 292              	/*******************************
 293              	    FREE-SECTOR ( -- a )
 294              	    scan W251128FV for first 
 295              	    free sector 
 296              	output:
 297              	    a   sector address 
 298              	********************************/
 299 20b4 7C200000 	    _HEADER FREE_SECT,11,"FREE-SECTOR"
 299      0B465245 
 299      452D5345 
 299      43544F52 
 300 20c4 504700BF 	    _NEST
 301 20c8 EF310000 	    _DOLIT  0 
ARM GAS  forth.s 			page 85


 301      00000000 
 302 20d0 15330000 	    _ADR    TOR
 303              	1:      
 304 20d4 31710120 	    _ADR    WB_BUFF 
 305 20d8 EF310000 	    _DOLIT    1
 305      01000000 
 306 20e0 E5320000 	    _ADR    RAT   
 307 20e4 39210000 	    _ADR    RD_BLK 
 308              	    
 309 20e8 CF2F0000 	    _UNNEST 
 310              	
 311              	/******************************
 312              	    ERASE-CHIP ( -- )
 313              	    erase all data on W25Q128FV
 314              	******************************/
 315 20ec B8200000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 315      0A455241 
 315      53452D43 
 315      48495000 
 316 20fc 504700BF 	    _NEST 
 317 2100 A51F0000 	    _ADR WR_ENBL 
 318 2104 F91D0000 	    _ADR CHIP_SEL
 319 2108 EF310000 	    _DOLIT 0x60
 319      60000000 
 320 2110 EF310000 	    _DOLIT 0xC7 
 320      C7000000 
 321 2118 4D1F0000 	    _ADR WR_BYTE 
 322 211c 4D1F0000 	    _ADR WR_BYTE 
 323 2120 251E0000 	    _ADR CHIP_DSEL 
 324 2124 49200000 	    _ADR WAIT_DONE
 325 2128 CF2F0000 	    _UNNEST 
 326              	
 327              	
 328              	/******************************
 329              	    RD-BLK ( buff n a --  )
 330              	    read n bytes in buff 
 331              	    starting at address a  
 332              	******************************/
 333 212c F0200000 	    _HEADER RD_BLK,6,"RD-BLK"
 333      0652442D 
 333      424C4B00 
 334 2138 504700BF 	    _NEST
 335 213c F91D0000 	    _ADR CHIP_SEL 
 336 2140 EF310000 	    _DOLIT 3 
 336      03000000 
 337 2148 4D1F0000 	    _ADR WR_BYTE 
 338 214c 05200000 	    _ADR SEND_ADR
 339 2150 15330000 	    _ADR TOR   
 340 2154 57320000 	    _BRAN 2f
 340      6C210000 
 341 215c 191F0000 	1:  _ADR RD_BYTE
 342 2160 E9330000 	    _ADR OVER 
 343 2164 91320000 	    _ADR CSTOR
 344 2168 41350000 	    _ADR ONEP 
 345 216c 11320000 	2:  _DONXT 1b
 345      5C210000 
 346 2174 89330000 	    _ADR DROP 
ARM GAS  forth.s 			page 86


 347 2178 251E0000 	    _ADR CHIP_DSEL 
 348 217c CF2F0000 	    _UNNEST 
 349              	
 350              	/*****************************
 351              	    WR-BLK ( buff n a -- )
 352              	    write up to 256 bytes 
 353              	    in erased flash
 354              	****************************/
 355 2180 30210000 	    _HEADER WR_BLK,6,"WR-BLK"
 355      0657522D 
 355      424C4B00 
 356 218c 504700BF 	    _NEST 
 357 2190 A51F0000 	    _ADR WR_ENBL
 358 2194 F91D0000 	    _ADR CHIP_SEL
 359 2198 EF310000 	    _DOLIT 2 
 359      02000000 
 360 21a0 4D1F0000 	    _ADR WR_BYTE 
 361 21a4 05200000 	    _ADR SEND_ADR
 362 21a8 15330000 	    _ADR TOR
 363 21ac 57320000 	    _BRAN 2f 
 363      C4210000 
 364 21b4 A9330000 	1:  _ADR DUPP 
 365 21b8 A5320000 	    _ADR CAT 
 366 21bc 4D1F0000 	    _ADR WR_BYTE 
 367 21c0 41350000 	    _ADR ONEP
 368 21c4 11320000 	2:  _DONXT 1b 
 368      B4210000 
 369 21cc 89330000 	    _ADR DROP
 370 21d0 251E0000 	    _ADR CHIP_DSEL
 371 21d4 49200000 	    _ADR WAIT_DONE 
 372 21d8 CF2F0000 	    _UNNEST
 373              	
 374              	
 375              	/********************************
 376              	   FILES structures 
 377              	   -----------------
 378              	   name: 16 bytes null padded 
 379              	   size: 4 bytes
 380              	   sectors count: 4 bytes
 381              	   update counter: 4 bytes
 382              	   signature: IMAG for image files, TEXT for ASCII file, DATA for others  
 383              	   sector size: 4KB 
 384              	   free sector: first byte 0xFF 
 385              	   erased file: first byte 0xFF
 386              	********************************/
 387              	
 388              	/*******************************
 389              	    SEARCH-FILE 'name' ( -- adr )
 390              	    search file in flash 
 391              	********************************/
 392 21dc 84210000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 392      0B534541 
 392      5243482D 
 392      46494C45 
 393 21ec 504700BF 	    _NEST 
 394              	    
 395 21f0 CF2F0000 	    _UNNEST 
ARM GAS  forth.s 			page 87


 396              	
 397              	 /******************************
 398              	    ERASE-FILE 'name' ( -- )
 399              	    delete a file 
 400              	*******************************/
 401 21f4 E0210000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 401      0A455241 
 401      53452D46 
 401      494C4500 
 402 2204 504700BF 	    _NEST 
 403              	
 404 2208 CF2F0000 	    _UNNEST 
 405              	
 406              	/*******************************
 407              	    DIR ( -- )
 408              	    print files list 
 409              	*******************************/
 410 220c F8210000 	    _HEADER DIR,3,"DIR"
 410      03444952 
 411 2214 504700BF 	    _NEST 
 412              	
 413 2218 CF2F0000 	    _UNNEST 
 414              	
 415              	/*******************************
 416              	    SAVE-IMAG 'name' ( -- ) 
 417              	    save current data space image 
 418              	    on flash chip. 
 419              	    This file can be reloaded 
 420              	    using LOAD-IMAG  
 421              	    This file as an IMAG signature  
 422              	********************************/
 423 221c 10220000 	    _HEADER SAVE,9,"SAVE-IMAG"
 423      09534156 
 423      452D494D 
 423      414700BF 
 424 222c 504700BF 	    _NEST 
 425              	
 426 2230 CF2F0000 	    _UNNEST 
 427              	
 428              	
 429              	/*********************************
 430              	    LOAD-IMAG 'name' ( i*x -- j*x )
 431              	    load image file previously saved 
 432              	    using SAVE. The file must 
 433              	    have an IMAG signature 
 434              	********************************/
 435 2234 20220000 	    _HEADER LOAD,9,"LOAD-IMAG"
 435      094C4F41 
 435      442D494D 
 435      414700BF 
 436 2244 504700BF 	    _NEST 
 437              	
 438 2248 CF2F0000 	    _UNNEST 
 439              	
 440              	    
 441              	
   1              	/**************************************************************************
ARM GAS  forth.s 			page 88


   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 224c 5F708930 	     .word  0x3089705F // 1e-9
  34 2250 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 2254 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 2258 BD378635 	     .word  0x358637BD // 1e-6 
  37 225c ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 2260 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 2264 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 2268 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 226c CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 2270 0000803F 	     .word  0x3F800000 // 1.0 
  44 2274 00002041 	     .word  0x41200000 // 1e1 
  45 2278 0000C842 	     .word  0x42C80000 // 1e2 
  46 227c 00007A44 	     .word  0x447A0000 // 1e3 
  47 2280 00401C46 	     .word  0x461C4000 // 1e4 
  48 2284 0050C347 	     .word  0x47C35000 // 1e5 
  49 2288 00247449 	     .word  0x49742400 // 1e6 
  50 228c 8096184B 	     .word  0x4B189680 // 1e7
  51 2290 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 2294 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
ARM GAS  forth.s 			page 89


  59 2298 38220000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 22a4 4FEA8606 	    lsl TOS,#2  
  61 22a8 FF48     	    ldr t0, =p10 
  62 22aa 0644     	    add TOS,TOS,T0
  63 22ac 3668     	    ldr TOS,[TOS]  
  64 22ae 00F08BBE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 22b2 DFF8F803 	   ldr.w r0,=CPACR 
  73 22b6 0168     	   ldr R1,[R0]
  74 22b8 41F47001 	   orr r1,r1,#(0xf<<20)
  75 22bc 0160     	   str r1,[r0]
  76 22be BFF34F8F 	   dsb 
  77 22c2 FB48     	   ldr r0,=FPC_BASE_ADR
  78 22c4 81EA0101 	   eor r1,r1 
  79 22c8 0160     	   str r1,[r0,FPCCR]
  80 22ca BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 22ce 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 22d0 9C220000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 22d8 4FF05100 	    mov r0,#FPU_IRQ 
  92 22dc 00B5FEF7 	    _CALL nvic_disable_irq
  92      39FA5DF8 
  92      04EB
  93 22e6 00F06FBE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 22ea D4220000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 22f4 4FF05100 	    mov r0,#FPU_IRQ
 102 22f8 00B5FEF7 	    _CALL nvic_enable_irq
 102      16FA5DF8 
 102      04EB
 103 2302 00F061BE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
ARM GAS  forth.s 			page 90


 107              	   FPSCR ( -- u )
 108              	   stack fpu SCR register 
 109              	***************************/
 110 2306 EE220000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
 111 2310 47F8046D 	   _PUSH 
 112 2314 F1EE106A 	   vmrs TOS,FPSCR
 113 2318 BFF34F8F 	   dsb  
 114 231c 00F054BE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 2320 0A230000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 2330 F1EE100A 	   vmrs T0,FPSCR 
 125 2334 BFF34F8F 	   dsb 
 126 2338 06EA0006 	   and TOS,T0  
 127 233c E1EE106A 	   vmsr FPSCR,TOS 
 128 2340 BFF34F8F 	   dsb 
 129 2344 00F040BE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 2348 24230000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 2350 00EE106A 	    vmov.f32 S0,TOS 
 138 2354 57F8046B 	    _POP 
 139 2358 00F036BE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 235c 4C230000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 2364 00EE906A 	    vmov.f32 S1,TOS 
 147 2368 57F8046B 	    _POP 
 148 236c 00F02CBE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 2370 60230000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 2378 01EE106A 	    vmov.f32 S2,TOS 
ARM GAS  forth.s 			page 91


 156 237c 57F8046B 	    _POP 
 157 2380 00F022BE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
 162              	*******************************/
 163 2384 74230000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 238c 47F8046D 	    _PUSH 
 165 2390 10EE106A 	    vmov.f32 TOS,S0 
 166 2394 00F018BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 2398 88230000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 23a0 47F8046D 	    _PUSH 
 174 23a4 10EE906A 	    vmov.f32 TOS,S1 
 175 23a8 00F00EBE 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 23ac 9C230000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 23b4 47F8046D 	    _PUSH 
 183 23b8 11EE106A 	    vmov.f32 TOS,S2 
 184 23bc 00F004BE 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 23c0 B0230000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 23c8 00EE106A 	    vmov.f32 S0,TOS
 194 23cc BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 23d0 10EE106A 	    vmov.f32 TOS,s0 
 196 23d4 00F0F8BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 23d8 C4230000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
 203 23e4 00EE106A 	    vmov.f32 S0,TOS 
 204 23e8 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 23ec 10EE106A 	    vmov.f32 TOS,S0 
 206 23f0 00F0EABD 	    _NEXT 
ARM GAS  forth.s 			page 92


 207              	
 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 23f4 DC230000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
 213 23fc 00EE106A 	    vmov.f32 S0,TOS
 214 2400 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 2404 10EE106A 	    vmov.f32 TOS,s0 
 216 2408 00F0DEBD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 240c F8230000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 2414 00EE106A 	   vmov.f32 s0,TOS 
 224 2418 57F8046B 	   _POP 
 225 241c 00EE906A 	   vmov.f32 s1,TOS 
 226 2420 30EE200A 	   vadd.f32 s0,s0,s1 
 227 2424 10EE106A 	   vmov.f32 TOS,s0
 228 2428 00F0CEBD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 242c 10240000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 2434 00EE106A 	   vmov.f32 s0,TOS 
 237 2438 57F8046B 	   _POP 
 238 243c 00EE906A 	   vmov.f32 s1,TOS 
 239 2440 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 2444 10EE106A 	   vmov.f32 TOS,s0
 241 2448 00F0BEBD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 244c 30240000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 2454 00EE106A 	   vmov.f32 s0,TOS 
 251 2458 57F8046B 	   _POP 
 252 245c 00EE906A 	   vmov.f32 s1,TOS 
 253 2460 20EE800A 	   vmul.f32 s0,s1,s0 
 254 2464 10EE106A 	   vmov.f32 TOS,s0
 255 2468 00F0AEBD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
ARM GAS  forth.s 			page 93


 260              	    divide f1 by f2 
 261              	*******************************/
 262 246c 50240000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 2474 00EE106A 	   vmov.f32 s0,TOS 
 264 2478 57F8046B 	   _POP 
 265 247c 00EE906A 	   vmov.f32 s1,TOS 
 266 2480 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 2484 10EE106A 	   vmov.f32 TOS,s0
 268 2488 00F09EBD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 248c 70240000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 2498 00EE106A 	    vmov.f32 s0,TOS 
 277 249c B1EE400A 	    vneg.f32 S0,S0 
 278 24a0 10EE106A 	    vmov.f32 TOS,S0    
 279 24a4 00F090BD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 24a8 90240000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 24b4 80EA0000 	    eor T0,T0 
 287 24b8 6FEA0000 	    mvn T0,T0 
 288 24bc 4FEA5000 	    lsr T0,#1 
 289 24c0 06EA0006 	    and TOS,T0 
 290 24c4 00F080BD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 24c8 AC240000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 24d4 00EE106A 	     vmov.f32 s0,TOS 
 299 24d8 B1EEC00A 	     vsqrt.f32 s0,s0 
 300 24dc 10EE106A 	     vmov.f32 TOS,s0 
 301 24e0 00F072BD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 24e4 CC240000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 24ec 00EE106A 	    vmov.f32 s0,TOS 
ARM GAS  forth.s 			page 94


 309 24f0 B5EE400A 	    vcmp.f32 s0, #0.0 
 310 24f4 F1EE106A 	    vmrs TOS,FPSCR
 311 24f8 BFF34F8F 	    dsb  
 312 24fc 4FEAE676 	    asr TOS,#31   
 313 2500 00F062BD 	    _NEXT 
 314              	
 315              	/*****************************
 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 2504 E8240000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 250c 504700BF 	    _NEST 
 321 2510 35240000 	    _ADR FSUBB
 322 2514 ED240000 	    _ADR FZLESS
 323 2518 79370000 	    _ADR INVER     
 324 251c CF2F0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 2520 08250000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 2528 504700BF 	    _NEST 
 332 252c 35240000 	    _ADR FSUBB 
 333 2530 ED240000 	    _ADR FZLESS
 334 2534 CF2F0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 2538 24250000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 2544 504700BF 	    _NEST 
 342 2548 E9330000 	   _ADR OVER 
 343 254c E9330000 	   _ADR OVER 
 344 2550 0D250000 	   _ADR FGREAT 
 345 2554 2F320000 	   _QBRAN 1f 
 345      60250000 
 346 255c B9330000 	   _ADR SWAP  
 347 2560 89330000 	1: _ADR DROP 
 348 2564 CF2F0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 2568 3C250000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 2574 504700BF 	    _NEST 
 355 2578 E9330000 	    _ADR OVER 
 356 257c E9330000 	    _ADR OVER 
 357 2580 29250000 	    _ADR FLESS 
 358 2584 2F320000 	    _QBRAN 1f
ARM GAS  forth.s 			page 95


 358      90250000 
 359 258c B9330000 	    _ADR SWAP   
 360 2590 89330000 	1:  _ADR DROP 
 361 2594 CF2F0000 	    _UNNEST 
 362              	
 363              	
 364              	/*******************************
 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 2598 6C250000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 25a4 80EA0000 	    eor T0,T0 
 370 25a8 C8F20000 	    movt T0,#0X8000
 371 25ac 06EA0006 	    and TOS,T0
 372 25b0 4FEAE676 	    asr TOS,#31  
 373 25b4 00F008BD 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 25b8 9C250000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 25c4 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 25cc 06EA0006 	    and TOS,T0 
 382 25d0 4FEAD656 	    lsr TOS,#23
 383 25d4 A6F17F06 	    sub TOS,#127 
 384 25d8 00F0F6BC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 25dc BC250000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 25e8 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 25f0 06EA0006 	    AND TOS,T0 
 393 25f4 80EA0000 	    EOR T0,T0 
 394 25f8 C0F28000 	    MOVT T0,0x80
 395 25fc 46EA0006 	    ORR TOS,T0 
 396 2600 00F0E2BC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
 403 2604 E0250000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 260c 47F8046D 	    _PUSH 
 405 2610 40F6DB76 	    _MOV32 TOS, 0x40490FDB
ARM GAS  forth.s 			page 96


 405      C4F24906 
 406 2618 00F0D6BC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
 411              	********************************/
 412 261c 08260000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 2624 47F8046D 	    _PUSH 
 414 2628 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 2630 00F0CABC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 2634 20260000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 2640 47F8046D 	    _PUSH 
 423 2644 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 264c 00F0BCBC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 2650 38260000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 265c 47F8046D 	    _PUSH 
 433 2660 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 2668 00F0AEBC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 266c 54260000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 2678 504700BF 	    _NEST
 443 267c C5250000 	    _ADR FEXP 
 444 2680 FD230000 	    _ADR STOF 
 445 2684 5D260000 	    _ADR LOG2
 446 2688 55240000 	    _ADR FSTAR 
 447 268c E5230000 	    _ADR TRUNC  
 448 2690 A9330000 	    _ADR DUPP 
 449 2694 19340000 	    _ADR ZLESS 
 450 2698 2F320000 	    _QBRAN 1f 
 450      A4260000 
ARM GAS  forth.s 			page 97


 451 26a0 51350000 	    _ADR ONEM
 452 26a4 CF2F0000 	1:  _UNNEST 
 453 26a8 70220000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 26b4 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 26b8 0000C842 	            .word  0x42C80000  // 100.0
  31 26bc 00401C46 	            .word  0x461C4000  // 10000.0 
  32 26c0 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 26c4 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 26c8 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 26cc 504700BF 	    _NEST 
  45 26d0 EF310000 	    _DOLIT 2 
  45      02000000 
  46 26d8 D5340000 	    _ADR LSHIFT 
  47 26dc EF310000 	    _DOLIT p10p2n 
  47      B4260000 
  48 26e4 E5340000 	    _ADR PLUS 
  49 26e8 85320000 	    _ADR AT 
  50 26ec CF2F0000 	    _UNNEST 
ARM GAS  forth.s 			page 98


  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 26f0 504700BF 	    _NEST 
  59 26f4 EF310000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 26fc EF310000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 2704 C13F0000 	    _ADR PICK  // idx f e 1 idx 
  62 2708 D5340000 	    _ADR LSHIFT // idx f e bit_mask 
  63 270c 65340000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 2710 CF2F0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 2714 504700BF 	    _NEST 
  78 2718 15330000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 271c E5320000 	    _ADR RAT   // idx f e R: e 
  81 2720 F1260000 	    _ADR bit_state // idx f state 
  82 2724 2F320000 	    _QBRAN 1f   // bit reset 
  82      38270000 
  83 272c E9330000 	    _ADR OVER 
  84 2730 CD260000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2734 75240000 	    _ADR FSLH  // idx f R: e 
  86 2738 B9330000 	1:  _ADR SWAP  // f idx R: e 
  87 273c 41350000 	    _ADR ONEP   // F idx++ R: e 
  88 2740 B9330000 	    _ADR SWAP   // idx f  
  89 2744 E9330000 	    _ADR OVER   // idx f idx 
  90 2748 EF310000 	    _DOLIT 5 
  90      05000000 
  91 2750 B9380000 	    _ADR GREAT  // idx > 5
  92 2754 2F320000 	    _QBRAN div_loop 
  92      1C270000 
  93 275c B1320000 	    _ADR RFROM 
  94 2760 89330000 	    _ADR DROP 
  95 2764 CF2F0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
ARM GAS  forth.s 			page 99


 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 2768 504700BF 	    _NEST 
 109 276c 15330000 	    _ADR TOR 
 110              	mult_loop:
 111 2770 E5320000 	    _ADR RAT   // idx f e R: e 
 112 2774 F1260000 	    _ADR bit_state // idx f state 
 113 2778 2F320000 	    _QBRAN 1f   // bit reset 
 113      8C270000 
 114 2780 E9330000 	    _ADR OVER  
 115 2784 CD260000 	    _ADR p10p2at // idx f pwr10 R: e
 116 2788 55240000 	    _ADR FSTAR  // idx f R: e 
 117 278c B9330000 	1:  _ADR SWAP  // f idx R: e 
 118 2790 41350000 	    _ADR ONEP   // F idx++ R: e 
 119 2794 B9330000 	    _ADR SWAP   // idx f  
 120 2798 E9330000 	    _ADR OVER   // idx f idx 
 121 279c EF310000 	    _DOLIT 5 
 121      05000000 
 122 27a4 B9380000 	    _ADR GREAT  // idx > 5
 123 27a8 2F320000 	    _QBRAN mult_loop 
 123      70270000 
 124 27b0 B1320000 	    _ADR RFROM 
 125 27b4 89330000 	    _ADR DROP 
 126 27b8 CF2F0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 27bc 504700BF 	    _NEST 
 136 27c0 E9330000 	    _ADR OVER  // e f e 
 137 27c4 2F320000 	    _QBRAN 3f // exp==0,  done 
 137      00280000 
 138 27cc EF310000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 27d4 A1360000 	    _ADR NROT // idx e f
 140 27d8 B9330000 	    _ADR SWAP // idx f e   
 141 27dc A9330000 	    _ADR DUPP  // idx f e e 
 142 27e0 19340000 	    _ADR ZLESS
 143 27e4 2F320000 	    _QBRAN pos_exp 
 143      FC270000 
 144              	// negative exponent 
 145 27ec 9D370000 	    _ADR ABSS 
 146 27f0 15270000 	    _ADR mant_div 
 147 27f4 57320000 	    _BRAN 3f 
 147      00280000 
 148              	pos_exp: // positive exponent 
 149 27fc 69270000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 2800 B9330000 	3:  _ADR SWAP 
 152 2804 89330000 	    _ADR DROP 
ARM GAS  forth.s 			page 100


 153 2808 CF2F0000 	    _UNNEST 
 154              	
 155              	
 156              	/********************************
 157              	    integer ( a cnt -- a+ cnt- f# )
 158              	*********************************/
 159              	integer:
 160 280c 504700BF 	    _NEST 
 161 2810 EF310000 	    _DOLIT 0 
 161      00000000 
 162 2818 A9330000 	    _ADR DUPP 
 163 281c CD330000 	    _ADR DSWAP // 0 0 a cnt 
 164 2820 B9440000 	    _ADR TONBR // d a+ cnt- 
 165 2824 CD330000 	    _ADR DSWAP 
 166 2828 65440000 	    _ADR DTOS 
 167 282c FD230000 	    _ADR STOF 
 168 2830 CF2F0000 	    _UNNEST 
 169              	
 170              	
 171              	/*****************************
 172              	   decimals ( a cnt -- a+ cnt- fdec )
 173              	   parse digits after '.' 
 174              	   convert to float 
 175              	*****************************/
 176              	decimals:
 177 2834 504700BF 	    _NEST 
 178 2838 A9330000 	    _ADR DUPP 
 179 283c 15330000 	    _ADR TOR 
 180 2840 EF310000 	    _DOLIT 0
 180      00000000 
 181 2848 A9330000 	    _ADR DUPP
 182 284c CD330000 	    _ADR DSWAP 
 183 2850 B9440000 	    _ADR TONBR // -- d a+ cnt-  
 184 2854 CD330000 	    _ADR DSWAP  // a+ cnt- d
 185 2858 65440000 	    _ADR DTOS   // a+ cnt- i 
 186 285c FD230000 	    _ADR STOF  // convert integer to float 
 187 2860 B1320000 	    _ADR RFROM  // a+ cnt- f# cnt 
 188 2864 EF310000 	    _DOLIT 2 
 188      02000000 
 189 286c C13F0000 	    _ADR  PICK  
 190 2870 F5340000 	    _ADR SUBB 
 191 2874 EF310000 	    _DOLIT 9 
 191      09000000 
 192 287c ED380000 	    _ADR MIN 
 193 2880 A5220000 	    _ADR PWR10
 194 2884 75240000 	    _ADR FSLH  // a+ cnt- fdec 
 195 2888 CF2F0000 	    _UNNEST 
 196              	
 197              	
 198              	/************************************
 199              	   exponent ( a cnt -- a+ cnt- exp )
 200              	   parse float exponent 
 201              	************************************/
 202              	exponent: 
 203 288c 504700BF 	    _NEST 
 204 2890 4F450000 	    _ADR NEGQ 
 205 2894 15330000 	    _ADR TOR 
ARM GAS  forth.s 			page 101


 206 2898 EF310000 	    _DOLIT 0 
 206      00000000 
 207 28a0 A9330000 	    _ADR DUPP 
 208 28a4 CD330000 	    _ADR DSWAP // 0 0 a cnt  
 209 28a8 B9440000 	    _ADR TONBR // d a cnt   
 210 28ac CD330000 	    _ADR DSWAP 
 211 28b0 65440000 	    _ADR DTOS  
 212 28b4 B1320000 	    _ADR RFROM 
 213 28b8 2F320000 	    _QBRAN 1f 
 213      C4280000 
 214 28c0 8D370000 	    _ADR NEGAT 
 215              	1:  
 216 28c4 CF2F0000 	    _UNNEST  // -- a+ cnt- exp   
 217              	
 218              	
 219              	/**********************************
 220              	    FLOAT? ( a -- f# -2 | a 0 )
 221              	    parse float number 
 222              	    return ( a 0 ) if not float 
 223              	**********************************/
 224 28c8 70260000 	    _HEADER FLOATQ,6,"FLOAT?"
 224      06464C4F 
 224      41543F00 
 225 28d4 504700BF 	    _NEST
 226              	    // always use base 10 
 227              	    // hexadecimal float not accepted 
 228 28d8 053A0000 	    _ADR BASE 
 229 28dc 85320000 	    _ADR AT 
 230 28e0 15330000 	    _ADR TOR 
 231              	    // use decimal base  
 232 28e4 DD430000 	    _ADR DECIM 
 233              	    // save string pointer 
 234 28e8 A9330000 		_ADR DUPP 
 235 28ec 15330000 	    _ADR TOR // base a 
 236 28f0 59390000 	    _ADR	COUNT  // a+ cnt  // cnt is length of string 
 237              	// check for '-'|'+' save sign on R 
 238 28f4 4F450000 	    _ADR   NEGQ
 239 28f8 15330000 	    _ADR   TOR // -- a+ cnt-  R: base a sign 
 240              	// check if begin with '.'
 241 28fc EF310000 	    _DOLIT 0 
 241      00000000 
 242 2904 15330000 	    _ADR TOR  // r: base a sign fint 
 243 2908 EF310000 	    _DOLIT '.' 
 243      2E000000 
 244 2910 2D450000 	    _ADR CHARQ 
 245 2914 43320000 	    _TBRAN get_decimals
 245      7C290000 
 246              	// if 'E' error 
 247 291c EF310000 	    _DOLIT 'E' 
 247      45000000 
 248 2924 2D450000 	    _ADR CHARQ 
 249 2928 43320000 	    _TBRAN error2 
 249      182A0000 
 250              	// drop fint 
 251 2930 B1320000 	    _ADR RFROM 
 252 2934 89330000 	    _ADR DROP 
 253 2938 0D280000 	    _ADR  integer // a+ cnt- fint 
ARM GAS  forth.s 			page 102


 254 293c 15330000 	    _ADR  TOR  //  a 0 a+ cnt- flag r: base a sign fint  
 255              	// must be '.' | 'E'     
 256 2940 EF310000 	    _DOLIT '.' 
 256      2E000000 
 257 2948 2D450000 	    _ADR CHARQ
 258 294c 43320000 	    _TBRAN get_decimals   
 258      7C290000 
 259 2954 EF310000 	    _DOLIT 'E'
 259      45000000 
 260 295c 2D450000 	    _ADR  CHARQ 
 261 2960 2F320000 	    _QBRAN error2 // r: base a sign fint 
 261      182A0000 
 262 2968 EF310000 	    _DOLIT 0 
 262      00000000 
 263 2970 15330000 	    _ADR TOR  // r: base a sign fint ffrac 
 264 2974 57320000 	    _BRAN get_exponent 
 264      C0290000 
 265              	get_decimals:
 266 297c 35280000 	    _ADR decimals 
 267 2980 15330000 	    _ADR  TOR    // a 0 a+ cnt- r: base sign fint ffrac 
 268 2984 A9330000 	    _ADR DUPP 
 269 2988 2F320000 	    _QBRAN f_done 
 269      AC290000 
 270              	try_e: 
 271              	// if next char is 'E' get exponent 
 272 2990 EF310000 	    _DOLIT 'E' 
 272      45000000 
 273 2998 2D450000 	    _ADR CHARQ
 274 299c 43320000 	    _TBRAN get_exponent
 274      C0290000 
 275 29a4 57320000 	    _BRAN error3 
 275      242A0000 
 276              	f_done: 
 277 29ac EF310000 	    _DOLIT fzero 
 277      00000000 
 278 29b4 15330000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac fexp 
 279 29b8 57320000 	    _BRAN build_float
 279      D4290000 
 280              	get_exponent: 
 281 29c0 8D280000 	    _ADR exponent // -- a 0 a+ cnt- exp
 282 29c4 15330000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac exp 
 283 29c8 A9330000 	    _ADR DUPP 
 284 29cc 43320000 	    _TBRAN error4   // count must be 0 
 284      382A0000 
 285              	build_float: // a+ cnt- R: base a sign fint fdec exp 
 286 29d4 B5360000 	    _ADR DDROP 
 287 29d8 B1320000 	    _ADR RFROM 
 288 29dc C5320000 	    _ADR DRFROM 
 289 29e0 15240000 	    _ADR FPLUS 
 290 29e4 BD270000 	    _ADR exp_adjust
 291 29e8 B1320000 	    _ADR RFROM 
 292 29ec 2F320000 	    _QBRAN 1f 
 292      002A0000 
 293 29f4 EF310000 	    _DOLIT fminus1
 293      000080BF 
 294 29fc 55240000 	    _ADR FSTAR 
 295 2a00 EF310000 	1:  _DOLIT -2 
ARM GAS  forth.s 			page 103


 295      FEFFFFFF 
 296 2a08 B1320000 	    _ADR RFROM 
 297 2a0c 89330000 	    _ADR DROP 
 298 2a10 57320000 	    _BRAN restore_base  
 298      582A0000 
 299              	error2: // a cnt R: base a sign fint 
 300 2a18 B5360000 	    _ADR DDROP  
 301 2a1c 57320000 	    _BRAN e4  
 301      442A0000 
 302              	error3: // a cnt R: base a sign fint fdec  
 303 2a24 B5360000 	    _ADR DDROP  // -- R: base a sign
 304 2a28 B1320000 	    _ADR RFROM 
 305 2a2c 89330000 	    _ADR DROP 
 306 2a30 57320000 	    _BRAN e4  
 306      442A0000 
 307              	error4: // a+ cnt- r: base sign fint ffrac fexp  
 308 2a38 B5360000 	    _ADR DDROP 
 309 2a3c C5320000 	    _ADR DRFROM 
 310 2a40 B5360000 	    _ADR DDROP 
 311 2a44 C5320000 	e4: _ADR DRFROM 
 312 2a48 B5360000 	    _ADR DDROP    
 313 2a4c B1320000 	    _ADR RFROM 
 314 2a50 EF310000 	    _DOLIT 0  
 314      00000000 
 315              	restore_base: 
 316 2a58 B1320000 	    _ADR RFROM 
 317 2a5c 053A0000 	    _ADR BASE 
 318 2a60 71320000 	    _ADR STORE 
 319 2a64 CF2F0000 	    _UNNEST 
 320              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
ARM GAS  forth.s 			page 104


  28              	rounding:
  29 2a68 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2a6c CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 2a70 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2a74 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 2a78 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2a7c ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 2a80 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2a84 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 2a88 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 2a8c CC280000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 2a98 504700BF 	    _NEST
  50 2a9c EF310000 	    _DOLIT 1  
  50      01000000 
  51 2aa4 D5380000 	    _ADR MAX  
  52 2aa8 EF310000 	    _DOLIT 8
  52      08000000 
  53 2ab0 ED380000 	    _ADR MIN 
  54 2ab4 EF310000 	    _DOLIT 2 
  54      02000000 
  55 2abc D5340000 	    _ADR LSHIFT 
  56 2ac0 EF310000 	    _DOLIT rounding 
  56      682A0000 
  57 2ac8 E5340000 	    _ADR PLUS 
  58 2acc 85320000 	    _ADR AT   
  59 2ad0 15240000 	    _ADR FPLUS 
  60 2ad4 CF2F0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 2ad8 902A0000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 2ae0 57F8040B 	    ldr T0,[DSP],#4
  69 2ae4 3070     	    strb T0,[TOS]  
  70 2ae6 06F10106 	    add TOS,#1
  71 2aea 6DE2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
ARM GAS  forth.s 			page 105


  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 2aec 504700BF 	    _NEST 
  81 2af0 15330000 	    _ADR TOR  // >R ( i r: b )
  82 2af4 353D0000 	    _ADR STOD // ( dbl r: b )
  83 2af8 A9330000 	    _ADR DUPP // ( dbl i r: b )
  84 2afc 15330000 	    _ADR TOR  // ( dbl r: b sign )
  85 2b00 11370000 	    _ADR DABS 
  86 2b04 45420000 	    _ADR BDIGS 
  87 2b08 E9420000 	    _ADR DIGS 
  88 2b0c B1320000 	    _ADR RFROM 
  89 2b10 1D430000 	    _ADR SIGN 
  90 2b14 45430000 	    _ADR EDIGS // ( -- p u )
  91 2b18 A9330000 	    _ADR DUPP  
  92 2b1c A1360000 	    _ADR NROT // -rot ( -- u p u )
  93 2b20 E5320000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2b24 B9330000 	    _ADR SWAP // ( -- u p b u )
  95 2b28 A1400000 	    _ADR CMOVE // ( -- u ) 
  96 2b2c A9330000 	    _ADR DUPP  // ( -- u u )
  97 2b30 B1320000 	    _ADR RFROM // ( -- u u b )
  98 2b34 E5340000 	    _ADR PLUS  // ( -- u b+ )
  99 2b38 B9330000 	    _ADR SWAP  // ( -- b+ u )
 100 2b3c CF2F0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply f1 until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n   log10 limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 2b40 DC2A0000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2b4c 504700BF 	    _NEST 
 116 2b50 A5220000 	    _ADR PWR10 
 117 2b54 15330000 	    _ADR TOR  // f2 r: f1 
 118 2b58 EF310000 	    _DOLIT 0   // m 
 118      00000000 
 119 2b60 B9330000 	    _ADR SWAP  // m f2 
 120 2b64 A9330000 	1:  _ADR DUPP 
 121 2b68 E5320000 	    _ADR RAT 
 122 2b6c 29250000 	    _ADR FLESS
 123 2b70 2F320000 	    _QBRAN 2f
 123      982B0000 
 124 2b78 EF310000 	    _DOLIT ten 
 124      00002041 
 125 2b80 55240000 	    _ADR FSTAR
 126              	    // decrement m   
 127 2b84 B9330000 	    _ADR SWAP
 128 2b88 51350000 	    _ADR ONEM 
 129 2b8c B9330000 	    _ADR SWAP 
ARM GAS  forth.s 			page 106


 130 2b90 57320000 	    _BRAN 1b
 130      642B0000 
 131 2b98 B1320000 	2:  _ADR RFROM 
 132 2b9c 89330000 	    _ADR DROP 
 133 2ba0 B9330000 	    _ADR SWAP 
 134 2ba4 CF2F0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
 142              	    f1   float to scale 
 143              	    n    log10 limit 
 144              	 output:
 145              	    f2   scaled down float 
 146              	    m    log10 reduction factor
 147              	******************************/
 148 2ba8 442B0000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 2bb8 504700BF 	    _NEST 
 150 2bbc A5220000 	    _ADR PWR10
 151 2bc0 15330000 	    _ADR TOR
 152 2bc4 EF310000 	    _DOLIT 0 
 152      00000000 
 153 2bcc B9330000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 2bd0 E5320000 	1:  _ADR RAT   
 155 2bd4 E9330000 	    _ADR OVER 
 156 2bd8 0D250000 	    _ADR FGREAT 
 157 2bdc 43320000 	    _TBRAN 2f 
 157      042C0000 
 158 2be4 EF310000 	    _DOLIT ten 
 158      00002041 
 159 2bec 75240000 	    _ADR FSLH 
 160              	    // increment m 
 161 2bf0 B9330000 	    _ADR SWAP 
 162 2bf4 41350000 	    _ADR ONEP 
 163 2bf8 B9330000 	    _ADR SWAP 
 164 2bfc 57320000 	    _BRAN 1b   
 164      D02B0000 
 165 2c04 B1320000 	2:  _ADR RFROM 
 166 2c08 89330000 	    _ADR DROP
 167 2c0c B9330000 	    _ADR SWAP 
 168 2c10 CF2F0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
ARM GAS  forth.s 			page 107


 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 2c14 504700BF 	    _NEST
 183 2c18 B9330000 	    _ADR SWAP
 184 2c1c F5350000 	    _ADR QDUP    
 185 2c20 2F320000 	    _QBRAN 2f 
 185      442C0000 
 186 2c28 B9330000 	    _ADR SWAP 
 187 2c2c EF310000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 2c34 B9330000 	    _ADR SWAP  
 189 2c38 E12A0000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 2c3c ED2A0000 	    _ADR ITOA // ( i b -- b u )
 191 2c40 89330000 	    _ADR DROP // ( -- b+ )     
 192 2c44 CF2F0000 	2:  _UNNEST 
 193              	
 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 2c48 504700BF 	    _NEST
 208              	// check if d>0 and f<>0
 209 2c4c E9330000 	    _ADR OVER  
 210 2c50 3D340000 	    _ADR ZNEQU // -- d f b flag  
 211 2c54 EF310000 	    _DOLIT 3 
 211      03000000 
 212 2c5c C13F0000 	    _ADR PICK 
 213 2c60 29340000 	    _ADR ZGREAT
 214 2c64 65340000 	    _ADR ANDD 
 215 2c68 43320000 	    _TBRAN 1f 
 215      802C0000 
 216 2c70 15330000 	0:  _ADR TOR 
 217 2c74 89330000 	    _ADR DROP 
 218 2c78 57320000 	    _BRAN 2f // no fraction 
 218      F82C0000 
 219              	1: // convert fraction  
 220 2c80 EF310000 	     _DOLIT '.' 
 220      2E000000 
 221 2c88 B9330000 	    _ADR SWAP 
 222 2c8c E12A0000 	    _ADR CSTOP 
 223 2c90 15330000 	    _ADR TOR // >r ( d f r: b ) 
 224 2c94 F5350000 	1:  _ADR QDUP 
 225 2c98 2F320000 	    _QBRAN 2f 
 225      F82C0000 
 226 2ca0 B9330000 	    _ADR SWAP  
 227 2ca4 F5350000 	    _ADR QDUP 
 228 2ca8 2F320000 	    _QBRAN 2f
ARM GAS  forth.s 			page 108


 228      F82C0000 
 229 2cb0 51350000 	    _ADR ONEM // 1- ( -- f d- r: b )
 230 2cb4 B9330000 	    _ADR SWAP // swap ( -- d f r: b )
 231 2cb8 EF310000 	    _DOLIT ten // ( d f 10.0 ) 
 231      00002041 
 232 2cc0 55240000 	    _ADR FSTAR // f*
 233 2cc4 A9330000 	    _ADR DUPP  
 234 2cc8 E5230000 	    _ADR TRUNC // d f i
 235 2ccc A9330000 	    _ADR DUPP  // d f i i  
 236 2cd0 EF310000 	    _DOLIT '0' 
 236      30000000 
 237 2cd8 E5340000 	    _ADR PLUS 
 238 2cdc B1320000 	    _ADR RFROM // R> ( d f c b )
 239 2ce0 E12A0000 	    _ADR CSTOP // ( d f i b+ )
 240 2ce4 15330000 	    _ADR TOR  // >r ( -- d f i r: b )
 241 2ce8 FD230000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 242 2cec 35240000 	    _ADR FSUBB 
 243 2cf0 57320000 	    _BRAN 1b 
 243      942C0000 
 244 2cf8 89330000 	2:  _ADR DROP 
 245 2cfc B1320000 	    _ADR RFROM 
 246 2d00 CF2F0000 	    _UNNEST 
 247              	
 248              	/***************************
 249              	 convert integer part of float 
 250              	    IPART ( d f b -- m d f b )
 251              	input:
 252              	    d   digit# to display 
 253              	    f   float to convert 
 254              	    b   string* buffer 
 255              	output:
 256              	    m   decimal exponent 
 257              	    d   digit# remaining to display  
 258              	    f   float fraction 
 259              	    b   updated str* 
 260              	****************************/
 261              	//    _HEADER IPART,5,"IPART"
 262              	IPART: 
 263 2d04 504700BF 	    _NEST 
 264 2d08 15330000 	    _ADR TOR // ( -- d f r: b )
 265 2d0c A9330000 	    _ADR DUPP 
 266              	// f<1.0 ? 
 267 2d10 EF310000 	    _DOLIT fone 
 267      0000803F 
 268 2d18 29250000 	    _ADR FLESS 
 269 2d1c 2F320000 	    _QBRAN 1f
 269      7C2D0000 
 270              	// if f<1.0 integer part is '0' 
 271              	// scale up fraction so first non zero digit is rigth of '.' 
 272 2d24 EF310000 	    _DOLIT -1 
 272      FFFFFFFF 
 273 2d2c 4D2B0000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 274 2d30 A1360000 	    _ADR NROT
 275 2d34 E9330000 	    _ADR OVER 
 276 2d38 992A0000 	    _ADR ROUND
 277 2d3c A9330000 	    _ADR DUPP 
 278 2d40 EF310000 	    _DOLIT fone 
ARM GAS  forth.s 			page 109


 278      0000803F 
 279 2d48 29250000 	    _ADR FLESS 
 280 2d4c 2F320000 	    _QBRAN 2f 
 280      882D0000 
 281              	// first digit '0' 
 282 2d54 EF310000 	    _DOLIT '0' 
 282      30000000 
 283 2d5c B1320000 	    _ADR RFROM 
 284 2d60 E12A0000 	    _ADR CSTOP 
 285 2d64 15330000 	    _ADR TOR 
 286              	// decrement d 
 287 2d68 B9330000 	    _ADR SWAP 
 288 2d6c 51350000 	    _ADR ONEM 
 289 2d70 B9330000 	    _ADR SWAP 
 290 2d74 B1320000 	    _ADR RFROM // r> ( -- m d f b )  
 291 2d78 CF2F0000 	    _UNNEST 
 292              	1: // f1>=1.0 integer part digits are converted 
 293              	// scale down until mantissa digits count == d
 294 2d7c E9330000 	     _ADR OVER 
 295 2d80 B92B0000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 296 2d84 A1360000 	    _ADR NROT   // m d f r: b 
 297 2d88 A9330000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 298 2d8c E5230000 	    _ADR TRUNC // ( -- m d f i r: b )
 299 2d90 A9330000 	    _ADR DUPP  // ( -- m d f i i r: b )
 300 2d94 15330000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 301 2d98 FD230000 	    _ADR STOF  // ( -- m d f f )
 302 2d9c 35240000 	    _ADR FSUBB // ( -- m d f r: b i )
 303 2da0 B1320000 	    _ADR RFROM // ( -- m d f i r: b )
 304 2da4 B1320000 	    _ADR RFROM  // ( -- m d f i b )  
 305 2da8 ED2A0000 	    _ADR ITOA // -- m d f b u )
 306 2dac 15330000 	    _ADR TOR  // >r ( -- m d f b r: u )
 307 2db0 8D360000 	    _ADR ROT
 308 2db4 B1320000 	    _ADR RFROM // r> ( -- m f b d u ) 
 309 2db8 F5340000 	    _ADR SUBB // ( -- m f b d- ) digits left to convert 
 310 2dbc A1360000 	    _ADR NROT // ( -- m d f b )
 311 2dc0 CF2F0000 	    _UNNEST
 312              	
 313              	
 314              	/***************************************
 315              	\  f>a ( d f b -- b u )
 316              	\ convert float to string
 317              	\ input: 
 318              	\   b  output buffer  
 319              	\   d n# of digits [1..7] to convert 
 320              	\   f float to convert 
 321              	\  output: 
 322              	\   b output buffer 
 323              	\   u length of string 
 324              	****************************************/
 325 2dc4 AC2B0000 	    _HEADER FTOA,3,"F>A" // (d f b -- b u )
 325      03463E41 
 326 2dcc 504700BF 	    _NEST 
 327 2dd0 E9330000 	    _ADR OVER  
 328 2dd4 C5250000 	    _ADR FEXP 
 329 2dd8 EF310000 	    _DOLIT 128 
 329      80000000 
 330 2de0 2D380000 	    _ADR EQUAL 
ARM GAS  forth.s 			page 110


 331 2de4 2F320000 	    _QBRAN 1f
 331      F42D0000 
 332 2dec 57320000 	    _BRAN nan 
 332      B02E0000 
 333 2df4 A9330000 	1:  _ADR DUPP // dup ( -- d f b b )
 334 2df8 15330000 	    _ADR TOR // >r   ( d f b r: b )  
 335              	    // store space first buffer char. 
 336 2dfc A1350000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 337 2e00 B9330000 	    _ADR SWAP 
 338 2e04 E12A0000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 339 2e08 E9330000 	    _ADR OVER 
 340 2e0c 2F320000 	    _QBRAN zdz // 0.0 
 340      602E0000 
 341              	    // check float sign 
 342 2e14 E9330000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 343 2e18 A5250000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 344 2e1c 2F320000 	    _QBRAN 1f  // 0branch 1f positive number 
 344      402E0000 
 345              	    // negative number add '-' to buffer 
 346 2e24 B9330000 	    _ADR SWAP 
 347 2e28 B5240000 	    _ADR FABS 
 348 2e2c B9330000 	    _ADR SWAP 
 349 2e30 EF310000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 349      2D000000 
 350 2e38 B9330000 	    _ADR SWAP 
 351 2e3c E12A0000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 352 2e40 052D0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  integer part 
 353 2e44 492C0000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b ) fraction part 
 354 2e48 152C0000 	    _ADR EPART    // ( m b+ -- b+ r: b  ) exponent part
 355 2e4c E5320000 	    _ADR RAT 
 356 2e50 F5340000 	    _ADR SUBB 
 357 2e54 B1320000 	    _ADR RFROM 
 358 2e58 B9330000 	    _ADR SWAP 
 359 2e5c CF2F0000 	    _UNNEST 
 360              	zdz: // 0.0 
 361 2e60 15330000 	     _ADR TOR 
 362 2e64 B5360000 	     _ADR DDROP
 363 2e68 B1320000 	     _ADR RFROM
 364 2e6c EF310000 	     _DOLIT '0'
 364      30000000 
 365 2e74 B9330000 	     _ADR SWAP 
 366 2e78 E12A0000 	     _ADR CSTOP 
 367 2e7c EF310000 	     _DOLIT '.'
 367      2E000000 
 368 2e84 B9330000 	     _ADR SWAP 
 369 2e88 E12A0000 	     _ADR CSTOP 
 370 2e8c EF310000 	     _DOLIT '0'
 370      30000000 
 371 2e94 B9330000 	     _ADR SWAP 
 372 2e98 E12A0000 	     _ADR CSTOP 
 373 2e9c 89330000 	     _ADR DROP  
 374 2ea0 B1320000 	     _ADR RFROM 
 375 2ea4 EF310000 	     _DOLIT 4 
 375      04000000 
 376 2eac CF2F0000 	     _UNNEST  
 377              	nan: // not a number or infinity
 378 2eb0 15330000 	    _ADR TOR   // ( d f r: b )
ARM GAS  forth.s 			page 111


 379 2eb4 B9330000 	    _ADR SWAP  // f d  
 380 2eb8 89330000 	    _ADR DROP  // f 
 381 2ebc A1350000 	    _ADR BLANK  // f c 
 382 2ec0 E5320000 	    _ADR RAT    // f c b 
 383 2ec4 E12A0000 	    _ADR CSTOP  // f b+ 
 384 2ec8 B9330000 	    _ADR SWAP   // b+ f 
 385 2ecc E9250000 	    _ADR FMANT  // b+ mant
 386 2ed0 EF310000 	    _DOLIT 0x7FFFFF 
 386      FFFF7F00 
 387 2ed8 65340000 	    _ADR ANDD   
 388 2edc 2F320000 	    _QBRAN infinity 
 388      1C2F0000 
 389 2ee4 EF310000 	    _DOLIT 'N'  // b+ c 
 389      4E000000 
 390 2eec B9330000 	    _ADR SWAP   // c b+
 391 2ef0 E12A0000 	    _ADR CSTOP  // b+
 392 2ef4 EF310000 	    _DOLIT 'a'  // b+ c
 392      61000000 
 393 2efc B9330000 	    _ADR SWAP   // c b+ 
 394 2f00 E12A0000 	    _ADR CSTOP  // b+
 395 2f04 EF310000 	    _DOLIT 'N'  // b+ c 
 395      4E000000 
 396 2f0c B9330000 	    _ADR SWAP   // c b+ 
 397 2f10 E12A0000 	    _ADR CSTOP  // b+
 398 2f14 57320000 	    _BRAN 1f 
 398      4C2F0000 
 399              	infinity:
 400 2f1c EF310000 	    _DOLIT 'I'
 400      49000000 
 401 2f24 B9330000 	    _ADR SWAP 
 402 2f28 E12A0000 	    _ADR CSTOP 
 403 2f2c EF310000 	    _DOLIT 'N'
 403      4E000000 
 404 2f34 B9330000 	    _ADR SWAP 
 405 2f38 E12A0000 	    _ADR CSTOP 
 406 2f3c EF310000 	    _DOLIT 'F'
 406      46000000 
 407 2f44 B9330000 	    _ADR SWAP 
 408 2f48 E12A0000 	    _ADR CSTOP 
 409              	1:
 410 2f4c 89330000 	    _ADR DROP 
 411 2f50 B1320000 	    _ADR RFROM 
 412 2f54 EF310000 	    _DOLIT 4 
 412      04000000 
 413 2f5c CF2F0000 	    _UNNEST 
 414              	
 415              	
 416              	
 417              	
 418              	/***********************************
 419              	    F. (  f -- )
 420              	    print float32 number  
 421              	    f -> float to print 
 422              	***********************************/
 423 2f60 C82D0000 	    _HEADER FDOT,2,"F."
 423      02462E00 
 424 2f68 504700BF 	    _NEST 
ARM GAS  forth.s 			page 112


 425 2f6c EF310000 	    _DOLIT 7  // maximum digit to print 
 425      07000000 
 426 2f74 B9330000 	    _ADR SWAP // ( -- d f )
 427              	    // allocate convertion buffer 
 428 2f78 F53F0000 	    _ADR HERE
 429 2f7c 15330000 	    _ADR TOR  
 430 2f80 EF310000 	    _DOLIT 16 
 430      10000000 
 431 2f88 F5540000 	    _ADR ALLOT 
 432              	    // fill it with zero's 
 433 2f8c E5320000 	    _ADR RAT 
 434 2f90 EF310000 	    _DOLIT 16 
 434      10000000 
 435 2f98 EF310000 	    _DOLIT 0 
 435      00000000 
 436 2fa0 2D410000 	    _ADR FILL 
 437 2fa4 B1320000 	    _ADR RFROM // ( d f b )
 438 2fa8 CD2D0000 	    _ADR FTOA 
 439 2fac 09470000 	    _ADR TYPEE 
 440              	    // free buffer 
 441 2fb0 EF310000 	    _DOLIT -16 
 441      F0FFFFFF 
 442 2fb8 F5540000 	    _ADR ALLOT
 443 2fbc CF2F0000 	    _UNNEST
 444              	
 445              	
 446              	
 447              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
ARM GAS  forth.s 			page 113


  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2fc0 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 2fc4 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
ARM GAS  forth.s 			page 114


  87              	INEXT: 
  88 2fc8 5CF8045B 		LDR WP,[IP],#4 
  89 2fcc 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2fce 58F804CB 		LDMFD RSP!,{IP}
  92 2fd2 5CF8045B 		LDR WP,[IP],#4 
  93 2fd6 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 2fd8 04F14C01 		add T1,UP,#USER_CTOP // pointer HERE 
 106 2fdc 0968     		ldr T1,[T1]     // address in here   
 107 2fde 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
 108 2fe2 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 2fe6 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 2fea 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
 111 2fee 04F14C02 		add T2,UP,#USER_CTOP 
 112 2ff2 1160     		str T1,[T2]  // save update HERE value 
 113 2ff4 E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 2ff6 47F8046D 		_PUSH 
 119 2ffa 04F11406 		ADD TOS,UP,#STDIN 
 120 2ffe E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
 124              	TSTDOUT:
 125 3000 47F8046D 		_PUSH 
 126 3004 04F11806 		ADD TOS,UP,#STDOUT
 127 3008 DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 300a 642F0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
 134 3014 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 301c 47F8046D 	    _PUSH 
 136 3020 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 3022 81EA0101 	    eor T1,T1 
 138 3026 8162     	    str T1,[T0,#SCB_CFSR]
 139 3028 CEE7     	    _NEXT 
 140              	
ARM GAS  forth.s 			page 115


 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 302a 0E300000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 3034 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 146      CEF20000 
 147 303c 47F8046D 		_PUSH 
 148 3040 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 3042 81EA0101 	    eor T1,T1 
 150 3046 8163     	    str T1,[T0,#SCB_BFAR]
 151 3048 BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
 157 304a 2E300000 		_HEADER QKEY,4,"KEY?" 
 157      044B4559 
 157      3F00
 158 3054 504700BF 		_NEST 
 159 3058 F72F0000 		_ADR TSTDIN // ' STDIN 
 160 305c 81400000 		_ADR ATEXE
 161 3060 CF2F0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 3064 4E300000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 306c 504700BF 		_NEST
 169              	KEY1:
 170 3070 D51C0000 		_ADR CAPS_LED 
 171 3074 55300000 		_ADR	QKEY 
 172 3078 2F320000 		_QBRAN	KEY1
 172      70300000 
 173              	/*  add this code to filter out control characters 	
 174              		_ADR    DUPP 
 175              		_DOLIT  13 
 176              		_ADR    EQUAL 
 177              		_TBRAN  KEY2 
 178              		_ADR    DUPP
 179              		_DOLIT  32 
 180              		_ADR    LESS 
 181              		_QBRAN  KEY2 
 182              		_ADR    DROP 
 183              		_BRAN   KEY1 
 184              	*/ 
 185              	KEY2: 	
 186 3080 CF2F0000 		_UNNEST
 187              	
 188              	/**********************************************
 189              		EMIT ( c -- )
 190              		transmit a character to console 
ARM GAS  forth.s 			page 116


 191              	**********************************************/
 192 3084 68300000 		_HEADER EMIT,4,"EMIT"
 192      04454D49 
 192      540000BF 
 193 3090 504700BF 		_NEST 
 194 3094 01300000 		_ADR TSTDOUT 
 195 3098 81400000 		_ADR ATEXE 
 196 309c CF2F0000 		_UNNEST 
 197              	
 198              	
 199              	/************************************************
 200              	 GET-IP ( n - c )
 201              	 return interrupt priority of IRQn 
 202              	************************************************/
 203              	/*
 204              		_HEADER GETIP,6,"GET-IP" 
 205              		_NEST 
 206              		_ADR DUPP 
 207              		_ADR ZLESS
 208              		_QBRAN 1f 
 209              		_DOLIT 15
 210              		_ADR ANDD
 211              		_DOLIT 4
 212              		_ADR SUBB  
 213              		_DOLIT 0xE000ED18 
 214              		_BRAN 2f 
 215              	1:	_DOLIT 0xE000E400 
 216              	2:	_ADR PLUS 
 217              		_ADR CAT
 218              		_DOLIT 4 
 219              		_ADR RSHIFT 
 220              		_UNNEST 
 221              	*/
 222              	
 223              	/***********************************************
 224              	 RANDOM ( n+ -- {0..n+ - 1} )
 225              	 return pseudo random number 
 226              	 REF: https://en.wikipedia.org/wiki/Xorshift
 227              	************************************************/
 228 30a0 88300000 		_HEADER RAND,6,"RANDOM"
 228      0652414E 
 228      444F4D00 
 229 30ac 504700BF 		_NEST
 230 30b0 9D370000 		_ADR ABSS   
 231 30b4 A9390000 		_ADR SEED 
 232 30b8 85320000 		_ADR AT 
 233 30bc A9330000 		_ADR DUPP 
 234 30c0 EF310000 		_DOLIT 13
 234      0D000000 
 235 30c8 D5340000 		_ADR LSHIFT 
 236 30cc 8D340000 		_ADR XORR  
 237 30d0 A9330000 		_ADR DUPP 
 238 30d4 EF310000 		_DOLIT 17 
 238      11000000 
 239 30dc BD340000 		_ADR RSHIFT 
 240 30e0 8D340000 		_ADR XORR 
 241 30e4 A9330000 		_ADR DUPP
ARM GAS  forth.s 			page 117


 242 30e8 EF310000 		_DOLIT 5 
 242      05000000 
 243 30f0 D5340000 		_ADR LSHIFT 
 244 30f4 8D340000 		_ADR XORR  
 245 30f8 A9330000 		_ADR DUPP 
 246 30fc A9390000 		_ADR SEED 
 247 3100 71320000 		_ADR STORE 
 248 3104 EF310000 		_DOLIT 0x7FFFFFFF
 248      FFFFFF7F 
 249 310c 65340000 		_ADR ANDD 
 250 3110 B9330000 		_ADR SWAP 
 251 3114 7D3E0000 		_ADR MODD 
 252 3118 CF2F0000 		_UNNEST 
 253              	
 254              	
 255              	/****************************************
 256              	 MS ( u -- ) 
 257              	 suspend execution for u milliseconds
 258              	****************************************/
 259 311c A4300000 		_HEADER PAUSE,2,"MS"
 259      024D5300 
 260 3124 504700BF 		_NEST 
 261 3128 D5390000 		_ADR TIMER 
 262 312c 71320000 		_ADR STORE 
 263              	PAUSE_LOOP:
 264 3130 D5390000 		_ADR TIMER 
 265 3134 85320000 		_ADR AT 
 266 3138 2F320000 		_QBRAN PAUSE_EXIT 
 266      48310000 
 267 3140 57320000 		_BRAN PAUSE_LOOP 
 267      30310000 
 268              	PAUSE_EXIT: 		
 269 3148 CF2F0000 		_UNNEST 
 270              	
 271              	/******************************************
 272              	  ULED ( T|F -- )
 273              	  control user LED, -1 ON, 0 OFF 
 274              	*******************************************/
 275 314c 20310000 		_HEADER ULED,4,"ULED"
 275      04554C45 
 275      440000BF 
 276 3158 4FF40050 		mov T0,#(1<<LED_PIN)
 277 315c 4FF40061 		_MOV32 T1,LED_GPIO 
 277      C4F20201 
 278 3164 3600     		movs TOS,TOS 
 279 3166 57F8046B 		_POP
 280 316a 03D0     		beq ULED_OFF
 281 316c 4FEA0040 		lsl T0,#16 
 282 3170 8861     		str T0,[T1,#GPIO_BSRR]
 283 3172 29E7     		_NEXT 
 284              	ULED_OFF:
 285 3174 8861     		str T0,[T1,#GPIO_BSRR]
 286 3176 27E7     		_NEXT    
 287              	
 288              	/**************************
 289              	   JOYSTK  ( -- u )
 290              	   read joystick port 
ARM GAS  forth.s 			page 118


 291              	**************************/
 292 3178 50310000 		_HEADER JOYSTK,6,"JOYSTK"
 292      064A4F59 
 292      53544B00 
 293 3184 504700BF 		_NEST 
 294 3188 EF310000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 294      10000240 
 295 3190 85320000 		_ADR AT 
 296 3194 EF310000 		_DOLIT 0x100f 
 296      0F100000 
 297 319c 65340000 		_ADR ANDD 
 298 31a0 CF2F0000 		_UNNEST 
 299              	
 300              	/****************************
 301              		BEEP ( msec freq -- )
 302              	input:
 303              		freq  frequence hertz 
 304              		msec  durration in msec 
 305              	*****************************/
 306 31a4 7C310000 		_HEADER BEEP,4,"BEEP"
 306      04424545 
 306      500000BF 
 307 31b0 48F68050 		_MOV32 r0,6000000 // Fclk 
 307      C0F25B00 
 308 31b8 B0FBF6F0 		udiv r0,r0,TOS
 309 31bc 57F8046B 		_POP  
 310 31c0 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 310      C4F20001 
 311 31c8 C862     		str r0,[r1,#TIM_ARR]
 312 31ca 4FEA5000 		lsr r0,#1
 313 31ce 4863     		str r0,[r1,#TIM_CCR1]
 314 31d0 4FF00100 		mov r0,#1 
 315 31d4 0862     		str r0,[r1,#TIM_CCER]
 316 31d6 0860     		str r0,[r1,#TIM_CR1]
 317 31d8 C868     		ldr r0,[r1,#TIM_DIER]
 318 31da C4F8B060 		str TOS,[UP,#BEEP_DTMR]
 319 31de 57F8046B 		_POP
 320 31e2 F1E6     		_NEXT 
 321              	
 322              	
 323              	/***************
 324              	//  The kernel
 325              	***************/
 326              	
 327              	/********************
 328              	    NOP	( -- )
 329              	 	do nothing.
 330              	*********************/
 331 31e4 A8310000 		_HEADER NOP,3,"NOP"
 331      034E4F50 
 332 31ec ECE6     		_NEXT
 333              		  
 334              	 
 335              	/********************
 336              	    doLIT	( -- w )
 337              	 	Push an inline literal.
 338              	hidden word used by compiler 
ARM GAS  forth.s 			page 119


 339              	*********************/
 340              	DOLIT:
 341 31ee 47F8046D 		_PUSH				//  store TOS on data stack
 342 31f2 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 343 31f6 E7E6     		_NEXT 
 344              	
 345              	/*******************************
 346              	    EXECUTE	( ca -- )
 347              	 	Execute the word at ca.
 348              	*******************************/
 349 31f8 E8310000 		_HEADER EXECU,7,"EXECUTE"
 349      07455845 
 349      43555445 
 350 3204 46F00105 		ORR	WP,TOS,#1 
 351 3208 57F8046B 		_POP
 352 320c 2847     		BX WP 
 353 320e DBE6     		_NEXT 
 354              	
 355              	/**********************************************************
 356              	    donext	( -- ) counter on R:
 357              	 	Run time code for the single index loop.
 358              	 	: next ( -- ) \ hilevel model
 359              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 360              	hidden word used by compiler 	  
 361              	*********************************************************/
 362              	DONXT:
 363 3210 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 364 3214 22B9     		CBNZ T2,NEXT1 
 365              		/* loop done */
 366 3216 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 367 321a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 368 321e D3E6     		_NEXT
 369              	NEXT1:
 370              		/* decrement loop counter */
 371 3220 A2F10102 		SUB	T2,T2,#1
 372 3224 C8F80020 		STR	T2,[RSP]
 373 3228 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 374 322c CCE6     		_NEXT 
 375              	
 376              	/**************************************
 377              	    ?branch	( f -- )
 378              	 	Branch if flag is zero.
 379              	hiddend word used by compiler
 380              	**************************************/
 381              	QBRAN:
 382 322e 3600     		MOVS	TOS,TOS
 383 3230 57F8046B 		_POP
 384 3234 02D1     		BNE	QBRAN1
 385 3236 DCF800C0 		LDR	IP,[IP]
 386 323a C5E6     		_NEXT
 387              	QBRAN1:
 388 323c 0CF1040C 	 	ADD	IP,IP,#4
 389 3240 C2E6     		_NEXT
 390              	
 391              	/***********************************
 392              		tbranch ( f -- )
 393              	    branch if flag is true 
ARM GAS  forth.s 			page 120


 394              	***********************************/
 395              	TBRAN:
 396 3242 3600     		MOVS TOS,TOS 
 397 3244 57F8046B 		_POP 
 398 3248 02D0     		BEQ 1f 
 399 324a DCF800C0 		LDR IP,[IP]
 400 324e BBE6     		_NEXT 
 401 3250 0CF1040C 	1:  ADD IP,IP,#4
 402 3254 B8E6     		_NEXT 
 403              	
 404              	
 405              	/***********************************
 406              	    branch	( -- )
 407              	 	Branch to an inline address.
 408              	hidden word used by compiler 
 409              	***********************************/
 410              	BRAN:
 411 3256 DCF800C0 		LDR	IP,[IP]
 412 325a B5E6     		_NEXT
 413              	
 414              	/******************************************
 415              	    EXIT	(  -- )
 416              	 	Exit the currently executing command.
 417              	******************************************/
 418 325c FC310000 		_HEADER EXIT,4,"EXIT"
 418      04455849 
 418      540000BF 
 419 3268 B1E6     		b UNNEST 
 420              	
 421              	
 422              	/***********************************
 423              	    !	   ( w a -- )
 424              	 	Pop the data stack to memory.
 425              	************************************/
 426 326a 60320000 		_HEADER STORE,1,"!"
 426      0121
 427 3270 57F8045B 		LDR	WP,[DSP],#4
 428 3274 3560     		STR	WP,[TOS]
 429 3276 57F8046B 		_POP
 430 327a A5E6     		_NEXT 
 431              	
 432              	/********************************************
 433              	    @	   ( a -- w )
 434              	 	Push memory location to the data stack.
 435              	*********************************************/
 436 327c 6E320000 		_HEADER AT,1,"@"
 436      014000BF 
 437 3284 3668     		LDR	TOS,[TOS]
 438 3286 9FE6     		_NEXT 
 439              	
 440              	/*******************************************
 441              	    C!	  ( c b -- )
 442              	 	Pop the data stack to byte memory.
 443              	*******************************************/
 444 3288 80320000 		_HEADER CSTOR,2,"C!"
 444      02432100 
 445 3290 57F8045B 		LDR	WP,[DSP],#4
ARM GAS  forth.s 			page 121


 446 3294 3570     		STRB WP,[TOS]
 447 3296 57F8046B 		_POP
 448 329a 95E6     		_NEXT
 449              	
 450              	/*********************************************
 451              	    C@	  ( b -- c )
 452              	 	Push byte memory location to the data stack.
 453              	**********************************************/
 454 329c 8C320000 		_HEADER CAT,2,"C@"
 454      02434000 
 455 32a4 3678     		LDRB	TOS,[TOS]
 456 32a6 8FE6     		_NEXT 
 457              	
 458              	
 459              	/*********************************************
 460              	    R>	  ( -- w  R: w -- ) 
 461              	 	push from rstack.
 462              	**********************************************/
 463 32a8 A0320000 		_HEADER RFROM,2,"R>"
 463      02523E00 
 464 32b0 47F8046D 		_PUSH
 465 32b4 58F8046B 		LDR	TOS,[RSP],#4
 466 32b8 86E6     		_NEXT 
 467              	
 468              	/***********************************************
 469              		2R> (  -- x1 x2 ) R: x1 x2 --  
 470              	    push a double from rstack 
 471              	***********************************************/
 472 32ba AC320000 		_HEADER DRFROM,3,"2R>"
 472      0332523E 
 472      00BF
 473 32c4 47F8046D 		_PUSH 
 474 32c8 D8F80460 		LDR TOS,[RSP,#CELLL] 
 475 32cc 47F8046D 		_PUSH 
 476 32d0 D8F80060 		LDR TOS,[RSP]
 477 32d4 08F10808 		ADD RSP,#2*CELLL 
 478 32d8 76E6     		_NEXT 
 479              	
 480              	/************************************************
 481              	    R@	  ( -- w )
 482              	 	Copy top of return stack to the data stack.
 483              	************************************************/
 484 32da BE320000 		_HEADER RAT,2,"R@"
 484      02524000 
 484      00BF
 485 32e4 47F8046D 		_PUSH
 486 32e8 D8F80060 		LDR	TOS,[RSP]
 487 32ec 6CE6     		_NEXT 
 488              	
 489              	/***********************************************
 490              		2R@ ( -- x2 x1 ) ( R: x1 x2 -- ) 
 491              		Copy 2 element of return stack to data stack
 492              	***********************************************/
 493 32ee DE320000 		_HEADER DRAT,3,"2R@"
 493      03325240 
 493      00BF
 494 32f8 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 122


 495 32fc D8F80460 		LDR TOS,[RSP,#CELLL] 
 496 3300 47F8046D 		_PUSH 
 497 3304 D8F80060 		LDR TOS,[RSP] 
 498 3308 5EE6     		_NEXT 
 499              	
 500              	
 501              	/***********************************************
 502              	    >R	  ( w -- ) R: -- w 
 503              	 	pop to rstack.
 504              	************************************************/
 505 330a F2320000 		_HEADER TOR,2,">R"
 505      023E5200 
 505      00BF
 506 3314 48F8046D 		STR	TOS,[RSP,#-CELLL]!
 507 3318 57F8046B 		_POP
 508 331c 54E6     		_NEXT
 509              	
 510              	/*********************************************
 511              		2>R ( x1 x2 -- ) R: -- x1 x2  
 512              		pop a double to rstack 
 513              	*********************************************/
 514 331e 0E330000 		_HEADER DTOR,3,"2>R"
 514      03323E52 
 514      00BF
 515 3328 57F8040B 		LDR T0, [DSP],#CELLL
 516 332c 48F8040D 		STR T0,[RSP,#-CELLL]!
 517 3330 48F8046D 	 	STR TOS,[RSP,#-CELLL]!
 518 3334 57F8046B 		_POP  
 519 3338 46E6     		_NEXT 	
 520              	
 521              	
 522              	/*******************************
 523              	//	RP! ( u -- )
 524              	// initialize RPP with u 
 525              	*******************************/
 526 333a 22330000 		_HEADER RPSTOR,3,"RP!"
 526      03525021 
 526      00BF
 527 3344 B046     		MOV RSP,TOS 
 528 3346 57F8046B 		_POP  
 529 334a 3DE6     		_NEXT 
 530              	
 531              	/********************************
 532              		SP! ( u -- )
 533              	 initialize SPP with u 
 534              	********************************/
 535 334c 3E330000 		_HEADER SPSTOR,3,"SP!"
 535      03535021 
 536 3354 3746     		MOV DSP,TOS 
 537 3356 86EA0606 		EOR TOS,TOS,TOS 
 538 335a 35E6     		_NEXT 
 539              	
 540              	/**************************************
 541              	    SP@	 ( -- a )
 542              	 	Push the current data stack pointer.
 543              	***************************************/
 544 335c 50330000 		_HEADER SPAT,3,"SP@"
ARM GAS  forth.s 			page 123


 544      03535040 
 545 3364 47F8046D 		_PUSH
 546 3368 3E46     		MOV	TOS,DSP
 547 336a 2DE6     		_NEXT
 548              	
 549              	/**************************************
 550              	   RP@ ( -- a )
 551              	   push current rstack pointer 
 552              	**************************************/
 553 336c 60330000 		_HEADER RPAT,3,"RP@"
 553      03525040 
 554 3374 47F8046D 		_PUSH 
 555 3378 4646     		MOV TOS,RSP 
 556 337a 25E6     		_NEXT 
 557              	
 558              	/********************************
 559              	    DROP	( w -- )
 560              	 	Discard top stack item.
 561              	********************************/
 562 337c 70330000 		_HEADER DROP,4,"DROP"
 562      0444524F 
 562      500000BF 
 563 3388 57F8046B 		_POP
 564 338c 1CE6     		_NEXT 
 565              	
 566              	/*********************************
 567              	CORE EXTENSION 
 568              		NIP ( x1 x2 -- x2 )
 569              		throw next element 
 570              	*********************************/
 571 338e 80330000 		_HEADER NIP,3,"NIP"
 571      034E4950 
 571      00BF
 572 3398 07F10407 		ADD DSP,#CELLL 
 573 339c 14E6     		_NEXT 
 574              	
 575              	/*********************************
 576              	    DUP	 ( w -- w w )
 577              	 	Duplicate the top stack item.
 578              	*********************************/
 579 339e 92330000 		_HEADER DUPP,3,"DUP"
 579      03445550 
 579      00BF
 580 33a8 47F8046D 		_PUSH
 581 33ac 0CE6     		_NEXT 
 582              	
 583              	/**********************************
 584              	    SWAP	( w1 w2 -- w2 w1 )
 585              	 	Exchange top two stack items.
 586              	**********************************/
 587 33ae A2330000 		_HEADER SWAP,4,"SWAP"
 587      04535741 
 587      5000
 588 33b8 3D68     		LDR	WP,[DSP]
 589 33ba 3E60     		STR	TOS,[DSP]
 590 33bc 2E46     		MOV	TOS,WP
 591 33be 03E6     		_NEXT 
ARM GAS  forth.s 			page 124


 592              	
 593              	/***********************************
 594              		2SWAP ( d2 d1 -- d1 d2 )
 595              		swap double integer 
 596              	***************************************/
 597 33c0 B2330000 		_HEADER DSWAP,5,"2SWAP"
 597      05325357 
 597      415000BF 
 598 33cc 3046     		mov T0,TOS 
 599 33ce 3968     		ldr T1,[DSP]
 600 33d0 7E68     		ldr TOS,[DSP,#4]
 601 33d2 BD68     		ldr WP,[DSP,#8]
 602 33d4 3D60     		str WP,[DSP]
 603 33d6 7860     		str T0,[DSP,#4]
 604 33d8 B960     		str T1,[DSP,#8]
 605 33da F5E5     		_NEXT 
 606              	
 607              	
 608              	/***********************************
 609              	    OVER	( w1 w2 -- w1 w2 w1 )
 610              	 	Copy second stack item to top.
 611              	***********************************/
 612 33dc C4330000 		_HEADER OVER,4,"OVER"
 612      044F5645 
 612      520000BF 
 613 33e8 47F8046D 		_PUSH
 614 33ec 7E68     		LDR	TOS,[DSP,#4]
 615 33ee EBE5     		_NEXT 
 616              	
 617              	/***********************************
 618              		2OVER ( d2 d1 -- d2 d1 d2 )
 619              		copy a double integer to TOS 
 620              	**********************************************/
 621 33f0 E0330000 		_HEADER DOVER,5,"2OVER"
 621      05324F56 
 621      455200BF 
 622 33fc 7868     		ldr T0,[DSP,#4]
 623 33fe BD68     		ldr WP,[DSP,#8]
 624 3400 47F8046D 		_PUSH 
 625 3404 2E46     		mov TOS,WP 
 626 3406 47F8046D 		_PUSH
 627 340a 0646     		mov TOS,T0 
 628 340c DCE5     		_NEXT 
 629              	
 630              	
 631              	/***********************************
 632              	    0<	  ( n -- t )
 633              	 	Return true if n is negative.
 634              	***********************************/
 635 340e F4330000 		_HEADER ZLESS,2,"0<"
 635      02303C00 
 635      00BF
 636 3418 4FEAE676 		ASR TOS,#31
 637 341c D4E5     		_NEXT 
 638              	
 639              	/**********************************
 640              		0> ( n -- flag )
ARM GAS  forth.s 			page 125


 641              		true if n > 0 
 642              	**********************************/
 643 341e 12340000 		_HEADER ZGREAT,2,"0>"
 643      02303E00 
 643      00BF
 644 3428 1EB1     		CBZ TOS, 1f
 645 342a 4FEAE676 		ASR TOS,#31 
 646 342e 6FEA0606 		MVN TOS,TOS 
 647 3432 C9E5     	1:	_NEXT 
 648              	
 649              	
 650              	/**********************************
 651              		0<> ( n -- flag )
 652              	    true if n <> 0
 653              	*********************************/
 654 3434 22340000 		_HEADER ZNEQU,3,"0<>"
 654      03303C3E 
 655 343c 0EB1     		CBZ TOS,1f
 656 343e 4FF0FF36 		MOV TOS,#-1
 657 3442 C1E5     	1:	_NEXT
 658              	
 659              	
 660              	/*********************************
 661              		<>  ( x1 x2 -- flag )
 662              		true fi x1 <> x2 
 663              	********************************/
 664 3444 38340000 		_HEADER NEQU,2,"<>"
 664      023C3E00 
 665 344c 57F8040B 		LDR T0,[DSP],#CELLL 
 666 3450 4640     		EORS TOS,T0 
 667 3452 01D0     		BEQ 1f
 668 3454 4FF0FF36 		MOV TOS,#-1
 669 3458 B6E5     	1:  _NEXT 
 670              	
 671              	
 672              	/********************************
 673              	    AND	 ( w w -- w )
 674              	 	Bitwise AND.
 675              	********************************/
 676 345a 48340000 		_HEADER ANDD,3,"AND"
 676      03414E44 
 676      00BF
 677 3464 57F8045B 		LDR	WP,[DSP],#4
 678 3468 06EA0506 		AND	TOS,TOS,WP
 679 346c ACE5     		_NEXT 
 680              	
 681              	/******************************
 682              	    OR	  ( w w -- w )
 683              	 	Bitwise inclusive OR.
 684              	******************************/
 685 346e 5E340000 		_HEADER ORR,2,"OR"
 685      024F5200 
 685      00BF
 686 3478 57F8045B 		LDR	WP,[DSP],#4
 687 347c 46EA0506 		ORR	TOS,TOS,WP
 688 3480 A2E5     		_NEXT 
 689              	
ARM GAS  forth.s 			page 126


 690              	/*****************************
 691              	    XOR	 ( w w -- w )
 692              	 	Bitwise exclusive OR.
 693              	*****************************/
 694 3482 72340000 		_HEADER XORR,3,"XOR"
 694      03584F52 
 694      00BF
 695 348c 57F8045B 		LDR	WP,[DSP],#4
 696 3490 86EA0506 		EOR	TOS,TOS,WP
 697 3494 98E5     		_NEXT 
 698              	
 699              	/**************************************************
 700              	    UM+	 ( w w -- w cy )
 701              	 	Add two numbers, return the sum and carry flag.
 702              	***************************************************/
 703 3496 86340000 		_HEADER UPLUS,3,"UM+"
 703      03554D2B 
 703      00BF
 704 34a0 3D68     		LDR	WP,[DSP]
 705 34a2 AD19     		ADDS	WP,WP,TOS
 706 34a4 4FF00006 		MOV	TOS,#0
 707 34a8 46F10006 		ADC	TOS,TOS,#0
 708 34ac 3D60     		STR	WP,[DSP]
 709 34ae 8BE5     		_NEXT 
 710              	
 711              	/*********************************
 712              	    RSHIFT	 ( w # -- w )
 713              	 	logical Right shift # bits.
 714              	**********************************/
 715 34b0 9A340000 		_HEADER RSHIFT,6,"RSHIFT"
 715      06525348 
 715      49465400 
 716 34bc 57F8045B 		LDR	WP,[DSP],#4
 717 34c0 25FA06F6 		MOV	TOS,WP,LSR TOS
 718 34c4 80E5     		_NEXT 
 719              	
 720              	/****************************
 721              	    LSHIFT	 ( w # -- w )
 722              	 	left shift # bits.
 723              	****************************/
 724 34c6 B4340000 		_HEADER LSHIFT,6,"LSHIFT"
 724      064C5348 
 724      49465400 
 724      00BF
 725 34d4 57F8045B 		LDR	WP,[DSP],#4
 726 34d8 05FA06F6 		MOV	TOS,WP,LSL TOS
 727 34dc 74E5     		_NEXT
 728              	
 729              	/*************************
 730              	    +	 ( w w -- w )
 731              	 	Add.
 732              	*************************/
 733 34de CA340000 		_HEADER PLUS,1,"+"
 733      012B
 734 34e4 57F8045B 		LDR	WP,[DSP],#4
 735 34e8 2E44     		ADD	TOS,TOS,WP
 736 34ea 6DE5     		_NEXT 
ARM GAS  forth.s 			page 127


 737              	
 738              	/************************
 739              	    -	 ( w w -- w )
 740              	 	Subtract.
 741              	************************/
 742 34ec E2340000 		_HEADER SUBB,1,"-"
 742      012D00BF 
 743 34f4 57F8045B 		LDR	WP,[DSP],#4
 744 34f8 C6EB0506 		RSB	TOS,TOS,WP
 745 34fc 64E5     		_NEXT 
 746              	
 747              	/************************
 748              	    *	 ( w w -- w )
 749              	 	Multiply.
 750              	***********************/
 751 34fe F0340000 		_HEADER STAR,1,"*"
 751      012A
 752 3504 57F8045B 		LDR	WP,[DSP],#4
 753 3508 05FB06F6 		MUL	TOS,WP,TOS
 754 350c 5CE5     		_NEXT 
 755              	
 756              	/***************************
 757              	    UM*	 ( w w -- ud )
 758              	 	Unsigned multiply.
 759              	****************************/
 760 350e 02350000 		_HEADER UMSTA,3,"UM*"
 760      03554D2A 
 760      00BF
 761 3518 3D68     		LDR	WP,[DSP]
 762 351a A6FB0523 		UMULL	T2,T3,TOS,WP
 763 351e 3A60     		STR	T2,[DSP]
 764 3520 1E46     		MOV	TOS,T3
 765 3522 51E5     		_NEXT 
 766              	
 767              	/***************************
 768              	    M*	 ( w w -- d )
 769              	 	signed multiply.
 770              		hold double result
 771              	***************************/
 772 3524 12350000 		_HEADER MSTAR,2,"M*"
 772      024D2A00 
 773 352c 3D68     		LDR	WP,[DSP]
 774 352e 86FB0523 		SMULL	T2,T3,TOS,WP
 775 3532 3A60     		STR	T2,[DSP]
 776 3534 1E46     		MOV	TOS,T3
 777 3536 47E5     		_NEXT 
 778              	
 779              	/***************************
 780              	    1+	 ( w -- w+1 )
 781              	 	Add 1.
 782              	***************************/
 783 3538 28350000 		_HEADER ONEP,2,"1+"
 783      02312B00 
 784 3540 06F10106 		ADD	TOS,TOS,#1
 785 3544 40E5     		_NEXT 
 786              	
 787              	/***************************
ARM GAS  forth.s 			page 128


 788              	    1-	 ( w -- w-1 )
 789              	 	Subtract 1.
 790              	***************************/
 791 3546 3C350000 		_HEADER ONEM,2,"1-"
 791      02312D00 
 791      00BF
 792 3550 A6F10106 		SUB	TOS,TOS,#1
 793 3554 38E5     		_NEXT 
 794              	
 795              	/***************************
 796              	    2+	 ( w -- w+2 )
 797              	 	Add 2.
 798              	**************************/
 799 3556 4A350000 		_HEADER TWOP,2,"2+"
 799      02322B00 
 799      00BF
 800 3560 06F10206 		ADD	TOS,TOS,#2
 801 3564 30E5     		_NEXT
 802              	
 803              	/**************************
 804              	    2-	 ( w -- w-2 )
 805              	 	Subtract 2.
 806              	**************************/
 807 3566 5A350000 		_HEADER TWOM,2,"2-"
 807      02322D00 
 807      00BF
 808 3570 A6F10206 		SUB	TOS,TOS,#2
 809 3574 28E5     		_NEXT
 810              	
 811              	/***************************
 812              	    CELL+	( w -- w+4 )
 813              	 	Add CELLL.
 814              	***************************/
 815 3576 6A350000 		_HEADER CELLP,5,"CELL+"
 815      0543454C 
 815      4C2B
 816 3580 06F10406 		ADD	TOS,TOS,#CELLL
 817 3584 20E5     		_NEXT
 818              	
 819              	/***************************
 820              	    CELL-	( w -- w-4 )
 821              	 	Subtract CELLL.
 822              	**************************/
 823 3586 7A350000 		_HEADER CELLM,5,"CELL-"
 823      0543454C 
 823      4C2D
 824 3590 A6F10406 		SUB	TOS,TOS,#CELLL
 825 3594 18E5     		_NEXT
 826              	
 827              	/**************************** 
 828              	    BL	( -- 32 )
 829              	 	Blank (ASCII space).
 830              	*****************************/
 831 3596 8A350000 		_HEADER BLANK,2,"BL"
 831      02424C00 
 831      00BF
 832 35a0 47F8046D 		_PUSH
ARM GAS  forth.s 			page 129


 833 35a4 4FF02006 		MOV	TOS,#32
 834 35a8 0EE5     		_NEXT 
 835              	
 836              	/**************************
 837              	    CELLS	( w -- w*4 )
 838              	 	Multiply CELLL 
 839              	***************************/
 840 35aa 9A350000 		_HEADER CELLS,5,"CELLS"
 840      0543454C 
 840      4C53
 841 35b4 4FEA8606 		LSL TOS,#2
 842 35b8 06E5     		_NEXT
 843              	
 844              	/***************************
 845              	    CELL/	( w -- w/4 )
 846              	 	Divide by CELLL.
 847              	***************************/
 848 35ba AE350000 		_HEADER CELLSL,5,"CELL/"
 848      0543454C 
 848      4C2F
 849 35c4 4FEAA606 		ASR TOS,#2
 850 35c8 FEE4     		_NEXT
 851              	
 852              	/*************************
 853              	    2*	( w -- w*2 )
 854              	 	Multiply 2.
 855              	*************************/
 856 35ca BE350000 		_HEADER TWOST,2,"2*"
 856      02322A00 
 856      00BF
 857 35d4 4FEA4606 		MOV	TOS,TOS,LSL#1
 858 35d8 F6E4     		_NEXT
 859              	
 860              	/*************************
 861              	    2/	( w -- w/2 )
 862              	 	Divide by 2.
 863              	***********************/
 864 35da CE350000 		_HEADER TWOSL,2,"2/"
 864      02322F00 
 864      00BF
 865 35e4 4FEA6606 		MOV	TOS,TOS,ASR#1
 866 35e8 EEE4     		_NEXT
 867              	
 868              	/****************************
 869              	    ?DUP	( w -- w w | 0 )
 870              	 	Conditional duplicate.
 871              	*****************************/
 872 35ea DE350000 		_HEADER QDUP,4,"?DUP"
 872      043F4455 
 872      5000
 873 35f4 3500     		MOVS	WP,TOS
 874 35f6 18BF     		IT NE 
 875 35f8 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 876 35fc E4E4     		_NEXT
 877              	
 878              	/************************************
 879              	 CORE EXTENSION 
ARM GAS  forth.s 			page 130


 880              		TUCK ( x1 x2 -- x2 x1 x2 )
 881              	***********************************/
 882 35fe EE350000 		_HEADER TUCK,4,"TUCK"
 882      04545543 
 882      4B00
 883 3608 47F8046D 		_PUSH 
 884 360c 7E68     		LDR TOS, [DSP,#CELLL]
 885 360e DBE4     		_NEXT 
 886              	
 887              	/************************************
 888              	 CORE EXTENSION 
 889              		ROLL ( Xu Xu-1 .. X0 u -- Xu-1 ... X0 Xu )
 890              	**********************************************/
 891 3610 02360000 		_HEADER ROLL,4,"ROLL"
 891      04524F4C 
 891      4C0000BF 
 892 361c 504700BF 		_NEST 
 893 3620 F5350000 		_ADR QDUP 
 894 3624 2F320000 		_QBRAN 9f 
 894      80360000 
 895 362c A9330000 		_ADR  DUPP 
 896 3630 EF310000 		_DOLIT 1 
 896      01000000 
 897 3638 2D380000 		_ADR   EQUAL 
 898 363c 2F320000 		_QBRAN 1f 
 898      54360000 
 899 3644 89330000 		_ADR  DROP 
 900 3648 B9330000 		_ADR  SWAP 
 901 364c 57320000 		_BRAN 9f 
 901      80360000 
 902 3654 15330000 	1:  _ADR  TOR 	
 903 3658 E5320000 		_ADR  RAT
 904 365c C13F0000 		_ADR  PICK 	
 905 3660 65330000 		_ADR  SPAT
 906 3664 A9330000 		_ADR  DUPP 
 907 3668 81350000 		_ADR  CELLP 
 908 366c B1320000 		_ADR  RFROM
 909 3670 41350000 		_ADR  ONEP  
 910 3674 B5350000 		_ADR  CELLS 
 911 3678 E5400000 		_ADR  WMOVE  
 912 367c 89330000 		_ADR  DROP 
 913 3680 CF2F0000 	9:	_UNNEST 
 914              	/*
 915              		MOV T0, TOS
 916              		CBZ T0, 9f 
 917              		MOV T1, T0   // COUNTER   
 918              		SUBB T0, #1 
 919              		SLL T0, #2 
 920              		_POP
 921              		MOV T2, TOS 
 922              		LDR TOS,[DSP,T0]
 923              		MOV T2, [DSP,T0]
 924              		SUBS T1,#1
 925              		BEQ  9f 
 926              	
 927              	9:	_NEXT 
 928              	*/
ARM GAS  forth.s 			page 131


 929              	
 930              	/***********************************
 931              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 932              	 	Rotate top 3 items.
 933              	*************************************/
 934 3684 14360000 		_HEADER ROT,3,"ROT"
 934      03524F54 
 935 368c 3868     		LDR	T0,[DSP]  // w2 
 936 368e 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 937 3690 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 938 3692 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 939 3694 98E4     		_NEXT
 940              	
 941              	/*********************************
 942              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 943              	 left rotate top 3 elements 
 944              	********************************/
 945 3696 88360000 		_HEADER NROT,4,"-ROT"
 945      042D524F 
 945      5400
 946 36a0 7868     		LDR T0,[DSP,#4]
 947 36a2 7E60     		STR TOS,[DSP,#4]	
 948 36a4 3E68     		LDR TOS,[DSP]
 949 36a6 3860     		STR T0,[DSP]
 950 36a8 8EE4     		_NEXT 
 951              	
 952              	/*********************************
 953              	    2DROP	( w1 w2 -- )
 954              	 	Drop top 2 items.
 955              	*********************************/
 956 36aa 9A360000 		_HEADER DDROP,5,"2DROP"
 956      05324452 
 956      4F50
 957 36b4 57F8046B 		_POP
 958 36b8 57F8046B 		_POP
 959 36bc 84E4     		_NEXT 
 960              	
 961              	/********************************
 962              		3DROP ( w1 w2 w3 -- )
 963              		drop top 3 items 
 964              	********************************/
 965 36be AE360000 		_HEADER TDROP,5,"3DROP"
 965      05334452 
 965      4F50
 966 36c8 07F10807 	    add DSP,#8 
 967 36cc 57F8046B 	    _POP 
 968 36d0 7AE4     	    _NEXT 
 969              	
 970              	/***********************************
 971              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 972              	 	Duplicate top 2 items.
 973              	************************************/
 974 36d2 C2360000 		_HEADER DDUP,4,"2DUP"
 974      04324455 
 974      5000
 975 36dc 3868     		LDR	T0,[DSP] // w1
 976 36de 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
ARM GAS  forth.s 			page 132


 977 36e2 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 978 36e6 6FE4     		_NEXT
 979              	
 980              	/******************************
 981              	    D+	( d1 d2 -- d3 )
 982              	 	Add top 2 double numbers.
 983              	******************************/
 984 36e8 D6360000 		_HEADER DPLUS,2,"D+"
 984      02442B00 
 985 36f0 57F8045B 		LDR	WP,[DSP],#4
 986 36f4 57F8042B 		LDR	T2,[DSP],#4
 987 36f8 3B68     		LDR	T3,[DSP]
 988 36fa ED18     		ADDS	WP,WP,T3
 989 36fc 3D60     		STR	WP,[DSP]
 990 36fe 46EB0206 		ADC	TOS,TOS,T2
 991 3702 61E4     		_NEXT
 992              	
 993              	/******************************
 994              		DABS ( d -- ud )
 995              		absolute value double 
 996              	*****************************/
 997 3704 EC360000 		_HEADER DABS,4,"DABS"
 997      04444142 
 997      530000BF 
 998 3710 16F0004F 		tst TOS,#(1<<31)
 999 3714 09D0     		beq 9f 
 1000 3716 6FEA0606 		mvn TOS,TOS 
 1001 371a 3D68     		ldr WP,[DSP]
 1002 371c 6FEA0505 		mvn WP,WP 
 1003 3720 0135     		adds WP,#1
 1004 3722 3D60     		str WP,[DSP]
 1005 3724 01D3     		bcc 9f 
 1006 3726 06F10106 		add TOS,#1 
 1007 372a 4DE4     	9:	_NEXT 
 1008              	
 1009              	/*****************************
 1010              	  UD> ( d1 d2 -- f )
 1011              	  unsigned compare double d1 > d2 
 1012              	******************************/
 1013 372c 08370000 		_HEADER UDGREAT,3,"UD>"
 1013      0355443E 
 1014 3734 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 1015 3738 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 1016 373a B042     		cmp T0,TOS 
 1017 373c 02D8     		bhi 1f
 1018 373e 04D4     		bmi 2f  
 1019 3740 A942     		cmp T1,WP 
 1020 3742 02D9     		bls 2f 
 1021 3744 4FF0FF36 	1:	mov TOS,#-1 
 1022 3748 3EE4     		_NEXT 
 1023 374a 4FF00006 	2:  mov TOS,#0 
 1024 374e 3BE4     		_NEXT 
 1025              	
 1026              	/******************************
 1027              		D0= ( d -- f )
 1028              		double 0= 
 1029              	*****************************/
ARM GAS  forth.s 			page 133


 1030 3750 30370000 		_HEADER DZEQUAL,3,"D0="
 1030      0344303D 
 1031 3758 3046     		mov T0,TOS
 1032 375a 57F8046B 		_POP 
 1033 375e 46EA0006 		orr TOS,T0 
 1034 3762 01D0     		beq 9f
 1035 3764 6FF00006 		mvn TOS,#0 
 1036 3768 2EE4     	9:	_NEXT 
 1037              	
 1038              	/*****************************
 1039              	    INVERT	 ( w -- !w )
 1040              	 	1"s complement.
 1041              	*****************************/
 1042 376a 54370000 		_HEADER INVER,6,"INVERT"
 1042      06494E56 
 1042      45525400 
 1042      00BF
 1043 3778 6FEA0606 		MVN	TOS,TOS
 1044 377c 24E4     		_NEXT
 1045              	
 1046              	/*****************************
 1047              	    NEGATE	( w -- -w )
 1048              	 	2's complement.
 1049              	***************************/
 1050 377e 6E370000 		_HEADER NEGAT,6,"NEGATE"
 1050      064E4547 
 1050      41544500 
 1050      00BF
 1051 378c C6F10006 		RSB	TOS,TOS,#0
 1052 3790 1AE4     		_NEXT
 1053              	
 1054              	/***************************
 1055              	    ABS	 ( w -- |w| )
 1056              	 	Absolute.
 1057              	**************************/
 1058 3792 82370000 		_HEADER ABSS,3,"ABS"
 1058      03414253 
 1058      00BF
 1059 379c 16F0004F 		TST	TOS,#0x80000000
 1060 37a0 18BF     		IT NE
 1061 37a2 7642     	    RSBNE   TOS,TOS,#0
 1062 37a4 10E4     		_NEXT
 1063              	
 1064              	/**************************
 1065              		CLZ ( n - n )
 1066              		count leading zeros 
 1067              	**************************/
 1068 37a6 96370000 		_HEADER CLZ,3,"CLZ"
 1068      03434C5A 
 1068      00BF
 1069 37b0 B6FA86F6 		clz TOS,TOS 
 1070 37b4 08E4     		_NEXT 
 1071              	
 1072              	/*************************
 1073              		CTZ ( n -- n )
 1074              		count trailing zeros 
 1075              	************************/
ARM GAS  forth.s 			page 134


 1076 37b6 AA370000 		_HEADER CTZ,3,"CTZ"
 1076      0343545A 
 1076      00BF
 1077 37c0 80EA0000 		eor T0,T0 
 1078 37c4 16F0010F 	1:  tst TOS,#1 
 1079 37c8 04D1     		bne 2f 
 1080 37ca 4FEA5606 		lsr TOS,#1 
 1081 37ce 00F10100 		add T0,#1 
 1082 37d2 F7E7     		b 1b 
 1083 37d4 0646     	2:  mov TOS,T0 
 1084 37d6 FFF7F7BB 		_NEXT 
 1085              	
 1086              	/**********************
 1087              	CORE EXTENSION 
 1088              		FALSE ( -- 0 )
 1089              		return false flag 
 1090              	***********************/
 1091 37da BA370000 		_HEADER FALSE,5,"FALSE"
 1091      0546414C 
 1091      5345
 1092 37e4 47F8046D 		_PUSH 
 1093 37e8 86EA0606 		EOR TOS,TOS 
 1094 37ec FFF7ECBB 		_NEXT 
 1095              	
 1096              	/**********************
 1097              	CORE EXTENSION 
 1098              		TRUE ( -- -1 )
 1099              		return true flag 
 1100              	***********************/
 1101 37f0 DE370000 		_HEADER TRUE,4,"TRUE"
 1101      04545255 
 1101      450000BF 
 1102 37fc 47F8046D 		_PUSH 
 1103 3800 86EA0606 		EOR TOS,TOS
 1104 3804 6FEA0606 		MVN TOS,TOS 
 1105 3808 FFF7DEBB 		_NEXT 
 1106              	
 1107              	
 1108              	/*******************
 1109              	  0= ( w -- f )
 1110              	 TOS==0?
 1111              	*******************/
 1112 380c F4370000 		_HEADER ZEQUAL,2,"0="
 1112      02303D00 
 1113 3814 1EB9     		cbnz TOS,1f
 1114 3816 4FF0FF36 		mov TOS,#-1
 1115 381a FFF7D5BB 		_NEXT 
 1116 381e 86EA0606 	1:  eor TOS,TOS,TOS  
 1117 3822 FFF7D1BB 		_NEXT 	
 1118              	
 1119              	/*********************
 1120              	    =	 ( w w -- t )
 1121              	 	Equal?
 1122              	*********************/
 1123 3826 10380000 		_HEADER EQUAL,1,"="
 1123      013D
 1124 382c 57F8045B 		LDR	WP,[DSP],#4
ARM GAS  forth.s 			page 135


 1125 3830 AE42     		CMP	TOS,WP
 1126 3832 0CBF     		ITE EQ 
 1127 3834 6FF00006 	    MVNEQ	TOS,#0
 1128 3838 0026     		MOVNE	TOS,#0
 1129 383a FFF7C5BB 		_NEXT
 1130              	
 1131              	/************************
 1132              		<> ( w w -- f )
 1133              		different?
 1134              	************************/
 1135 383e 2A380000 		_HEADER DIFF,2,"<>"
 1135      023C3E00 
 1135      00BF
 1136 3848 3046     		mov T0,TOS 
 1137 384a 57F8046B 		_POP 
 1138 384e 86EA0006 		eor TOS,T0
 1139 3852 B6FA86F0 		clz T0,TOS 
 1140 3856 06FA00F6 		lsl TOS,T0 
 1141 385a 4FEAE676 		asr TOS,#31 
 1142 385e FFF7B3BB 		_NEXT 
 1143              	
 1144              	/************************
 1145              	    U<	 ( w w -- t )
 1146              	 	Unsigned less?
 1147              	*************************/
 1148 3862 42380000 		_HEADER ULESS,2,"U<"
 1148      02553C00 
 1148      00BF
 1149 386c 57F8045B 		LDR	WP,[DSP],#4
 1150 3870 B542     		CMP	WP,TOS
 1151 3872 34BF     		ITE CC 
 1152 3874 6FF00006 		MVNCC	TOS,#0
 1153 3878 0026     		MOVCS	TOS,#0
 1154 387a FFF7A5BB 		_NEXT
 1155              	
 1156              	/**********************
 1157              	    <	( w w -- t )
 1158              	 	Less?
 1159              	**********************/
 1160 387e 66380000 		_HEADER LESS,1,"<"
 1160      013C
 1161 3884 57F8045B 		LDR	WP,[DSP],#4
 1162 3888 B542     		CMP	WP,TOS
 1163 388a B4BF     	    ITE LT
 1164 388c 6FF00006 		MVNLT	TOS,#0
 1165 3890 0026     		MOVGE	TOS,#0
 1166 3892 FFF799BB 		_NEXT 
 1167              	
 1168              	/**********************
 1169              		U> ( u u -- t|f )
 1170              	    unsigned greater 
 1171              	**********************/
 1172 3896 82380000 		_HEADER UGREAT,2,"U>"
 1172      02553E00 
 1172      00BF
 1173 38a0 57F8045B 		LDR WP,[DSP],#4 
 1174 38a4 AE42     		CMP TOS,WP 
ARM GAS  forth.s 			page 136


 1175 38a6 34BF     		ITE CC  
 1176 38a8 6FF00006 		MVNCC TOS,#0 
 1177 38ac 0026     		MOVCS TOS,#0
 1178 38ae FFF78BBB 		_NEXT 
 1179              	
 1180              	/***********************
 1181              	    >	( w w -- t )
 1182              	 	greater?
 1183              	***********************/
 1184 38b2 9A380000 		_HEADER GREAT,1,">"
 1184      013E
 1185 38b8 57F8045B 		LDR	WP,[DSP],#4
 1186 38bc B542     		CMP	WP,TOS
 1187 38be CCBF     		ITE GT
 1188 38c0 6FF00006 	    MVNGT	TOS,#0
 1189 38c4 0026     		MOVLE	TOS,#0
 1190 38c6 FFF77FBB 		_NEXT
 1191              	
 1192              	/***************************
 1193              	    MAX	 ( w w -- max )
 1194              	 	Leave maximum.
 1195              	***************************/
 1196 38ca B6380000 		_HEADER MAX,3,"MAX"
 1196      034D4158 
 1196      00BF
 1197 38d4 57F8045B 		LDR	WP,[DSP],#4
 1198 38d8 B542     		CMP	WP,TOS
 1199 38da C8BF     		IT GT 
 1200 38dc 2E46     		MOVGT	TOS,WP
 1201 38de FFF773BB 		_NEXT 
 1202              	
 1203              	/**************************
 1204              	    MIN	 ( w w -- min )
 1205              	 	Leave minimum.
 1206              	**************************/
 1207 38e2 CE380000 		_HEADER MIN,3,"MIN"
 1207      034D494E 
 1207      00BF
 1208 38ec 57F8045B 		LDR	WP,[DSP],#4
 1209 38f0 B542     		CMP	WP,TOS
 1210 38f2 B8BF     		IT LT
 1211 38f4 2E46     		MOVLT	TOS,WP
 1212 38f6 FFF767BB 		_NEXT
 1213              	
 1214              	/***********************
 1215              	    +!	 ( w a -- )
 1216              	 	Add to memory.
 1217              	***********************/
 1218 38fa E6380000 		_HEADER PSTOR,2,"+!"
 1218      022B2100 
 1218      00BF
 1219 3904 57F8045B 		LDR	WP,[DSP],#4
 1220 3908 3268     		LDR	T2,[TOS]
 1221 390a 2A44     		ADD	T2,T2,WP
 1222 390c 3260     		STR	T2,[TOS]
 1223 390e 57F8046B 		_POP
 1224 3912 FFF759BB 		_NEXT
ARM GAS  forth.s 			page 137


 1225              	
 1226              	/************************
 1227              	    2!	 ( d a -- )
 1228              	 	Store double number.
 1229              	*************************/
 1230 3916 FE380000 		_HEADER DSTOR,2,"2!"
 1230      02322100 
 1230      00BF
 1231 3920 57F8045B 		LDR	WP,[DSP],#4
 1232 3924 57F8042B 		LDR	T2,[DSP],#4
 1233 3928 46F8045B 		STR	WP,[TOS],#4
 1234 392c 3260     		STR	T2,[TOS]
 1235 392e 57F8046B 		_POP
 1236 3932 FFF749BB 		_NEXT
 1237              	
 1238              	/************************
 1239              	    2@	 ( a -- d )
 1240              	 	Fetch double number.
 1241              	************************/
 1242 3936 1A390000 		_HEADER DAT,2,"2@"
 1242      02324000 
 1242      00BF
 1243 3940 7568     		LDR	WP,[TOS,#4]
 1244 3942 47F8045D 		STR	WP,[DSP,#-4]!
 1245 3946 3668     		LDR	TOS,[TOS]
 1246 3948 FFF73EBB 		_NEXT
 1247              	
 1248              	/***************************
 1249              	    COUNT	( b -- b+1 c )
 1250              	 	Fetch length of string.
 1251              	****************************/
 1252 394c 3A390000 		_HEADER COUNT,5,"COUNT"
 1252      05434F55 
 1252      4E5400BF 
 1253 3958 16F8015B 		LDRB	WP,[TOS],#1
 1254 395c 47F8046D 		_PUSH
 1255 3960 2E46     		MOV	TOS,WP
 1256 3962 FFF731BB 		_NEXT
 1257              	
 1258              	/******************************
 1259              	    DNEGATE	( d -- -d )
 1260              	 	Negate double number.
 1261              	**************************/
 1262 3966 50390000 		_HEADER DNEGA,7,"DNEGATE"
 1262      07444E45 
 1262      47415445 
 1262      00BF
 1263 3974 3D68     		LDR	WP,[DSP]
 1264 3976 A2EB0202 		SUB	T2,T2,T2
 1265 397a 551B     		SUBS WP,T2,WP
 1266 397c 62EB0606 		SBC	TOS,T2,TOS
 1267 3980 3D60     		STR	WP,[DSP]
 1268 3982 FFF721BB 		_NEXT
 1269              	
 1270              	/******************************
 1271              	  System and user variables
 1272              	******************************/
ARM GAS  forth.s 			page 138


 1273              	
 1274              	/***********************
 1275              	  system variables 
 1276              	***********************/
 1277              	
 1278              	/***********************
 1279              		STATE ( -- a )
 1280              		compilation state 
 1281              		0 -> interpret
 1282              		-1 -> compile 
 1283              	************************/
 1284 3986 6A390000 		_HEADER STATE,5,"STATE"
 1284      05535441 
 1284      5445
 1285 3990 47F8046D 		_PUSH 
 1286 3994 04F1B406 		ADD TOS,UP,#CSTATE 
 1287 3998 FFF716BB 		_NEXT 
 1288              	
 1289              	/**************************
 1290              	 SEED ( -- a)
 1291              	 return PRNG seed address 
 1292              	**************************/
 1293 399c 8A390000 		_HEADER SEED,4,"SEED"
 1293      04534545 
 1293      440000BF 
 1294 39a8 47F8046D 		_PUSH 
 1295 39ac 04F10406 		ADD TOS,UP,#RNDSEED
 1296 39b0 FFF70ABB 		_NEXT 	
 1297              	
 1298              	/****************************************
 1299              	  TICKS ( -- u )
 1300              	 return milliseconds since last reset or
 1301              	 power up. 
 1302              	****************************************/
 1303 39b4 A0390000 		_HEADER MSEC,5,"TICKS"
 1303      05544943 
 1303      4B5300BF 
 1304 39c0 47F8046D 	    _PUSH
 1305 39c4 A668     	    LDR TOS,[UP,#TICKS]
 1306 39c6 FFF7FFBA 	    _NEXT 
 1307              	
 1308              	/*************************
 1309              	 TIMER ( -- a )
 1310              	 count down timer 
 1311              	**********************/
 1312 39ca B8390000 		_HEADER TIMER,5,"TIMER"
 1312      0554494D 
 1312      4552
 1313 39d4 47F8046D 		 _PUSH 
 1314 39d8 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1315 39dc FFF7F4BA 	    _NEXT
 1316              	
 1317              	/*****************************
 1318              	    'BOOT	 ( -- a )
 1319              	 	boot up application vector 
 1320              	*****************************/
 1321 39e0 CE390000 		_HEADER TBOOT,5,"'BOOT"
ARM GAS  forth.s 			page 139


 1321      0527424F 
 1321      4F5400BF 
 1322 39ec 47F8046D 		_PUSH
 1323 39f0 04F11006 		ADD	TOS,UP,#BOOT 
 1324 39f4 FFF7E8BA 		_NEXT
 1325              		
 1326              	/********************************************	
 1327              	    BASE	( -- a )
 1328              	 	Storage of the radix base for numeric I/O.
 1329              	**********************************************/
 1330 39f8 E4390000 		_HEADER BASE,4,"BASE"
 1330      04424153 
 1330      450000BF 
 1331 3a04 47F8046D 		_PUSH
 1332 3a08 04F11C06 		ADD	TOS,UP,#NBASE
 1333 3a0c FFF7DCBA 		_NEXT
 1334              	
 1335              	/***********************************************
 1336              		BCHAR ( -- flag )
 1337              		boolean variable
 1338              		if set base char include in convertion 
 1339              		of integer to string.  
 1340              	************************************************/
 1341 3a10 FC390000 			_HEADER BCHR,5,"BCHAR"
 1341      05424348 
 1341      415200BF 
 1342 3a1c 47F8046D 			_PUSH 
 1343 3a20 04F12006 			ADD TOS,UP,#BCHAR 
 1344 3a24 FFF7D0BA 			_NEXT 
 1345              	
 1346              	/*****************************************************
 1347              	    temp	 ( -- a )
 1348              	 	A temporary storage location used in parse and find.
 1349              	hidden word for internal use
 1350              	********************************************************/
 1351              	TEMP:
 1352 3a28 47F8046D 		_PUSH
 1353 3a2c 04F12406 		ADD	TOS,UP,#TMP
 1354 3a30 FFF7CABA 		_NEXT
 1355              	
 1356              	/*******************************************
 1357              	    SPAN	( -- a )
 1358              	 	Hold character count received by EXPECT.
 1359              	********************************************/
 1360 3a34 143A0000 		_HEADER SPAN,4,"SPAN"
 1360      04535041 
 1360      4E0000BF 
 1361 3a40 47F8046D 		_PUSH
 1362 3a44 04F12806 		ADD	TOS,UP,#CSPAN
 1363 3a48 FFF7BEBA 		_NEXT
 1364              	
 1365              	/***********************************************************
 1366              	    >IN	 ( -- a )
 1367              	 	Hold the character pointer while parsing input stream.
 1368              	***********************************************************/
 1369 3a4c 383A0000 		_HEADER INN,3,">IN"
 1369      033E494E 
ARM GAS  forth.s 			page 140


 1370 3a54 47F8046D 		_PUSH
 1371 3a58 04F12C06 		ADD	TOS,UP,#TOIN
 1372 3a5c FFF7B4BA 		_NEXT
 1373              	
 1374              	/**************************************
 1375              	    #TIB	( -- a )
 1376              	 	Hold the current count and address 
 1377              		of the terminal input buffer.
 1378              	**************************************/
 1379 3a60 503A0000 		_HEADER NTIB,4,"#TIB"
 1379      04235449 
 1379      420000BF 
 1380 3a6c 47F8046D 		_PUSH
 1381 3a70 04F13006 		ADD	TOS,UP,#NTIBB
 1382 3a74 FFF7A8BA 		_NEXT
 1383              	
 1384              	/******************************
 1385              	    'EVAL	( -- a )
 1386              	 	Execution vector of EVAL.
 1387              	*******************************/
 1388 3a78 643A0000 		_HEADER TEVAL,5,"'EVAL"
 1388      05274556 
 1388      414C00BF 
 1389 3a84 47F8046D 		_PUSH
 1390 3a88 04F13C06 		ADD	TOS,UP,#EVAL
 1391 3a8c FFF79CBA 		_NEXT
 1392              	
 1393              	/*********************************
 1394              	    HLD	 ( -- a )
 1395              	 	Hold a pointer in building a 
 1396              		numeric output string.
 1397              	*********************************/
 1398 3a90 7C3A0000 		_HEADER HLD,3,"HLD"
 1398      03484C44 
 1399 3a98 47F8046D 		_PUSH
 1400 3a9c 04F14006 		ADD	TOS,UP,#VHOLD
 1401 3aa0 FFF792BA 		_NEXT
 1402              	
 1403              	/**********************************
 1404              	    CONTEXT	( -- a )
 1405              	 	A area to specify vocabulary 
 1406              		search order.
 1407              	**********************************/
 1408 3aa4 943A0000 		_HEADER CNTXT,7,"CONTEXT"
 1408      07434F4E 
 1408      54455854 
 1409              	CRRNT:
 1410 3ab0 47F8046D 		_PUSH
 1411 3ab4 04F14406 		ADD	TOS,UP,#CTXT
 1412 3ab8 FFF786BA 		_NEXT
 1413              	
 1414              	/******************************
 1415              	    CP	( -- a )
 1416              	 	Point to top free area  
 1417              		in user RAM. 
 1418              	******************************/
 1419 3abc A83A0000 		_HEADER CPP,2,"CP"
ARM GAS  forth.s 			page 141


 1419      02435000 
 1420 3ac4 47F8046D 		_PUSH
 1421 3ac8 04F14C06 		ADD	TOS,UP,#USER_CTOP
 1422 3acc FFF77CBA 		_NEXT
 1423              	
 1424              	/*****************************
 1425              	CORE EXT 
 1426              		UNUSED ( -- n )
 1427              		return free bytes in 
 1428              		user RAM 
 1429              	*****************************/
 1430 3ad0 C03A0000 		_HEADER UNUSED,6,"UNUSED"
 1430      06554E55 
 1430      53454400 
 1431 3adc 47F8046D 		_PUSH 
 1432 3ae0 E06C     		LDR T0,[UP,#USER_CTOP]
 1433 3ae2 47F22C16 		_MOV32 TOS,DEND 
 1433      C2F20106 
 1434 3aea A6EB0006 		SUB TOS,T0 
 1435 3aee FFF76BBA 		_NEXT 
 1436              	
 1437              	/****************************
 1438              	   FCP ( -- a )
 1439              	  Point ot top of Forth 
 1440              	  system dictionary
 1441              	****************************/
 1442 3af2 D43A0000 		_HEADER FCP,3,"FCP"
 1442      03464350 
 1442      00BF
 1443 3afc 47F8046D 		_PUSH 
 1444 3b00 04F14806 		ADD TOS,UP,#FORTH_CTOP 
 1445 3b04 FFF760BA 		_NEXT 
 1446              	
 1447              	/***************************
 1448              	    LAST	( -- a )
 1449              	 	Point to the last name 
 1450              		in the dictionary.
 1451              	***************************/
 1452 3b08 F63A0000 		_HEADER LAST,4,"LAST"
 1452      044C4153 
 1452      540000BF 
 1453 3b14 47F8046D 		_PUSH
 1454 3b18 04F15006 		ADD	TOS,UP,#LASTN
 1455 3b1c FFF754BA 		_NEXT
 1456              	
 1457              	
 1458              	/***********************
 1459              		system constants 
 1460              	***********************/
 1461              	
 1462              	/********************************
 1463              		USER-BEGIN ( -- a )
 1464              	  where user area begin in RAM
 1465              	********************************/
 1466 3b20 0C3B0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1466      0A555345 
 1466      522D4245 
ARM GAS  forth.s 			page 142


 1466      47494E00 
 1467 3b30 47F8046D 		_PUSH 
 1468 3b34 DFF80460 		ldr TOS,USR_BGN_ADR 
 1469 3b38 FFF746BA 		_NEXT 
 1470              	USR_BGN_ADR:
 1471 3b3c 12050020 	.word  DTOP 
 1472              	
 1473              	/*********************************
 1474              	  USER_END ( -- a )
 1475              	  where user area end in RAM 
 1476              	******************************/
 1477 3b40 243B0000 		_HEADER USER_END,8,"USER-END"
 1477      08555345 
 1477      522D454E 
 1477      440000BF 
 1478 3b50 47F8046D 		_PUSH 
 1479 3b54 DFF80460 		ldr TOS,USER_END_ADR 
 1480 3b58 FFF736BA 		_NEXT 
 1481              	USER_END_ADR:
 1482 3b5c 2C710120 		.word DEND 
 1483              	
 1484              	/********************************
 1485              		MAX-INT ( -- n+ )
 1486              		maximum integer 
 1487              	*******************************/
 1488 3b60 443B0000 		_HEADER MAXINT,7,"MAX-INT"
 1488      074D4158 
 1488      2D494E54 
 1489 3b6c 47F8046D 		_PUSH 
 1490 3b70 4FF6FF76 		_MOV32 TOS, 0x7FFFFFFF
 1490      C7F6FF76 
 1491 3b78 FFF726BA 		_NEXT 
 1492              	
 1493              	/******************************
 1494              		MIN-INT ( -- n- )
 1495              		minimum integer 
 1496              	******************************/
 1497 3b7c 643B0000 		_HEADER MININT,7,"MIN-INT"
 1497      074D494E 
 1497      2D494E54 
 1498 3b88 47F8046D 		_PUSH 
 1499 3b8c 4FF00006 		_MOV32 TOS, 0x80000000
 1499      C8F20006 
 1500 3b94 FFF718BA 		_NEXT 
 1501              	
 1502              	/******************************
 1503              		MAX-UINT ( -- u )
 1504              		maximum unsigned integer 
 1505              	******************************/
 1506 3b98 803B0000 		_HEADER MAXUINT,8,"MAX-UINT"
 1506      084D4158 
 1506      2D55494E 
 1506      540000BF 
 1507 3ba8 47F8046D 		_PUSH
 1508 3bac 4FF6FF76 		_MOV32 TOS, 0xFFFFFFFF 
 1508      CFF6FF76 
 1509 3bb4 FFF708BA 		_NEXT 
ARM GAS  forth.s 			page 143


 1510              	
 1511              	
 1512              	/* *********************
 1513              	  Common functions
 1514              	***********************/
 1515              	
 1516              	/********************************
 1517              	    WITHIN	( u ul uh -- t )
 1518              	 	Return true if u is within 
 1519              		the range of ul and uh.
 1520              	********************************/
 1521 3bb8 9C3B0000 		_HEADER WITHI,6,"WITHIN"
 1521      06574954 
 1521      48494E00 
 1522 3bc4 504700BF 		_NEST
 1523 3bc8 E9330000 		_ADR	OVER
 1524 3bcc F5340000 		_ADR	SUBB
 1525 3bd0 15330000 		_ADR	TOR
 1526 3bd4 F5340000 		_ADR	SUBB
 1527 3bd8 B1320000 		_ADR	RFROM
 1528 3bdc 6D380000 		_ADR	ULESS
 1529 3be0 CF2F0000 		_UNNEST
 1530              	
 1531              	//  Divide
 1532              	
 1533              	/*************************************
 1534              	    UM/MOD	( udl udh u -- ur uq )
 1535              	 	Unsigned divide of a double by a 
 1536              		single. Return mod and quotient.
 1537              	**************************************/
 1538 3be4 BC3B0000 		_HEADER UMMOD,6,"UM/MOD"
 1538      06554D2F 
 1538      4D4F4400 
 1539 3bf0 4FF00103 		MOV	T3,#1
 1540 3bf4 57F8045B 		LDR	WP,[DSP],#4
 1541 3bf8 3A68     		LDR	T2,[DSP]
 1542              	UMMOD0:
 1543 3bfa 9218     		ADDS	T2,T2,T2
 1544 3bfc 6D41     		ADCS	WP,WP,WP
 1545 3bfe 04D3     		BCC	UMMOD1
 1546 3c00 A5EB0605 		SUB	WP,WP,TOS
 1547 3c04 02F10102 		ADD	T2,T2,#1
 1548 3c08 04E0     		B UMMOD2
 1549              	UMMOD1:
 1550 3c0a AD1B     		SUBS	WP,WP,TOS 
 1551 3c0c 28BF     		IT CS 
 1552 3c0e 0132     		ADDCS	T2,T2,#1
 1553 3c10 00D2     		BCS	UMMOD2
 1554 3c12 3544     		ADD	WP,WP,TOS
 1555              	UMMOD2:
 1556 3c14 DB18     		ADDS	T3,T3,T3
 1557 3c16 F0D3     		BCC	UMMOD0
 1558 3c18 1646     		MOV	TOS,T2
 1559 3c1a 3D60     		STR	WP,[DSP]
 1560 3c1c FFF7D4B9 		_NEXT
 1561              	
 1562              	/****************************
ARM GAS  forth.s 			page 144


 1563              	    FM/MOD	( d n -- r q )
 1564              	 	Signed floored divide 
 1565              		of double by single. 
 1566              		Return mod and quotient.
 1567              	****************************/
 1568 3c20 E83B0000 		_HEADER MSMOD,6,"FM/MOD"
 1568      06464D2F 
 1568      4D4F4400 
 1569 3c2c 504700BF 		_NEST
 1570 3c30 A9330000 		_ADR	DUPP
 1571 3c34 19340000 		_ADR	ZLESS
 1572 3c38 A9330000 		_ADR	DUPP
 1573 3c3c 15330000 		_ADR	TOR
 1574 3c40 2F320000 		_QBRAN MMOD1
 1574      583C0000 
 1575 3c48 8D370000 		_ADR	NEGAT
 1576 3c4c 15330000 		_ADR	TOR
 1577 3c50 75390000 		_ADR	DNEGA
 1578 3c54 B1320000 		_ADR	RFROM
 1579              	MMOD1:
 1580 3c58 15330000 		_ADR	TOR
 1581 3c5c A9330000 		_ADR	DUPP
 1582 3c60 19340000 		_ADR	ZLESS
 1583 3c64 2F320000 		_QBRAN MMOD2
 1583      743C0000 
 1584 3c6c E5320000 		_ADR	RAT
 1585 3c70 E5340000 		_ADR	PLUS
 1586              	MMOD2:
 1587 3c74 B1320000 		_ADR	RFROM
 1588 3c78 F13B0000 		_ADR	UMMOD
 1589 3c7c B1320000 		_ADR	RFROM
 1590 3c80 2F320000 		_QBRAN	MMOD3
 1590      943C0000 
 1591 3c88 B9330000 		_ADR	SWAP
 1592 3c8c 8D370000 		_ADR	NEGAT
 1593 3c90 B9330000 		_ADR	SWAP
 1594              	MMOD3:   
 1595 3c94 CF2F0000 		_UNNEST
 1596              	
 1597              	/****************************
 1598              		SM/REM (d n1 -- n2 n3 )
 1599              	    symetric signed division 
 1600              		double by single 
 1601              	input:
 1602              		d   signed double 
 1603              		n1  signed single 
 1604              	output: 
 1605              		n2  signed remainder 
 1606              		n3  signed quotient 
 1607              	****************************/
 1608 3c98 243C0000 		_HEADER SMSLSHREM,6,"SM/REM"
 1608      06534D2F 
 1608      52454D00 
 1609 3ca4 504700BF 		_NEST 
 1610 3ca8 A9330000 		_ADR DUPP 
 1611 3cac 19340000 		_ADR ZLESS 
 1612 3cb0 A9330000 		_ADR DUPP 
ARM GAS  forth.s 			page 145


 1613 3cb4 15330000 		_ADR TOR   // divisor sign 
 1614 3cb8 2F320000 		_QBRAN 1f 
 1614      C43C0000 
 1615 3cc0 8D370000 		_ADR NEGAT 
 1616 3cc4 E9330000 	1:  _ADR OVER 
 1617 3cc8 19340000 		_ADR ZLESS 
 1618 3ccc A9330000 		_ADR DUPP 
 1619 3cd0 15330000 		_ADR TOR  // divident sign 
 1620 3cd4 2F320000 		_QBRAN  1f 
 1620      E83C0000 
 1621 3cdc 15330000 		_ADR TOR 
 1622 3ce0 75390000 		_ADR DNEGA
 1623 3ce4 B1320000 		_ADR RFROM 
 1624 3ce8 F13B0000 	1:  _ADR UMMOD  // rem quot  
 1625 3cec B1320000 		_ADR RFROM 
 1626 3cf0 E5320000 		_ADR RAT 
 1627 3cf4 8D340000 		_ADR XORR
 1628 3cf8 2F320000 		_QBRAN 1f
 1628      043D0000 
 1629 3d00 8D370000 		_ADR NEGAT 
 1630 3d04 A9330000 	1:  _ADR DUPP 
 1631 3d08 19340000 		_ADR ZLESS 
 1632 3d0c B1320000 		_ADR RFROM 
 1633 3d10 8D340000 		_ADR XORR 
 1634 3d14 2F320000 		_QBRAN 1f 
 1634      283D0000 
 1635 3d1c B9330000 		_ADR SWAP 
 1636 3d20 8D370000 		_ADR NEGAT 
 1637 3d24 B9330000 	    _ADR SWAP 
 1638 3d28 CF2F0000 	1:  _UNNEST 
 1639              	
 1640              	
 1641              	/****************************
 1642              		S>D ( n -- d )
 1643              		convert single to double 
 1644              	*****************************/
 1645 3d2c 9C3C0000 		_HEADER STOD,3,"S>D"
 1645      03533E44 
 1646 3d34 47F8046D 		_PUSH 
 1647 3d38 4FEAE676 		ASR TOS,#31
 1648 3d3c FFF744B9 		_NEXT 
 1649              	
 1650              	/****************************
 1651              		D2* ( d -- d<<1 )
 1652              		double * 2 
 1653              	***************************/
 1654 3d40 303D0000 		_HEADER D2STAR,3,"D2*"
 1654      0344322A 
 1655 3d48 3868     		ldr T0,[DSP]
 1656 3d4a 4000     		lsls T0,#1
 1657 3d4c 3860     		str T0,[DSP]
 1658 3d4e 4FEA4606 		lsl TOS,#1
 1659 3d52 46F10006 		adc TOS,#0
 1660 3d56 FFF737B9 		_NEXT 
 1661              	
 1662              	/****************************
 1663              		D2/  ( d -- d>>1 )
ARM GAS  forth.s 			page 146


 1664              		double signed divide by 2 
 1665              	*****************************/
 1666 3d5a 443D0000 		_HEADER D2SL,3,"D2/"
 1666      0344322F 
 1666      00BF
 1667 3d64 3868     		ldr T0,[DSP]
 1668 3d66 7610     		asrs TOS,#1
 1669 3d68 4FEA3000 		rrx T0,T0 
 1670 3d6c 3860     		str T0,[DSP]
 1671 3d6e FFF72BB9 		_NEXT 
 1672              	
 1673              	/***************************
 1674              		D/MOD  ( d+ n+ - r+ qd+ )
 1675              		unsigned double division
 1676              		and modulo 
 1677              		output:
 1678              			qd+ = d+ / n+
 1679              			r+ = qd+ - (d+ * n+ )
 1680              	***************************/
 1681 3d72 5E3D0000 		_HEADER DSLMOD,5,"D/MOD"
 1681      05442F4D 
 1681      4F44
 1682 3d7c 3D68     		ldr WP,[DSP]  // d+ high 
 1683 3d7e 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1684 3d80 4FF02002 		mov T2,#32 // shift counter  
 1685 3d84 81EA0101 		eor T1,T1 // quotient T0:T1  
 1686 3d88 25B9     		cbnz WP,1f    
 1687 3d8a 82EA0202 		eor T2,T2 // nos shifting required 
 1688 3d8e 0546     		mov WP,T0 
 1689 3d90 80EA0000 		eor T0,T0 
 1690 3d94 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1691 3d96 15F0004F 	    tst WP,#(1<<31) 
 1692 3d9a 06D1     		bne 2f
 1693 3d9c 4918     		adds T1,T1,T1 
 1694 3d9e 4041     		adcs T0,T0,T0 
 1695 3da0 45EB0505 		adc WP,WP,WP 
 1696 3da4 A2F10102 		sub T2,#1 
 1697 3da8 F4E7     		b 1b 
 1698 3daa B5FBF6F3 	2:  udiv T3,WP,TOS
 1699 3dae 41EA0301 		orr T1,T3   // append partial quotient 
 1700 3db2 06FB03F3 		mul T3,TOS
 1701 3db6 A5EB0305 		sub WP,T3 //remainder 
 1702 3dba 02B1     		cbz T2,8f 
 1703 3dbc EAE7     		b 1b 
 1704 3dbe 7D60     	8:	str WP,[DSP,#4] // remainder 
 1705 3dc0 3960     		str T1,[DSP]  // q lo 
 1706 3dc2 0646     		mov TOS,T0  // q hi 		
 1707 3dc4 FFF700B9 		_NEXT 
 1708              	
 1709              	
 1710              	/****************************
 1711              		D/  ( ud u -- udq )
 1712              		divide unsigned double 
 1713              		by unsigned single 
 1714              		return double quotient
 1715              		rounded to nearest integer 
 1716              	****************************/
ARM GAS  forth.s 			page 147


 1717 3dc8 763D0000 		_HEADER DSLASH,2,"D/"
 1717      02442F00 
 1718 3dd0 504700BF 		_NEST 
 1719 3dd4 A9330000 		_ADR DUPP 
 1720 3dd8 EF310000 		_DOLIT 1 
 1720      01000000 
 1721 3de0 BD340000 		_ADR RSHIFT 
 1722 3de4 15330000 		_ADR TOR 
 1723 3de8 7D3D0000 		_ADR DSLMOD 
 1724 3dec 8D360000 		_ADR ROT 
 1725 3df0 B1320000 		_ADR RFROM 
 1726 3df4 B9380000 		_ADR GREAT 
 1727 3df8 2F320000 		_QBRAN 9f
 1727      103E0000 
 1728 3e00 EF310000 		_DOLIT 1 
 1728      01000000 
 1729 3e08 353D0000 		_ADR STOD 
 1730 3e0c F1360000 		_ADR DPLUS 
 1731 3e10 CF2F0000 	9:	_UNNEST 
 1732              	
 1733              	
 1734              	/****************************
 1735              		D* ( d s -- d )
 1736              	    multiply a double 
 1737              		by a single 
 1738              	****************************/
 1739 3e14 CC3D0000 		_HEADER DSTAR,2,"D*"
 1739      02442A00 
 1740              	/*
 1741              		_NEST 
 1742              		_ADR NROT 
 1743              		_ADR DUPP 
 1744              		_ADR TOR 
 1745              		_ADR DABS
 1746              		_ADR SWAP  
 1747              		_ADR ROT   
 1748              		_ADR DUPP
 1749              		_ADR TOR
 1750              		_ADR MSTAR
 1751              		_ADR ROT
 1752              		_ADR RFROM 
 1753              		_ADR STAR 
 1754              		_ADR PLUS
 1755              		_ADR RFROM 
 1756              		_ADR ZLESS 
 1757              		_QBRAN 9f
 1758              		_ADR DNEGA   
 1759              	9:	_UNNEST 
 1760              	*/
 1761 3e1c 57F8040B 		ldr T0,[DSP],#4
 1762 3e20 3968     		ldr T1,[DSP]
 1763 3e22 3860     		str T0,[DSP] 
 1764 3e24 83EA0303 		eor T3,T3 
 1765 3e28 10F0004F 		tst T0,#(1<<31)
 1766 3e2c 02D0     		beq 1f 
 1767              		// DNEGATE 
 1768 3e2e 591A     		subs T1,T3,T1  
ARM GAS  forth.s 			page 148


 1769 3e30 63EB0000 		sbc T0,T3,T0 
 1770 3e34 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1771 3e38 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1772 3e3c 0E44     		add TOS,T1  // TOS:T2 product  
 1773 3e3e 3868     		ldr r0,[DSP]
 1774 3e40 10F0004F 		tst T0,#(1<<31)
 1775 3e44 02D0     		beq 2f 
 1776              		// DNEGATE product 
 1777 3e46 9A1A     		subs T2,T3,T2  
 1778 3e48 63EB0606 		sbc TOS,T3,TOS 
 1779 3e4c 3A60     	2:  str T2,[DSP]
 1780 3e4e FFF7BBB8 		_NEXT 
 1781              	
 1782              	
 1783              	/****************************
 1784              	   /MOD	( n n -- r q )
 1785              		Signed divide. Return
 1786              		mod and quotient.
 1787              	****************************/
 1788 3e52 183E0000 		_HEADER SLMOD,4,"/MOD"
 1788      042F4D4F 
 1788      4400
 1789 3e5c 504700BF 		_NEST
 1790 3e60 E9330000 		_ADR	OVER
 1791 3e64 19340000 		_ADR	ZLESS
 1792 3e68 B9330000 		_ADR	SWAP
 1793 3e6c 2D3C0000 		_ADR	MSMOD
 1794 3e70 CF2F0000 		_UNNEST
 1795              	
 1796              	/**************************
 1797              	    MOD	 ( n n -- r )
 1798              	 	Signed divide. Return
 1799              		mod only.
 1800              	**************************/
 1801 3e74 563E0000 		_HEADER MODD,3,"MOD"
 1801      034D4F44 
 1802 3e7c 504700BF 		_NEST
 1803 3e80 5D3E0000 		_ADR	SLMOD
 1804 3e84 89330000 		_ADR	DROP
 1805 3e88 CF2F0000 		_UNNEST
 1806              	
 1807              	/*************************
 1808              	    /	   ( n n -- q )
 1809              	 	Signed divide. Return
 1810              		quotient only.
 1811              	**************************/
 1812 3e8c 783E0000 		_HEADER SLASH,1,"/"
 1812      012F00BF 
 1813 3e94 504700BF 		_NEST
 1814 3e98 5D3E0000 		_ADR	SLMOD
 1815 3e9c B9330000 		_ADR	SWAP
 1816 3ea0 89330000 		_ADR	DROP
 1817 3ea4 CF2F0000 		_UNNEST
 1818              	
 1819              	//******************************
 1820              	//   */MOD	( n1 n2 n3 -- r q )
 1821              	/*   Multiply n1 and n2, then 
ARM GAS  forth.s 			page 149


 1822              	   divide by n3. Return 
 1823              	   mod and quotient.
 1824              	******************************/
 1825 3ea8 903E0000 		_HEADER SSMOD,5,"*/MOD"
 1825      052A2F4D 
 1825      4F4400BF 
 1826 3eb4 504700BF 		_NEST
 1827 3eb8 15330000 		_ADR	TOR
 1828 3ebc 2D350000 		_ADR	MSTAR
 1829 3ec0 B1320000 		_ADR	RFROM
 1830 3ec4 2D3C0000 		_ADR	MSMOD
 1831 3ec8 CF2F0000 		_UNNEST
 1832              	
 1833              	//*******************************
 1834              	//  */ ( n1 n2 n3 -- q )
 1835              	/* 	Multiply n1 by n2, then 
 1836              		divide by n3. Return quotient
 1837              		only.
 1838              	*******************************/
 1839 3ecc AC3E0000 		_HEADER STASL,2,"*/"
 1839      022A2F00 
 1840 3ed4 504700BF 		_NEST
 1841 3ed8 B53E0000 		_ADR	SSMOD
 1842 3edc B9330000 		_ADR	SWAP
 1843 3ee0 89330000 		_ADR	DROP
 1844 3ee4 CF2F0000 		_UNNEST
 1845              	
 1846              	/*******************
 1847              	  Miscellaneous
 1848              	*******************/
 1849              	
 1850              	/*************************
 1851              		CHAR+ ( a -- a+ )
 1852              		increment a by one 
 1853              		char size unit. 
 1854              	*************************/
 1855 3ee8 D03E0000 		_HEADER CHARP,5,"CHAR+"
 1855      05434841 
 1855      522B00BF 
 1856 3ef4 06F10106 		add TOS,#1
 1857 3ef8 FFF766B8 		_NEXT 
 1858              	
 1859              	/*************************
 1860              		CHARS ( n1 -- n1 )
 1861              		address size of 
 1862              		n1 character
 1863              		same on this system 
 1864              	*************************/
 1865 3efc EC3E0000 		_HEADER CHARS,5,"CHARS"
 1865      05434841 
 1865      525300BF 
 1866 3f08 FFF75EB8 		_NEXT 
 1867              	
 1868              	
 1869              	
 1870              	/*************************
 1871              		ALIGN ( -- )
ARM GAS  forth.s 			page 150


 1872              		align data pointer 
 1873              		to cell boundary 
 1874              	************************/
 1875 3f0c 003F0000 		_HEADER ALIGN,5,"ALIGN"
 1875      05414C49 
 1875      474E00BF 
 1876 3f18 E06C     		ldr T0,[UP,#USER_CTOP]
 1877 3f1a 00F10300 		add T0,#(CELLL-1)
 1878 3f1e 20F00300 		and T0,#0xFFFFFFFC 
 1879 3f22 E064     		str T0,[UP,#USER_CTOP]
 1880 3f24 FFF750B8 		_NEXT 
 1881              	
 1882              	
 1883              	/*************************
 1884              	    ALIGNED	( b -- a )
 1885              	 	Align address to the 
 1886              		cell boundary.
 1887              	**************************/
 1888 3f28 103F0000 		_HEADER ALGND,7,"ALIGNED"
 1888      07414C49 
 1888      474E4544 
 1889 3f34 06F10306 		ADD	TOS,TOS,#3
 1890 3f38 6FF00305 		MVN	WP,#3
 1891 3f3c 06EA0506 		AND	TOS,TOS,WP
 1892 3f40 FFF742B8 		_NEXT
 1893              	
 1894              	/****************************
 1895              	    >CHAR	( c -- c )
 1896              	 	Filter non-printing 
 1897              		characters.
 1898              	****************************/
 1899 3f44 2C3F0000 		_HEADER TCHAR,5,">CHAR"
 1899      053E4348 
 1899      415200BF 
 1900 3f50 504700BF 		_NEST
 1901 3f54 EF310000 		_DOLIT  0x7F
 1901      7F000000 
 1902 3f5c 65340000 		_ADR	ANDD
 1903 3f60 A9330000 		_ADR	DUPP	// mask msb
 1904 3f64 A1350000 		_ADR	BLANK
 1905 3f68 EF310000 		_DOLIT 	127
 1905      7F000000 
 1906 3f70 C53B0000 		_ADR	WITHI	// check for printable
 1907 3f74 79370000 		_ADR	INVER
 1908 3f78 2F320000 		_QBRAN	TCHA1
 1908      8C3F0000 
 1909 3f80 89330000 		_ADR	DROP
 1910 3f84 EF310000 		_DOLIT 	'_'	// replace non-printables
 1910      5F000000 
 1911              	TCHA1:
 1912 3f8c CF2F0000 		  _UNNEST
 1913              	
 1914              	/************************
 1915              	    DEPTH	( -- n )
 1916              	 	Return the depth of
 1917              		the data stack.
 1918              	***********************/
ARM GAS  forth.s 			page 151


 1919 3f90 483F0000 		_HEADER DEPTH,5,"DEPTH"
 1919      05444550 
 1919      544800BF 
 1920 3f9c 4FF6B062 		_MOV32 T2,SPP 
 1920      C2F20102 
 1921 3fa4 A2EB0702 		SUB	T2,T2,DSP
 1922 3fa8 47F8046D 		_PUSH
 1923 3fac 4FEAA206 		ASR	TOS,T2,#2
 1924 3fb0 FFF70AB8 		_NEXT
 1925              	
 1926              	/*****************************
 1927              	    PICK	( ... +n -- ... w )
 1928              	 	Copy the nth stack item 
 1929              		to tos.
 1930              	******************************/
 1931 3fb4 943F0000 		_HEADER PICK,4,"PICK"
 1931      04504943 
 1931      4B0000BF 
 1932 3fc0 4FEA8606 		lsl TOS,#2 
 1933 3fc4 BE59     		ldr TOS,[DSP,TOS]
 1934 3fc6 FEF7FFBF 		_NEXT 
 1935              	
 1936              	/*****************************
 1937              		PUT ( xn..x0 w i -- xi...x0 )
 1938              		put value w at position 
 1939              		xi on stack 
 1940              		i in range [0..n] 
 1941              	*****************************/
 1942 3fca B83F0000 		_HEADER PUT,3,"PUT"
 1942      03505554 
 1942      00BF
 1943 3fd4 3546     		mov WP,TOS 
 1944 3fd6 57F8046B 		_POP 
 1945 3fda 4FEA8505 		lsl WP,#2 
 1946 3fde 7E51     		str TOS,[DSP,WP]
 1947 3fe0 57F8046B 		_POP 
 1948 3fe4 FEF7F0BF 		_NEXT 
 1949              	
 1950              	/*********************
 1951              	  Memory access
 1952              	*********************/
 1953              	
 1954              	/*************************
 1955              	    HERE	( -- a )
 1956              	 	Return the top of
 1957              		the code dictionary.
 1958              	*************************/
 1959 3fe8 CE3F0000 		_HEADER HERE,4,"HERE"
 1959      04484552 
 1959      450000BF 
 1960 3ff4 504700BF 		_NEST
 1961 3ff8 C53A0000 		_ADR	CPP
 1962 3ffc 85320000 		_ADR	AT
 1963 4000 CF2F0000 		_UNNEST
 1964              	
 1965              	/***************************	
 1966              	    PAD	 ( -- a )
ARM GAS  forth.s 			page 152


 1967              	 	Return the address of 
 1968              		a temporary buffer.
 1969              	***************************/
 1970 4004 EC3F0000 		_HEADER PAD,3,"PAD"
 1970      03504144 
 1971 400c 504700BF 		_NEST
 1972 4010 F53F0000 		_ADR	HERE
 1973 4014 EF310000 		_DOLIT 80
 1973      50000000 
 1974 401c E5340000 		_ADR PLUS 
 1975 4020 CF2F0000 		_UNNEST
 1976              	
 1977              	/***********************
 1978              	    TIB	 ( -- a )
 1979              	 	Return the address 
 1980              		of the terminal 
 1981              		input buffer.
 1982              	************************/
 1983 4024 08400000 		_HEADER TIB,3,"TIB"
 1983      03544942 
 1984 402c 47F8046D 		_PUSH
 1985 4030 666B     		ldr TOS,[UP,#TIBUF]
 1986 4032 FEF7C9BF 		_NEXT
 1987              	
 1988              	/*************************
 1989              		SOURCE-ID, ( -- 0 | -1 )
 1990              	output:
 1991              		-1 	String (via EVALUATE)	
 1992              		0 	User input device
 1993              	*****************************/
 1994 4036 28400000 		_HEADER SOURCID,9,"SOURCE-ID"
 1994      09534F55 
 1994      5243452D 
 1994      4944
 1995 4044 47F8046D 		_PUSH 
 1996 4048 A66B     		ldr TOS,[UP,#SRCID]
 1997 404a FEF7BDBF 		_NEXT 
 1998              	
 1999              	
 2000              	/***********************************
 2001              		SOURCE ( -- a u )
 2002              	output:
 2003              		a  address of transaction buffer 
 2004              		u  # char in buffer 
 2005              	***********************************/
 2006 404e 3A400000 		_HEADER SOURCE,6,"SOURCE"
 2006      06534F55 
 2006      52434500 
 2006      00BF
 2007 405c 504700BF 		_NEST 
 2008 4060 EF310000 		_DOLIT  UPP+SRC 
 2008      30000020 
 2009 4068 41390000 		_ADR   DAT 
 2010 406c CF2F0000 		_UNNEST 
 2011              	
 2012              	/*************************
 2013              	    @EXECUTE	( a -- )
ARM GAS  forth.s 			page 153


 2014              	 	Execute vector stored
 2015              		in address a.
 2016              	*************************/
 2017 4070 52400000 		_HEADER ATEXE,8,"@EXECUTE"
 2017      08404558 
 2017      45435554 
 2017      450000BF 
 2018 4080 3500     		MOVS	WP,TOS
 2019 4082 57F8046B 		_POP
 2020 4086 2D68     		LDR	WP,[WP]
 2021 4088 45F00105 		ORR	WP,WP,#1
 2022 408c 18BF     	    IT NE 
 2023 408e 2847     		BXNE	WP
 2024 4090 FEF79ABF 		_NEXT
 2025              	
 2026              	/*******************************
 2027              	    CMOVE	( b1 b2 u -- )
 2028              	 	Copy u bytes from b1 to b2.
 2029              	********************************/
 2030 4094 74400000 		_HEADER CMOVE,5,"CMOVE"
 2030      05434D4F 
 2030      564500BF 
 2031 40a0 012E     		CMP TOS,#1 
 2032 40a2 0DD4     		BMI CMOV3 
 2033 40a4 57F8042B 		LDR	T2,[DSP],#4
 2034 40a8 57F8043B 		LDR	T3,[DSP],#4
 2035 40ac 03E0     		B CMOV1
 2036              	CMOV0:
 2037 40ae 13F8015B 		LDRB	WP,[T3],#1
 2038 40b2 02F8015B 		STRB	WP,[T2],#1
 2039              	CMOV1:
 2040 40b6 3600     		MOVS	TOS,TOS
 2041 40b8 04D0     		BEQ	CMOV2
 2042 40ba A6F10106 		SUB	TOS,TOS,#1
 2043 40be F6E7     		B CMOV0
 2044              	CMOV3: 
 2045 40c0 07F10807 		ADD  DSP,#2*CELLL  
 2046              	CMOV2:
 2047 40c4 57F8046B 		_POP
 2048 40c8 FEF77EBF 		_NEXT
 2049              	
 2050              	/*********************************
 2051              		MOVE ( a1 a2 u -- )
 2052              		alias for CMOVE 
 2053              	*********************************/
 2054 40cc 98400000 		_HEADER MOVE,4,"MOVE"
 2054      044D4F56 
 2054      450000BF 
 2055 40d8 E2E7     		B CMOVE 
 2056              	
 2057              	
 2058              	/***************************
 2059              	    WMOVE	( a1 a2 u -- )
 2060              	 	Copy u byte from a1 to a2
 2061              		round u to upper modulo 4 
 2062              	*******************************/
 2063 40da D0400000 		_HEADER WMOVE,5,"WMOVE"
ARM GAS  forth.s 			page 154


 2063      05574D4F 
 2063      5645
 2064 40e4 4FF00400 		MOV T0,#4
 2065 40e8 06F10306 		ADD TOS,#3 
 2066 40ec 26F00306 		BIC TOS,#3
 2067 40f0 57F8041B 		LDR	T1,[DSP],#4 // dest
 2068 40f4 57F8042B 		LDR	T2,[DSP],#4 // src 
 2069 40f8 8A42     		CMP T2,T1 
 2070 40fa 08D5     		BPL MOVE1
 2071 40fc 6FF00300 		MOV T0,#-4 
 2072 4100 3144     		ADD T1,TOS
 2073 4102 3244     		ADD T2,TOS 
 2074 4104 01E0     		B MOVE3
 2075              	MOVE0:
 2076 4106 1568     		LDR	WP,[T2]
 2077 4108 0D60     		STR	WP,[T1]
 2078              	MOVE3: 
 2079 410a 0144     		ADD T1,T0 
 2080 410c 0244     		ADD T2,T0 
 2081              	MOVE1:
 2082 410e 3600     		MOVS TOS,TOS
 2083 4110 02D0     		BEQ	MOVE2
 2084 4112 A6F10406 		SUB	TOS,TOS,#4
 2085 4116 F6E7     		B MOVE0
 2086              	MOVE2:
 2087 4118 57F8046B 		_POP
 2088 411c FEF754BF 		_NEXT
 2089              	
 2090              	/**************************
 2091              	    FILL	( b u c -- )
 2092              	 	Fill u bytes of character
 2093              		c to area beginning at b.
 2094              	******************************/
 2095 4120 DE400000 		_HEADER FILL,4,"FILL"
 2095      0446494C 
 2095      4C0000BF 
 2096 412c 03CF     		LDMFD DSP!,{T0,T1} 
 2097 412e 0000     		MOVS T0,T0 
 2098 4130 03D0     		BEQ FILL2
 2099              	FILL1:
 2100 4132 01F8016B 		STRB	TOS,[T1],#1
 2101 4136 0138     		SUBS	T0,T0,#1
 2102 4138 FBD1     		BNE FILL1
 2103              	FILL2:
 2104 413a 57F8046B 		_POP
 2105 413e FEF743BF 		_NEXT
 2106              	
 2107              	/*****************************
 2108              	CORE EXTENSION 
 2109              		ERASE ( a u -- )
 2110              		fill u bytes with zeros 
 2111              		starting at a 
 2112              	*****************************/
 2113 4142 24410000 		_HEADER ERASE,5,"ERASE"
 2113      05455241 
 2113      5345
 2114 414c 504700BF 		_NEST 
ARM GAS  forth.s 			page 155


 2115 4150 A9330000 		_ADR	DUPP 
 2116 4154 29340000 		_ADR	ZGREAT 
 2117 4158 2F320000 		_QBRAN	1f 
 2117      70410000 
 2118 4160 EF310000 		_DOLIT	0 
 2118      00000000 
 2119 4168 2D410000 		_ADR	FILL 
 2120 416c CF2F0000 		_UNNEST 
 2121 4170 B5360000 	1:   _ADR	DDROP 
 2122 4174 CF2F0000 		_UNNEST 
 2123              	
 2124              	
 2125              	/*****************************
 2126              	    PACK$	( b u a -- a )
 2127              	 	Build a counted word with
 2128              		u characters from b. 
 2129              		Null fill.
 2130              	*****************************/
 2131 4178 46410000 		_HEADER PACKS,5,"PACK$"
 2131      05504143 
 2131      4B2400BF 
 2132 4184 504700BF 		_NEST
 2133 4188 353F0000 		_ADR	ALGND
 2134 418c A9330000 		_ADR	DUPP
 2135 4190 15330000 		_ADR	TOR		// strings only on cell boundary
 2136 4194 E9330000 		_ADR	OVER
 2137 4198 E5340000 		_ADR	PLUS
 2138 419c 41350000 		_ADR	ONEP 
 2139 41a0 EF310000 		_DOLIT 	0xFFFFFFFC
 2139      FCFFFFFF 
 2140 41a8 65340000 		_ADR	ANDD			// count mod cell
 2141 41ac EF310000 		_DOLIT 	0
 2141      00000000 
 2142 41b4 B9330000 		_ADR	SWAP
 2143 41b8 71320000 		_ADR	STORE			// null fill cell
 2144 41bc E5320000 		_ADR	RAT
 2145 41c0 DD360000 		_ADR	DDUP
 2146 41c4 91320000 		_ADR	CSTOR
 2147 41c8 41350000 		_ADR	ONEP			// save count
 2148 41cc B9330000 		_ADR	SWAP
 2149 41d0 A1400000 		_ADR	CMOVE
 2150 41d4 B1320000 		_ADR	RFROM
 2151 41d8 CF2F0000 		_UNNEST   			// move string
 2152              	
 2153              	/***********************************
 2154              	  Numeric output, single precision
 2155              	***********************************/
 2156              	
 2157              	/**************************
 2158              	    DIGIT	( u -- c )
 2159              	 	Convert digit u to 
 2160              		a character.
 2161              	***************************/
 2162 41dc 7C410000 		_HEADER DIGIT,5,"DIGIT"
 2162      05444947 
 2162      495400BF 
 2163 41e8 504700BF 		_NEST
ARM GAS  forth.s 			page 156


 2164 41ec EF310000 		_DOLIT 9
 2164      09000000 
 2165 41f4 E9330000 		_ADR	OVER
 2166 41f8 85380000 		_ADR	LESS
 2167 41fc EF310000 		_DOLIT	7
 2167      07000000 
 2168 4204 65340000 		_ADR	ANDD
 2169 4208 E5340000 		_ADR	PLUS
 2170 420c EF310000 		_DOLIT	'0'
 2170      30000000 
 2171 4214 E5340000 		_ADR	PLUS 
 2172 4218 CF2F0000 		_UNNEST
 2173              	
 2174              	/*********************************
 2175              	    EXTRACT	( ud base -- ud c )
 2176              	 	Extract the least significant
 2177              		digit from positive double.
 2178              	**********************************/
 2179 421c E0410000 		_HEADER EXTRC,7,"EXTRACT"
 2179      07455854 
 2179      52414354 
 2180 4228 504700BF 		_NEST
 2181 422c 7D3D0000 		_ADR	DSLMOD
 2182 4230 8D360000 		_ADR	ROT
 2183 4234 E9410000 		_ADR	DIGIT
 2184 4238 CF2F0000 		_UNNEST
 2185              	
 2186              	/***************************
 2187              	    <#	  ( -- )
 2188              	 	Initiate the numeric
 2189              		output process.
 2190              	****************************/
 2191 423c 20420000 		_HEADER BDIGS,2,"<#"
 2191      023C2300 
 2192 4244 504700BF 		_NEST
 2193 4248 0D400000 		_ADR	PAD
 2194 424c 993A0000 		_ADR	HLD
 2195 4250 71320000 		_ADR	STORE
 2196 4254 CF2F0000 		_UNNEST
 2197              	
 2198              	/*********************************
 2199              	    HOLD	( c -- )
 2200              	 	Insert a character into the 
 2201              		numeric output string.
 2202              	**********************************/
 2203 4258 40420000 		_HEADER HOLD,4,"HOLD"
 2203      04484F4C 
 2203      440000BF 
 2204 4264 504700BF 		_NEST
 2205 4268 993A0000 		_ADR	HLD
 2206 426c 85320000 		_ADR	AT
 2207 4270 51350000 		_ADR	ONEM
 2208 4274 A9330000 		_ADR	DUPP
 2209 4278 993A0000 		_ADR	HLD
 2210 427c 71320000 		_ADR	STORE
 2211 4280 91320000 		_ADR	CSTOR
 2212 4284 CF2F0000 		_UNNEST
ARM GAS  forth.s 			page 157


 2213              	
 2214              	/********************************
 2215              	CORE EXTENSION 
 2216              		HOLDS ( c-addr u -- )
 2217              		add string to pictured 
 2218              		numeric output.
 2219              	*********************************/
 2220 4288 5C420000 		_HEADER HOLDS,5,"HOLDS" 
 2220      05484F4C 
 2220      445300BF 
 2221 4294 504700BF 		_NEST 
 2222 4298 993A0000 		_ADR	HLD   
 2223 429c 85320000 		_ADR	AT     // c-addr u a 
 2224 42a0 E9330000 		_ADR	OVER 
 2225 42a4 F5340000 		_ADR	SUBB 
 2226 42a8 A9330000 		_ADR	DUPP 
 2227 42ac 993A0000 		_ADR	HLD 
 2228 42b0 71320000 		_ADR	STORE
 2229 42b4 B9330000 		_ADR	SWAP  
 2230 42b8 A1400000 		_ADR	CMOVE  
 2231 42bc CF2F0000 		_UNNEST 
 2232              	
 2233              	
 2234              	/***********************
 2235              	    #	   ( ud -- ud )
 2236              	 	Extract one digit 
 2237              		from ud and append 
 2238              		the digit to output 
 2239              		string.
 2240              	*************************/
 2241 42c0 8C420000 		_HEADER DIG,1,"#"
 2241      012300BF 
 2242 42c8 504700BF 		_NEST
 2243 42cc 053A0000 		_ADR	BASE
 2244 42d0 85320000 		_ADR	AT
 2245 42d4 29420000 		_ADR	EXTRC
 2246 42d8 65420000 		_ADR	HOLD
 2247 42dc CF2F0000 		_UNNEST
 2248              	
 2249              	/***************************
 2250              	    #S	  ( ud -- 0 )
 2251              	 	Convert ud until all 
 2252              		digits are added to 
 2253              		the output string.
 2254              	***************************/
 2255 42e0 C4420000 		_HEADER DIGS,2,"#S"
 2255      02235300 
 2256 42e8 504700BF 		_NEST
 2257              	DIGS1:
 2258 42ec C9420000 	    _ADR	DIG
 2259 42f0 DD360000 		_ADR	DDUP
 2260 42f4 79340000 		_ADR    ORR 
 2261 42f8 2F320000 		_QBRAN 	DIGS2
 2261      08430000 
 2262 4300 57320000 		_BRAN	DIGS1
 2262      EC420000 
 2263              	DIGS2:
ARM GAS  forth.s 			page 158


 2264 4308 89330000 		 _ADR DROP 
 2265 430c CF2F0000 		 _UNNEST
 2266              	
 2267              	/*********************
 2268              	    SIGN	( n -- )
 2269              	 	Add a minus sign
 2270              		to the numeric
 2271              		output string.
 2272              	*********************/
 2273 4310 E4420000 		_HEADER SIGN,4,"SIGN"
 2273      04534947 
 2273      4E0000BF 
 2274 431c 504700BF 		_NEST
 2275 4320 19340000 		_ADR	ZLESS
 2276 4324 2F320000 		_QBRAN	SIGN1
 2276      38430000 
 2277 432c EF310000 		_DOLIT '-'
 2277      2D000000 
 2278 4334 65420000 		_ADR	HOLD
 2279              	SIGN1:
 2280 4338 CF2F0000 		  _UNNEST
 2281              	
 2282              	/*************************
 2283              	    #>  ( w -- b u )
 2284              	 	Prepare the output 
 2285              		word to be TYPE'd.
 2286              	************************/
 2287 433c 14430000 		_HEADER EDIGS,2,"#>"
 2287      02233E00 
 2288 4344 504700BF 		_NEST
 2289 4348 89330000 		_ADR	DROP
 2290 434c 993A0000 		_ADR	HLD
 2291 4350 85320000 		_ADR	AT
 2292 4354 0D400000 		_ADR	PAD
 2293 4358 E9330000 		_ADR	OVER
 2294 435c F5340000 		_ADR	SUBB
 2295 4360 CF2F0000 		_UNNEST
 2296              	
 2297              	/**************************
 2298              	    str	 ( n -- b u )
 2299              	 	Convert a signed 
 2300              		integer to a numeric 
 2301              		string.
 2302              	hidden word used by compiler
 2303              	***************************/
 2304              	STRR:
 2305 4364 504700BF 		_NEST
 2306 4368 353D0000 		_ADR 	STOD 
 2307 436c A9330000 		_ADR	DUPP
 2308 4370 15330000 		_ADR	TOR
 2309 4374 11370000 		_ADR	DABS
 2310 4378 45420000 		_ADR	BDIGS
 2311 437c E9420000 		_ADR	DIGS
 2312 4380 B1320000 		_ADR	RFROM
 2313 4384 1D430000 		_ADR	SIGN
 2314 4388 45430000 		_ADR	EDIGS
 2315 438c CF2F0000 		_UNNEST
ARM GAS  forth.s 			page 159


 2316              	
 2317              	/*************************
 2318              	    HEX	 ( -- )
 2319              	 	Use radix 16 as 
 2320              		base for numeric 
 2321              		conversions.
 2322              	*************************/
 2323 4390 40430000 		_HEADER HEX,3,"HEX"
 2323      03484558 
 2324 4398 504700BF 		_NEST
 2325 439c EF310000 		_DOLIT 16
 2325      10000000 
 2326 43a4 053A0000 		_ADR	BASE
 2327 43a8 71320000 		_ADR	STORE
 2328 43ac CF2F0000 		_UNNEST
 2329              	
 2330              	/**************************
 2331              		BIN ( -- )
 2332              		Use radix 2 as 
 2333              		base for numeric 
 2334              		conversion 
 2335              	**************************/
 2336 43b0 94430000 		_HEADER BIN,3,"BIN"
 2336      0342494E 
 2337 43b8 504700BF 		_NEST 
 2338 43bc EF310000 		_DOLIT 2 
 2338      02000000 
 2339 43c4 053A0000 		_ADR BASE 
 2340 43c8 71320000 		_ADR STORE
 2341 43cc CF2F0000 		_UNNEST 
 2342              	
 2343              	/************************
 2344              	    DECIMAL	( -- )
 2345              	 	Use radix 10 as base
 2346              		for numeric conversions.
 2347              	*************************/
 2348 43d0 B4430000 		_HEADER DECIM,7,"DECIMAL"
 2348      07444543 
 2348      494D414C 
 2349 43dc 504700BF 		_NEST
 2350 43e0 EF310000 		_DOLIT 10
 2350      0A000000 
 2351 43e8 053A0000 		_ADR	BASE
 2352 43ec 71320000 		_ADR	STORE
 2353 43f0 CF2F0000 		_UNNEST
 2354              	
 2355              	/************************************
 2356              	  Numeric input
 2357              	***********************************/
 2358              	
 2359              	/***********************************
 2360              	    DIGIT?	( c base -- u t )
 2361              	 	Convert a character to its 
 2362              		numeric value. A flag 
 2363              		indicates success.
 2364              	**********************************/
 2365 43f4 D4430000 		_HEADER DIGTQ,6,"DIGIT?"
ARM GAS  forth.s 			page 160


 2365      06444947 
 2365      49543F00 
 2366 4400 504700BF 		_NEST
 2367 4404 15330000 		_ADR	TOR
 2368 4408 EF310000 		_DOLIT 	'0'
 2368      30000000 
 2369 4410 F5340000 		_ADR	SUBB
 2370 4414 EF310000 		_DOLIT 9
 2370      09000000 
 2371 441c E9330000 		_ADR	OVER
 2372 4420 85380000 		_ADR	LESS
 2373 4424 2F320000 		_QBRAN	DGTQ1
 2373      4C440000 
 2374 442c EF310000 		_DOLIT 7
 2374      07000000 
 2375 4434 F5340000 		_ADR	SUBB
 2376 4438 A9330000 		_ADR	DUPP
 2377 443c EF310000 		_DOLIT	10
 2377      0A000000 
 2378 4444 85380000 		_ADR	LESS
 2379 4448 79340000 		_ADR	ORR
 2380              	DGTQ1:
 2381 444c A9330000 		_ADR	DUPP
 2382 4450 B1320000 		_ADR	RFROM
 2383 4454 6D380000 		_ADR	ULESS
 2384 4458 CF2F0000 		_UNNEST
 2385              	
 2386              	
 2387              	/************************************
 2388              		D>S ( d -- s )
 2389              	if d not in {0x80000001...0x7fffffff} then
 2390              	single overflow to 0x80000000
 2391              	******************************************/
 2392 445c F8430000 		_HEADER DTOS,3,"D>S"
 2392      03443E53 
 2393 4464 504700BF 		_NEST 
 2394 4468 F5350000 		_ADR QDUP
 2395 446c 43320000 		_TBRAN 1f 
 2395      78440000 
 2396 4474 CF2F0000 		_UNNEST 
 2397              	1:	
 2398 4478 EF310000 		_DOLIT -1
 2398      FFFFFFFF 
 2399 4480 2D380000 		_ADR EQUAL 
 2400 4484 E9330000 		_ADR OVER 
 2401 4488 19340000 		_ADR ZLESS 
 2402 448c 65340000 		_ADR ANDD   
 2403 4490 2F320000 		_QBRAN 2f
 2403      9C440000 
 2404 4498 CF2F0000 		_UNNEST   
 2405              	2:  // overflow
 2406 449c 89330000 		_ADR DROP 
 2407 44a0 EF310000 		_DOLIT 0X80000000
 2407      00000080 
 2408 44a8 CF2F0000 	 	_UNNEST 
 2409              	 
 2410              		
ARM GAS  forth.s 			page 161


 2411              	
 2412              	/*****************************************
 2413              		>NUMBER ( ud1 adr1 u1 -- ud2 adr2 u2 )
 2414              	  convert string to unsigned double 
 2415              	  adding to ud1 
 2416              	input:
 2417              		ud1  unsiged double 
 2418              		adr1  string address 
 2419              		u1    string length 
 2420              	outpout:
 2421              		ud2   modifield ud1 
 2422              		adr2  point to char not converted 
 2423              		u2    char left in string 
 2424              	**************************************/
 2425 44ac 60440000 		_HEADER TONBR,7,">NUMBER"
 2425      073E4E55 
 2425      4D424552 
 2426 44b8 504700BF 		_NEST 
 2427 44bc A9330000 		_ADR DUPP 
 2428 44c0 2F320000 		_QBRAN 9f 
 2428      28450000 
 2429 44c8 E9330000 	1: 	_ADR OVER  // d a u a 
 2430 44cc A5320000 		_ADR CAT   // d  a u c 
 2431 44d0 053A0000 		_ADR BASE   
 2432 44d4 85320000 		_ADR AT      // d a u c base
 2433 44d8 01440000 		_ADR DIGTQ   // d a u n flag 
 2434 44dc 2F320000 		_QBRAN 8f
 2434      24450000 
 2435 44e4 15330000 		_ADR TOR   	 
 2436 44e8 51350000 		_ADR ONEM 
 2437 44ec CD330000 		_ADR DSWAP // a u d 
 2438 44f0 053A0000 		_ADR BASE 
 2439 44f4 85320000 		_ADR AT 
 2440 44f8 1D3E0000 		_ADR DSTAR 
 2441 44fc B1320000 		_ADR RFROM 
 2442 4500 EF310000 		_DOLIT 0    
 2442      00000000 
 2443 4508 F1360000 		_ADR DPLUS 
 2444 450c CD330000 		_ADR DSWAP 
 2445 4510 B9330000 		_ADR SWAP 
 2446 4514 41350000 		_ADR ONEP
 2447 4518 B9330000 		_ADR SWAP  
 2448 451c 57320000 		_BRAN 1b 
 2448      C8440000 
 2449 4524 89330000 	8:  _ADR DROP
 2450 4528 CF2F0000 	9:	_UNNEST 
 2451              	
 2452              	
 2453              	/**************************
 2454              	 CHAR? ( a cnt c -- a+ cnt- t | a cnt f )
 2455              	 check for charcter c 
 2456              	 move pointer if *a==c  
 2457              	**************************/
 2458              	CHARQ:
 2459 452c 7868     	    ldr T0,[DSP,#4]
 2460 452e 10F8011B 	    ldrb T1,[T0],#1 
 2461 4532 3246     	    mov T2,TOS 
ARM GAS  forth.s 			page 162


 2462 4534 86EA0606 	    eor TOS,TOS
 2463 4538 9142     	    cmp T1,T2
 2464 453a 06D1     	    bne 1f 
 2465 453c 7860     	    str T0,[DSP,#4]
 2466 453e 3868     		ldr T0,[DSP]
 2467 4540 A0F10100 		sub T0,#1 
 2468 4544 3860     		str T0,[DSP]
 2469 4546 6FEA0606 	    mvn TOS,TOS  
 2470 454a FEF73DBD 	1:  _NEXT
 2471              	
 2472              	
 2473              	/*********************************
 2474              	   NEG? ( a cnt -- a cnt f |a+ cnt- t )
 2475              	   skip '-'|'+' return -1 if '-' 
 2476              	   else return 0 
 2477              	*********************************/
 2478              	NEGQ: 
 2479 454e 47F8046D 		_PUSH 
 2480 4552 86EA0606 		eor TOS,TOS // false flag 
 2481 4556 7868     		ldr T0,[DSP,#4]
 2482 4558 10F8011B 		ldrb T1,[T0],#1
 2483 455c 2D29     		cmp T1,#'-' 
 2484 455e 02D0     		beq 1f
 2485 4560 2B29     		cmp T1,#'+'
 2486 4562 07D1     		bne 3f 
 2487 4564 01E0     		b 2f 
 2488 4566 6FEA0606 	1:  mvn TOS,TOS  // true flag 
 2489 456a 7860     	2:	str T0,[DSP,#4]
 2490 456c 3868     		ldr T0,[DSP]
 2491 456e A0F10100 		sub T0,#1 
 2492 4572 3860     		str T0,[DSP]
 2493 4574 FEF728BD 	3:	_NEXT 
 2494              	
 2495              	
 2496              	/************************
 2497              		SET_BASE ( a cnt -- a++ cnt- )
 2498              	 check for base modifier 
 2499              	 $ -> hexadecimal 
 2500              	 ? -> binary 
 2501              	*************************/
 2502              	SET_BASE:
 2503 4578 504700BF 		_NEST 
 2504 457c EF310000 		_DOLIT  '$' 
 2504      24000000 
 2505 4584 2D450000 		_ADR    CHARQ 
 2506 4588 2F320000 		_QBRAN  1f 
 2506      98450000 
 2507              	// hexadecimal number 
 2508 4590 99430000 		_ADR    HEX
 2509 4594 CF2F0000 		_UNNEST 
 2510 4598 EF310000 	1:  _DOLIT  '%'   // -- a cnt '%'
 2510      25000000 
 2511 45a0 2D450000 		_ADR	CHARQ  // -- a cnt f 
 2512 45a4 2F320000 		_QBRAN 2f
 2512      B0450000 
 2513              	// binary number
 2514 45ac B9430000 		_ADR	BIN 
ARM GAS  forth.s 			page 163


 2515 45b0 CF2F0000 	2:	_UNNEST
 2516              	
 2517              	
 2518              	/**********************************
 2519              	    INT?	( a -- a+ cnt- n )
 2520              	 	parse string  at 'a' for 
 2521              		integer. Accept double  
 2522              		but convert to single 
 2523              		with possible overflow 
 2524              		integer forms:
 2525              			[-]hex_digit+  | 
 2526              			$[-]hex_digit+ |
 2527              			%[-]bin_digit+ | 
 2528              			[-]dec_digit+ 
 2529              		output:
 2530              			a+ updated string pointer 
 2531              			cnt- updated not parsed count 
 2532              			n  integer  	
 2533              	**********************************/
 2534 45b4 B0440000 		_HEADER INTQ,4,"INT?"
 2534      04494E54 
 2534      3F0000BF 
 2535 45c0 504700BF 		_NEST
 2536              	// save BASE 
 2537 45c4 053A0000 		_ADR BASE 
 2538 45c8 85320000 		_ADR AT 
 2539 45cc 15330000 		_ADR TOR 
 2540 45d0 59390000 		_ADR	COUNT  // a+ cnt 
 2541              	// check for base prefix 	
 2542 45d4 79450000 		_ADR	SET_BASE 
 2543              	2: // check for sign 
 2544              	   // a and cnt modified if '-'|'+'
 2545 45d8 4F450000 		_ADR    NEGQ 
 2546 45dc 15330000 		_ADR	TOR  // -- a+ cnt- R: sign 
 2547              	// initialize double integer to 0 
 2548 45e0 EF310000 		_DOLIT  0
 2548      00000000 
 2549 45e8 A9330000 		_ADR	DUPP 
 2550 45ec CD330000 		_ADR	DSWAP // d a+ cnt- R: sign 
 2551              	// parse all integer digits 
 2552 45f0 B9440000 		_ADR    TONBR // d a+ cnt- 
 2553 45f4 CD330000 		_ADR	DSWAP 
 2554 45f8 B1320000 		_ADR	RFROM 
 2555 45fc 2F320000 		_QBRAN 3f 
 2555      08460000 
 2556 4604 75390000 		_ADR   DNEGA 
 2557 4608 65440000 	3:  _ADR   DTOS
 2558              	7: // restore BASE 
 2559 460c B1320000 		_ADR	RFROM
 2560 4610 053A0000 		_ADR	BASE
 2561 4614 71320000 		_ADR	STORE
 2562 4618 CF2F0000 		_UNNEST
 2563              	
 2564              	
 2565              	/********************************
 2566              	    NUMBER? ( a -- int -1 | float -2 | a 0 )
 2567              	    parse number, integer or float 
ARM GAS  forth.s 			page 164


 2568              	    if not a number return ( a 0 ) 
 2569              	    if i return ( integer -1 ) 
 2570              		if float return ( float -2 )
 2571              	**********************************/
 2572 461c B8450000 	    _HEADER NUMBERQ,7,"NUMBER?"
 2572      074E554D 
 2572      4245523F 
 2573 4628 504700BF 	    _NEST
 2574 462c A9330000 		_ADR DUPP 
 2575 4630 15330000 		_ADR TOR  // R: a 
 2576 4634 C1450000 	    _ADR INTQ // a -- a+ cnt- n  
 2577 4638 15330000 	    _ADR TOR  // -- a+ cnt- R: a n 
 2578 463c F5350000 		_ADR QDUP
 2579 4640 43320000 	    _TBRAN 2f
 2579      94460000 
 2580              	// all string parsed 	
 2581 4648 89330000 		_ADR DROP
 2582 464c EF310000 		_DOLIT 0X80000000
 2582      00000080 
 2583 4654 E5320000 		_ADR RAT 
 2584 4658 2D380000 		_ADR EQUAL 
 2585 465c 43320000 		_TBRAN 1f  
 2585      7C460000 
 2586 4664 B1320000 		_ADR RFROM 
 2587 4668 EF310000 		_DOLIT -1  
 2587      FFFFFFFF 
 2588 4670 B1320000 		_ADR RFROM 
 2589 4674 89330000 		_ADR DROP 
 2590 4678 CF2F0000 		_UNNEST  
 2591              	1: // integer overflow 
 2592 467c B1320000 		_ADR RFROM // a n  
 2593 4680 89330000 		_ADR DROP  
 2594 4684 B1320000 		_ADR RFROM // A 
 2595 4688 EF310000 		_DOLIT 0 
 2595      00000000 
 2596 4690 CF2F0000 		_UNNEST 
 2597              	2: // try float
 2598 4694 B1320000 		_ADR RFROM // a+ cnt- n 
 2599 4698 B1530000 		_ADR PRESE
 2600 469c B1320000 		_ADR RFROM // a -- 
 2601 46a0 D5280000 	    _ADR FLOATQ
 2602 46a4 CF2F0000 	    _UNNEST 
 2603              	
 2604              	/********************
 2605              	  console I/O
 2606              	********************/
 2607              	
 2608              	/**********************
 2609              	    SPACE	( -- )
 2610              	 	Send the blank 
 2611              		character to 
 2612              		the output device.
 2613              	************************/
 2614 46a8 20460000 		_HEADER SPACE,5,"SPACE"
 2614      05535041 
 2614      434500BF 
 2615 46b4 504700BF 		_NEST
ARM GAS  forth.s 			page 165


 2616 46b8 A1350000 		_ADR	BLANK
 2617 46bc 91300000 		_ADR	EMIT
 2618 46c0 CF2F0000 		_UNNEST
 2619              	
 2620              	/***************************
 2621              	    SPACES	( +n -- )
 2622              	 	Send n spaces to the 
 2623              		output device.
 2624              	****************************/
 2625 46c4 AC460000 		_HEADER SPACS,6,"SPACES"
 2625      06535041 
 2625      43455300 
 2626 46d0 504700BF 		_NEST
 2627 46d4 EF310000 		_DOLIT	0
 2627      00000000 
 2628 46dc D5380000 		_ADR	MAX
 2629 46e0 15330000 		_ADR	TOR
 2630 46e4 57320000 		_BRAN	CHAR2
 2630      F0460000 
 2631              	CHAR1:
 2632 46ec B5460000 		_ADR	SPACE
 2633              	CHAR2:
 2634 46f0 11320000 		_DONXT	CHAR1
 2634      EC460000 
 2635 46f8 CF2F0000 		_UNNEST
 2636              	
 2637              	/***********************
 2638              	    TYPE	( b u -- )
 2639              	 	Output u characters 
 2640              		from b.
 2641              	************************/
 2642 46fc C8460000 		_HEADER TYPEE,4,"TYPE"
 2642      04545950 
 2642      450000BF 
 2643 4708 504700BF 		_NEST
 2644 470c 15330000 		_ADR  TOR   // ( a+1 -- R: u )
 2645 4710 57320000 		_BRAN	TYPE2
 2645      24470000 
 2646              	TYPE1:  
 2647 4718 59390000 		_ADR  COUNT
 2648 471c 513F0000 		_ADR TCHAR
 2649 4720 91300000 		_ADR EMIT
 2650              	TYPE2:  
 2651 4724 11320000 		_DONXT	TYPE1
 2651      18470000 
 2652 472c 89330000 		_ADR	DROP
 2653 4730 CF2F0000 		_UNNEST
 2654              	
 2655              	/***************************
 2656              		\TYPE ( b u )
 2657              		like TYPE but without 
 2658              		filtering 
 2659              	***************************/
 2660 4734 00470000 		_HEADER SLTYPE,5,"\\TYPE"
 2660      055C5459 
 2660      504500BF 
 2661 4740 504700BF 		_NEST 
ARM GAS  forth.s 			page 166


 2662 4744 15330000 		_ADR	TOR 
 2663 4748 57320000 		_BRAN	2f 
 2663      58470000 
 2664 4750 59390000 	1:	_ADR	COUNT 
 2665 4754 91300000 		_ADR	EMIT 
 2666 4758 11320000 	2:  _DONXT	1b 
 2666      50470000 
 2667 4760 89330000 		_ADR	DROP 
 2668 4764 CF2F0000 		_UNNEST 
 2669              	
 2670              	
 2671              	
 2672              	/***************************
 2673              	    CR	  ( -- )
 2674              	 	Output a carriage return
 2675              		and a line feed.
 2676              	****************************/
 2677 4768 38470000 		_HEADER CR,2,"CR"
 2677      02435200 
 2678 4770 504700BF 		_NEST
 2679 4774 EF310000 		_DOLIT	CRR
 2679      0D000000 
 2680 477c 91300000 		_ADR	EMIT
 2681 4780 EF310000 		_DOLIT	LF
 2681      0A000000 
 2682 4788 91300000 		_ADR	EMIT
 2683 478c CF2F0000 		_UNNEST
 2684              	
 2685              	/******************************************
 2686              	  do_$	( -- a u )
 2687              	  Return the address of a compiled string.
 2688              	  adjust return address to skip over it.
 2689              	hidden word used by compiler. 
 2690              	******************************************/
 2691              	DOSTR:
 2692 4790 504700BF 		_NEST     
 2693              	/* compiled string address is 2 levels deep */
 2694 4794 B1320000 		_ADR	RFROM	// { -- a1 }
 2695 4798 B1320000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2696 479c A9330000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2697 47a0 59390000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2698 47a4 E5340000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2699 47a8 353F0000 		_ADR	ALGND	//  end of string
 2700              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2701 47ac 15330000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2702 47b0 B9330000 		_ADR	SWAP	//  count tugged
 2703 47b4 15330000 		_ADR	TOR     //  ( -- a2) is string address
 2704 47b8 59390000 		_ADR    COUNT  //   ( a2 -- a2+1 cnt )
 2705 47bc CF2F0000 		_UNNEST
 2706              	
 2707              	/******************************************
 2708              	    $"|	( -- a u )
 2709              	 	Run time routine compiled by _". 
 2710              		Return address of a compiled string.
 2711              	hidden word used by compiler
 2712              	*****************************************/
 2713              	STRQP:
ARM GAS  forth.s 			page 167


 2714 47c0 504700BF 		_NEST
 2715 47c4 91470000 		_ADR	DOSTR
 2716 47c8 CF2F0000 		_UNNEST			// force a call to dostr
 2717              	
 2718              	
 2719              	/**********************
 2720              	    ."|	( -- )
 2721              	 	Run time routine of ." 
 2722              		Output a compiled string.
 2723              	hidden word used by compiler
 2724              	*****************************/
 2725              	DOTQP:
 2726 47cc 504700BF 		_NEST
 2727 47d0 91470000 		_ADR	DOSTR
 2728 47d4 09470000 		_ADR	TYPEE 
 2729 47d8 CF2F0000 		_UNNEST
 2730              	
 2731              	/*************************
 2732              		LPAD  ( n+ -- )
 2733              		emit n spaceS + 
 2734              		base character  
 2735              		16 -> $
 2736              		 2 -> %
 2737              		 other -> none 
 2738              	*************************/
 2739              	LPAD:
 2740 47dc 504700BF 		_NEST 
 2741 47e0 1D3A0000 		_ADR BCHR 
 2742 47e4 85320000 		_ADR  AT 
 2743 47e8 2F320000 		_QBRAN 3f 
 2743      54480000 
 2744 47f0 053A0000 		_ADR BASE 
 2745 47f4 85320000 		_ADR AT 
 2746 47f8 A9330000 		_ADR DUPP 
 2747 47fc EF310000 		_DOLIT 16
 2747      10000000 
 2748 4804 2D380000 		_ADR EQUAL 
 2749 4808 2F320000 		_QBRAN 1f
 2749      30480000 
 2750 4810 89330000 		_ADR DROP 
 2751 4814 EF310000 		_DOLIT '$'
 2751      24000000 
 2752 481c B9330000 	0:	_ADR  SWAP 
 2753 4820 51350000 		_ADR  ONEM 
 2754 4824 D1460000 		_ADR  SPACS 
 2755 4828 91300000 		_ADR  EMIT 
 2756 482c CF2F0000 		_UNNEST 
 2757 4830 EF310000 	1:  _DOLIT 2 
 2757      02000000 
 2758 4838 2D380000 		_ADR EQUAL 
 2759 483c 2F320000 		_QBRAN 3f
 2759      54480000 
 2760 4844 EF310000 		_DOLIT '%'
 2760      25000000 
 2761 484c 57320000 		_BRAN 0b   	
 2761      1C480000 
 2762 4854 D1460000 	3:	_ADR  SPACS 
ARM GAS  forth.s 			page 168


 2763 4858 CF2F0000 		_UNNEST 
 2764              	
 2765              	
 2766              	/******************************
 2767              	    .R	  ( n +n -- )
 2768              	 	Display an integer in a 
 2769              		field of n columns, 
 2770              		right justified.
 2771              	*******************************/
 2772 485c 6C470000 		_HEADER DOTR,2,".R"
 2772      022E5200 
 2773 4864 504700BF 		_NEST
 2774 4868 15330000 		_ADR	TOR
 2775 486c 353D0000 		_ADR    STOD 
 2776 4870 4D490000 		_ADR	DTOA 
 2777 4874 B1320000 		_ADR	RFROM
 2778 4878 E9330000 		_ADR	OVER
 2779 487c F5340000 		_ADR	SUBB
 2780 4880 DD470000 		_ADR    LPAD  
 2781 4884 09470000 		_ADR	TYPEE
 2782 4888 CF2F0000 		_UNNEST
 2783              	
 2784              	
 2785              	/*************************
 2786              	    U.R	 ( u +n -- )
 2787              	 	Display an unsigned 
 2788              		integer in n column, 
 2789              		right justified.
 2790              	***************************/
 2791 488c 60480000 		_HEADER UDOTR,3,"U.R"
 2791      03552E52 
 2792 4894 504700BF 		_NEST
 2793 4898 15330000 		_ADR    TOR 
 2794 489c EF310000 		_DOLIT  0
 2794      00000000 
 2795 48a4 4D490000 		_ADR    DTOA 
 2796 48a8 B1320000 		_ADR	RFROM
 2797 48ac E9330000 		_ADR	OVER
 2798 48b0 F5340000 		_ADR	SUBB
 2799 48b4 DD470000 		_ADR    LPAD  
 2800 48b8 09470000 		_ADR	TYPEE
 2801 48bc CF2F0000 		_UNNEST
 2802              	
 2803              	
 2804              	/************************
 2805              	    U.	  ( u -- )
 2806              	 	Display an unsigned 
 2807              		integer in free format.
 2808              	***************************/
 2809 48c0 90480000 		_HEADER UDOT,2,"U."
 2809      02552E00 
 2810 48c8 504700BF 		_NEST
 2811 48cc EF310000 		_DOLIT  0 
 2811      00000000 
 2812 48d4 45420000 		_ADR	BDIGS
 2813 48d8 E9420000 		_ADR	DIGS
 2814 48dc 45430000 		_ADR	EDIGS
ARM GAS  forth.s 			page 169


 2815 48e0 EF310000 		_DOLIT  1 
 2815      01000000 
 2816 48e8 DD470000 		_ADR	LPAD  
 2817 48ec 09470000 		_ADR	TYPEE
 2818 48f0 CF2F0000 		_UNNEST
 2819              	
 2820              	
 2821              	/************************
 2822              	    .	   ( w -- )
 2823              	 	Display an integer 
 2824              		in free format, 
 2825              		preceeded by a space.
 2826              	**************************/
 2827 48f4 C4480000 		_HEADER DOT,1,"."
 2827      012E00BF 
 2828 48fc 504700BF 		_NEST
 2829 4900 B5460000 		_ADR    SPACE 
 2830 4904 053A0000 		_ADR	BASE
 2831 4908 85320000 		_ADR	AT
 2832 490c EF310000 	1:	_DOLIT  10
 2832      0A000000 
 2833 4914 8D340000 		_ADR	XORR	// decimal base?
 2834 4918 2F320000 		_QBRAN	DOT1
 2834      28490000 
 2835 4920 C9480000 		_ADR	UDOT    // no,display unsigned
 2836 4924 CF2F0000 		_UNNEST			
 2837              	DOT1:
 2838 4928 353D0000 		_ADR    STOD 
 2839 492c 4D490000 	    _ADR	DTOA
 2840 4930 EF310000 		_DOLIT  1 
 2840      01000000 
 2841 4938 DD470000 		_ADR	LPAD  
 2842 493c 09470000 	1:	_ADR	TYPEE
 2843 4940 CF2F0000 		_UNNEST			// yes, display signed
 2844              	
 2845              	
 2846              	/*************************
 2847              	  D>A ( d -- p u )
 2848              	  convert double integer to 
 2849              	  ASCII string in pad  
 2850              	input:
 2851              		d    int64 to convert 
 2852              	output:
 2853              		p     pointer to string  
 2854              		u     string length 
 2855              	**************************/
 2856 4944 F8480000 		_HEADER DTOA,3,"D>A" 
 2856      03443E41 
 2857 494c 504700BF 		_NEST
 2858 4950 A9330000 	    _ADR DUPP 
 2859 4954 15330000 		_ADR TOR 
 2860 4958 11370000 		_ADR DABS 
 2861 495c 45420000 		_ADR BDIGS
 2862 4960 E9420000 		_ADR DIGS 
 2863 4964 B1320000 		_ADR RFROM 
 2864 4968 1D430000 		_ADR SIGN  
 2865 496c 45430000 		_ADR EDIGS 
ARM GAS  forth.s 			page 170


 2866 4970 CF2F0000 		_UNNEST 
 2867              	
 2868              	
 2869              	/*************************
 2870              	   D. ( d -- )
 2871              	   display double integer 
 2872              	**************************/
 2873 4974 48490000 		_HEADER DDOT,2,"D."
 2873      02442E00 
 2874 497c 504700BF 		_NEST
 2875 4980 B5460000 		_ADR SPACE 
 2876 4984 4D490000 		_ADR DTOA 
 2877 4988 EF310000 		_DOLIT 1
 2877      01000000 
 2878 4990 DD470000 		_ADR LPAD 
 2879 4994 09470000 		_ADR TYPEE
 2880 4998 CF2F0000 		_UNNEST 
 2881              	
 2882              	/**************************
 2883              		UD. ( d -- )
 2884              		display unsigned double
 2885              	**************************/
 2886 499c 78490000 		_HEADER UDDOT,3,"UD."
 2886      0355442E 
 2887 49a4 504700BF 		_NEST
 2888 49a8 B5460000 		_ADR SPACE 
 2889 49ac 45420000 		_ADR BDIGS
 2890 49b0 E9420000 		_ADR DIGS 
 2891 49b4 45430000 		_ADR EDIGS 
 2892 49b8 EF310000 		_DOLIT 1
 2892      01000000 
 2893 49c0 DD470000 		_ADR LPAD 
 2894 49c4 09470000 		_ADR TYPEE
 2895 49c8 CF2F0000 		_UNNEST 
 2896              	
 2897              	
 2898              	
 2899              	/***********************
 2900              		H. ( w -- )
 2901              		display integer 
 2902              		in hexadecimal 
 2903              	*********************/
 2904 49cc A0490000 		_HEADER HDOT,2,"H."
 2904      02482E00 
 2905 49d4 504700BF 		_NEST 
 2906 49d8 053A0000 		_ADR BASE
 2907 49dc 85320000 		_ADR AT 
 2908 49e0 B9330000 		_ADR SWAP
 2909 49e4 99430000 		_ADR HEX
 2910 49e8 EF310000 		_DOLIT 0 
 2910      00000000 
 2911 49f0 45420000 		_ADR BDIGS
 2912 49f4 E9420000 		_ADR DIGS
 2913 49f8 45430000 		_ADR EDIGS
 2914 49fc B5460000 		_ADR SPACE
 2915 4a00 EF310000 		_DOLIT '$'
 2915      24000000 
ARM GAS  forth.s 			page 171


 2916 4a08 91300000 		_ADR EMIT 
 2917 4a0c 09470000 		_ADR TYPEE
 2918 4a10 053A0000 		_ADR BASE
 2919 4a14 71320000 		_ADR STORE  
 2920 4a18 CF2F0000 		_UNNEST 
 2921              	
 2922              	
 2923              	/***********************
 2924              	    ?	   ( a -- )
 2925              	 	Display the contents
 2926              		in a memory cell.
 2927              	*************************/
 2928 4a1c D0490000 		_HEADER QUEST,1,"?"
 2928      013F00BF 
 2929 4a24 504700BF 		_NEST
 2930 4a28 85320000 		_ADR	AT
 2931 4a2c FD480000 		_ADR	DOT
 2932 4a30 CF2F0000 		_UNNEST
 2933              	
 2934              	/**************
 2935              	  Parsing
 2936              	***************/
 2937              	
 2938              	/*********************************************
 2939              	    parse	( b u c -- b u delta //  string> )
 2940              	 	Scan word delimited by c. 
 2941              		Return found string and its offset.
 2942              	hidden word used by PARSE
 2943              	**********************************************/
 2944              	PARS:
 2945 4a34 504700BF 		_NEST
 2946 4a38 293A0000 		_ADR	TEMP
 2947 4a3c 71320000 		_ADR	STORE
 2948 4a40 E9330000 		_ADR	OVER
 2949 4a44 15330000 		_ADR	TOR
 2950 4a48 A9330000 		_ADR	DUPP
 2951 4a4c 2F320000 		_QBRAN	PARS8
 2951      484B0000 
 2952 4a54 51350000 		_ADR	ONEM
 2953 4a58 293A0000 		_ADR	TEMP
 2954 4a5c 85320000 		_ADR	AT
 2955 4a60 A1350000 		_ADR	BLANK
 2956 4a64 2D380000 		_ADR	EQUAL
 2957 4a68 2F320000 		_QBRAN	PARS3
 2957      BC4A0000 
 2958 4a70 15330000 		_ADR	TOR
 2959              	PARS1:
 2960 4a74 A1350000 		_ADR	BLANK
 2961 4a78 E9330000 		_ADR	OVER
 2962 4a7c A5320000 		_ADR	CAT	 // skip leading blanks 
 2963 4a80 F5340000 		_ADR	SUBB
 2964 4a84 19340000 		_ADR	ZLESS
 2965 4a88 79370000 		_ADR	INVER
 2966 4a8c 2F320000 		_QBRAN	PARS2
 2966      B84A0000 
 2967 4a94 41350000 		_ADR	ONEP
 2968 4a98 11320000 		_DONXT	PARS1
ARM GAS  forth.s 			page 172


 2968      744A0000 
 2969 4aa0 B1320000 		_ADR	RFROM
 2970 4aa4 89330000 		_ADR	DROP
 2971 4aa8 EF310000 		_DOLIT	0
 2971      00000000 
 2972 4ab0 A9330000 		_ADR	DUPP
 2973 4ab4 CF2F0000 		_UNNEST
 2974              	PARS2:
 2975 4ab8 B1320000 		_ADR	RFROM
 2976              	PARS3:
 2977 4abc E9330000 		_ADR	OVER
 2978 4ac0 B9330000 		_ADR	SWAP
 2979 4ac4 15330000 		_ADR	TOR
 2980              	PARS4:
 2981 4ac8 293A0000 		_ADR	TEMP
 2982 4acc 85320000 		_ADR	AT
 2983 4ad0 E9330000 		_ADR	OVER
 2984 4ad4 A5320000 		_ADR	CAT
 2985 4ad8 F5340000 		_ADR	SUBB // scan for delimiter
 2986 4adc 293A0000 		_ADR	TEMP
 2987 4ae0 85320000 		_ADR	AT
 2988 4ae4 A1350000 		_ADR	BLANK
 2989 4ae8 2D380000 		_ADR	EQUAL
 2990 4aec 2F320000 		_QBRAN	PARS5
 2990      F84A0000 
 2991 4af4 19340000 		_ADR	ZLESS
 2992              	PARS5:
 2993 4af8 2F320000 		_QBRAN	PARS6
 2993      1C4B0000 
 2994 4b00 41350000 		_ADR	ONEP
 2995 4b04 11320000 		_DONXT	PARS4
 2995      C84A0000 
 2996 4b0c A9330000 		_ADR	DUPP
 2997 4b10 15330000 		_ADR	TOR
 2998 4b14 57320000 		_BRAN	PARS7
 2998      304B0000 
 2999              	PARS6:
 3000 4b1c B1320000 		_ADR	RFROM
 3001 4b20 89330000 		_ADR	DROP
 3002 4b24 A9330000 		_ADR	DUPP
 3003 4b28 41350000 		_ADR	ONEP
 3004 4b2c 15330000 		_ADR	TOR
 3005              	PARS7:
 3006 4b30 E9330000 		_ADR	OVER
 3007 4b34 F5340000 		_ADR	SUBB
 3008 4b38 B1320000 		_ADR	RFROM
 3009 4b3c B1320000 		_ADR	RFROM
 3010 4b40 F5340000 		_ADR	SUBB
 3011 4b44 CF2F0000 		_UNNEST
 3012              	PARS8:
 3013 4b48 E9330000 		_ADR	OVER
 3014 4b4c B1320000 		_ADR	RFROM
 3015 4b50 F5340000 		_ADR	SUBB
 3016 4b54 CF2F0000 		_UNNEST
 3017              	
 3018              	/************************************
 3019              	 CORE EXTENSION 
ARM GAS  forth.s 			page 173


 3020              	    PARSE	( c -- b u //  string> )
 3021              	 	Scan input stream and return 
 3022              		counted string delimited by c.
 3023              	************************************/
 3024 4b58 204A0000 		_HEADER PARSE,5,"PARSE"
 3024      05504152 
 3024      534500BF 
 3025 4b64 504700BF 		_NEST
 3026 4b68 15330000 		_ADR	TOR
 3027 4b6c 2D400000 		_ADR	TIB
 3028 4b70 553A0000 		_ADR	INN
 3029 4b74 85320000 		_ADR	AT
 3030 4b78 E5340000 		_ADR	PLUS			// current input buffer pointer
 3031 4b7c 6D3A0000 		_ADR	NTIB
 3032 4b80 85320000 		_ADR	AT
 3033 4b84 553A0000 		_ADR	INN
 3034 4b88 85320000 		_ADR	AT
 3035 4b8c F5340000 		_ADR	SUBB			// remaining count
 3036 4b90 B1320000 		_ADR	RFROM
 3037 4b94 354A0000 		_ADR	PARS
 3038 4b98 553A0000 		_ADR	INN
 3039 4b9c 05390000 		_ADR	PSTOR
 3040 4ba0 CF2F0000 		_UNNEST
 3041              	
 3042              	/************************************
 3043              	 CORE EXTENSION 
 3044              		PARSE-NAME ( -- b u )
 3045              		space delimited parse input 
 3046              		buffer 
 3047              	*************************************/
 3048 4ba4 5C4B0000 		_HEADER PARSENAME,10,"PARSE-NAME"
 3048      0A504152 
 3048      53452D4E 
 3048      414D4500 
 3049 4bb4 504700BF 		_NEST 
 3050 4bb8 A1350000 		_ADR	BLANK  
 3051 4bbc 654B0000 		_ADR	PARSE 
 3052 4bc0 CF2F0000 		_UNNEST 
 3053              	
 3054              	
 3055              	/*******************************
 3056              	    .(	  ( -- )
 3057              	 	Output following string 
 3058              		up to next ) .
 3059              	******************************/
 3060 4bc4 A84B0000 		_HEADER DOTPR,IMEDD+2,".("
 3060      822E2800 
 3061 4bcc 504700BF 		_NEST
 3062 4bd0 EF310000 		_DOLIT	')'
 3062      29000000 
 3063 4bd8 654B0000 		_ADR	PARSE
 3064 4bdc 09470000 		_ADR	TYPEE
 3065 4be0 CF2F0000 		_UNNEST
 3066              	
 3067              	/************************
 3068              	    (	   ( -- )
 3069              	 	Ignore following 
ARM GAS  forth.s 			page 174


 3070              		string up to next )
 3071              		A comment.
 3072              	************************/
 3073 4be4 C84B0000 		_HEADER PAREN,IMEDD+1,"("
 3073      812800BF 
 3074 4bec 504700BF 		_NEST
 3075 4bf0 EF310000 		_DOLIT	')'
 3075      29000000 
 3076 4bf8 654B0000 		_ADR	PARSE
 3077 4bfc B5360000 		_ADR	DDROP
 3078 4c00 CF2F0000 		_UNNEST
 3079              	
 3080              	/*******************
 3081              	    \	   ( -- )
 3082              	 	Ignore following 
 3083              		text till the 
 3084              		end of line.
 3085              	********************/
 3086 4c04 E84B0000 		_HEADER BKSLA,IMEDD+1,"\\"
 3086      815C00BF 
 3087 4c0c 504700BF 		_NEST
 3088 4c10 6D3A0000 		_ADR	NTIB
 3089 4c14 85320000 		_ADR	AT
 3090 4c18 553A0000 		_ADR	INN
 3091 4c1c 71320000 		_ADR	STORE
 3092 4c20 CF2F0000 		_UNNEST
 3093              	
 3094              	/******************************
 3095              	    CHAR	( -- c )
 3096              	 	Parse next word and
 3097              		return its first character.
 3098              	*******************************/
 3099 4c24 084C0000 		_HEADER CHAR,4,"CHAR"
 3099      04434841 
 3099      520000BF 
 3100 4c30 504700BF 		_NEST
 3101 4c34 A1350000 		_ADR	BLANK
 3102 4c38 654B0000 		_ADR	PARSE
 3103 4c3c 89330000 		_ADR	DROP
 3104 4c40 A5320000 		_ADR	CAT
 3105 4c44 CF2F0000 		_UNNEST
 3106              	
 3107              	/**********************************
 3108              		[CHAR] ( -- c )
 3109              		immediate version of CHAR 
 3110              	**********************************/
 3111 4c48 284C0000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 3111      C65B4348 
 3111      41525D00 
 3112 4c54 504700BF 		_NEST 
 3113 4c58 314C0000 		_ADR CHAR
 3114 4c5c B9550000 		_ADR LITER 
 3115 4c60 CF2F0000 		_UNNEST 
 3116              	
 3117              	/**********************************
 3118              	    WORD	( c -- a //  string> )
 3119              	 	Parse a word from input stream
ARM GAS  forth.s 			page 175


 3120              		and copy it to code dictionary.
 3121              	***********************************/
 3122 4c64 4C4C0000 		_HEADER WORDD,4,"WORD"
 3122      04574F52 
 3122      440000BF 
 3123 4c70 504700BF 		_NEST
 3124 4c74 654B0000 		_ADR	PARSE
 3125 4c78 F53F0000 		_ADR	HERE
 3126 4c7c 81350000 		_ADR	CELLP
 3127 4c80 85410000 		_ADR	PACKS
 3128 4c84 CF2F0000 		_UNNEST
 3129              	
 3130              	/********************************
 3131              	    TOKEN	( -- a //  string> )
 3132              	 	Parse a word from input 
 3133              		stream and copy it to 
 3134              		name dictionary.
 3135              	*********************************/
 3136 4c88 684C0000 		_HEADER TOKEN,5,"TOKEN"
 3136      05544F4B 
 3136      454E00BF 
 3137 4c94 504700BF 		_NEST
 3138 4c98 A1350000 		_ADR	BLANK
 3139 4c9c 714C0000 		_ADR	WORDD
 3140 4ca0 954E0000 		_ADR	UPPER 
 3141 4ca4 CF2F0000 		_UNNEST
 3142              	
 3143              	/**********************
 3144              	  Dictionary search
 3145              	***********************/
 3146              	
 3147              	/*************************
 3148              	    >CFA	( nfa -- cfa )
 3149              	 	Return a code field address
 3150              		given a name field address.
 3151              	**************************/
 3152 4ca8 8C4C0000 		_HEADER TOCFA,4,">CFA"
 3152      043E4346 
 3152      410000BF 
 3153 4cb4 504700BF 		_NEST
 3154 4cb8 59390000 		_ADR	COUNT
 3155 4cbc EF310000 		_DOLIT	0x1F
 3155      1F000000 
 3156 4cc4 65340000 		_ADR	ANDD
 3157 4cc8 E5340000 		_ADR	PLUS
 3158 4ccc 353F0000 		_ADR	ALGND
 3159 4cd0 EF310000 		_DOLIT  1
 3159      01000000 
 3160 4cd8 79340000 		_ADR    ORR    // set thum bit 
 3161 4cdc CF2F0000 		_UNNEST
 3162              	
 3163              	/***************************************
 3164              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 3165              	 	Compare u bytes in two strings. 
 3166              		Return 0 if identical.
 3167              	
 3168              	  Picatout 2020-12-01, 
ARM GAS  forth.s 			page 176


 3169              	    Because of problem with .align 
 3170              		directive that doesn't fill 
 3171              		with zero's I had to change 
 3172              		the "SAME?" and "SEARCH" 
 3173              	 	words  to do a byte by byte comparison. 
 3174              	****************************************/
 3175 4ce0 AC4C0000 		_HEADER SAMEQ,5,"SAME?"
 3175      0553414D 
 3175      453F00BF 
 3176 4cec 504700BF 		_NEST
 3177 4cf0 15330000 		_ADR	TOR
 3178 4cf4 57320000 		_BRAN	SAME2
 3178      384D0000 
 3179              	SAME1:
 3180 4cfc E9330000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 3181 4d00 E5320000 		_ADR	RAT   // a1 a2 a1 u 
 3182 4d04 E5340000 		_ADR	PLUS  // a1 a2 a1+u 
 3183 4d08 A5320000 		_ADR	CAT	   // a1 a2 c1    		
 3184 4d0c E9330000 		_ADR	OVER  // a1 a2 c1 a2 
 3185 4d10 E5320000 		_ADR	RAT    
 3186 4d14 E5340000 		_ADR	PLUS    
 3187 4d18 A5320000 		_ADR	CAT	  // a1 a2 c1 c2
 3188 4d1c F5340000 		_ADR	SUBB  
 3189 4d20 F5350000 		_ADR	QDUP
 3190 4d24 2F320000 		_QBRAN	SAME2
 3190      384D0000 
 3191 4d2c B1320000 		_ADR	RFROM
 3192 4d30 89330000 		_ADR	DROP
 3193 4d34 CF2F0000 		_UNNEST	// strings not equal
 3194              	SAME2:
 3195 4d38 11320000 		_DONXT	SAME1
 3195      FC4C0000 
 3196 4d40 EF310000 		_DOLIT	0
 3196      00000000 
 3197 4d48 CF2F0000 		_UNNEST	// strings equal
 3198              	
 3199              	/***********************************
 3200              	    SEARCH	( a na -- ca na | a F )
 3201              	 	Search a vocabulary for a string.
 3202              		Return ca and na if succeeded.
 3203              	hidden word used by NAME?
 3204              	
 3205              	  Picatout 2020-12-01,  
 3206              		 Modified from original. 
 3207              	   See comment for word "SAME?" 
 3208              	************************************/
 3209              	SEARCH:
 3210 4d4c 504700BF 		_NEST
 3211 4d50 B9330000 		_ADR	SWAP			// na a	
 3212 4d54 59390000 		_ADR	COUNT			// na a+1 count
 3213 4d58 A9330000 		_ADR	DUPP 
 3214 4d5c 293A0000 		_ADR	TEMP
 3215 4d60 71320000 		_ADR	STORE			// na a+1 count 
 3216 4d64 15330000 		_ADR  TOR		// na a+1  R: count  
 3217 4d68 B9330000 		_ADR	SWAP			// a+1 na
 3218              	SEARCH1:
 3219 4d6c A9330000 		_ADR	DUPP			// a+1 na na
ARM GAS  forth.s 			page 177


 3220 4d70 2F320000 		_QBRAN	SEARCH6	// end of vocabulary
 3220      C44D0000 
 3221 4d78 A9330000 		_ADR	DUPP			// a+1 na na
 3222 4d7c A5320000 		_ADR	CAT			// a+1 na name1
 3223 4d80 EF310000 		_DOLIT	MASKK
 3223      1FFFFFFF 
 3224 4d88 65340000 		_ADR	ANDD
 3225 4d8c E5320000 		_ADR	RAT			// a+1 na name1 count 
 3226 4d90 8D340000 		_ADR	XORR			// a+1 na,  same length?
 3227 4d94 2F320000 		_QBRAN	SEARCH2
 3227      AC4D0000 
 3228 4d9c 91350000 		_ADR	CELLM			// a+1 la
 3229 4da0 85320000 		_ADR	AT			// a+1 next_na
 3230 4da4 57320000 		_BRAN	SEARCH1			// try next word
 3230      6C4D0000 
 3231              	SEARCH2:   
 3232 4dac 41350000 		_ADR	ONEP			// a+1 na+1
 3233 4db0 293A0000 		_ADR	TEMP
 3234 4db4 85320000 		_ADR	AT			// a+1 na+1 count
 3235 4db8 ED4C0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 3236              	SEARCH3:	
 3237 4dbc 57320000 		_BRAN	SEARCH4
 3237      DC4D0000 
 3238              	SEARCH6:	
 3239 4dc4 B1320000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 3240 4dc8 89330000 		_ADR	DROP			// a+1 0
 3241 4dcc B9330000 		_ADR	SWAP			// 0 a+1
 3242 4dd0 51350000 		_ADR	ONEM			// 0 a
 3243 4dd4 B9330000 		_ADR	SWAP			// a 0 
 3244 4dd8 CF2F0000 		_UNNEST			// return without a match
 3245              	SEARCH4:	
 3246 4ddc 2F320000 		_QBRAN	SEARCH5			// a+1 na+1
 3246      F84D0000 
 3247 4de4 51350000 		_ADR	ONEM			// a+1 na
 3248 4de8 91350000 		_ADR	CELLM			// a+4 la
 3249 4dec 85320000 		_ADR	AT			// a+1 next_na
 3250 4df0 57320000 		_BRAN	SEARCH1			// compare next name
 3250      6C4D0000 
 3251              	SEARCH5:	
 3252 4df8 B1320000 		_ADR	RFROM			// a+1 na+1 count
 3253 4dfc 89330000 		_ADR	DROP			// a+1 na+1
 3254 4e00 B9330000 		_ADR	SWAP			// na+1 a+1
 3255 4e04 89330000 		_ADR	DROP			// na+1
 3256 4e08 51350000 		_ADR	ONEM			// na
 3257 4e0c A9330000 		_ADR	DUPP			// na na
 3258 4e10 B54C0000 		_ADR	TOCFA			// na cfa
 3259 4e14 B9330000 		_ADR	SWAP			// cfa na
 3260 4e18 CF2F0000 		_UNNEST			//  return with a match
 3261              	
 3262              	/********************************
 3263              	    NAME?	( a -- ca na | a F )
 3264              	 	Search all context vocabularies 
 3265              		for a string.
 3266              	***********************************/
 3267 4e1c E44C0000 		_HEADER NAMEQ,5,"NAME?"
 3267      054E414D 
 3267      453F00BF 
ARM GAS  forth.s 			page 178


 3268 4e28 504700BF 		_NEST
 3269 4e2c B13A0000 		_ADR	CNTXT
 3270 4e30 85320000 		_ADR	AT
 3271 4e34 4D4D0000 		_ADR	SEARCH
 3272 4e38 CF2F0000 		_UNNEST
 3273              	
 3274              	/********************
 3275              	  console input
 3276              	********************/
 3277              	
 3278              	/****************************
 3279              		ASCIZ ( a -- a+ )
 3280              		convert counted string to 
 3281              		null terminated string 
 3282              		in pad.
 3283              	*****************************/
 3284 4e3c 204E0000 		_HEADER ASCIZ,5,"ASCIZ" 
 3284      05415343 
 3284      495A00BF 
 3285 4e48 504700BF 		_NEST 
 3286 4e4c 59390000 		_ADR COUNT
 3287 4e50 A9330000 		_ADR DUPP
 3288 4e54 15330000 		_ADR TOR 
 3289 4e58 0D400000 		_ADR PAD 
 3290 4e5c B9330000 		_ADR SWAP
 3291 4e60 E5400000 		_ADR WMOVE  
 3292 4e64 0D400000 		_ADR PAD 
 3293 4e68 B1320000 		_ADR RFROM
 3294 4e6c E5340000 		_ADR PLUS 
 3295 4e70 EF310000 		_DOLIT 0 
 3295      00000000 
 3296 4e78 B9330000 		_ADR SWAP  
 3297 4e7c 91320000 		_ADR CSTOR
 3298 4e80 0D400000 		_ADR PAD   
 3299 4e84 CF2F0000 		_UNNEST 
 3300              	
 3301              	/***********************
 3302              		UPPER (cstring -- cstring )
 3303              		convert to upper case in situ
 3304              	*******************************/
 3305 4e88 404E0000 		_HEADER UPPER,5,"UPPER"
 3305      05555050 
 3305      455200BF 
 3306 4e94 504700BF 		_NEST 
 3307 4e98 A9330000 		_ADR DUPP 
 3308 4e9c 15330000 		_ADR TOR 
 3309 4ea0 59390000 		_ADR COUNT
 3310 4ea4 EF310000 		_DOLIT 0x1f
 3310      1F000000 
 3311 4eac 65340000 		_ADR ANDD
 3312 4eb0 15330000 		_ADR TOR 
 3313 4eb4 57320000 		_BRAN 3f
 3313      084F0000 
 3314 4ebc A9330000 	1:  _ADR DUPP 
 3315 4ec0 59390000 		_ADR COUNT 
 3316 4ec4 A9330000 		_ADR DUPP 
 3317 4ec8 EF310000 		_DOLIT 'a'-1
ARM GAS  forth.s 			page 179


 3317      60000000 
 3318 4ed0 B9380000 		_ADR GREAT
 3319 4ed4 2F320000 		_QBRAN 2f 
 3319      004F0000 
 3320 4edc A9330000 		_ADR DUPP 
 3321 4ee0 EF310000 		_DOLIT 'z'+1 
 3321      7B000000 
 3322 4ee8 85380000 		_ADR LESS 
 3323 4eec 2F320000 		_QBRAN 2f 
 3323      004F0000 
 3324 4ef4 EF310000 		_DOLIT 0x5f  
 3324      5F000000 
 3325 4efc 65340000 		_ADR ANDD
 3326 4f00 8D360000 	2:	_ADR ROT
 3327 4f04 91320000 		_ADR CSTOR
 3328 4f08 11320000 	3:  _DONXT 1b
 3328      BC4E0000 
 3329 4f10 89330000 		_ADR DROP 
 3330 4f14 B1320000 		_ADR RFROM
 3331 4f18 CF2F0000 		_UNNEST 
 3332              	
 3333              	/**************************************
 3334              	   BKSP  ( bot eot cur -- bot eot cur )
 3335              	   Move cursor left by one character.
 3336              	hidden word used by KTAP
 3337              	***************************************/
 3338              	BKSP:
 3339 4f1c 504700BF 		_NEST
 3340 4f20 15330000 		_ADR	TOR
 3341 4f24 E9330000 		_ADR	OVER
 3342 4f28 B1320000 		_ADR	RFROM
 3343 4f2c B9330000 		_ADR	SWAP
 3344 4f30 E9330000 		_ADR	OVER
 3345 4f34 8D340000 		_ADR	XORR
 3346 4f38 2F320000 		_QBRAN	BACK1
 3346      644F0000 
 3347 4f40 EF310000 		_DOLIT	BKSPP
 3347      08000000 
 3348 4f48 91300000 		_ADR	EMIT
 3349 4f4c 51350000 		_ADR	ONEM
 3350 4f50 A1350000 		_ADR	BLANK
 3351 4f54 91300000 		_ADR	EMIT
 3352 4f58 EF310000 		_DOLIT	BKSPP
 3352      08000000 
 3353 4f60 91300000 		_ADR	EMIT
 3354              	BACK1:
 3355 4f64 CF2F0000 		  _UNNEST
 3356              	
 3357              	/****************************************
 3358              	   TAP	 ( bot eot cur c -- bot eot cur )
 3359              	   Accept and echo the key stroke 
 3360              	   and bump the cursor.
 3361              	hidden word used by KTAP 
 3362              	****************************************/
 3363              	TAP:
 3364 4f68 504700BF 		_NEST
 3365 4f6c A9330000 		_ADR	DUPP
ARM GAS  forth.s 			page 180


 3366 4f70 91300000 		_ADR	EMIT
 3367 4f74 E9330000 		_ADR	OVER
 3368 4f78 91320000 		_ADR	CSTOR
 3369 4f7c 41350000 		_ADR	ONEP
 3370 4f80 CF2F0000 		_UNNEST
 3371              	
 3372              	
 3373              	/*******************************************
 3374              	    kTAP	( bot eot cur c -- bot eot cur )
 3375              	 	Process a key stroke, CR or backspace.
 3376              	hidden word used by ACCEPT 
 3377              	*******************************************/
 3378              	KTAP:
 3379              	TTAP:
 3380 4f84 504700BF 		_NEST
 3381 4f88 A9330000 		_ADR	DUPP
 3382 4f8c EF310000 		_DOLIT	CRR
 3382      0D000000 
 3383 4f94 8D340000 		_ADR	XORR
 3384 4f98 2F320000 		_QBRAN  KTAP2
 3384      C84F0000 
 3385 4fa0 EF310000 		_DOLIT	BKSPP
 3385      08000000 
 3386 4fa8 8D340000 		_ADR	XORR
 3387 4fac 2F320000 		_QBRAN	KTAP1
 3387      C04F0000 
 3388 4fb4 A1350000 		_ADR	BLANK
 3389 4fb8 694F0000 		_ADR	TAP
 3390 4fbc CF2F0000 		_UNNEST
 3391              	//	.word	0			// patch
 3392              	KTAP1:
 3393 4fc0 1D4F0000 		_ADR	BKSP
 3394 4fc4 CF2F0000 		_UNNEST
 3395              	KTAP2:
 3396 4fc8 89330000 		_ADR	DROP
 3397 4fcc B9330000 		_ADR	SWAP
 3398 4fd0 89330000 		_ADR	DROP
 3399 4fd4 A9330000 		_ADR	DUPP
 3400 4fd8 CF2F0000 		_UNNEST
 3401              	
 3402              	/************************************
 3403              	    ACCEPT	( b u -- b u )
 3404              	 	Accept characters to input 
 3405              		buffer. Return with actual count.
 3406              	*************************************/
 3407 4fdc 8C4E0000 		_HEADER ACCEP,6,"ACCEPT"
 3407      06414343 
 3407      45505400 
 3408 4fe8 504700BF 		_NEST
 3409 4fec E9330000 		_ADR	OVER
 3410 4ff0 E5340000 		_ADR	PLUS
 3411 4ff4 E9330000 		_ADR	OVER
 3412              	ACCP1:
 3413 4ff8 DD360000 		_ADR	DDUP
 3414 4ffc 8D340000 		_ADR	XORR
 3415 5000 2F320000 		_QBRAN	ACCP4
 3415      40500000 
ARM GAS  forth.s 			page 181


 3416 5008 6D300000 		_ADR	KEY
 3417 500c A9330000 		_ADR	DUPP
 3418 5010 A1350000 		_ADR	BLANK
 3419 5014 EF310000 		_DOLIT 127
 3419      7F000000 
 3420 501c C53B0000 		_ADR	WITHI
 3421 5020 2F320000 		_QBRAN	ACCP2
 3421      34500000 
 3422 5028 694F0000 		_ADR	TAP
 3423 502c 57320000 		_BRAN	ACCP3
 3423      38500000 
 3424              	ACCP2:
 3425 5034 854F0000 		_ADR	KTAP
 3426              	ACCP3:	  
 3427 5038 57320000 		_BRAN	ACCP1
 3427      F84F0000 
 3428              	ACCP4:
 3429 5040 89330000 		_ADR	DROP
 3430 5044 E9330000 		_ADR	OVER
 3431 5048 F5340000 		_ADR	SUBB
 3432 504c CF2F0000 		_UNNEST
 3433              	
 3434              	/*****************************
 3435              	    QUERY	( -- )
 3436              	 	Accept input stream 
 3437              		to terminal input buffer.
 3438              	******************************/
 3439 5050 E04F0000 		_HEADER QUERY,5,"QUERY"
 3439      05515545 
 3439      525900BF 
 3440 505c 504700BF 		_NEST
 3441 5060 2D400000 		_ADR	TIB
 3442 5064 EF310000 		_DOLIT 80
 3442      50000000 
 3443 506c E94F0000 		_ADR	ACCEP
 3444 5070 6D3A0000 		_ADR	NTIB
 3445 5074 71320000 		_ADR	STORE
 3446 5078 89330000 		_ADR	DROP
 3447 507c EF310000 		_DOLIT	0
 3447      00000000 
 3448 5084 553A0000 		_ADR	INN
 3449 5088 71320000 		_ADR	STORE
 3450 508c CF2F0000 		_UNNEST
 3451              	
 3452              	/*****************************
 3453              	  CORE EXT 
 3454              	  REFILL ( -- )
 3455              	  if SOURCE-ID== 0 call QUERY 
 3456              	  and return TRUE 
 3457              	  if SOURCE-ID=1 return FALSE 
 3458              	******************************/
 3459 5090 54500000 		_HEADER REFILL,6,"REFILL"
 3459      06524546 
 3459      494C4C00 
 3460 509c 504700BF 		_NEST 
 3461 50a0 45400000 		_ADR	SOURCID 
 3462 50a4 2F320000 		_QBRAN	1f
ARM GAS  forth.s 			page 182


 3462      B4500000 
 3463 50ac E5370000 		_ADR	FALSE 
 3464 50b0 CF2F0000 		_UNNEST 
 3465 50b4 5D500000 	1:  _ADR	QUERY 
 3466 50b8 FD370000 		_ADR	TRUE 
 3467 50bc CF2F0000 		_UNNEST 
 3468              	
 3469              	/*****************************
 3470              	  CORE EXT 
 3471              		SAVE-INPUT ( -- n )
 3472              		if SOURCE-ID=0 STACK >IN @ 
 3473              		if SOURCE-ID=1 do nothing 
 3474              	*****************************/
 3475 50c0 94500000 		_HEADER SAVEINP,10,"SAVE-INPUT"
 3475      0A534156 
 3475      452D494E 
 3475      50555400 
 3476 50d0 504700BF 		_NEST 
 3477 50d4 45400000 		_ADR SOURCID 
 3478 50d8 2F320000 		_QBRAN 1f 
 3478      E4500000 
 3479 50e0 CF2F0000 		_UNNEST 
 3480 50e4 553A0000 	1:  _ADR	INN 
 3481 50e8 85320000 		_ADR	AT 
 3482 50ec CF2F0000 		_UNNEST 
 3483              	
 3484              	/*****************************
 3485              	  CORE EXT 
 3486              		RESTORE-INPUT ( n -- flag )
 3487              		if SOURCE-ID=0 n -> >IN stack FALSE 
 3488              		if SOURCE-ID=1 stack TRUE 
 3489              	***************************************/
 3490 50f0 C4500000 		_HEADER RESTINP,13,"RESTORE-INPUT"
 3490      0D524553 
 3490      544F5245 
 3490      2D494E50 
 3490      555400BF 
 3491 5104 504700BF 		_NEST 
 3492 5108 45400000 		_ADR	SOURCID 
 3493 510c 2F320000 		_QBRAN	1f
 3493      1C510000 
 3494 5114 FD370000 		_ADR	TRUE 
 3495 5118 CF2F0000 		_UNNEST 
 3496 511c 553A0000 	1:  _ADR	INN  
 3497 5120 71320000 		_ADR	STORE 
 3498 5124 E5370000 		_ADR	FALSE 
 3499 5128 CF2F0000 		_UNNEST 
 3500              	
 3501              	
 3502              	/********************
 3503              	  Error handling
 3504              	********************/
 3505              	
 3506              	/*********************
 3507              	    ABORT	( a -- )
 3508              	 	Reset data stack 
 3509              		and jump to QUIT.
ARM GAS  forth.s 			page 183


 3510              	**********************/
 3511 512c F4500000 		_HEADER ABORT,5,"ABORT"
 3511      0541424F 
 3511      525400BF 
 3512 5138 504700BF 		_NEST
 3513              	ABORT1: 
 3514 513c 45520000 		_ADR    LBRAC  
 3515 5140 B1530000 		_ADR	PRESE
 3516 5144 EF310000 		_DOLIT  0 
 3516      00000000 
 3517 514c A9330000 		_ADR    DUPP 
 3518 5150 EF310000 		_DOLIT  UPP+TOIN 
 3518      2C000020 
 3519 5158 21390000 		_ADR    DSTOR 
 3520 515c EF310000 		_DOLIT  TIBB 
 3520      B0FE0120 
 3521 5164 EF310000 		_DOLIT  UPP+TIBUF  
 3521      34000020 
 3522 516c 71320000 		_ADR    STORE 
 3523 5170 71470000 		_ADR    CR 
 3524 5174 57320000 		_BRAN	QUIT
 3524      C8530000 
 3525              	
 3526              	
 3527              	/*******************************
 3528              		PRT_ABORT ( a -- )
 3529              	    print message and abort 
 3530              	input:
 3531              		a   address of counted string 	
 3532              	
 3533              	hidden word 
 3534              	*******************************/
 3535              	PRT_ABORT:
 3536 517c 504700BF 		_NEST 
 3537 5180 B5460000 		_ADR SPACE 
 3538 5184 59390000 		_ADR COUNT 
 3539 5188 09470000 		_ADR TYPEE 
 3540 518c B5460000 		_ADR  SPACE 
 3541 5190 EF310000 		_DOLIT '?'
 3541      3F000000 
 3542 5198 91300000 		_ADR    EMIT 
 3543 519c 71470000 		_ADR    CR 
 3544 51a0 57320000 		_BRAN   ABORT1 
 3544      3C510000 
 3545              	
 3546              	
 3547              	
 3548              	
 3549              	/*******************************
 3550              	    _abort"	( f -- )
 3551              	 	Run time routine of ABORT"
 3552              		Abort with a message.
 3553              	hidden used by compiler 
 3554              	********************************/
 3555              	ABORQ:
 3556 51a8 504700BF 		_NEST
 3557 51ac 91470000 		_ADR	DOSTR
ARM GAS  forth.s 			page 184


 3558 51b0 8D360000 		_ADR	ROT  
 3559 51b4 2F320000 		_QBRAN	1f	// error flag
 3559      D0510000 
 3560 51bc B5460000 		_ADR    SPACE 
 3561 51c0 09470000 		_ADR    TYPEE
 3562 51c4 71470000 		_ADR    CR  
 3563 51c8 57320000 		_BRAN   ABORT1
 3563      3C510000 
 3564              	1:
 3565 51d0 B5360000 		_ADR	DDROP
 3566 51d4 CF2F0000 		_UNNEST			// drop message
 3567              	
 3568              	
 3569              	/************************
 3570              	  The text interpreter
 3571              	************************/
 3572              	
 3573              	/***************************
 3574              	    $INTERPRET  ( a -- )
 3575              	 	Interpret a word. 
 3576              		If failed, try to 
 3577              		convert it to an integer.
 3578              	******************************/
 3579 51d8 30510000 		_HEADER INTER,10,"$INTERPRET"
 3579      0A24494E 
 3579      54455250 
 3579      52455400 
 3580 51e8 504700BF 		_NEST
 3581 51ec 294E0000 		_ADR	NAMEQ
 3582 51f0 F5350000 		_ADR	QDUP	// ?defined
 3583 51f4 2F320000 		_QBRAN	INTE1
 3583      28520000 
 3584 51fc 85320000 		_ADR	AT
 3585 5200 EF310000 		_DOLIT	COMPO
 3585      40000000 
 3586 5208 65340000 		_ADR	ANDD	// ?compile only lexicon bits
 3587 520c A9510000 		_ABORQ	13," compile only"
 3587      0D20636F 
 3587      6D70696C 
 3587      65206F6E 
 3587      6C7900BF 
 3588 5220 05320000 		_ADR	EXECU
 3589 5224 CF2F0000 		_UNNEST			// execute defined word
 3590              	INTE1:
 3591 5228 29460000 		_ADR	NUMBERQ
 3592 522c 2F320000 		_QBRAN	INTE2
 3592      38520000 
 3593 5234 CF2F0000 		_UNNEST
 3594              	INTE2:
 3595 5238 7D510000 		_ADR	PRT_ABORT	// error
 3596              	
 3597              	/******************************
 3598              	    [	   ( -- )
 3599              	 	Start the text interpreter.
 3600              	*******************************/
 3601 523c DC510000 		_HEADER LBRAC,IMEDD+1,"["
 3601      815B00BF 
ARM GAS  forth.s 			page 185


 3602 5244 504700BF 		_NEST
 3603 5248 EF310000 		_DOLIT	INTER
 3603      E8510000 
 3604 5250 853A0000 		_ADR	TEVAL
 3605 5254 71320000 		_ADR	STORE
 3606 5258 EF310000 		_DOLIT  0 
 3606      00000000 
 3607 5260 91390000 		_ADR    STATE 
 3608 5264 71320000 		_ADR    STORE 
 3609 5268 CF2F0000 		_UNNEST
 3610              	
 3611              	/**********************
 3612              	    .OK	 ( -- )
 3613              	 	Display "ok" only 
 3614              		while interpreting.
 3615              	************************/
 3616 526c 40520000 		_HEADER DOTOK,3,".OK"
 3616      032E4F4B 
 3617 5274 504700BF 		_NEST
 3618 5278 EF310000 		_DOLIT	INTER
 3618      E8510000 
 3619 5280 853A0000 		_ADR	TEVAL
 3620 5284 85320000 		_ADR	AT
 3621 5288 2D380000 		_ADR	EQUAL
 3622 528c 2F320000 		_QBRAN	DOTO1
 3622      9C520000 
 3623 5294 CD470000 		_DOTQP	3," ok"
 3623      03206F6B 
 3624              	DOTO1:
 3625 529c 71470000 		_ADR	CR
 3626 52a0 CF2F0000 		_UNNEST
 3627              	
 3628              	/*************************
 3629              	    ?STACK	( -- )
 3630              	 	Abort if the data 
 3631              		stack underflows.
 3632              	************************/
 3633 52a4 70520000 		_HEADER QSTAC,6,"?STACK"
 3633      063F5354 
 3633      41434B00 
 3634 52b0 504700BF 		_NEST
 3635 52b4 9D3F0000 		_ADR	DEPTH
 3636 52b8 19340000 		_ADR	ZLESS	// check only for underflow
 3637 52bc A9510000 		_ABORQ	9,"underflow"
 3637      09756E64 
 3637      6572666C 
 3637      6F7700BF 
 3638 52cc CF2F0000 		_UNNEST
 3639              	
 3640              	/*******************
 3641              	    EVAL	( -- )
 3642              	 	Interpret the 
 3643              		input stream.
 3644              	*******************/
 3645 52d0 A8520000 		_HEADER EVAL,4,"EVAL"
 3645      04455641 
 3645      4C0000BF 
ARM GAS  forth.s 			page 186


 3646 52dc 504700BF 		_NEST
 3647              	EVAL1:
 3648 52e0 954C0000 	    _ADR	TOKEN
 3649 52e4 A9330000 		_ADR	DUPP
 3650 52e8 A5320000 		_ADR	CAT	// ?input stream empty
 3651 52ec 2F320000 		_QBRAN	EVAL2
 3651      08530000 
 3652 52f4 853A0000 		_ADR	TEVAL
 3653 52f8 81400000 		_ADR	ATEXE
 3654 52fc B1520000 		_ADR	QSTAC	// evaluate input, check stack
 3655 5300 57320000 		_BRAN	EVAL1
 3655      E0520000 
 3656              	EVAL2:
 3657 5308 89330000 		_ADR	DROP
 3658 530c 75520000 		_ADR	DOTOK
 3659 5310 CF2F0000 		_UNNEST	// prompt
 3660              	
 3661              	
 3662              	/******************************
 3663              		EVALUATE ( ix* a u -- jx* )
 3664              	    interpret string 
 3665              	input:
 3666              	    ix*  argument required 
 3667              		a   address string to interpret 
 3668              		u   str length 
 3669              	output:
 3670              		jx*  evalution results 
 3671              	***********************************/
 3672 5314 D4520000 		_HEADER EVALUATE,8,"EVALUATE"
 3672      08455641 
 3672      4C554154 
 3672      450000BF 
 3673 5324 504700BF 		_NEST 
 3674              		// save original source specs
 3675 5328 EF310000 		_DOLIT UPP+TOIN 
 3675      2C000020 
 3676 5330 A9330000 		_ADR   DUPP 
 3677 5334 85320000 		_ADR  AT 
 3678 5338 15330000 		_ADR   TOR 
 3679 533c EF310000 		_DOLIT  0
 3679      00000000 
 3680 5344 B9330000 		_ADR  SWAP
 3681 5348 71320000 		_ADR   STORE 
 3682 534c EF310000 		_DOLIT UPP+SRC 
 3682      30000020 
 3683 5354 41390000 		_ADR   DAT 
 3684 5358 29330000 		_ADR   DTOR 
 3685 535c EF310000 		_DOLIT -1
 3685      FFFFFFFF 
 3686 5364 EF310000 		_DOLIT UPP+SRCID 
 3686      38000020 
 3687 536c 71320000 		_ADR   STORE 
 3688 5370 EF310000 		_DOLIT UPP+SRC 
 3688      30000020 
 3689 5378 21390000 		_ADR   DSTOR
 3690              		// clear BLK 
 3691 537c DD520000 		_ADR   EVAL 
ARM GAS  forth.s 			page 187


 3692              	    // restore original source specs 
 3693 5380 C5320000 		_ADR   DRFROM 
 3694 5384 EF310000 		_DOLIT UPP+SRC 
 3694      30000020 
 3695 538c 21390000 		_ADR   DSTOR 
 3696 5390 B1320000 		_ADR   RFROM 
 3697 5394 EF310000 		_DOLIT UPP+TOIN 
 3697      2C000020 
 3698 539c 71320000 		_ADR   STORE 
 3699 53a0 CF2F0000 		_UNNEST 
 3700              	
 3701              	
 3702              	/**********************************
 3703              	    PRESET	( -- )
 3704              	 	Reset data stack pointer 
 3705              		and the terminal input buffer.
 3706              	**********************************/
 3707 53a4 18530000 		_HEADER PRESE,6,"PRESET"
 3707      06505245 
 3707      53455400 
 3708 53b0 4FF6B067 		_MOV32 DSP,SPP 
 3708      C2F20107 
 3709 53b8 FDF706BE 		_NEXT 
 3710              	
 3711              	
 3712              	/*********************
 3713              	    QUIT	( -- )
 3714              	 	Reset return stack 
 3715              		pointer and start 
 3716              		text interpreter.
 3717              	***********************/
 3718 53bc A8530000 		_HEADER QUIT,4,"QUIT"
 3718      04515549 
 3718      540000BF 
 3719 53c8 EF310000 		_DOLIT RPP 
 3719      80FF0120 
 3720 53d0 45330000 		_ADR RPSTOR 
 3721              	QUIT1:
 3722 53d4 45520000 		_ADR	LBRAC			// start interpretation
 3723              	QUIT2:
 3724 53d8 5D500000 		_ADR	QUERY			// get input
 3725 53dc DD520000 		_ADR	EVAL
 3726 53e0 57320000 		_BRAN	QUIT2	// continue till error
 3726      D8530000 
 3727              	
 3728              	/***************************
 3729              		FORGET ( <string> -- )
 3730              		forget all definition 
 3731              		starting at <string>
 3732              	****************************/
 3733 53e8 C0530000 		_HEADER FORGET,6,"FORGET"
 3733      06464F52 
 3733      47455400 
 3734 53f4 504700BF 		_NEST 
 3735 53f8 954C0000 		_ADR TOKEN 
 3736 53fc A9330000 		_ADR DUPP 
 3737 5400 2F320000 		_QBRAN 9f 
ARM GAS  forth.s 			page 188


 3737      3C540000 
 3738 5408 294E0000 		_ADR NAMEQ // ( a -- cfa na | a 0 )
 3739 540c F5350000 		_ADR QDUP 
 3740 5410 2F320000 		_QBRAN 8f
 3740      38540000 
 3741 5418 91350000 		_ADR CELLM // ( cfa la )
 3742 541c A9330000 		_ADR DUPP 
 3743 5420 C53A0000 		_ADR CPP   
 3744 5424 71320000 		_ADR STORE
 3745 5428 85320000 		_ADR AT 
 3746 542c 153B0000 		_ADR LAST 
 3747 5430 71320000 		_ADR STORE
 3748 5434 895E0000 		_ADR OVERT 
 3749 5438 89330000 	8:  _ADR DROP 
 3750 543c CF2F0000 	9:	_UNNEST 
 3751              	
 3752              		.p2align 2 
 3753              	
 3754              	/*****************
 3755              	  The compiler
 3756              	******************/
 3757              	
 3758              	/**************************************
 3759              		POSTPONE <name> ( -- )
 3760              		use to compile immediate word 
 3761              	**************************************/
 3762 5440 EC530000 		_HEADER POSTPONE,COMPO+IMEDD+8,"POSTPONE"
 3762      C8504F53 
 3762      54504F4E 
 3762      450000BF 
 3763 5450 504700BF 		_NEST 
 3764 5454 8D540000 		_ADR ITICK
 3765 5458 095F0000 		_ADR CALLC  
 3766 545c CF2F0000 		_UNNEST 
 3767              	
 3768              	
 3769              	/**************************************
 3770              	    '	   ( -- ca )
 3771              	 	Search context vocabularies 
 3772              		for the next word in input stream.
 3773              	***************************************/
 3774 5460 44540000 		_HEADER TICK,1,"'"
 3774      012700BF 
 3775 5468 504700BF 		_NEST
 3776 546c 954C0000 		_ADR	TOKEN
 3777 5470 294E0000 		_ADR	NAMEQ	// ?defined
 3778 5474 2F320000 		_QBRAN	TICK1
 3778      80540000 
 3779 547c CF2F0000 		_UNNEST	// yes, push code address
 3780              	TICK1:
 3781 5480 7D510000 		_ADR PRT_ABORT	// error
 3782              	
 3783              	/*****************************************
 3784              		['] ( -- ca )
 3785              		immediate version of ' 
 3786              	****************************************/
 3787 5484 64540000 		_HEADER ITICK,COMPO+IMEDD+3,"[']"
ARM GAS  forth.s 			page 189


 3787      C35B275D 
 3788 548c 504700BF 		_NEST 
 3789 5490 69540000 		_ADR TICK  
 3790 5494 CF2F0000 		_UNNEST 
 3791              	
 3792              	
 3793              	/***********************************
 3794              		FIND ( c-adr -- c-adr 0 | xt 1 | xt -1 )
 3795              		search all context for name at 
 3796              		c-adr 
 3797              	input:
 3798              		c-adr   name 
 3799              	output:
 3800              		c-adr  0   not found 
 3801              		xt 1   found word immediate 
 3802              		xt -1  found normal word 
 3803              	***********************************/
 3804 5498 88540000 		_HEADER FIND,4,"FIND"
 3804      0446494E 
 3804      440000BF 
 3805 54a4 504700BF 		_NEST 
 3806 54a8 294E0000 		_ADR NAMEQ 
 3807 54ac A9330000 		_ADR DUPP 
 3808 54b0 2F320000 		_QBRAN 9f
 3808      E4540000 
 3809 54b8 A5320000 		_ADR CAT 
 3810 54bc EF310000 		_DOLIT IMEDD
 3810      80000000 
 3811 54c4 65340000 		_ADR ANDD 
 3812 54c8 EF310000 		_DOLIT 7 
 3812      07000000 
 3813 54d0 BD340000 		_ADR RSHIFT  
 3814 54d4 A9330000 		_ADR DUPP 
 3815 54d8 43320000 		_TBRAN 9f 
 3815      E4540000 
 3816 54e0 79370000 		_ADR INVER 
 3817 54e4 CF2F0000 	9:	_UNNEST 
 3818              	
 3819              	
 3820              	
 3821              	/***********************
 3822              	    ALLOT	( n -- )
 3823              	 	Allocate n bytes to 
 3824              		the ram area.
 3825              	************************/
 3826 54e8 9C540000 		_HEADER ALLOT,5,"ALLOT"
 3826      05414C4C 
 3826      4F5400BF 
 3827 54f4 504700BF 		_NEST
 3828 54f8 C53A0000 		_ADR	CPP
 3829 54fc 05390000 		_ADR	PSTOR
 3830 5500 CF2F0000 		_UNNEST			// adjust code pointer
 3831              	
 3832              	/******************************
 3833              	    ,	   ( w -- )
 3834              	 	Compile an integer 
 3835              		into dataspace.
ARM GAS  forth.s 			page 190


 3836              	******************************/
 3837 5504 EC540000 		_HEADER COMMA,1,","
 3837      012C00BF 
 3838 550c 504700BF 		_NEST
 3839 5510 F53F0000 		_ADR	HERE
 3840 5514 A9330000 		_ADR	DUPP
 3841 5518 81350000 		_ADR	CELLP	// cell boundary
 3842 551c C53A0000 		_ADR	CPP
 3843 5520 71320000 		_ADR	STORE
 3844 5524 71320000 		_ADR	STORE
 3845 5528 CF2F0000 		_UNNEST	// adjust code pointer, compile
 3846              		.p2align 2 
 3847              	
 3848              	/***********************************
 3849              		C, ( c -- )
 3850              		compile 1 character into 
 3851              		dataspace 
 3852              	************************************/
 3853 552c 08550000 		_HEADER CCOMMA,2,"C,"
 3853      02432C00 
 3854 5534 504700BF 		_NEST 
 3855 5538 F53F0000 		_ADR 	HERE 
 3856 553c A9330000 		_ADR	DUPP 
 3857 5540 41350000 		_ADR    ONEP 
 3858 5544 C53A0000 		_ADR    CPP 
 3859 5548 71320000 		_ADR    STORE 
 3860 554c 91320000 		_ADR    CSTOR 
 3861 5550 CF2F0000 		_UNNEST 
 3862              	
 3863              	/************************************
 3864              	    [COMPILE]   ( -- //  string> )
 3865              	 	Compile the next immediate word 
 3866              		into code dictionary.
 3867              	*************************************/
 3868 5554 30550000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3868      895B434F 
 3868      4D50494C 
 3868      455D00BF 
 3869 5564 504700BF 		_NEST
 3870 5568 69540000 		_ADR	TICK
 3871 556c 0D550000 		_ADR	COMMA
 3872 5570 CF2F0000 		_UNNEST
 3873              	
 3874              	/****************************
 3875              	    COMPILE	( -- )
 3876              	 	Compile the next address 
 3877              		in colon list to code 
 3878              		dictionary.
 3879              	*******************************/
 3880 5574 58550000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3880      47434F4D 
 3880      50494C45 
 3881 5580 504700BF 		_NEST
 3882 5584 B1320000 		_ADR	RFROM
 3883 5588 A9330000 		_ADR	DUPP 
 3884 558c 85320000 		_ADR	AT
 3885 5590 EF310000 		_DOLIT 1 
ARM GAS  forth.s 			page 191


 3885      01000000 
 3886 5598 79340000 		_ADR	ORR 
 3887 559c 0D550000 		_ADR	COMMA 
 3888 55a0 81350000 		_ADR	CELLP 
 3889 55a4 15330000 		_ADR	TOR 
 3890 55a8 CF2F0000 		_UNNEST	// adjust return address
 3891              	
 3892              	/*************************
 3893              	    LITERAL	( w -- )
 3894              	 	Compile tos to code 
 3895              		dictionary as an 
 3896              		integer literal.
 3897              	***************************/
 3898 55ac 78550000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3898      874C4954 
 3898      4552414C 
 3899 55b8 504700BF 		_NEST
 3900 55bc EF310000 		_COMPI	DOLIT
 3900      EF310000 
 3900      0D550000 
 3901 55c8 0D550000 		_ADR	COMMA
 3902 55cc CF2F0000 		_UNNEST
 3903              	
 3904              	/********************
 3905              	    $,"	( -- )
 3906              	 	Compile a literal 
 3907              		string up to next " .
 3908              	hidden word 
 3909              	************************/
 3910              	STRCQ:
 3911 55d0 504700BF 		_NEST
 3912 55d4 EF310000 		_DOLIT -4
 3912      FCFFFFFF 
 3913 55dc C53A0000 		_ADR	CPP
 3914 55e0 05390000 		_ADR	PSTOR
 3915 55e4 EF310000 		_DOLIT	'\"'
 3915      22000000 
 3916 55ec 714C0000 		_ADR	WORDD	// move word to code dictionary
 3917 55f0 59390000 		_ADR	COUNT
 3918 55f4 E5340000 		_ADR	PLUS
 3919 55f8 353F0000 		_ADR	ALGND	// calculate aligned end of string
 3920 55fc C53A0000 		_ADR	CPP
 3921 5600 71320000 		_ADR	STORE   // adjust the code pointer
 3922 5604 CF2F0000 		_UNNEST 			
 3923              	
 3924              	/*******************
 3925              	   Structures
 3926              	*******************/
 3927              	
 3928              	/*************************
 3929              	    FOR	 ( -- a )
 3930              	 	Start a FOR-NEXT loop 
 3931              		structure in a colon 
 3932              		definition.
 3933              	**************************/
 3934 5608 B0550000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3934      C3464F52 
ARM GAS  forth.s 			page 192


 3935 5610 504700BF 		_NEST
 3936 5614 EF310000 		_COMPI	TOR
 3936      15330000 
 3936      0D550000 
 3937 5620 F53F0000 		_ADR	HERE
 3938 5624 CF2F0000 		_UNNEST
 3939              	
 3940              	/********************************
 3941              		DO ( limit start -- a 0 )
 3942              		initialise a DO...LOOP 
 3943              		or DO...+LOOP 
 3944              	********************************/
 3945 5628 0C560000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3945      C2444F00 
 3946 5630 504700BF 		_NEST
 3947 5634 EF310000 		_COMPI DTOR 
 3947      29330000 
 3947      0D550000 
 3948 5640 F53F0000 		_ADR HERE 
 3949 5644 EF310000 		_DOLIT 0  // end marker used by resolve_leave 
 3949      00000000 
 3950 564c CF2F0000 		_UNNEST 
 3951              		
 3952              	/******************************
 3953              		?DO ( limit start -- a )	
 3954              	    initialise conditional 
 3955              		?DO ... LOOP 	
 3956              		at run time abort loop 
 3957              		if limit = start 
 3958              	******************************/
 3959 5650 2C560000 		_HEADER QDO,COMPO+IMEDD+3,"?DO"
 3959      C33F444F 
 3960 5658 504700BF 		_NEST 
 3961 565c EF310000 		_COMPI  DDUP
 3961      DD360000 
 3961      0D550000 
 3962 5668 EF310000 		_COMPI  EQUAL 
 3962      2D380000 
 3962      0D550000 
 3963 5674 EF310000 		_COMPI  QBRAN
 3963      2F320000 
 3963      0D550000 
 3964 5680 F53F0000 		_ADR    HERE 
 3965 5684 EF310000 		_DOLIT  0 
 3965      00000000 
 3966 568c 0D550000 		_ADR    COMMA 
 3967 5690 EF310000 		_COMPI  DDROP  
 3967      B5360000 
 3967      0D550000 
 3968 569c EF310000 		_COMPI  EXIT 
 3968      69320000 
 3968      0D550000 
 3969 56a8 F53F0000 		_ADR    HERE 
 3970 56ac B9330000 		_ADR    SWAP 
 3971 56b0 71320000 		_ADR    STORE  
 3972 56b4 31560000 		_ADR    DO 
 3973 56b8 CF2F0000 		_UNNEST 
ARM GAS  forth.s 			page 193


 3974              	
 3975              	DOPLOOP: // ( n -- R: limit counter )
 3976 56bc 3246     		mov T2,TOS 
 3977 56be 57F8046B 		_POP 
 3978 56c2 B8E80300 		ldmfd RSP!,{T0,T1}
 3979 56c6 1044     		add T0,T2 
 3980 56c8 28E90300 		stmfd RSP!,{T0,T1}
 3981 56cc 8842     		cmp T0,T1 
 3982 56ce 05D4     		bmi 9f 
 3983 56d0 08F10808 		add RSP,#8
 3984 56d4 0CF1040C 		add IP,#4
 3985 56d8 FDF776BC 		_NEXT 
 3986 56dc DCF800C0 	9:  ldr IP,[IP]
 3987 56e0 FDF772BC 		_NEXT 
 3988              	
 3989              	
 3990              	/***************************
 3991              		+LOOP ( a -- )
 3992              		increment counter 
 3993              		end loop if countr>limit
 3994              	****************************/
 3995 56e4 54560000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3995      C52B4C4F 
 3995      4F5000BF 
 3996 56f0 504700BF 		_NEST 
 3997 56f4 EF310000 		_COMPI DOPLOOP 
 3997      BD560000 
 3997      0D550000 
 3998 5700 35570000 		_ADR resolve_leave 
 3999 5704 0D550000 		_ADR COMMA
 4000 5708 CF2F0000 		_UNNEST 
 4001              	
 4002              	DOLOOP: // ( -- R: limit counter )
 4003 570c D8F80000 		ldr T0,[RSP]
 4004 5710 00F10100 		add T0,#1
 4005 5714 C8F80000 		str T0,[RSP]
 4006 5718 D8F80410 		ldr T1,[RSP,#4]
 4007 571c 8842     		cmp T0,T1 
 4008 571e 05D4     		bmi 9f
 4009 5720 08F10808 		add RSP,#8  // drop counter and limit  
 4010 5724 0CF1040C 		add IP,IP,#4 // skip loop address 
 4011 5728 FDF74EBC 		_NEXT 
 4012 572c DCF800C0 	9:  ldr IP,[IP]
 4013 5730 FDF74ABC 		_NEXT 
 4014              	
 4015              	
 4016              	resolve_leave:
 4017 5734 504700BF 		_NEST
 4018 5738 F5350000 	1:	_ADR QDUP 
 4019 573c 2F320000 		_QBRAN 2f 
 4019      5C570000 
 4020 5744 F53F0000 		_ADR HERE 
 4021 5748 81350000 		_ADR CELLP 
 4022 574c B9330000 		_ADR SWAP 
 4023 5750 71320000 		_ADR STORE 
 4024 5754 57320000 		_BRAN 1b 
 4024      38570000 
ARM GAS  forth.s 			page 194


 4025              	2:
 4026 575c CF2F0000 		_UNNEST 
 4027              	
 4028              	/********************************
 4029              		LOOP ( a -- )
 4030              		increment counter 
 4031              		end loop if >= limit 
 4032              	*********************************/
 4033 5760 E8560000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 4033      C44C4F4F 
 4033      500000BF 
 4034 576c 504700BF 		_NEST 
 4035 5770 EF310000 		_COMPI DOLOOP
 4035      0D570000 
 4035      0D550000 
 4036 577c 35570000 		_ADR resolve_leave 
 4037 5780 0D550000 		_ADR COMMA  // resolve loop branch 
 4038 5784 CF2F0000 		_UNNEST 
 4039              	
 4040              	/************************************
 4041              		UNLOOP ( -- ) ( R: limit count -- )
 4042              		remove loop parameters from rstack 
 4043              	****************************************/
 4044 5788 64570000 		_HEADER UNLOOP,6,"UNLOOP"
 4044      06554E4C 
 4044      4F4F5000 
 4045 5794 08F10808 		add RSP,#2*CELLL 
 4046 5798 FDF716BC 		_NEXT 
 4047              	
 4048              	
 4049              	/*********************************
 4050              		LEAVE ( -- ) ( R: loop-sys -- ) 
 4051              		exit inner DO...LOOP 
 4052              	**********************************/
 4053 579c 8C570000 		_HEADER LEAVE,COMPO+IMEDD+5,"LEAVE"
 4053      C54C4541 
 4053      564500BF 
 4054 57a8 504700BF 		_NEST 
 4055 57ac EF310000 		_COMPI DOLEAVE
 4055      DD570000 
 4055      0D550000 
 4056 57b8 F53F0000 		_ADR HERE
 4057 57bc E9330000 		_ADR OVER 
 4058 57c0 2F320000 		_QBRAN 1f
 4058      CC570000 
 4059 57c8 B9330000 		_ADR SWAP 
 4060 57cc EF310000 	1:	_DOLIT 0 
 4060      00000000 
 4061 57d4 0D550000 		_ADR COMMA   
 4062 57d8 CF2F0000 		_UNNEST 
 4063              	
 4064              	// LEAVE runtime
 4065              	// remove limit and counter from rstack  
 4066              	DOLEAVE:
 4067 57dc 08F10808 		add RSP,#2*CELLL
 4068 57e0 DCF800C0 		ldr IP,[IP] 
 4069 57e4 FDF7F0BB 		_NEXT 
ARM GAS  forth.s 			page 195


 4070              	
 4071              	
 4072              	/**********************
 4073              	    BEGIN	( -- a )
 4074              	 	Start an infinite 
 4075              		or indefinite 
 4076              		loop structure.
 4077              	************************/
 4078 57e8 A0570000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 4078      C5424547 
 4078      494E00BF 
 4079 57f4 504700BF 		_NEST
 4080 57f8 F53F0000 		_ADR	HERE
 4081 57fc CF2F0000 		_UNNEST
 4082              		.p2align 2 
 4083              	
 4084              	/********************
 4085              	    NEXT	( a -- )
 4086              	 	Terminate a FOR-NEXT
 4087              		loop structure.
 4088              	**************************/
 4089 5800 EC570000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 4089      C44E4558 
 4089      540000BF 
 4090 580c 504700BF 		_NEST
 4091 5810 EF310000 		_COMPI	DONXT
 4091      11320000 
 4091      0D550000 
 4092 581c 0D550000 		_ADR	COMMA
 4093 5820 CF2F0000 		_UNNEST
 4094              	
 4095              	/***************************
 4096              		I ( -- n )
 4097              		stack for loop counter 
 4098              	***************************/
 4099 5824 04580000 		_HEADER I,1+COMPO,"I"
 4099      414900BF 
 4100 582c 47F8046D 		_PUSH 
 4101 5830 D8F80060 		ldr TOS,[RSP]
 4102 5834 FDF7C8BB 		_NEXT 
 4103              	
 4104              	/****************************
 4105              		J ( -- n )
 4106              		stack outer loop counter 
 4107              	****************************/
 4108 5838 28580000 		_HEADER J,1,"J"
 4108      014A00BF 
 4109 5840 47F8046D 		_PUSH 
 4110 5844 D8F80460 		ldr TOS,[RSP,#4]
 4111 5848 FDF7BEBB 		_NEXT 
 4112              	
 4113              	/**********************
 4114              	    UNTIL	( a -- )
 4115              	 	Terminate a BEGIN-UNTIL
 4116              		indefinite loop structure.
 4117              	******************************/
 4118 584c 3C580000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
ARM GAS  forth.s 			page 196


 4118      C5554E54 
 4118      494C00BF 
 4119 5858 504700BF 		_NEST
 4120 585c EF310000 		_COMPI	QBRAN
 4120      2F320000 
 4120      0D550000 
 4121 5868 0D550000 		_ADR	COMMA
 4122 586c CF2F0000 		_UNNEST
 4123              	
 4124              	/**********************
 4125              	    AGAIN	( a -- )
 4126              	 	Terminate a BEGIN-AGAIN
 4127              		infinite loop structure.
 4128              	*****************************/
 4129 5870 50580000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 4129      C5414741 
 4129      494E00BF 
 4130 587c 504700BF 		_NEST
 4131 5880 EF310000 		_COMPI	BRAN
 4131      57320000 
 4131      0D550000 
 4132 588c 0D550000 		_ADR	COMMA
 4133 5890 CF2F0000 		_UNNEST
 4134              	
 4135              	/************************
 4136              	    IF	  ( -- A )
 4137              	 	Begin a conditional
 4138              		branch structure.
 4139              	**************************/
 4140 5894 74580000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 4140      C2494600 
 4141 589c 504700BF 		_NEST
 4142 58a0 EF310000 		_COMPI	QBRAN
 4142      2F320000 
 4142      0D550000 
 4143 58ac F53F0000 		_ADR	HERE
 4144 58b0 EF310000 		_DOLIT	4
 4144      04000000 
 4145 58b8 C53A0000 		_ADR	CPP
 4146 58bc 05390000 		_ADR	PSTOR
 4147 58c0 CF2F0000 		_UNNEST
 4148              	
 4149              	/*************************
 4150              	    AHEAD	( -- A )
 4151              	 	Compile a forward 
 4152              		branch instruction.
 4153              	*************************/
 4154 58c4 98580000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 4154      C5414845 
 4154      414400BF 
 4155 58d0 504700BF 		_NEST
 4156 58d4 EF310000 		_COMPI	BRAN
 4156      57320000 
 4156      0D550000 
 4157 58e0 F53F0000 		_ADR	HERE
 4158 58e4 EF310000 		_DOLIT	4
 4158      04000000 
ARM GAS  forth.s 			page 197


 4159 58ec C53A0000 		_ADR	CPP
 4160 58f0 05390000 		_ADR	PSTOR
 4161 58f4 CF2F0000 		_UNNEST
 4162              	
 4163              	/**************************
 4164              	    REPEAT	( A a -- )
 4165              	 	Terminate a BEGIN-WHILE-REPEAT
 4166              		indefinite loop.
 4167              	**********************************/
 4168 58f8 C8580000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 4168      C6524550 
 4168      45415400 
 4169 5904 504700BF 		_NEST
 4170 5908 7D580000 		_ADR	AGAIN
 4171 590c F53F0000 		_ADR	HERE
 4172 5910 B9330000 		_ADR	SWAP
 4173 5914 71320000 		_ADR	STORE
 4174 5918 CF2F0000 		_UNNEST
 4175              	
 4176              	/*********************
 4177              	    THEN	( A -- )
 4178              	 	Terminate a conditional
 4179              		branch structure.
 4180              	*****************************/
 4181 591c FC580000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 4181      C4544845 
 4181      4E0000BF 
 4182 5928 504700BF 		_NEST
 4183 592c F53F0000 		_ADR	HERE
 4184 5930 B9330000 		_ADR	SWAP
 4185 5934 71320000 		_ADR	STORE
 4186 5938 CF2F0000 		_UNNEST
 4187              	
 4188              	/***************************
 4189              	    AFT	 ( a -- a A )
 4190              	 	Jump to THEN in a 
 4191              		FOR-AFT-THEN-NEXT loop 
 4192              		the first time through.
 4193              	*****************************/
 4194 593c 20590000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 4194      C3414654 
 4195 5944 504700BF 		_NEST
 4196 5948 89330000 		_ADR	DROP
 4197 594c D1580000 		_ADR	AHEAD
 4198 5950 F5570000 		_ADR	BEGIN
 4199 5954 B9330000 		_ADR	SWAP
 4200 5958 CF2F0000 		_UNNEST
 4201              	
 4202              	/**********************
 4203              	    ELSE	( A -- A )
 4204              	 	Start the false 
 4205              		clause in an 
 4206              		IF-ELSE-THEN structure.
 4207              	****************************/
 4208 595c 40590000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 4208      C4454C53 
 4208      450000BF 
ARM GAS  forth.s 			page 198


 4209 5968 504700BF 		_NEST
 4210 596c D1580000 		_ADR	AHEAD
 4211 5970 B9330000 		_ADR	SWAP
 4212 5974 29590000 		_ADR	THENN
 4213 5978 CF2F0000 		_UNNEST
 4214              	
 4215              	/**************************
 4216              	    WHILE	( a -- A a )
 4217              	 	Conditional branch out 
 4218              		of a BEGIN-WHILE-REPEAT loop.
 4219              	*********************************/
 4220 597c 60590000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 4220      C5574849 
 4220      4C4500BF 
 4221 5988 504700BF 		_NEST
 4222 598c 9D580000 		_ADR	IFF
 4223 5990 B9330000 		_ADR	SWAP
 4224 5994 CF2F0000 		_UNNEST
 4225              	
 4226              	/**********************************
 4227              		CASE ( -- 0 )
 4228              		put a 0 on stack as a marker 
 4229              		for end of BRANCH list to 
 4230              		resolve by ENDCASE 
 4231              	***********************************/
 4232 5998 80590000 		_HEADER CASE,COMPO+IMEDD+4,"CASE"
 4232      C4434153 
 4232      450000BF 
 4233 59a4 504700BF 		_NEST 
 4234 59a8 EF310000 		_DOLIT 0 
 4234      00000000 
 4235 59b0 CF2F0000 		_UNNEST 
 4236              	
 4237              	/**********************************
 4238              		OF ( -- a )
 4239              		compile code for value comparison
 4240              		and add address of slot to be 
 4241              		resolved by ENDOF 
 4242              	*********************************/
 4243 59b4 9C590000 		_HEADER OF,COMPO+IMEDD+2,"OF"
 4243      C24F4600 
 4244 59bc 504700BF 		_NEST 
 4245 59c0 EF310000 		_COMPI OVER 
 4245      E9330000 
 4245      0D550000 
 4246 59cc EF310000 		_COMPI EQUAL  
 4246      2D380000 
 4246      0D550000 
 4247 59d8 EF310000 		_COMPI QBRAN 
 4247      2F320000 
 4247      0D550000 
 4248 59e4 F53F0000 		_ADR	HERE  
 4249 59e8 EF310000 		_DOLIT 0 
 4249      00000000 
 4250 59f0 0D550000 		_ADR COMMA 
 4251 59f4 CF2F0000 		_UNNEST
 4252              	
ARM GAS  forth.s 			page 199


 4253              	/**********************************
 4254              		ENDOF ( a1 -- a2 )
 4255              		resolve QBRAN of predecing OF 
 4256              		and add slot for forward BRANCH 
 4257              		to be resolved by ENDCASE 
 4258              	**********************************/
 4259 59f8 B8590000 		_HEADER ENDOF,COMPO+IMEDD+5,"ENDOF"
 4259      C5454E44 
 4259      4F4600BF 
 4260 5a04 504700BF 		_NEST
 4261 5a08 EF310000 		_COMPI	BRAN 
 4261      57320000 
 4261      0D550000 
 4262 5a14 EF310000 		_DOLIT	0 
 4262      00000000 
 4263 5a1c 0D550000 		_ADR	COMMA 
 4264 5a20 F53F0000 		_ADR	HERE 
 4265 5a24 B9330000 		_ADR	SWAP 
 4266 5a28 71320000 		_ADR	STORE 
 4267 5a2c F53F0000 		_ADR	HERE 
 4268 5a30 91350000 		_ADR	CELLM 
 4269 5a34 CF2F0000 		_UNNEST 
 4270              	
 4271              	/*************************************
 4272              		ENDCASE ( 0...a  -- )
 4273              		compile code for DROP 
 4274              		and resolve forward BRANCH 
 4275              		for each OF 
 4276              	*************************************/
 4277 5a38 FC590000 		_HEADER ENDCASE,COMPO+IMEDD+7,"ENDCASE"
 4277      C7454E44 
 4277      43415345 
 4278 5a44 504700BF 		_NEST 
 4279 5a48 EF310000 		_COMPI DROP 
 4279      89330000 
 4279      0D550000 
 4280 5a54 F5350000 	1:	_ADR QDUP 
 4281 5a58 2F320000 		_QBRAN 2f 
 4281      785A0000 
 4282 5a60 F53F0000 		_ADR HERE
 4283 5a64 91350000 		_ADR CELLM 	
 4284 5a68 B9330000 		_ADR SWAP 
 4285 5a6c 71320000 		_ADR STORE 
 4286 5a70 57320000 		_BRAN 1b 
 4286      545A0000 
 4287              	2:
 4288 5a78 CF2F0000 		_UNNEST 
 4289              	
 4290              	
 4291              	/**********************************
 4292              		RECURSE ( -- )
 4293              		compile recursive call to 
 4294              		actual defined word 
 4295              	***********************************/
 4296 5a7c 3C5A0000 		_HEADER RECURSE,COMPO+IMEDD+7,"RECURSE"
 4296      C7524543 
 4296      55525345 
ARM GAS  forth.s 			page 200


 4297 5a88 504700BF 		_NEST 
 4298 5a8c 153B0000 		_ADR LAST
 4299 5a90 85320000 		_ADR AT  
 4300 5a94 B54C0000 		_ADR TOCFA 
 4301 5a98 0D550000 		_ADR COMMA  
 4302 5a9c CF2F0000 		_UNNEST 
 4303              	
 4304              	
 4305              	/***********************************
 4306              	    ABORT"	( -- //  string> )
 4307              	 	Conditional abort with an 
 4308              		error message.
 4309              	***********************************/
 4310 5aa0 805A0000 		_HEADER ABRTQ,IMEDD+COMPO+6,"ABORT\""
 4310      C641424F 
 4310      52542200 
 4311 5aac 504700BF 		_NEST
 4312 5ab0 EF310000 		_COMPI	ABORQ
 4312      A9510000 
 4312      0D550000 
 4313 5abc D1550000 		_ADR	STRCQ
 4314 5ac0 CF2F0000 		_UNNEST
 4315              	
 4316              	/******************************
 4317              	    S"	( -- //  string> )
 4318              	 	Compile an inline 
 4319              		counted string. 
 4320              		at runtime: ( -- a u )
 4321              	*****************************/
 4322 5ac4 A45A0000 		_HEADER STRQ,IMEDD+COMPO+2,"S\""
 4322      C2532200 
 4323 5acc 504700BF 		_NEST
 4324 5ad0 EF310000 		_COMPI	STRQP
 4324      C1470000 
 4324      0D550000 
 4325 5adc D1550000 		_ADR	STRCQ
 4326 5ae0 CF2F0000 		_UNNEST
 4327              	
 4328              	/********************************
 4329              	CORE EXT 
 4330              		S\" ( -- )
 4331              		compile and inline counted 
 4332              		string with escaped char.
 4333              	********************************/
 4334 5ae4 C85A0000 		_HEADER STRSLHQ,COMPO+IMEDD+3,"S\\\""
 4334      C3535C22 
 4335 5aec 504700BF 		_NEST 
 4336 5af0 EF310000 		_COMPI	STRQP
 4336      C1470000 
 4336      0D550000 
 4337 5afc F53F0000 		_ADR	HERE   
 4338 5b00 EF310000 		_DOLIT	0 
 4338      00000000 
 4339 5b08 35550000 		_ADR	CCOMMA // space for count 
 4340 5b0c 895B0000 	1:	_ADR	GETC
 4341 5b10 F5350000 		_ADR	QDUP 
 4342 5b14 2F320000 		_QBRAN  4f 
ARM GAS  forth.s 			page 201


 4342      5C5B0000 
 4343 5b1c A9330000 		_ADR	DUPP 
 4344 5b20 EF310000 		_DOLIT	'\\' 
 4344      5C000000 
 4345 5b28 2D380000 		_ADR	EQUAL
 4346 5b2c 2F320000 		_QBRAN	2f
 4346      405B0000 
 4347 5b34 A75B0000 		_ADR	ESCAPE
 4348 5b38 57320000 		_BRAN	3f 
 4348      7C5B0000 
 4349 5b40 A9330000 	2:  _ADR	DUPP 
 4350 5b44 EF310000 		_DOLIT	'"' 
 4350      22000000 
 4351 5b4c 2D380000 		_ADR	EQUAL 
 4352 5b50 2F320000 		_QBRAN	3f
 4352      7C5B0000 
 4353 5b58 89330000 		_ADR	DROP 
 4354 5b5c F53F0000 	4:	_ADR	HERE 
 4355 5b60 E9330000 		_ADR	OVER
 4356 5b64 41350000 		_ADR	ONEP   
 4357 5b68 F5340000 		_ADR	SUBB
 4358 5b6c B9330000 		_ADR	SWAP 
 4359 5b70 91320000 		_ADR	CSTOR  
 4360 5b74 193F0000 		_ADR	ALIGN 
 4361 5b78 CF2F0000 		_UNNEST   
 4362              	3:	
 4363 5b7c 35550000 		_ADR	CCOMMA 
 4364 5b80 57320000 		_BRAN	1b 
 4364      0C5B0000 
 4365              	
 4366              	GETC: 
 4367 5b88 606B     		ldr T0,[UP,#TIBUF]
 4368 5b8a E16A     		ldr T1,[UP,#TOIN]
 4369 5b8c 226B     		ldr T2,[UP,#NTIBB]
 4370 5b8e 47F8046D 		_PUSH
 4371 5b92 4FF00006 		mov TOS,#0  
 4372 5b96 9142     		cmp	T1,T2 
 4373 5b98 03D0     		beq 1f 
 4374 5b9a 465C     		Ldrb TOS,[T0,T1]
 4375 5b9c 01F10101 		add  T1,#1 
 4376 5ba0 E162     		str T1,[UP,#TOIN]
 4377 5ba2 FDF711BA 	1:	_NEXT 
 4378              	
 4379              	// replace escaped character 
 4380              	ESCAPE: 
 4381 5ba6 504700BF 		_NEST 
 4382 5baa 89330000 		_ADR	DROP 
 4383 5bae 895B0000 		_ADR	GETC  
 4384 5bb2 A9330000 		_ADR	DUPP
 4385 5bb6 2F320000 		_QBRAN  5f 
 4385      525C0000 
 4386 5bbe A9330000 		_ADR	DUPP 
 4387 5bc2 EF310000 		_DOLIT	'"' 
 4387      22000000 
 4388 5bca 2D380000 		_ADR	EQUAL 
 4389 5bce 2F320000 		_QBRAN  1f 
 4389      DA5B0000 
ARM GAS  forth.s 			page 202


 4390 5bd6 CF2F0000 		_UNNEST 
 4391 5bda A9330000 	1: 	_ADR	DUPP 
 4392 5bde EF310000 		_DOLIT	'\\' 
 4392      5C000000 
 4393 5be6 2D380000 		_ADR	EQUAL 
 4394 5bea 2F320000 		_QBRAN  2f 
 4394      F65B0000 
 4395 5bf2 CF2F0000 		_UNNEST 	
 4396 5bf6 EF310000 	2:	_DOLIT	0X20 
 4396      20000000 
 4397 5bfe 79340000 		_ADR	ORR   // convert to lower case 
 4398 5c02 A9330000 		_ADR	DUPP 
 4399 5c06 EF310000 		_DOLIT	'x' 
 4399      78000000 
 4400 5c0e 2D380000 		_ADR	EQUAL 
 4401 5c12 2F320000 		_QBRAN  3f 
 4401      225C0000 
 4402 5c1a 575C0000 		_ADR	PARSE_HEX 
 4403 5c1e CF2F0000 		_UNNEST 
 4404 5c22 EF310000 	3:  _DOLIT	'a' 
 4404      61000000 
 4405 5c2a F5340000 		_ADR	SUBB
 4406 5c2e A9330000 		_ADR	DUPP 
 4407 5c32 19340000 		_ADR	ZLESS 
 4408 5c36 2F320000 		_QBRAN	4f
 4408      425C0000 
 4409 5c3e CF2F0000 		_UNNEST 
 4410 5c42 EF310000 	4:  _DOLIT	esc_char 
 4410      DA5C0000 
 4411 5c4a E5340000 		_ADR	PLUS 
 4412 5c4e A5320000 		_ADR	CAT 
 4413 5c52 CF2F0000 	5:	_UNNEST 
 4414              	
 4415              	PARSE_HEX:
 4416 5c56 504700BF 		_NEST 
 4417 5c5a 89330000 		_ADR 	DROP 
 4418 5c5e 895B0000 		_ADR	GETC 
 4419 5c62 A9330000 		_ADR	DUPP 
 4420 5c66 2F320000 		_QBRAN	2f
 4420      9E5C0000 
 4421 5c6e A35C0000 		_ADR	TO_HEX 
 4422 5c72 EF310000 	1:	_DOLIT	16 
 4422      10000000 
 4423 5c7a 05350000 		_ADR	STAR 
 4424 5c7e 15330000 		_ADR	TOR 
 4425 5c82 895B0000 		_ADR	GETC
 4426 5c86 A9330000 		_ADR	DUPP 
 4427 5c8a 2F320000 		_QBRAN	3f 
 4427      965C0000 
 4428 5c92 A35C0000 		_ADR	TO_HEX 
 4429 5c96 B1320000 	3:	_ADR	RFROM 
 4430 5c9a E5340000 		_ADR	PLUS 
 4431 5c9e CF2F0000 	2:	_UNNEST 
 4432              	
 4433              	
 4434              	TO_HEX: 
 4435 5ca2 504700BF 		_NEST 
ARM GAS  forth.s 			page 203


 4436 5ca6 EF310000 		_DOLIT	'0' 
 4436      30000000 
 4437 5cae F5340000 		_ADR	SUBB 
 4438 5cb2 A9330000 		_ADR	DUPP 
 4439 5cb6 EF310000 		_DOLIT	9 
 4439      09000000 
 4440 5cbe B9380000 		_ADR	GREAT 
 4441 5cc2 2F320000 		_QBRAN	1f 
 4441      D65C0000 
 4442 5cca EF310000 		_DOLIT	7 
 4442      07000000 
 4443 5cd2 F5340000 		_ADR	SUBB  
 4444              	1:
 4445 5cd6 CF2F0000 		_UNNEST 
 4446              	
 4447              	
 4448 5cda 07086364 	esc_char:  .byte 7,8,'c','d',27,12,'g','h','i','j','k',10,13,10,'o','p',34,13,'s',9,'u',11,'x','y',
 4448      1B0C6768 
 4448      696A6B0A 
 4448      0D0A6F70 
 4448      220D7309 
 4449              	
 4450              	
 4451              	/********************
 4452              	    $,\"	( -- )
 4453              	 	Compile a literal 
 4454              		escaped string up to next " .
 4455              	hidden word 
 4456              	************************/
 4457              	STRCSLHQ:
 4458              	
 4459              	
 4460              	
 4461              	/********************************
 4462              	EXTENDED CORE 
 4463              		C" string" ( -- )
 4464              		Compile an inline counted 
 4465              		literal.
 4466              		at runtime ( -- a )
 4467              	*********************************/
 4468 5cf3 E85A0000 		_HEADER CSTRQ,IMEDD+COMPO+2,"C\""
 4468      C2432200 
 4468      BF
 4469 5cfc 504700BF 		_NEST 
 4470 5d00 EF310000 		_COMPI	STRQP
 4470      C1470000 
 4470      0D550000 
 4471 5d0c D1550000 		_ADR	STRCQ 
 4472 5d10 EF310000 		_COMPI	DROP 
 4472      89330000 
 4472      0D550000 
 4473 5d1c EF310000 		_COMPI	ONEM  
 4473      51350000 
 4473      0D550000 
 4474 5d28 CF2F0000 		_UNNEST 
 4475              	
 4476              	
ARM GAS  forth.s 			page 204


 4477              	/******************************
 4478              	    ."	( -- //  string> )
 4479              	 	Compile an inline word
 4480              		literal to be typed out 
 4481              		at run time.
 4482              	*******************************/
 4483 5d2c F75C0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 4483      C22E2200 
 4484 5d34 504700BF 		_NEST
 4485 5d38 EF310000 		_COMPI	DOTQP
 4485      CD470000 
 4485      0D550000 
 4486 5d44 D1550000 		_ADR	STRCQ
 4487 5d48 CF2F0000 		_UNNEST
 4488              	
 4489              	/*********************
 4490              	  Name compiler
 4491              	***********************/
 4492              	
 4493              	/**************************
 4494              	    ?UNIQUE	( a -- a )
 4495              	 	Display a warning 
 4496              		message if the word 
 4497              		already exists.
 4498              	**************************/
 4499 5d4c 305D0000 		_HEADER UNIQU,7,"?UNIQUE"
 4499      073F554E 
 4499      49515545 
 4500 5d58 504700BF 		_NEST
 4501 5d5c A9330000 		_ADR	DUPP
 4502 5d60 294E0000 		_ADR	NAMEQ			// ?name exists
 4503 5d64 2F320000 		_QBRAN	UNIQ1	// redefinitions are OK
 4503      845D0000 
 4504 5d6c CD470000 		_DOTQP	7," reDef "		// but warn the user
 4504      07207265 
 4504      44656620 
 4505 5d78 E9330000 		_ADR	OVER
 4506 5d7c 59390000 		_ADR	COUNT
 4507 5d80 09470000 		_ADR	TYPEE			// just in case its not planned
 4508              	UNIQ1:
 4509 5d84 89330000 		_ADR	DROP
 4510 5d88 CF2F0000 		_UNNEST
 4511              	
 4512              	/***********************
 4513              	    $,n	 ( na -- )
 4514              	 	Build a new dictionary 
 4515              		name using the data at na.
 4516              	hidden word 
 4517              	*******************************/
 4518              	SNAME:
 4519 5d8c 504700BF 		_NEST
 4520 5d90 A9330000 		_ADR	DUPP			//  na na
 4521 5d94 A5320000 		_ADR	CAT			//  ?null input
 4522 5d98 2F320000 		_QBRAN	SNAM1
 4522      D45D0000 
 4523 5da0 595D0000 		_ADR	UNIQU			//  na
 4524 5da4 153B0000 		_ADR	LAST			//  na last
ARM GAS  forth.s 			page 205


 4525 5da8 85320000 		_ADR	AT			//  na la
 4526 5dac 0D550000 		_ADR	COMMA			//  na
 4527 5db0 A9330000 		_ADR	DUPP			//  na na
 4528 5db4 153B0000 		_ADR	LAST			//  na na last
 4529 5db8 71320000 		_ADR	STORE			//  na , save na for vocabulary link
 4530 5dbc 59390000 		_ADR	COUNT			//  na+1 count
 4531 5dc0 E5340000 		_ADR	PLUS			//  na+1+count
 4532 5dc4 353F0000 		_ADR	ALGND			//  word boundary
 4533 5dc8 C53A0000 		_ADR	CPP
 4534 5dcc 71320000 		_ADR	STORE			//  top of dictionary now
 4535 5dd0 CF2F0000 		_UNNEST
 4536              	SNAM1:
 4537 5dd4 C1470000 		_ADR	STRQP
 4538 5dd8 07       		.byte	7
 4539 5dd9 206E616D 		.ascii " name? "
 4539      653F20
 4540 5de0 7D510000 		_ADR	PRT_ABORT
 4541              	
 4542              	/************************
 4543              	    $COMPILE	( a -- )
 4544              	 	Compile next word to 
 4545              		code dictionary as 
 4546              		a token or literal.
 4547              	**************************/
 4548 5de4 505D0000 		_HEADER SCOMP,8,"$COMPILE"
 4548      0824434F 
 4548      4D50494C 
 4548      450000BF 
 4549 5df4 504700BF 		_NEST
 4550 5df8 294E0000 		_ADR	NAMEQ
 4551 5dfc F5350000 		_ADR	QDUP	// defined?
 4552 5e00 2F320000 		_QBRAN	SCOM2
 4552      305E0000 
 4553 5e08 85320000 		_ADR	AT
 4554 5e0c EF310000 		_DOLIT	IMEDD
 4554      80000000 
 4555 5e14 65340000 		_ADR	ANDD	// immediate?
 4556 5e18 2F320000 		_QBRAN	SCOM1
 4556      285E0000 
 4557 5e20 05320000 		_ADR	EXECU
 4558 5e24 CF2F0000 		_UNNEST			// it's immediate, execute
 4559              	SCOM1:
 4560 5e28 095F0000 		_ADR	CALLC			// it's not immediate, compile
 4561 5e2c CF2F0000 		_UNNEST	
 4562              	SCOM2:
 4563 5e30 29460000 		_ADR	NUMBERQ 
 4564 5e34 2F320000 		_QBRAN	SCOM3
 4564      445E0000 
 4565 5e3c B9550000 		_ADR	LITER
 4566 5e40 CF2F0000 		_UNNEST			// compile number as integer
 4567              	SCOM3: // compilation abort 
 4568 5e44 4D5E0000 		_ADR COLON_ABORT 
 4569 5e48 7D510000 		_ADR	PRT_ABORT			// error
 4570              	
 4571              	/********************************
 4572              	 before aborting a compilation 
 4573              	 reset HERE and LAST
ARM GAS  forth.s 			page 206


 4574              	 to previous values. 
 4575              	*******************************/
 4576              	COLON_ABORT:
 4577 5e4c 504700BF 		_NEST 
 4578 5e50 153B0000 		_ADR LAST 
 4579 5e54 85320000 		_ADR AT 
 4580 5e58 91350000 		_ADR CELLM 
 4581 5e5c A9330000 		_ADR DUPP 
 4582 5e60 C53A0000 		_ADR CPP  
 4583 5e64 71320000 		_ADR STORE 
 4584 5e68 85320000 		_ADR AT 
 4585 5e6c 153B0000 		_ADR LAST 
 4586 5e70 71320000 		_ADR STORE 
 4587 5e74 895E0000 		_ADR OVERT 
 4588 5e78 CF2F0000 		_UNNEST 
 4589              	
 4590              	/*********************
 4591              	    OVERT	( -- )
 4592              	 	Link a new word 
 4593              		into the current 
 4594              		vocabulary.
 4595              	**********************/
 4596 5e7c E85D0000 		_HEADER OVERT,5,"OVERT"
 4596      054F5645 
 4596      525400BF 
 4597 5e88 504700BF 		_NEST
 4598 5e8c 153B0000 		_ADR	LAST
 4599 5e90 85320000 		_ADR	AT
 4600 5e94 B13A0000 		_ADR	CNTXT
 4601 5e98 71320000 		_ADR	STORE
 4602 5e9c CF2F0000 		_UNNEST
 4603              	
 4604              	/**********************
 4605              	    ;  ( -- )
 4606              	 	Terminate a colon
 4607              		definition.
 4608              	***********************/
 4609 5ea0 805E0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 4609      C13B00BF 
 4610 5ea8 504700BF 		_NEST
 4611 5eac EF310000 		_DOLIT	UNNEST
 4611      CE2F0000 
 4612 5eb4 095F0000 		_ADR	CALLC
 4613 5eb8 193F0000 		_ADR    ALIGN 
 4614 5ebc 45520000 		_ADR	LBRAC
 4615 5ec0 895E0000 		_ADR	OVERT
 4616 5ec4 CF2F0000 		_UNNEST
 4617              	
 4618              	/******************
 4619              	    ]	   ( -- )
 4620              	 	Start compiling 
 4621              		the words in 
 4622              		the input stream.
 4623              	*********************/
 4624 5ec8 A45E0000 		_HEADER RBRAC,1,"]"
 4624      015D00BF 
 4625 5ed0 504700BF 		_NEST
ARM GAS  forth.s 			page 207


 4626 5ed4 EF310000 		_DOLIT	SCOMP
 4626      F45D0000 
 4627 5edc 853A0000 		_ADR	TEVAL
 4628 5ee0 71320000 		_ADR	STORE
 4629 5ee4 EF310000 		_DOLIT  -1
 4629      FFFFFFFF 
 4630 5eec 91390000 		_ADR    STATE 
 4631 5ef0 71320000 		_ADR    STORE 
 4632 5ef4 CF2F0000 		_UNNEST
 4633              	
 4634              	/****************************
 4635              	    COMPILE,	( cfa -- )
 4636              	 	compile cfa.
 4637              	
 4638              	*****************************/
 4639 5ef8 CC5E0000 		_HEADER CALLC,COMPO+IMEDD+8,"COMPILE,"
 4639      C8434F4D 
 4639      50494C45 
 4639      2C0000BF 
 4640 5f08 504700BF 		_NEST
 4641 5f0c EF310000 		_DOLIT 1 
 4641      01000000 
 4642 5f14 79340000 		_ADR ORR 
 4643 5f18 0D550000 		_ADR COMMA  
 4644 5f1c CF2F0000 		_UNNEST 
 4645              	
 4646              	
 4647              	/****************************
 4648              		BUFFER: "name" ( u -- )
 4649              		create a named buffer of 
 4650              		u bytes 
 4651              		0's the buffer. 
 4652              		at execution "name" return 
 4653              		buffer address 
 4654              	*****************************/
 4655 5f20 FC5E0000 		_HEADER BUFFERCOL,7,"BUFFER:"
 4655      07425546 
 4655      4645523A 
 4656 5f2c 504700BF 		_NEST 
 4657 5f30 59610000 		_ADR    CREAT
 4658 5f34 F53F0000 		_ADR    HERE    // u a-adr 
 4659 5f38 E9330000 		_ADR    OVER    // u a-adr u 
 4660 5f3c F5540000 		_ADR    ALLOT   // u a-adr
 4661 5f40 193F0000 		_ADR	ALIGN 
 4662 5f44 B9330000 		_ADR	SWAP    // a-adr u 
 4663 5f48 EF310000 		_DOLIT	0       // a-adr u 0 
 4663      00000000 
 4664 5f50 2D410000 		_ADR	FILL
 4665 5f54 CF2F0000 		_UNNEST 
 4666              	
 4667              	
 4668              	/*************************
 4669              	 	:	( -- //  string> )
 4670              	 	Start a new colon 
 4671              		definition using 
 4672              		next word as its name.
 4673              	**************************/
ARM GAS  forth.s 			page 208


 4674 5f58 245F0000 		_HEADER COLON,1,":"
 4674      013A00BF 
 4675 5f60 504700BF 		_NEST
 4676 5f64 193F0000 		_ADR    ALIGN 
 4677 5f68 954C0000 		_ADR	TOKEN
 4678 5f6c 8D5D0000 		_ADR	SNAME
 4679 5f70 D92F0000 		_ADR	COMPI_NEST 
 4680 5f74 D15E0000 		_ADR	RBRAC
 4681 5f78 CF2F0000 		_UNNEST
 4682              	
 4683              	/*************************
 4684              	    IMMEDIATE   ( -- )
 4685              	 	Make the last compiled 
 4686              		word an immediate word.
 4687              	***************************/
 4688 5f7c 5C5F0000 		_HEADER IMMED,9,"IMMEDIATE"
 4688      09494D4D 
 4688      45444941 
 4688      544500BF 
 4689 5f8c 504700BF 		_NEST
 4690 5f90 EF310000 		_DOLIT	IMEDD
 4690      80000000 
 4691 5f98 153B0000 		_ADR	LAST
 4692 5f9c 85320000 		_ADR	AT
 4693 5fa0 85320000 		_ADR	AT
 4694 5fa4 79340000 		_ADR	ORR
 4695 5fa8 153B0000 		_ADR	LAST
 4696 5fac 85320000 		_ADR	AT
 4697 5fb0 71320000 		_ADR	STORE
 4698 5fb4 CF2F0000 		_UNNEST
 4699              	
 4700              	/******************
 4701              	  Defining words
 4702              	******************/
 4703              	
 4704              		.p2align 2 
 4705              	/****************************************
 4706              	 doDOES> ( -- a )
 4707              	 runtime action of  DOES>		 
 4708              	hidden word used by compiler 
 4709              	***************************************/
 4710              	DODOES:
 4711 5fb8 504700BF 		_NEST 
 4712 5fbc E5320000 		_ADR	RAT 
 4713 5fc0 81350000 		_ADR	CELLP 
 4714 5fc4 41350000 		_ADR	ONEP  
 4715 5fc8 153B0000 		_ADR	LAST 
 4716 5fcc 85320000 		_ADR	AT
 4717 5fd0 B54C0000 		_ADR	TOCFA
 4718 5fd4 51350000 		_ADR    ONEM  
 4719 5fd8 45650000 		_ADR	TOVECTOR  
 4720 5fdc 71320000 		_ADR	STORE
 4721 5fe0 CF2F0000 		_UNNEST 
 4722              	
 4723              		.p2align 2
 4724              	/**********************
 4725              	  DOES> ( -- )
ARM GAS  forth.s 			page 209


 4726              	  compile time action
 4727              	*************************/
 4728 5fe4 805F0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 4728      C5444F45 
 4728      533E00BF 
 4729 5ff0 504700BF 		_NEST 
 4730 5ff4 EF310000 		_COMPI	DODOES 
 4730      B95F0000 
 4730      0D550000 
 4731 6000 EF310000 		_COMPI	UNNEST 
 4731      CF2F0000 
 4731      0D550000 
 4732 600c D92F0000 		_ADR	COMPI_NEST
 4733 6010 CF2F0000 	 	_UNNEST 
 4734              	
 4735              	
 4736              	/****************************
 4737              	  DEFER@ ( cfa1 -- cfa2 )
 4738              	
 4739              	******************************/
 4740 6014 E85F0000 		_HEADER DEFERAT,6,"DEFER@"
 4740      06444546 
 4740      45524000 
 4741 6020 504700BF 		_NEST 
 4742 6024 81350000 		_ADR CELLP 
 4743 6028 85320000 		_ADR AT 
 4744 602c CF2F0000 		_UNNEST 
 4745              	
 4746              	/*********************************
 4747              		ACTION-OF "name" ( -- xt )
 4748              		push the action token 
 4749              		of defered word "name" 
 4750              	*********************************/
 4751 6030 18600000 		_HEADER ACTIONOF,IMEDD+9,"ACTION-OF"
 4751      89414354 
 4751      494F4E2D 
 4751      4F4600BF 
 4752 6040 504700BF 		_NEST 
 4753 6044 69540000 		_ADR 	TICK  
 4754 6048 21600000 		_ADR 	DEFERAT 
 4755 604c 91390000 		_ADR    STATE 
 4756 6050 85320000 		_ADR 	AT 
 4757 6054 2F320000 		_QBRAN 	1f
 4757      60600000 
 4758 605c 0D550000 		_ADR    COMMA 
 4759 6060 CF2F0000 	1: 	_UNNEST 
 4760              	
 4761              	
 4762              	/*********************************
 4763              	 DEFER! ( cfa1 cfa2 -- )
 4764              	 assign an action to a defered word 
 4765              	************************************/
 4766 6064 34600000 		_HEADER DEFERSTO,6,"DEFER!"
 4766      06444546 
 4766      45522100 
 4767 6070 504700BF 		_NEST 
 4768 6074 EF310000 		_DOLIT	-2 
ARM GAS  forth.s 			page 210


 4768      FEFFFFFF 
 4769 607c 65340000 		_ADR	ANDD   // clear thumb bit of cfa2  
 4770 6080 81350000 		_ADR 	CELLP  // skip NEST 
 4771 6084 71320000 		_ADR STORE 
 4772 6088 CF2F0000 		_UNNEST
 4773              	
 4774              	/****************************
 4775              	  DEFER ( "name" -- )
 4776              	  create a defered definition
 4777              	*****************************/
 4778 608c 68600000 		_HEADER DEFER,5,"DEFER"
 4778      05444546 
 4778      455200BF 
 4779 6098 504700BF 		_NEST 
 4780 609c 615F0000 		_ADR COLON 
 4781              	// runtime code 
 4782 60a0 EF310000 		_DOLIT NO_ACTION  
 4782      C0600000 
 4783 60a8 095F0000 		_ADR  CALLC 
 4784 60ac EF310000 		_DOLIT UNNEST 
 4784      CE2F0000 
 4785 60b4 095F0000 		_ADR  CALLC
 4786              	// end of runtime code 	
 4787 60b8 A95E0000 		_ADR  SEMIS  
 4788 60bc CF2F0000 		_UNNEST 
 4789              	
 4790              	NO_ACTION:
 4791 60c0 504700BF 		_NEST 
 4792 60c4 EF310000 		_DOLIT 1 
 4792      01000000 
 4793 60cc A9510000 		_ABORQ 15 , " no action set!"
 4793      0F206E6F 
 4793      20616374 
 4793      696F6E20 
 4793      73657421 
 4794 60e0 CF2F0000 		_UNNEST 
 4795              	
 4796              	/*********************************
 4797              		:NONAME  ( -- xt )
 4798              		create a colon word without 
 4799              		name. 
 4800              	output:
 4801              		xt  exÃ©cution token of 
 4802              		new definition
 4803              	*********************************/
 4804 60e4 90600000 		_HEADER NONAME,7,":NONAME"
 4804      073A4E4F 
 4804      4E414D45 
 4805 60f0 504700BF 		_NEST 
 4806 60f4 F53F0000 		_ADR 	HERE 
 4807 60f8 D92F0000 		_ADR	COMPI_NEST 
 4808 60fc D15E0000 		_ADR 	RBRAC
 4809 6100 CF2F0000 		_UNNEST 
 4810              	
 4811              	/*******************************
 4812              		IS cccc ( cfa -- )
 4813              	input:
ARM GAS  forth.s 			page 211


 4814              	   cccc  defered word name 
 4815              	   xt    execution token 
 4816              	   to be affected to the 
 4817              	   defered word.
 4818              	********************************/
 4819 6104 E8600000 		_HEADER IS,IMEDD+2,"IS"
 4819      82495300 
 4820 610c 504700BF 		_NEST
 4821 6110 91390000 		_ADR STATE 
 4822 6114 85320000 		_ADR AT 
 4823 6118 2F320000 		_QBRAN 1f 
 4823      40610000 
 4824 6120 EF310000 		_DOLIT ITICK
 4824      8C540000 
 4825 6128 095F0000 		_ADR CALLC  
 4826 612c EF310000 		_DOLIT DEFERSTO
 4826      70600000 
 4827 6134 095F0000 		_ADR CALLC
 4828 6138 57320000 		_BRAN 2f    
 4828      48610000 
 4829 6140 69540000 	1:  _ADR TICK 
 4830 6144 71600000 		_ADR DEFERSTO 
 4831 6148 CF2F0000 	2:	_UNNEST 
 4832              	
 4833              	
 4834              	/******************************
 4835              	    CREATE	( -- //  string> )
 4836              	 	Compile a new array entry 
 4837              		without allocating code space.
 4838              	***********************************/
 4839 614c 08610000 		_HEADER CREAT,6,"CREATE"
 4839      06435245 
 4839      41544500 
 4840 6158 504700BF 		_NEST 
 4841 615c 193F0000 		_ADR	ALIGN 
 4842 6160 954C0000 		_ADR	TOKEN
 4843 6164 8D5D0000 		_ADR	SNAME
 4844 6168 895E0000 		_ADR	OVERT
 4845 616c D92F0000 		_ADR	COMPI_NEST 
 4846 6170 EF310000 		_COMPI	DOVAR
 4846      99610000 
 4846      0D550000 
 4847 617c EF310000 		_COMPI  NOP     // reserved slot  for DOES> vector   
 4847      ED310000 
 4847      0D550000 
 4848 6188 EF310000 		_COMPI  UNNEST 
 4848      CF2F0000 
 4848      0D550000 
 4849 6194 CF2F0000 		_UNNEST
 4850              	
 4851              	/*******************************
 4852              	  doVAR	( -- a )
 4853              	  Run time routine for VARIABLE and CREATE.
 4854              	hidden word used by compiler
 4855              	********************************/
 4856              	DOVAR:
 4857 6198 47F8046D 		_PUSH
ARM GAS  forth.s 			page 212


 4858 619c 6646     		MOV TOS,IP
 4859 619e 06F10806 		ADD TOS,#2*CELLL // >BODY 
 4860 61a2 FCF711BF 		_NEXT  
 4861              	
 4862              	
 4863              	/*******************************
 4864              	    VARIABLE	( -- //  string> )
 4865              	 	Compile a new variable 
 4866              		initialized to 0.
 4867              	***********************************/
 4868 61a6 50610000 		_HEADER VARIA,8,"VARIABLE"
 4868      08564152 
 4868      4941424C 
 4868      4500
 4869 61b4 504700BF 		_NEST
 4870 61b8 59610000 		_ADR	CREAT
 4871 61bc EF310000 		_DOLIT	0
 4871      00000000 
 4872 61c4 0D550000 		_ADR	COMMA
 4873 61c8 CF2F0000 		_UNNEST
 4874              	
 4875              	/**********************************
 4876              	    doCON	( -- a ) 
 4877              	 	Run time routine for CONSTANT.
 4878              	hidden word used by compiler 
 4879              	***********************************/
 4880              	DOCON:
 4881 61cc 47F8046D 		_PUSH
 4882 61d0 5CF8046B 		LDR.W TOS,[IP],#4 
 4883 61d4 FCF7FBBE 		B UNNEST 
 4884              	
 4885              	
 4886              	/***********************************
 4887              	CORE EXT 
 4888              		VALUE name ( x -- )
 4889              		create a value object and 
 4890              		assign x to it. 
 4891              	***********************************/
 4892 61d8 AA610000 		_HEADER VALUE,5,"VALUE" 
 4892      0556414C 
 4892      554500BF 
 4893 61e4 504700BF 		_NEST 
 4894 61e8 59610000 		_ADR CREAT 
 4895 61ec EF310000 		_DOLIT AT 
 4895      84320000 
 4896 61f4 EF310000 		_DOLIT	1 
 4896      01000000 
 4897 61fc 79340000 		_ADR	ORR 
 4898 6200 F53F0000 		_ADR	HERE 
 4899 6204 EF310000 		_DOLIT	8 
 4899      08000000 
 4900 620c F5340000 		_ADR	SUBB 
 4901 6210 71320000 		_ADR	STORE 
 4902 6214 0D550000 		_ADR	COMMA 
 4903 6218 CF2F0000 		_UNNEST 
 4904              	
 4905              	/***********************************
ARM GAS  forth.s 			page 213


 4906              	CORE EXT 
 4907              		TO name ( x -- )
 4908              	    assign a new value to name 
 4909              	***********************************/
 4910 621c DC610000 		_HEADER TO,2,"TO"
 4910      02544F00 
 4911 6224 504700BF 		_NEST 
 4912 6228 69540000 		_ADR	TICK 
 4913 622c 51350000 		_ADR	ONEM 
 4914 6230 EF310000 		_DOLIT	4*CELLL
 4914      10000000 
 4915 6238 E5340000 		_ADR	PLUS  
 4916 623c 71320000 		_ADR	STORE 
 4917 6240 CF2F0000 		_UNNEST 
 4918              	
 4919              	
 4920              	/***********************************
 4921              	    CONSTANT	( u -- //  string> )
 4922              	 	Compile a new constant.
 4923              	************************************/
 4924 6244 20620000 		_HEADER CONST,8,"CONSTANT"
 4924      08434F4E 
 4924      5354414E 
 4924      540000BF 
 4925 6254 504700BF 		_NEST 
 4926 6258 954C0000 		_ADR	TOKEN
 4927 625c 8D5D0000 		_ADR	SNAME
 4928 6260 895E0000 		_ADR	OVERT
 4929 6264 D92F0000 		_ADR	COMPI_NEST
 4930 6268 EF310000 		_DOLIT	DOCON
 4930      CC610000 
 4931 6270 095F0000 		_ADR	CALLC
 4932 6274 0D550000 		_ADR	COMMA
 4933 6278 EF310000 		_DOLIT	UNNEST 
 4933      CE2F0000 
 4934 6280 095F0000 		_ADR	CALLC  
 4935 6284 CF2F0000 		_UNNEST
 4936              	
 4937              	
 4938              	/***********
 4939              	  Tools
 4940              	***********/
 4941              	
 4942              	/*************************
 4943              	    dm+	 ( a u -- a )
 4944              	 	Dump u bytes from a , 
 4945              		leaving a+u on the stack.
 4946              		hidden word used by DUMP 
 4947              	****************************/
 4948              	DMP:
 4949 6288 504700BF 		_NEST
 4950 628c E9330000 		_ADR	OVER
 4951 6290 EF310000 		_DOLIT	4
 4951      04000000 
 4952 6298 95480000 		_ADR	UDOTR			// display address
 4953 629c EF310000 		_DOLIT  0         // don't show base char 
 4953      00000000 
ARM GAS  forth.s 			page 214


 4954 62a4 1D3A0000 		_ADR    BCHR
 4955 62a8 A9330000 		_ADR    DUPP
 4956 62ac 85320000 		_ADR    AT 
 4957 62b0 15330000 		_ADR    TOR      // save original value of BCHAR 
 4958 62b4 71320000 		_ADR    STORE 
 4959 62b8 B5460000 		_ADR	SPACE
 4960 62bc 15330000 		_ADR	TOR			// start count down loop
 4961 62c0 57320000 		_BRAN	PDUM2			// skip first pass
 4961      E0620000 
 4962              	PDUM1:
 4963 62c8 A9330000 	    _ADR	DUPP
 4964 62cc A5320000 		_ADR	CAT
 4965 62d0 EF310000 		_DOLIT	3
 4965      03000000 
 4966 62d8 95480000 		_ADR	UDOTR			// display numeric data
 4967 62dc 41350000 		_ADR	ONEP			// increment address
 4968              	PDUM2:
 4969 62e0 11320000 	    _ADR	DONXT
 4970 62e4 C8620000 		.word	PDUM1	// loop till done
 4971 62e8 B1320000 		_ADR    RFROM   // restore BCHAR value 
 4972 62ec 1D3A0000 		_ADR    BCHR 
 4973 62f0 71320000 		_ADR    STORE 
 4974 62f4 CF2F0000 		_UNNEST
 4975              		.p2align 2 
 4976              	//    DUMP	( a u -- )
 4977              	// 	Dump u bytes from a, in a formatted manner.
 4978              	
 4979              	/**********************
 4980              		DUMP ( a n -- )
 4981              		hex dump memory 
 4982              	*********************/
 4983 62f8 48620000 		_HEADER DUMP,4,"DUMP"
 4983      0444554D 
 4983      500000BF 
 4984 6304 504700BF 		_NEST
 4985 6308 EF310000 		_DOLIT  15 
 4985      0F000000 
 4986 6310 E5340000 		_ADR    PLUS 
 4987 6314 EF310000 		_DOLIT  0xFFFFFFF0 
 4987      F0FFFFFF 
 4988 631c 65340000 		_ADR    ANDD 
 4989 6320 B9330000 		_ADR    SWAP 
 4990 6324 EF310000 		_DOLIT  0xFFFFFFFC
 4990      FCFFFFFF 
 4991 632c 65340000 		_ADR    ANDD 
 4992 6330 B9330000 		_ADR    SWAP 
 4993 6334 053A0000 		_ADR	BASE
 4994 6338 85320000 		_ADR	AT
 4995 633c 15330000 		_ADR	TOR
 4996 6340 99430000 		_ADR	HEX			// save radix,set hex
 4997 6344 EF310000 		_DOLIT	16
 4997      10000000 
 4998 634c 953E0000 		_ADR	SLASH			// change count to lines
 4999 6350 15330000 		_ADR	TOR
 5000 6354 57320000 		_BRAN	DUMP4			// start count down loop
 5000      84630000 
 5001              	DUMP1:
ARM GAS  forth.s 			page 215


 5002 635c 71470000 	    _ADR	CR
 5003 6360 EF310000 		_DOLIT	16
 5003      10000000 
 5004 6368 DD360000 		_ADR	DDUP
 5005 636c 89620000 		_ADR	DMP			// display numeric
 5006 6370 8D360000 		_ADR	ROT
 5007 6374 8D360000 		_ADR	ROT
 5008 6378 B5460000 		_ADR	SPACE
 5009 637c B5460000 		_ADR	SPACE
 5010 6380 09470000 		_ADR	TYPEE			// display printable characters
 5011              	DUMP4:
 5012 6384 11320000 	  _DONXT	DUMP1	// loop till done
 5012      5C630000 
 5013              	DUMP3:
 5014 638c 89330000 		_ADR	DROP
 5015 6390 B1320000 		_ADR	RFROM
 5016 6394 053A0000 		_ADR	BASE
 5017 6398 71320000 		_ADR	STORE			// restore radix
 5018 639c CF2F0000 		_UNNEST
 5019              	
 5020              	/*******************************
 5021              	   TRACE. display in hexadecimal
 5022              	   TRACE. use a different buffer 
 5023              	   than DOT  to avoid current 
 5024              	   display overwrite.
 5025              	*******************************/ 
 5026              	TDOT: // ( u -- )
 5027 63a0 504700BF 		_NEST 
 5028 63a4 053A0000 		_ADR BASE 
 5029 63a8 85320000 		_ADR AT 
 5030 63ac 15330000 		_ADR TOR
 5031 63b0 99430000 		_ADR HEX  
 5032 63b4 993A0000 		_ADR HLD 
 5033 63b8 85320000 		_ADR AT 
 5034 63bc 15330000 		_ADR TOR   // R: base *hold 
 5035 63c0 F53F0000 		_ADR HERE 
 5036 63c4 EF310000 		_DOLIT 160 
 5036      A0000000 
 5037 63cc E5340000 		_ADR PLUS
 5038 63d0 A9330000 		_ADR DUPP 
 5039 63d4 15330000 		_ADR TOR  
 5040 63d8 993A0000 		_ADR HLD 
 5041 63dc 71320000 		_ADR STORE
 5042 63e0 EF310000 		_DOLIT 0  
 5042      00000000 
 5043 63e8 E9420000 		_ADR DIGS  
 5044 63ec 89330000 		_ADR DROP
 5045 63f0 EF310000 		_DOLIT '$'
 5045      24000000 
 5046 63f8 65420000 		_ADR HOLD 
 5047 63fc 993A0000 		_ADR HLD 
 5048 6400 85320000 		_ADR AT
 5049 6404 B1320000 		_ADR RFROM   
 5050 6408 E9330000 		_ADR OVER 
 5051 640c F5340000 		_ADR SUBB 
 5052 6410 B5460000 		_ADR SPACE 
 5053 6414 09470000 		_ADR TYPEE 
ARM GAS  forth.s 			page 216


 5054 6418 B1320000 		_ADR RFROM 
 5055 641c 993A0000 		_ADR HLD 
 5056 6420 71320000 		_ADR STORE 
 5057 6424 B1320000 		_ADR RFROM 
 5058 6428 053A0000 		_ADR BASE 
 5059 642c 71320000 		_ADR STORE 
 5060 6430 CF2F0000 		_UNNEST 
 5061              	
 5062              	/**********************
 5063              	   .S	  ( ... -- ... )
 5064              	 	Display the contents 
 5065              		of the data stack.
 5066              	*************************/
 5067 6434 FC620000 		_HEADER DOTS,2,".S"
 5067      022E5300 
 5068 643c 504700BF 		_NEST
 5069 6440 9D3F0000 		_ADR	DEPTH	// stack depth
 5070 6444 15330000 		_ADR	TOR		// start count down loop
 5071 6448 57320000 		_BRAN	DOTS2  // skip first pass
 5071      5C640000 
 5072              	DOTS1:
 5073 6450 E5320000 		_ADR	RAT
 5074 6454 C13F0000 		_ADR	PICK
 5075 6458 A1630000 		_ADR	TDOT // index stack, display contents
 5076              	DOTS2:
 5077 645c 11320000 		_DONXT	DOTS1 // loop till done
 5077      50640000 
 5078 6464 71470000 		_ADR	CR 
 5079 6468 CF2F0000 		_UNNEST
 5080              	
 5081              	RBASE: 
 5082 646c 47F8046D 		_PUSH 
 5083 6470 4FF68076 		_MOV32 TOS,RPP 
 5083      C2F20106 
 5084 6478 FCF7A6BD 		_NEXT 
 5085              	
 5086              	
 5087              	/**************************
 5088              	  R.  display return stack 
 5089              	**************************/
 5090              	RDOT: 
 5091 647c 504700BF 		_NEST 
 5092 6480 6D640000 		_ADR RBASE
 5093 6484 75330000 		_ADR RPAT 
 5094 6488 F5340000 		_ADR SUBB
 5095 648c C5350000 		_ADR CELLSL   
 5096 6490 EF310000 		_DOLIT 2
 5096      02000000 
 5097 6498 F5340000 		_ADR SUBB 
 5098 649c 15330000 		_ADR TOR
 5099 64a0 6D640000 		_ADR RBASE 
 5100 64a4 91350000 	1:	_ADR CELLM 
 5101 64a8 A9330000 		_ADR DUPP 
 5102 64ac 85320000 		_ADR AT 
 5103 64b0 A1630000 		_ADR TDOT 
 5104 64b4 B1320000 		_ADR RFROM   
 5105 64b8 51350000 		_ADR ONEM 
ARM GAS  forth.s 			page 217


 5106 64bc A9330000 		_ADR DUPP
 5107 64c0 15330000 		_ADR TOR 
 5108 64c4 15380000 		_ADR ZEQUAL   
 5109 64c8 2F320000 		_QBRAN 1b
 5109      A4640000 
 5110 64d0 B1320000 		_ADR RFROM  
 5111 64d4 B5360000 		_ADR DDROP
 5112 64d8 71470000 		_ADR CR   
 5113 64dc CF2F0000 		_UNNEST 
 5114              	
 5115              	/**************************
 5116              		TRACE ( -- )
 5117              		display stacks content 
 5118              	**************************/
 5119 64e0 38640000 		_HEADER TRACE,5,"TRACE"
 5119      05545241 
 5119      434500BF 
 5120 64ec 504700BF 		_NEST
 5121 64f0 71470000 		_ADR CR 
 5122 64f4 EF310000 		_DOLIT '>' 
 5122      3E000000 
 5123 64fc EF310000 		_DOLIT 'S'
 5123      53000000 
 5124 6504 91300000 		_ADR EMIT 
 5125 6508 91300000 		_ADR EMIT  
 5126 650c 3D640000 		_ADR DOTS
 5127 6510 EF310000 		_DOLIT '>'
 5127      3E000000 
 5128 6518 EF310000 		_DOLIT 'R'
 5128      52000000 
 5129 6520 91300000 		_ADR EMIT 
 5130 6524 91300000 		_ADR EMIT 
 5131 6528 7D640000 		_ADR RDOT 
 5132 652c CF2F0000 		_UNNEST 
 5133              	
 5134              	
 5135              	/****************************
 5136              	  >BODY  ( xt -- adr )
 5137              	  get parameter field address
 5138              	  from code field address 
 5139              	****************************/
 5140 6530 E4640000 		_HEADER TOBODY,5,">BODY"
 5140      053E424F 
 5140      445900BF 
 5141 653c 06F11006 		add TOS,#4*CELLL   
 5142 6540 FCF742BD 		_NEXT 		
 5143              	
 5144              	/*****************************
 5145              		>VECTOR ( xt -- adr )
 5146              		for words defined by 
 5147              		CREATE  return 
 5148              		address vector slot 
 5149              		for DOES> 
 5150              	hidden word.	
 5151              	*****************************/
 5152              	TOVECTOR:
 5153 6544 06F10806 		add TOS,#2*CELLL
ARM GAS  forth.s 			page 218


 5154 6548 FCF73EBD 		_NEXT 
 5155              	
 5156              	/*****************************
 5157              	    >NFA	( cfa -- nfa | F )
 5158              	 	Convert code address 
 5159              		to a name address.
 5160              	*****************************/
 5161 654c 34650000 		_HEADER TONFA,4,">NFA"
 5161      043E4E46 
 5161      410000BF 
 5162 6558 504700BF 		_NEST
 5163 655c 15330000 		_ADR	TOR			//  
 5164 6560 B13A0000 		_ADR	CNTXT			//  va
 5165 6564 85320000 		_ADR	AT			//  nfa
 5166              	TNAM1:
 5167 6568 A9330000 		_ADR	DUPP			//  nfa nfa
 5168 656c 2F320000 		_QBRAN	TNAM2	//  vocabulary end, no match
 5168      9C650000 
 5169 6574 A9330000 		_ADR	DUPP			//  nfa nfa
 5170 6578 B54C0000 		_ADR	TOCFA			//  nfa cfa
 5171 657c E5320000 		_ADR	RAT			//  nfa cfa code
 5172 6580 8D340000 		_ADR	XORR			//  nfa f --
 5173 6584 2F320000 		_QBRAN	TNAM2
 5173      9C650000 
 5174 658c 91350000 		_ADR	CELLM			//  la 
 5175 6590 85320000 		_ADR	AT			//  next_nfa
 5176 6594 57320000 		_BRAN	TNAM1
 5176      68650000 
 5177              	TNAM2:	
 5178 659c B1320000 		_ADR	RFROM
 5179 65a0 89330000 		_ADR	DROP			//  0|nfa --
 5180 65a4 CF2F0000 		_UNNEST			// 0
 5181              	
 5182              	
 5183              	/********************************
 5184              	    .ID	 ( na -- )
 5185              	 	Display the name at address.
 5186              	********************************/
 5187 65a8 50650000 		_HEADER DOTID,3,".ID"
 5187      032E4944 
 5188 65b0 504700BF 		_NEST
 5189 65b4 F5350000 		_ADR	QDUP			// if zero no name
 5190 65b8 2F320000 		_QBRAN	DOTI1
 5190      D8650000 
 5191 65c0 59390000 		_ADR	COUNT
 5192 65c4 EF310000 		_DOLIT	0x1F
 5192      1F000000 
 5193 65cc 65340000 		_ADR	ANDD			// mask lexicon bits
 5194              	//	_ADR	SPACE 
 5195 65d0 09470000 		_ADR	TYPEE
 5196 65d4 CF2F0000 		_UNNEST			// display name string
 5197              	DOTI1:
 5198 65d8 CD470000 		_DOTQP	9," {noName}"
 5198      09207B6E 
 5198      6F4E616D 
 5198      657D00BF 
 5199 65e8 CF2F0000 		_UNNEST
ARM GAS  forth.s 			page 219


 5200              	
 5201              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 5202              	.if WANT_SEE 
 5203              	/*******************************
 5204              	    SEE	 ( -- //  string> )
 5205              	 	A simple decompiler.
 5206              	*******************************/
 5207              		_HEADER SEE,3,"SEE"
 5208              		_NEST
 5209              		_ADR	TICK	//  ca --, starting address
 5210              		_ADR	CR	
 5211              		_DOLIT	20
 5212              		_ADR	TOR
 5213              	SEE1:
 5214              		_ADR	CELLP			//  a
 5215              		_ADR	DUPP			//  a a
 5216              		_ADR	DECOMP		//  a
 5217              		_DONXT	SEE1
 5218              		_ADR	DROP
 5219              		_UNNEST
 5220              	
 5221              	/*************************
 5222              	 	DECOMPILE ( a -- )
 5223              	 	Convert code in a.  
 5224              		Display name of command or as data.
 5225              	*************************************/
 5226              		_HEADER DECOMP,9,"DECOMPILE"
 5227              		_NEST
 5228              		_ADR	DUPP			//  a a
 5229              	// 	_ADR	TOR			//  a
 5230              		_ADR	AT			//  a code
 5231              		_ADR	DUPP			//  a code code
 5232              		_DOLIT	0xF800D000 //0xF800F800
 5233              		_ADR	ANDD
 5234              		_DOLIT	0xF000D000 //0xF800F000
 5235              		_ADR	EQUAL			//  a code ?
 5236              		_ADR	INVER 
 5237              		_QBRAN	DECOM2	//  not a command
 5238              		//  a valid_code --, extract address and display name
 5239              		MOVW	IP,#0xFFE
 5240              		MOV	WP,TOS
 5241              		LSL	TOS,TOS,#21		//  get bits 22-12
 5242              		ASR	TOS,TOS,#9		//  with sign extension
 5243              		LSR	WP,WP,#15		//  get bits 11-1
 5244              		AND	WP,WP,IP		//  retain only bits 11-1
 5245              		ORR	TOS,TOS,WP		//  get bits 22-1
 5246              		NOP
 5247              		_ADR	OVER			//  a offset a
 5248              		_ADR	PLUS			//  a target-4
 5249              		_ADR	CELLP			//  a target
 5250              		_ADR	TONFA			//  a na/0 --, is it a name?
 5251              		_ADR	QDUP			//  name address or zero
 5252              		_QBRAN	DECOM1
 5253              		_ADR	SPACE			//  a na
 5254              		_ADR	DOTID			//  a --, display name
 5255              	// 	_ADR	RFROM			//  a
 5256              		_ADR	DROP
ARM GAS  forth.s 			page 220


 5257              		_UNNEST
 5258              	DECOM1:	// _ADR	RFROM		//  a
 5259              		_ADR	AT			//  data
 5260              		_ADR	UDOT			//  display data
 5261              		_UNNEST
 5262              	DECOM2:
 5263              		_ADR	UDOT
 5264              	// 	_ADR	RFROM
 5265              		_ADR	DROP
 5266              		_UNNEST
 5267              	.endif 
 5268              	
 5269              	/*********************
 5270              	    WORDS	( -- )
 5271              	 	Display the names 
 5272              		in the context vocabulary.
 5273              	*******************************/
 5274 65ec AC650000 		_HEADER WORDS,5,"WORDS"
 5274      05574F52 
 5274      445300BF 
 5275 65f8 504700BF 		_NEST
 5276 65fc EF310000 		_DOLIT  0   
 5276      00000000 
 5277 6604 15330000 		_ADR	TOR // columns count 
 5278 6608 71470000 		_ADR	CR
 5279 660c B13A0000 		_ADR	CNTXT
 5280 6610 85320000 		_ADR	AT			// only in context
 5281              	WORS1:
 5282 6614 F5350000 		_ADR	QDUP			// ?at end of list
 5283 6618 2F320000 		_QBRAN	WORS2
 5283      C8660000 
 5284 6620 A9330000 		_ADR	DUPP
 5285 6624 B1650000 		_ADR	DOTID			// display a name
 5286 6628 B1320000 		_ADR	RFROM   // column count 
 5287 662c 41350000 		_ADR	ONEP
 5288 6630 15330000 		_ADR	TOR 
 5289 6634 EF310000 		_DOLIT  4 
 5289      04000000 
 5290 663c 01300000 		_ADR	TSTDOUT 
 5291 6640 85320000 		_ADR	AT 
 5292 6644 EF310000 		_DOLIT	TV_EMIT
 5292      F8120000 
 5293 664c 2D380000 		_ADR	EQUAL 
 5294 6650 2F320000 		_QBRAN	1f 
 5294      5C660000 
 5295 6658 51350000 		_ADR	ONEM 
 5296              	1:
 5297 665c E5320000 		_ADR	RAT     
 5298 6660 2D380000 		_ADR	EQUAL 
 5299 6664 2F320000 		_QBRAN  1f 
 5299      8C660000 
 5300 666c 71470000 		_ADR	CR 
 5301 6670 B1320000 		_ADR	RFROM 
 5302 6674 89330000 		_ADR	DROP 
 5303 6678 EF310000 		_DOLIT	0
 5303      00000000 
 5304 6680 15330000 		_ADR	TOR  // reset columns counter 
ARM GAS  forth.s 			page 221


 5305 6684 57320000 		_BRAN	2f  
 5305      B8660000 
 5306              	1:	// add spaces to align column on 16 characters 
 5307 668c EF310000 		_DOLIT	16 
 5307      10000000 
 5308 6694 E9330000 		_ADR	OVER   // CSTRING 
 5309 6698 59390000 		_ADR	COUNT 
 5310 669c B9330000 		_ADR	SWAP    
 5311 66a0 89330000 		_ADR	DROP   
 5312 66a4 EF310000 		_DOLIT	0xF  
 5312      0F000000 
 5313 66ac 65340000 		_ADR	ANDD  // limit to 15 characters 
 5314 66b0 F5340000 		_ADR	SUBB
 5315 66b4 D1460000 		_ADR	SPACS  
 5316 66b8 91350000 	2:	_ADR	CELLM
 5317 66bc 85320000 		_ADR	AT
 5318 66c0 57320000 		_BRAN	WORS1
 5318      14660000 
 5319              	WORS2:
 5320 66c8 B1320000 		_ADR	RFROM 
 5321 66cc 89330000 		_ADR	DROP 
 5322 66d0 CF2F0000 		_UNNEST
 5323              	
 5324              	
 5325              	/*************************
 5326              		MARKER <string> ( -- )
 5327              	    create forget point 
 5328              		in dictionary 
 5329              	*************************/	
 5330 66d4 F0650000 		_HEADER MARKER,6,"MARKER"
 5330      064D4152 
 5330      4B455200 
 5331 66e0 504700BF 		_NEST
 5332 66e4 59610000 		_ADR	CREAT 
 5333 66e8 B95F0000 		_ADR	DODOES
 5334 66ec CF2F0000 		_UNNEST 
 5335 66f0 504700BF 		_NEST 
 5336 66f4 EF310000 		_DOLIT	4*CELLL  
 5336      10000000 
 5337 66fc F5340000 		_ADR	SUBB
 5338 6700 41350000 		_ADR	ONEP  
 5339 6704 59650000 		_ADR	TONFA 
 5340 6708 91350000 		_ADR	CELLM
 5341 670c 85320000 		_ADR	AT  
 5342 6710 153B0000 		_ADR	LAST 
 5343 6714 71320000 		_ADR	STORE 
 5344 6718 895E0000 		_ADR	OVERT
 5345 671c CF2F0000 		_UNNEST 
 5346              	
 5347              	/*********************************
 5348              		ARRAY "name" ( n -- )
 5349              	    create an array of n elements 
 5350              	*********************************/
 5351 6720 D8660000 		_HEADER ARRAY,5,"ARRAY"
 5351      05415252 
 5351      415900BF 
 5352 672c 504700BF 		_NEST 
ARM GAS  forth.s 			page 222


 5353 6730 954C0000 		_ADR	TOKEN
 5354 6734 8D5D0000 		_ADR	SNAME
 5355 6738 895E0000 		_ADR	OVERT
 5356 673c D92F0000 		_ADR	COMPI_NEST
 5357 6740 EF310000 		_DOLIT	DO_ARRAY
 5357      6C670000 
 5358 6748 095F0000 		_ADR	CALLC
 5359 674c EF310000 		_DOLIT	UNNEST 
 5359      CE2F0000 
 5360 6754 095F0000 		_ADR	CALLC  
 5361 6758 EF310000 		_DOLIT  4 
 5361      04000000 
 5362 6760 05350000 		_ADR    STAR 
 5363 6764 F5540000 		_ADR    ALLOT 
 5364 6768 CF2F0000 		_UNNEST 	
 5365              	
 5366              	// does> du array
 5367              	DO_ARRAY:
 5368 676c 504700BF 		_NEST  
 5369 6770 EF310000 		_DOLIT 4 
 5369      04000000 
 5370 6778 05350000 		_ADR STAR  
 5371 677c E5320000 		_ADR RAT  
 5372 6780 81350000 		_ADR CELLP 
 5373 6784 E5340000 		_ADR PLUS  
 5374 6788 CF2F0000 		_UNNEST 
 5375              	
 5376              	
 5377              	/****************
 5378              	  cold start
 5379              	*****************/
 5380              	
 5381              	/**********************************
 5382              	    VER	 ( -- n )
 5383              	 	Return the version 
 5384              		number of this implementation.
 5385              	hidden word used by COLD
 5386              	**********************************/
 5387              	VERSN:
 5388 678c 504700BF 		_NEST
 5389 6790 EF310000 		_DOLIT	VER*256+EXT
 5389      00010000 
 5390 6798 CF2F0000 		_UNNEST
 5391              	
 5392              	/*********************
 5393              	    hi	  ( -- )
 5394              	 	Display the sign-on 
 5395              		message.
 5396              	***********************/
 5397 679c 24670000 		_HEADER HI,2,"HI"
 5397      02484900 
 5398 67a4 504700BF 		_NEST
 5399 67a8 71470000 		_ADR	CR	// initialize I/O
 5400 67ac CD470000 		_DOTQP	17, "beyond Jupiter, v" 
 5400      11626579 
 5400      6F6E6420 
 5400      4A757069 
ARM GAS  forth.s 			page 223


 5400      7465722C 
 5401 67c4 053A0000 		_ADR	BASE
 5402 67c8 85320000 		_ADR	AT
 5403 67cc 99430000 		_ADR	HEX	// save radix
 5404 67d0 8D670000 		_ADR	VERSN
 5405 67d4 45420000 		_ADR	BDIGS
 5406 67d8 EF310000 		_DOLIT  0 
 5406      00000000 
 5407 67e0 C9420000 		_ADR	DIG
 5408 67e4 C9420000 		_ADR	DIG
 5409 67e8 EF310000 		_DOLIT	'.'
 5409      2E000000 
 5410 67f0 65420000 		_ADR	HOLD
 5411 67f4 E9420000 		_ADR	DIGS
 5412 67f8 45430000 		_ADR	EDIGS
 5413 67fc 09470000 		_ADR	TYPEE	// format version number
 5414 6800 053A0000 		_ADR	BASE
 5415 6804 71320000 		_ADR	STORE
 5416 6808 71470000 		_ADR	CR
 5417 680c CF2F0000 		_UNNEST			// restore radix
 5418              	
 5419              	/***********************
 5420              	   HI_BOTH ( -- )
 5421              	   display sign-on 
 5422              	   on both CONSOLE
 5423              	***********************/
 5424              	HI_BOTH:
 5425 6810 504700BF 	    _NEST 
 5426 6814 110C0000 		_ADR LOCAL 
 5427 6818 410C0000 		_ADR CONSOLE 
 5428 681c A5670000 		_ADR HI 
 5429 6820 290C0000 		_ADR SERIAL 
 5430 6824 410C0000 		_ADR CONSOLE 
 5431 6828 A5670000 		_ADR HI
 5432 682c CF2F0000 		_UNNEST 
 5433              	
 5434              	/**********************
 5435              	 check if PS2 keyboard 
 5436              	 present.
 5437              	**********************/
 5438              	PS2_QUERY: 
 5439 6830 504700BF 		_NEST 
 5440 6834 EF310000 		_DOLIT 400 
 5440      90010000 
 5441 683c 25310000 		_ADR PAUSE
 5442 6840 311A0000 		_ADR PS2_QKEY
 5443 6844 2F320000 		_QBRAN 1f
 5443      60680000 
 5444 684c EF310000 		_DOLIT BAT_OK 
 5444      AA000000 
 5445 6854 8D340000 		_ADR XORR 
 5446 6858 2F320000 		_QBRAN 9f 
 5446      A4680000 
 5447 6860 191C0000 	1:	_ADR KBD_RST
 5448 6864 EF310000 		_DOLIT BAT_OK 
 5448      AA000000 
 5449 686c 8D340000 		_ADR XORR  
ARM GAS  forth.s 			page 224


 5450 6870 2F320000 		_QBRAN 9f  
 5450      A4680000 
 5451              	// no ps2 keyboard 
 5452              	// swith to serial console
 5453 6878 71470000 		_ADR CR 
 5454 687c CD470000 		_DOTQP 25,"no PS2 keyboard detected."
 5454      196E6F20 
 5454      50533220 
 5454      6B657962 
 5454      6F617264 
 5455 689c 290C0000 		_ADR SERIAL 
 5456 68a0 410C0000 		_ADR CONSOLE 
 5457 68a4 CF2F0000 	9:	_UNNEST 
 5458              	
 5459              	/*************************
 5460              	   check PA8 to 
 5461              	   select console 
 5462              	   PA8 -> low  SERIAL
 5463              	   PA8 -> high LOCAL  
 5464              	*************************/
 5465              	IF_SENSE:
 5466 68a8 504700BF 		_NEST 
 5467 68ac 290C0000 		_ADR SERIAL 
 5468 68b0 EF310000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 5468      10000240 
 5469 68b8 85320000 		_ADR AT 
 5470 68bc EF310000 		_DOLIT (1<<8)
 5470      00010000 
 5471 68c4 65340000 		_ADR ANDD 
 5472 68c8 2F320000 		_QBRAN 9f 
 5472      D4680000 
 5473 68d0 51350000 		_ADR ONEM 
 5474 68d4 410C0000 	9:  _ADR CONSOLE 
 5475 68d8 CF2F0000 		_UNNEST 
 5476              	
 5477              	/****************************
 5478              	   display READY on active
 5479              	   console
 5480              	***************************/
 5481              	READY:
 5482 68dc 504700BF 	    _NEST 
 5483 68e0 CD470000 		_DOTQP 5,"READY"
 5483      05524541 
 5483      445900BF 
 5484 68ec 71470000 		_ADR  CR 
 5485 68f0 CF2F0000 	    _UNNEST 
 5486              	
 5487              	/********************
 5488              	    COLD	( -- )
 5489              	 	The high level cold 
 5490              		start sequence.
 5491              	**************************/
 5492 68f4 A0670000 		.word	LINK 
 5493              		LINK = . 
 5494 68f8 04       	_LASTN:	.byte  4
 5495 68f9 434F4C44 		.ascii "COLD"
 5496 68fd 0000BF   		.p2align 2	
ARM GAS  forth.s 			page 225


 5497              	COLD:
 5498 6900 00B5F9F7 		_CALL forth_init 
 5498      19FE5DF8 
 5498      04EB
 5499 690a DFF85CC0 		ldr IP,=COLD1 
 5500 690e FCF75BBB 		_NEXT
 5501 6912 00BF     		.p2align 2 
 5502              	COLD1:
 5503 6914 EF310000 		_DOLIT  0 
 5503      00000000 
 5504 691c 59310000 		_ADR ULED // turn off user LED 
 5505 6920 EF310000 		_DOLIT	UZERO
 5505      74080000 
 5506 6928 EF310000 		_DOLIT	UPP
 5506      00000020 
 5507 6930 EF310000 		_DOLIT	ULAST-UZERO
 5507      C0000000 
 5508 6938 E5400000 		_ADR	WMOVE 			// initialize user area
 5509 693c B1530000 		_ADR	PRESE			// initialize stack and TIB
 5510 6940 7D1F0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 5511 6944 31680000 		_ADR 	PS2_QUERY  
 5512 6948 ED390000 		_ADR	TBOOT
 5513 694c 81400000 		_ADR	ATEXE			// application boot
 5514 6950 895E0000 		_ADR	OVERT
 5515 6954 A9680000 		_ADR	IF_SENSE
 5516 6958 DD680000 		_ADR    READY 
 5517 695c 57320000 		_BRAN	QUIT			// start interpretation
 5517      C8530000 
 5518              	COLD2:
 5519              		.p2align 2 	
 5520              	CTOP:
 5521 6964 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 5522              	
 5523              	
 5524 6968 14690000 	  .end 
ARM GAS  forth.s 			page 226


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 227


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 228


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 229


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 230


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 231


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:48     *ABS*:000000002001ff80 RPP
          macros.inc:49     *ABS*:000000002001feb0 TIBB
          macros.inc:50     *ABS*:0000000000000050 TIB_SIZE
          macros.inc:51     *ABS*:000000002001feb0 SPP
          macros.inc:52     *ABS*:0000000020018130 VID_BUFF
          macros.inc:53     *ABS*:0000000020017130 WB_BUFF
          macros.inc:54     *ABS*:0000000020000000 UPP
          macros.inc:55     *ABS*:0000000020000512 DTOP
          macros.inc:56     *ABS*:000000002001712c DEND
          macros.inc:57     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:59     *ABS*:0000000000000040 COMPO
          macros.inc:60     *ABS*:0000000000000080 IMEDD
          macros.inc:61     *ABS*:00000000ffffff1f MASKK
          macros.inc:63     *ABS*:0000000000000004 CELLL
          macros.inc:64     *ABS*:000000000000000a BASEE
          macros.inc:65     *ABS*:0000000000000008 VOCSS
          macros.inc:67     *ABS*:0000000000000008 BKSPP
          macros.inc:68     *ABS*:000000000000000a LF
          macros.inc:69     *ABS*:000000000000000d CRR
          macros.inc:70     *ABS*:000000000000001b ERR
          macros.inc:71     *ABS*:0000000000000027 TIC
          macros.inc:76     *ABS*:0000000000000004 RNDSEED
          macros.inc:77     *ABS*:0000000000000008 TICKS
          macros.inc:78     *ABS*:000000000000000c CD_TIMER
          macros.inc:79     *ABS*:0000000000000010 BOOT
          macros.inc:80     *ABS*:0000000000000014 STDIN
          macros.inc:81     *ABS*:0000000000000018 STDOUT
          macros.inc:82     *ABS*:000000000000001c NBASE
          macros.inc:83     *ABS*:0000000000000020 BCHAR
          macros.inc:84     *ABS*:0000000000000024 TMP
ARM GAS  forth.s 			page 232


          macros.inc:85     *ABS*:0000000000000028 CSPAN
          macros.inc:86     *ABS*:000000000000002c TOIN
          macros.inc:87     *ABS*:0000000000000030 SRC
          macros.inc:88     *ABS*:0000000000000030 NTIBB
          macros.inc:89     *ABS*:0000000000000034 TIBUF
          macros.inc:90     *ABS*:0000000000000038 SRCID
             forth.s:3645   .text:00000000000052dc EVAL
          macros.inc:92     *ABS*:0000000000000040 VHOLD
          macros.inc:93     *ABS*:0000000000000044 CTXT
          macros.inc:94     *ABS*:0000000000000048 FORTH_CTOP
          macros.inc:95     *ABS*:000000000000004c USER_CTOP
          macros.inc:96     *ABS*:0000000000000050 LASTN
          macros.inc:97     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:98     *ABS*:0000000000000054 RX_QUEUE
          macros.inc:99     *ABS*:0000000000000064 RX_HEAD
          macros.inc:100    *ABS*:0000000000000068 RX_TAIL
          macros.inc:101    *ABS*:000000000000006c VID_CNTR
          macros.inc:102    *ABS*:0000000000000070 VID_STATE
          macros.inc:103    *ABS*:0000000000000074 VID_FIELD
          macros.inc:104    *ABS*:0000000000000078 VID_BUFFER
          macros.inc:105    *ABS*:000000000000007c KBD_STRUCT
          macros.inc:106    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:107    *ABS*:0000000000000080 KBD_QUEUE
          macros.inc:108    *ABS*:0000000000000090 KBD_QHEAD
          macros.inc:109    *ABS*:0000000000000094 KBD_QTAIL
          macros.inc:110    *ABS*:0000000000000098 ROW
          macros.inc:111    *ABS*:000000000000009c COL
          macros.inc:112    *ABS*:00000000000000a0 BK_COLOR
          macros.inc:113    *ABS*:00000000000000a4 PEN_COLOR
          macros.inc:114    *ABS*:00000000000000a8 VFPSW
          macros.inc:115    *ABS*:00000000000000ac VFBASE
          macros.inc:116    *ABS*:00000000000000b0 BEEP_DTMR
          macros.inc:117    *ABS*:00000000000000b4 CSTATE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000e38 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000b1c uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001714 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002fc8 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3707   .text:00000000000053b0 PRESE
             forth.s:2725   .text:00000000000047cc DOTQP
ARM GAS  forth.s 			page 233


              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:133    .text:0000000000003014 CFSR
             forth.s:579    .text:00000000000033a8 DUPP
             forth.s:505    .text:0000000000003314 TOR
             forth.s:340    .text:00000000000031ee DOLIT
             forth.s:1330   .text:0000000000003a04 BASE
             forth.s:426    .text:0000000000003270 STORE
             forth.s:2809   .text:00000000000048c8 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:463    .text:00000000000032b0 RFROM
             forth.s:676    .text:0000000000003464 ANDD
             forth.s:381    .text:000000000000322e QBRAN
             forth.s:145    .text:0000000000003034 BFAR
             forth.s:192    .text:0000000000003090 EMIT
             forth.s:2614   .text:00000000000046b4 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:0000000000002310 FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:743    .text:0000000000000754 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2677   .text:0000000000004770 CR
             forth.s:436    .text:0000000000003284 AT
             forth.s:742    .text:00000000000034f4 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2827   .text:00000000000048fc DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:872    .text:00000000000035f4 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:733    .text:00000000000034e4 PLUS
             forth.s:1252   .text:0000000000003958 COUNT
             forth.s:2642   .text:0000000000004708 TYPEE
             forth.s:1068   .text:00000000000037b0 CLZ
             forth.s:587    .text:00000000000033b8 SWAP
             forth.s:724    .text:00000000000034d4 LSHIFT
               fpu.s:123    .text:0000000000002330 CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3718   .text:00000000000053c8 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:726    .text:000000000000072a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
ARM GAS  forth.s 			page 234


              init.s:310    .text:0000000000000292 $t
              init.s:311    .text:0000000000000294 $d
             forth.s:3511   .text:0000000000005138 ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:275    .text:0000000000003158 ULED
             forth.s:1303   .text:00000000000039c0 MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:715    .text:00000000000034bc RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:680    .text:00000000000006b8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:00000000000022b2 fpu_init
          ser-term.s:56     .text:0000000000000b4a ser_init
             tvout.s:74     .text:0000000000000d88 tv_init
           ps2_kbd.s:307    .text:0000000000001934 kbd_init
         spi-flash.s:43     .text:0000000000001d48 flash_spi_init
             forth.s:5497   .text:0000000000006900 COLD
             forth.s:83     .text:0000000000002fc0 NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:788    .text:00000000000007b0 gpio_config
              init.s:863    .text:000000000000085c gpio_out
              init.s:705    .text:00000000000006f8 nvic_set_priority
              init.s:878    .text:0000000000000874 UZERO
              init.s:921    .text:0000000000000934 ULAST
              init.s:714    .text:0000000000000710 negative_irq
              init.s:760    .text:0000000000000782 nvic_clear_irq_pending
              init.s:825    .text:0000000000000818 input_pull
              init.s:818    .text:0000000000000806 output_type
              init.s:841    .text:000000000000082e gpio_speed
              init.s:879    .text:0000000000000874 $d
             forth.s:5424   .text:0000000000006810 HI_BOTH
           ps2_kbd.s:396    .text:0000000000001a30 PS2_QKEY
ARM GAS  forth.s 			page 235


             tvout.s:563    .text:00000000000012f8 TV_EMIT
             forth.s:3579   .text:00000000000051e8 INTER
             forth.s:5494   .text:00000000000068f8 _LASTN
             forth.s:5520   .text:0000000000006964 CTOP
             forth.s:5493   .text:00000000000068f8 LINK
              init.s:926    .text:0000000000000934 $d
       environment.s:32     .text:0000000000000964 _ENVQ
       environment.s:32     .text:0000000000000974 ENVQ
       environment.s:35     .text:0000000000000978 $d
             forth.s:1408   .text:0000000000003ab0 CNTXT
       environment.s:215    .text:0000000000000afa _ENVLASTN
             forth.s:562    .text:0000000000003388 DROP
             forth.s:791    .text:0000000000003550 ONEM
             forth.s:3267   .text:0000000000004e28 NAMEQ
             forth.s:349    .text:0000000000003204 EXECU
             forth.s:410    .text:0000000000003256 BRAN
             forth.s:90     .text:0000000000002fce UNNEST
       environment.s:201    .text:0000000000000ad6 ENVLNK
       environment.s:82     .text:00000000000009d8 _CNTDSTR
       environment.s:82     .text:00000000000009e8 $t
       environment.s:82     .text:00000000000009e8 CNTDSTR
       environment.s:223    .text:0000000000000b10 flag_true
       environment.s:95     .text:00000000000009f2 $d
       environment.s:95     .text:00000000000009f6 _SLHOLD
       environment.s:95     .text:00000000000009fc $t
       environment.s:95     .text:00000000000009fc SLHOLD
       environment.s:107    .text:0000000000000a06 $d
       environment.s:107    .text:0000000000000a0a _SLPAD
       environment.s:107    .text:0000000000000a10 SLPAD
       environment.s:118    .text:0000000000000a1a $d
       environment.s:118    .text:0000000000000a1e _ADRBITS
       environment.s:118    .text:0000000000000a30 $t
       environment.s:118    .text:0000000000000a30 ADRBITS
       environment.s:130    .text:0000000000000a3a $d
       environment.s:130    .text:0000000000000a3e _FLOORED
       environment.s:130    .text:0000000000000a46 $t
       environment.s:130    .text:0000000000000a48 FLOORED
       environment.s:141    .text:0000000000000a4a $d
       environment.s:141    .text:0000000000000a4e _MAXCHAR
       environment.s:141    .text:0000000000000a58 MAXCHAR
       environment.s:152    .text:0000000000000a62 $d
       environment.s:152    .text:0000000000000a66 _MAXD
       environment.s:152    .text:0000000000000a6c $t
       environment.s:152    .text:0000000000000a6c MAXD
       environment.s:165    .text:0000000000000a86 $d
       environment.s:165    .text:0000000000000a8a _MAXN
       environment.s:165    .text:0000000000000a90 $t
       environment.s:165    .text:0000000000000a90 MAXN
       environment.s:176    .text:0000000000000a9e $d
       environment.s:176    .text:0000000000000aa2 _MAXU
       environment.s:176    .text:0000000000000aa8 $t
       environment.s:176    .text:0000000000000aa8 MAXU
       environment.s:187    .text:0000000000000ab2 $d
       environment.s:187    .text:0000000000000ab6 _MAXUD
       environment.s:187    .text:0000000000000ac0 MAXUD
       environment.s:201    .text:0000000000000ad2 $d
       environment.s:201    .text:0000000000000ad6 _RSTKCELLS
ARM GAS  forth.s 			page 236


       environment.s:201    .text:0000000000000aec RSTKCELLS
       environment.s:213    .text:0000000000000af6 $d
       environment.s:214    .text:0000000000000afa ENVLINK
       environment.s:217    .text:0000000000000b06 $t
       environment.s:218    .text:0000000000000b08 STKCELLS
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000ba2 $d
          ser-term.s:90     .text:0000000000000ba6 _SER_QKEY
          ser-term.s:90     .text:0000000000000bb0 SER_QKEY
          ser-term.s:110    .text:0000000000000bdc $d
          ser-term.s:110    .text:0000000000000be0 _SER_EMIT
          ser-term.s:110    .text:0000000000000bec SER_EMIT
          ser-term.s:124    .text:0000000000000c06 $d
          ser-term.s:124    .text:0000000000000c0a _LOCAL
          ser-term.s:124    .text:0000000000000c10 $t
          ser-term.s:124    .text:0000000000000c10 LOCAL
          ser-term.s:133    .text:0000000000000c1c $d
          ser-term.s:133    .text:0000000000000c20 _SERIAL
          ser-term.s:133    .text:0000000000000c28 SERIAL
          ser-term.s:142    .text:0000000000000c34 $d
          ser-term.s:142    .text:0000000000000c38 _CONSOLE
          ser-term.s:142    .text:0000000000000c40 $t
          ser-term.s:142    .text:0000000000000c40 CONSOLE
          ser-term.s:164    .text:0000000000000c60 $d
          ser-term.s:164    .text:0000000000000c64 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000c70 ANSI_PARAM
          ser-term.s:166    .text:0000000000000c74 $d
             forth.s:783    .text:0000000000003540 ONEP
             forth.s:1788   .text:0000000000003e5c SLMOD
          ser-term.s:191    .text:0000000000000ce0 _ANSI_ESC
          ser-term.s:191    .text:0000000000000ce8 ANSI_ESC
          ser-term.s:193    .text:0000000000000cec $d
          ser-term.s:203    .text:0000000000000d0c _SER_AT
          ser-term.s:203    .text:0000000000000d14 SER_AT
          ser-term.s:205    .text:0000000000000d18 $d
          ser-term.s:219    .text:0000000000000d48 _SER_CLS
          ser-term.s:219    .text:0000000000000d50 $t
          ser-term.s:219    .text:0000000000000d50 SER_CLS
          ser-term.s:221    .text:0000000000000d54 $d
          ser-term.s:228    .text:0000000000000d78 $d
           tvout.inc:19     *ABS*:0000000000000140 HRES
           tvout.inc:20     *ABS*:00000000000000c8 VRES
           tvout.inc:21     *ABS*:0000000000000004 BPP
           tvout.inc:22     *ABS*:00000000000000a0 BPR
           tvout.inc:23     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:25     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:26     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
ARM GAS  forth.s 			page 237


             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000d88 $t
             tvout.s:150    .text:0000000000000e64 state_vsync
             tvout.s:191    .text:0000000000000eb8 state_pre_video
             tvout.s:202    .text:0000000000000eca state_video_out
             tvout.s:237    .text:0000000000000f28 state_post_video
             tvout.s:254    .text:0000000000000f4e tv_isr_exit
             tvout.s:180    .text:0000000000000e9e sync_end
             tvout.s:246    .text:0000000000000f3a frame_end
             tvout.s:264    .text:0000000000000f50 $d
             tvout.s:264    .text:0000000000000f54 _BACKCOLOR
             tvout.s:264    .text:0000000000000f60 BACKCOLOR
             tvout.s:271    .text:0000000000000f6c $d
             tvout.s:271    .text:0000000000000f70 _PENCOLOR
             tvout.s:271    .text:0000000000000f7a $t
             tvout.s:271    .text:0000000000000f7c PENCOLOR
             tvout.s:278    .text:0000000000000f88 $d
             tvout.s:278    .text:0000000000000f8c _CURSOR_COL
             tvout.s:278    .text:0000000000000f94 CURSOR_COL
             tvout.s:285    .text:0000000000000fa0 $d
             tvout.s:285    .text:0000000000000fa4 _CURSOR_ROW
             tvout.s:285    .text:0000000000000fa8 $t
             tvout.s:285    .text:0000000000000fa8 CURSOR_ROW
             tvout.s:292    .text:0000000000000fb4 $d
             tvout.s:292    .text:0000000000000fb8 _ROWY
             tvout.s:292    .text:0000000000000fbe $t
             tvout.s:292    .text:0000000000000fc0 ROWY
             tvout.s:299    .text:0000000000000fcc $d
             tvout.s:299    .text:0000000000000fd0 _COLX
             tvout.s:299    .text:0000000000000fd6 $t
             tvout.s:299    .text:0000000000000fd8 COLX
             tvout.s:306    .text:0000000000000fe4 $d
             tvout.s:306    .text:0000000000000fe8 _FONT
             tvout.s:306    .text:0000000000000ff0 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000ffc $d
             tvout.s:313    .text:0000000000001000 _VIDBUFF
             tvout.s:313    .text:0000000000001008 $t
             tvout.s:313    .text:0000000000001008 VIDBUFF
             tvout.s:325    .text:0000000000001012 $d
             tvout.s:325    .text:0000000000001016 _PLOT
             tvout.s:325    .text:000000000000101c PLOT
             tvout.s:373    .text:00000000000010a0 plot_op
             tvout.s:341    .text:0000000000001048 op_back
             tvout.s:350    .text:0000000000001062 op_pen
ARM GAS  forth.s 			page 238


             tvout.s:359    .text:000000000000107c op_invert
             tvout.s:363    .text:0000000000001084 op_xor
             tvout.s:373    .text:00000000000010a0 $d
             tvout.s:378    .text:00000000000010a8 _VSYNC
             tvout.s:378    .text:00000000000010ae $t
             tvout.s:378    .text:00000000000010b0 VSYNC
             tvout.s:386    .text:00000000000010ba $d
             tvout.s:386    .text:00000000000010be _CLS
             tvout.s:386    .text:00000000000010c2 $t
             tvout.s:386    .text:00000000000010c4 CLS
             tvout.s:410    .text:0000000000001106 $d
             tvout.s:410    .text:000000000000110a _CLRLINE
             tvout.s:410    .text:0000000000001112 $t
             tvout.s:410    .text:0000000000001114 CLRLINE
             tvout.s:412    .text:0000000000001118 $d
             forth.s:751    .text:0000000000003504 STAR
             forth.s:2095   .text:000000000000412c FILL
             tvout.s:427    .text:000000000000114c _SCROLLUP
             tvout.s:427    .text:0000000000001158 SCROLLUP
             tvout.s:429    .text:000000000000115c $d
             forth.s:2063   .text:00000000000040e4 WMOVE
             tvout.s:448    .text:00000000000011a4 _SCROLLDOWN
             tvout.s:448    .text:00000000000011b0 SCROLLDOWN
             tvout.s:450    .text:00000000000011b4 $d
             tvout.s:467    .text:00000000000011f4 _TV_CRLF
             tvout.s:467    .text:00000000000011fc $t
             tvout.s:467    .text:00000000000011fc TV_CRLF
             tvout.s:482    .text:000000000000121e $d
             tvout.s:482    .text:0000000000001222 _RIGHT
             tvout.s:482    .text:0000000000001228 $t
             tvout.s:482    .text:0000000000001228 RIGHT
             tvout.s:495    .text:000000000000123c $d
             tvout.s:495    .text:0000000000001240 _LEFT
             tvout.s:495    .text:0000000000001248 LEFT
             tvout.s:511    .text:0000000000001274 FONT_PIXEL
             tvout.s:518    .text:0000000000001284 INCR_X
             tvout.s:525    .text:0000000000001290 NEXT_PIXEL
             tvout.s:534    .text:0000000000001298 CHAR_ROW
             tvout.s:536    .text:000000000000129c $d
             forth.s:974    .text:00000000000036dc DDUP
             forth.s:484    .text:00000000000032e4 RAT
             forth.s:362    .text:0000000000003210 DONXT
             forth.s:965    .text:00000000000036c8 TDROP
             tvout.s:551    .text:00000000000012d8 CHAR_FONT
             tvout.s:552    .text:00000000000012d8 $t
             tvout.s:563    .text:00000000000012ec $d
             tvout.s:563    .text:00000000000012f0 _TV_EMIT
             tvout.s:563    .text:00000000000012f8 $t
             tvout.s:565    .text:00000000000012fc $d
             forth.s:1148   .text:000000000000386c ULESS
             tvout.s:593    .text:0000000000001380 CTRL_KEY
             forth.s:934    .text:000000000000368c ROT
             forth.s:454    .text:00000000000032a4 CAT
             tvout.s:660    .text:0000000000001468 SHOW_CURSOR
             tvout.s:691    .text:00000000000014f0 HIDE_CURSOR
             forth.s:1123   .text:000000000000382c EQUAL
             tvout.s:650    .text:0000000000001448 BACK_SPACE
ARM GAS  forth.s 			page 239


             tvout.s:618    .text:00000000000013f0 CAR_RET
             tvout.s:629    .text:0000000000001408 LN_FEED
             tvout.s:619    .text:00000000000013f0 $t
             tvout.s:620    .text:00000000000013f4 $d
             tvout.s:630    .text:0000000000001408 $t
             tvout.s:631    .text:000000000000140c $d
             forth.s:694    .text:000000000000348c XORR
             tvout.s:651    .text:0000000000001448 $t
             tvout.s:652    .text:000000000000144c $d
             tvout.s:660    .text:000000000000145c _SHOW_CURSOR
             tvout.s:660    .text:0000000000001468 $t
             tvout.s:663    .text:000000000000146c $d
             forth.s:864    .text:00000000000035e4 TWOSL
             forth.s:444    .text:0000000000003290 CSTOR
             forth.s:956    .text:00000000000036b4 DDROP
             tvout.s:691    .text:00000000000014e4 _HIDE_CURSOR
             tvout.s:691    .text:00000000000014f0 $t
             tvout.s:694    .text:00000000000014f4 $d
             forth.s:685    .text:0000000000003478 ORR
             tvout.s:704    .text:000000000000151c _TV_AT
             tvout.s:704    .text:0000000000001522 $t
             tvout.s:704    .text:0000000000001524 TV_AT
             tvout.s:719    .text:0000000000001548 $d
             tvout.s:719    .text:000000000000154c _INPUT
             tvout.s:719    .text:0000000000001552 $t
             tvout.s:719    .text:0000000000001554 INPUT
             tvout.s:721    .text:0000000000001558 $d
             forth.s:1970   .text:000000000000400c PAD
             forth.s:3407   .text:0000000000004fe8 ACCEP
             forth.s:612    .text:00000000000033e8 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001584 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
ARM GAS  forth.s 			page 240


       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
ARM GAS  forth.s 			page 241


       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000001590 sc_ascii
         mcSaite.inc:100    .text:0000000000001644 shifted
         mcSaite.inc:151    .text:00000000000016a4 altchar
         mcSaite.inc:167    .text:00000000000016b4 extended
         mcSaite.inc:191    .text:00000000000016dc controls
ARM GAS  forth.s 			page 242


           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000007d KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:000000000000007c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007f KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:0000000000001712 $t
           ps2_kbd.s:179    .text:000000000000183e send_bit
           ps2_kbd.s:107    .text:0000000000001774 start_bit
           ps2_kbd.s:118    .text:0000000000001798 parity_bit
           ps2_kbd.s:125    .text:00000000000017ac stop_bit
           ps2_kbd.s:152    .text:0000000000001802 store_code
           ps2_kbd.s:253    .text:00000000000018d2 do_async_key
           ps2_kbd.s:204    .text:0000000000001882 send_parity
           ps2_kbd.s:211    .text:0000000000001894 send_stop
           ps2_kbd.s:218    .text:000000000000189e rx_ack_bit
           ps2_kbd.s:236    .text:00000000000018be is_async_key
           ps2_kbd.s:286    .text:0000000000001922 async_keys
           ps2_kbd.s:378    .text:0000000000001a08 table_scan
           ps2_kbd.s:260    .text:00000000000018e4 set_async_key
           ps2_kbd.s:295    .text:0000000000001930 async_jump
           ps2_kbd.s:265    .text:00000000000018f2 shift_key
           ps2_kbd.s:273    .text:0000000000001902 set_reset
           ps2_kbd.s:268    .text:00000000000018f8 ctrl_key
           ps2_kbd.s:271    .text:00000000000018fe alt_key
           ps2_kbd.s:287    .text:0000000000001922 $d
           ps2_kbd.s:340    .text:00000000000019b0 $d
           ps2_kbd.s:340    .text:00000000000019b4 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000019be $t
           ps2_kbd.s:340    .text:00000000000019c0 KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000019d0 keycode
           ps2_kbd.s:365    .text:00000000000019f8 wait_code
           ps2_kbd.s:396    .text:0000000000001a22 $d
           ps2_kbd.s:396    .text:0000000000001a26 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001a7c inkey_exit
           ps2_kbd.s:418    .text:0000000000001a80 pause_key
           ps2_kbd.s:427    .text:0000000000001a96 do_modifiers
           ps2_kbd.s:436    .text:0000000000001aae shift_down
           ps2_kbd.s:440    .text:0000000000001ab4 altchar_down
           ps2_kbd.s:444    .text:0000000000001aba ctrl_down
           ps2_kbd.s:452    .text:0000000000001ad6 do_capslock
           ps2_kbd.s:478    .text:0000000000001afa kbd_send
           ps2_kbd.s:553    .text:0000000000001bee kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001c0c $d
           ps2_kbd.s:567    .text:0000000000001c10 _KBD_RST
           ps2_kbd.s:567    .text:0000000000001c18 $t
           ps2_kbd.s:567    .text:0000000000001c18 KBD_RST
           ps2_kbd.s:591    .text:0000000000001c62 $d
ARM GAS  forth.s 			page 243


           ps2_kbd.s:591    .text:0000000000001c66 _KBD_LED
           ps2_kbd.s:591    .text:0000000000001c6e $t
           ps2_kbd.s:591    .text:0000000000001c70 KBD_LED
           ps2_kbd.s:616    .text:0000000000001cc4 $d
           ps2_kbd.s:616    .text:0000000000001cc8 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001cd4 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001cfe $d
           ps2_kbd.s:633    .text:0000000000001d02 _WKEY
           ps2_kbd.s:633    .text:0000000000001d0c WKEY
           ps2_kbd.s:635    .text:0000000000001d10 $d
           ps2_kbd.s:640    .text:0000000000001d28 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:33     *ABS*:0000000000001000 FLASH_SECTOR_SIZE
         spi-flash.s:44     .text:0000000000001d48 $t
         spi-flash.s:87     .text:0000000000001dea $d
         spi-flash.s:87     .text:0000000000001dee _CHIP_SEL
         spi-flash.s:87     .text:0000000000001df8 CHIP_SEL
         spi-flash.s:99     .text:0000000000001e16 $d
         spi-flash.s:99     .text:0000000000001e1a _CHIP_DSEL
         spi-flash.s:99     .text:0000000000001e24 $t
         spi-flash.s:99     .text:0000000000001e24 CHIP_DSEL
         spi-flash.s:116    .text:0000000000001e52 $d
         spi-flash.s:116    .text:0000000000001e56 _WB_BUF
         spi-flash.s:116    .text:0000000000001e5e $t
         spi-flash.s:116    .text:0000000000001e60 WB_BUF
         spi-flash.s:126    .text:0000000000001e70 $d
         spi-flash.s:126    .text:0000000000001e74 _RD_SECT
         spi-flash.s:126    .text:0000000000001e7e $t
         spi-flash.s:126    .text:0000000000001e80 RD_SECT
         spi-flash.s:128    .text:0000000000001e84 $d
         spi-flash.s:333    .text:0000000000002138 RD_BLK
         spi-flash.s:143    .text:0000000000001ea4 _WR_SECT
         spi-flash.s:143    .text:0000000000001eae $t
         spi-flash.s:143    .text:0000000000001eb0 WR_SECT
         spi-flash.s:145    .text:0000000000001eb4 $d
         spi-flash.s:355    .text:000000000000218c WR_BLK
             forth.s:984    .text:00000000000036f0 DPLUS
         spi-flash.s:168    .text:0000000000001f10 _RD_BYTE
         spi-flash.s:168    .text:0000000000001f18 $t
         spi-flash.s:168    .text:0000000000001f18 RD_BYTE
         spi-flash.s:188    .text:0000000000001f40 $d
         spi-flash.s:188    .text:0000000000001f44 _WR_BYTE
         spi-flash.s:188    .text:0000000000001f4c $t
         spi-flash.s:188    .text:0000000000001f4c WR_BYTE
         spi-flash.s:206    .text:0000000000001f70 $d
         spi-flash.s:206    .text:0000000000001f74 _WR_DIS
         spi-flash.s:206    .text:0000000000001f7c WR_DIS
         spi-flash.s:208    .text:0000000000001f80 $d
         spi-flash.s:218    .text:0000000000001f9c _WR_ENBL
         spi-flash.s:218    .text:0000000000001fa4 $t
         spi-flash.s:218    .text:0000000000001fa4 WR_ENBL
         spi-flash.s:220    .text:0000000000001fa8 $d
         spi-flash.s:230    .text:0000000000001fc4 _RD_SR
         spi-flash.s:230    .text:0000000000001fca $t
ARM GAS  forth.s 			page 244


         spi-flash.s:230    .text:0000000000001fcc RD_SR
         spi-flash.s:232    .text:0000000000001fd0 $d
         spi-flash.s:240    .text:0000000000001ff4 sr_cmd
         spi-flash.s:246    .text:0000000000001ffb _SEND_ADR
         spi-flash.s:246    .text:0000000000002004 $t
         spi-flash.s:246    .text:0000000000002004 SEND_ADR
         spi-flash.s:248    .text:0000000000002008 $d
         spi-flash.s:263    .text:000000000000203c _WAIT_DONE
         spi-flash.s:263    .text:0000000000002046 $t
         spi-flash.s:263    .text:0000000000002048 WAIT_DONE
         spi-flash.s:265    .text:000000000000204c $d
         spi-flash.s:281    .text:000000000000207c _ERASE_SECT
         spi-flash.s:281    .text:000000000000208c ERASE_SECT
         spi-flash.s:283    .text:0000000000002090 $d
         spi-flash.s:299    .text:00000000000020b8 _FREE_SECT
         spi-flash.s:299    .text:00000000000020c4 $t
         spi-flash.s:299    .text:00000000000020c4 FREE_SECT
         spi-flash.s:301    .text:00000000000020c8 $d
         spi-flash.s:315    .text:00000000000020f0 _ERASE_CHIP
         spi-flash.s:315    .text:00000000000020fc ERASE_CHIP
         spi-flash.s:317    .text:0000000000002100 $d
         spi-flash.s:333    .text:0000000000002130 _RD_BLK
         spi-flash.s:335    .text:000000000000213c $d
         spi-flash.s:355    .text:0000000000002184 _WR_BLK
         spi-flash.s:357    .text:0000000000002190 $d
         spi-flash.s:392    .text:00000000000021e0 _SEARCH_FILE
         spi-flash.s:392    .text:00000000000021ec $t
         spi-flash.s:392    .text:00000000000021ec SEARCH_FILE
         spi-flash.s:395    .text:00000000000021f0 $d
         spi-flash.s:401    .text:00000000000021f8 _ERASE_FILE
         spi-flash.s:401    .text:0000000000002204 ERASE_FILE
         spi-flash.s:404    .text:0000000000002208 $d
         spi-flash.s:410    .text:0000000000002210 _DIR
         spi-flash.s:410    .text:0000000000002214 $t
         spi-flash.s:410    .text:0000000000002214 DIR
         spi-flash.s:413    .text:0000000000002218 $d
         spi-flash.s:423    .text:0000000000002220 _SAVE
         spi-flash.s:423    .text:000000000000222a $t
         spi-flash.s:423    .text:000000000000222c SAVE
         spi-flash.s:426    .text:0000000000002230 $d
         spi-flash.s:435    .text:0000000000002238 _LOAD
         spi-flash.s:435    .text:0000000000002242 $t
         spi-flash.s:435    .text:0000000000002244 LOAD
         spi-flash.s:438    .text:0000000000002248 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000002270 p10
               fpu.s:59     .text:000000000000229c _PWR10
               fpu.s:59     .text:00000000000022a2 $t
               fpu.s:59     .text:00000000000022a4 PWR10
               fpu.s:90     .text:00000000000022d0 $d
               fpu.s:90     .text:00000000000022d4 _FDI
               fpu.s:90     .text:00000000000022d8 $t
               fpu.s:90     .text:00000000000022d8 FDI
               fpu.s:100    .text:00000000000022ea $d
ARM GAS  forth.s 			page 245


               fpu.s:100    .text:00000000000022ee _FEI
               fpu.s:100    .text:00000000000022f2 $t
               fpu.s:100    .text:00000000000022f4 FEI
               fpu.s:110    .text:0000000000002306 $d
               fpu.s:110    .text:000000000000230a _FPSCR
               fpu.s:110    .text:0000000000002310 $t
               fpu.s:123    .text:0000000000002320 $d
               fpu.s:123    .text:0000000000002324 _CLR_FPSCR
               fpu.s:123    .text:000000000000232e $t
               fpu.s:136    .text:0000000000002348 $d
               fpu.s:136    .text:000000000000234c _TOS0
               fpu.s:136    .text:0000000000002350 $t
               fpu.s:136    .text:0000000000002350 TOS0
               fpu.s:145    .text:000000000000235c $d
               fpu.s:145    .text:0000000000002360 _TOS1
               fpu.s:145    .text:0000000000002364 $t
               fpu.s:145    .text:0000000000002364 TOS1
               fpu.s:154    .text:0000000000002370 $d
               fpu.s:154    .text:0000000000002374 _TOS2
               fpu.s:154    .text:0000000000002378 $t
               fpu.s:154    .text:0000000000002378 TOS2
               fpu.s:163    .text:0000000000002384 $d
               fpu.s:163    .text:0000000000002388 _S0FROM
               fpu.s:163    .text:000000000000238c $t
               fpu.s:163    .text:000000000000238c S0FROM
               fpu.s:172    .text:0000000000002398 $d
               fpu.s:172    .text:000000000000239c _S1FROM
               fpu.s:172    .text:00000000000023a0 $t
               fpu.s:172    .text:00000000000023a0 S1FROM
               fpu.s:181    .text:00000000000023ac $d
               fpu.s:181    .text:00000000000023b0 _S2FROM
               fpu.s:181    .text:00000000000023b4 $t
               fpu.s:181    .text:00000000000023b4 S2FROM
               fpu.s:192    .text:00000000000023c0 $d
               fpu.s:192    .text:00000000000023c4 _FTOS
               fpu.s:192    .text:00000000000023c8 $t
               fpu.s:192    .text:00000000000023c8 FTOS
               fpu.s:202    .text:00000000000023d8 $d
               fpu.s:202    .text:00000000000023dc _TRUNC
               fpu.s:202    .text:00000000000023e2 $t
               fpu.s:202    .text:00000000000023e4 TRUNC
               fpu.s:212    .text:00000000000023f4 $d
               fpu.s:212    .text:00000000000023f8 _STOF
               fpu.s:212    .text:00000000000023fc $t
               fpu.s:212    .text:00000000000023fc STOF
               fpu.s:222    .text:000000000000240c $d
               fpu.s:222    .text:0000000000002410 _FPLUS
               fpu.s:222    .text:0000000000002414 FPLUS
               fpu.s:235    .text:000000000000242c $d
               fpu.s:235    .text:0000000000002430 _FSUBB
               fpu.s:235    .text:0000000000002434 FSUBB
               fpu.s:249    .text:000000000000244c $d
               fpu.s:249    .text:0000000000002450 _FSTAR
               fpu.s:249    .text:0000000000002454 FSTAR
               fpu.s:262    .text:000000000000246c $d
               fpu.s:262    .text:0000000000002470 _FSLH
               fpu.s:262    .text:0000000000002474 FSLH
ARM GAS  forth.s 			page 246


               fpu.s:275    .text:000000000000248c $d
               fpu.s:275    .text:0000000000002490 _FNEG
               fpu.s:275    .text:0000000000002498 $t
               fpu.s:275    .text:0000000000002498 FNEG
               fpu.s:285    .text:00000000000024a8 $d
               fpu.s:285    .text:00000000000024ac _FABS
               fpu.s:285    .text:00000000000024b4 FABS
               fpu.s:297    .text:00000000000024c8 $d
               fpu.s:297    .text:00000000000024cc _SQRT
               fpu.s:297    .text:00000000000024d4 SQRT
               fpu.s:307    .text:00000000000024e4 $d
               fpu.s:307    .text:00000000000024e8 _FZLESS
               fpu.s:307    .text:00000000000024ec $t
               fpu.s:307    .text:00000000000024ec FZLESS
               fpu.s:319    .text:0000000000002504 $d
               fpu.s:319    .text:0000000000002508 _FGREAT
               fpu.s:319    .text:000000000000250c FGREAT
               fpu.s:321    .text:0000000000002510 $d
             forth.s:1042   .text:0000000000003778 INVER
               fpu.s:330    .text:0000000000002524 _FLESS
               fpu.s:330    .text:0000000000002528 FLESS
               fpu.s:332    .text:000000000000252c $d
               fpu.s:340    .text:000000000000253c _FMIN
               fpu.s:340    .text:0000000000002544 FMIN
               fpu.s:342    .text:0000000000002548 $d
               fpu.s:353    .text:000000000000256c _FMAX
               fpu.s:353    .text:0000000000002574 FMAX
               fpu.s:355    .text:0000000000002578 $d
               fpu.s:368    .text:000000000000259c _FSIGN
               fpu.s:368    .text:00000000000025a2 $t
               fpu.s:368    .text:00000000000025a4 FSIGN
               fpu.s:379    .text:00000000000025b8 $d
               fpu.s:379    .text:00000000000025bc _FEXP
               fpu.s:379    .text:00000000000025c4 FEXP
               fpu.s:390    .text:00000000000025dc $d
               fpu.s:390    .text:00000000000025e0 _FMANT
               fpu.s:390    .text:00000000000025e6 $t
               fpu.s:390    .text:00000000000025e8 FMANT
               fpu.s:403    .text:0000000000002604 $d
               fpu.s:403    .text:0000000000002608 _PI
               fpu.s:403    .text:000000000000260c PI
               fpu.s:412    .text:000000000000261c $d
               fpu.s:412    .text:0000000000002620 _LN2
               fpu.s:412    .text:0000000000002624 $t
               fpu.s:412    .text:0000000000002624 LN2
               fpu.s:421    .text:0000000000002634 $d
               fpu.s:421    .text:0000000000002638 _LN10
               fpu.s:421    .text:0000000000002640 LN10
               fpu.s:431    .text:0000000000002650 $d
               fpu.s:431    .text:0000000000002654 _LOG2
               fpu.s:431    .text:000000000000265c LOG2
               fpu.s:441    .text:000000000000266c $d
               fpu.s:441    .text:0000000000002670 _LOG2TO10
               fpu.s:441    .text:0000000000002678 $t
               fpu.s:441    .text:0000000000002678 LOG2TO10
               fpu.s:443    .text:000000000000267c $d
             forth.s:635    .text:0000000000003418 ZLESS
ARM GAS  forth.s 			page 247


               fpu.s:453    .text:00000000000026a8 $d
            strtof.s:29     .text:00000000000026b4 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:00000000000026cc p10p2at
            strtof.s:44     .text:00000000000026cc $t
            strtof.s:45     .text:00000000000026d0 $d
            strtof.s:57     .text:00000000000026f0 bit_state
            strtof.s:58     .text:00000000000026f0 $t
            strtof.s:59     .text:00000000000026f4 $d
             forth.s:1931   .text:0000000000003fc0 PICK
            strtof.s:76     .text:0000000000002714 mant_div
            strtof.s:77     .text:0000000000002714 $t
            strtof.s:78     .text:0000000000002718 $d
            strtof.s:79     .text:000000000000271c div_loop
             forth.s:1184   .text:00000000000038b8 GREAT
            strtof.s:107    .text:0000000000002768 mant_mult
            strtof.s:108    .text:0000000000002768 $t
            strtof.s:109    .text:000000000000276c $d
            strtof.s:110    .text:0000000000002770 mult_loop
            strtof.s:134    .text:00000000000027bc exp_adjust
            strtof.s:135    .text:00000000000027bc $t
            strtof.s:136    .text:00000000000027c0 $d
             forth.s:945    .text:00000000000036a0 NROT
            strtof.s:148    .text:00000000000027fc pos_exp
             forth.s:1058   .text:000000000000379c ABSS
            strtof.s:159    .text:000000000000280c integer
            strtof.s:160    .text:000000000000280c $t
            strtof.s:161    .text:0000000000002810 $d
             forth.s:597    .text:00000000000033cc DSWAP
             forth.s:2425   .text:00000000000044b8 TONBR
             forth.s:2392   .text:0000000000004464 DTOS
            strtof.s:176    .text:0000000000002834 decimals
            strtof.s:177    .text:0000000000002834 $t
            strtof.s:178    .text:0000000000002838 $d
             forth.s:1207   .text:00000000000038ec MIN
            strtof.s:202    .text:000000000000288c exponent
            strtof.s:203    .text:000000000000288c $t
            strtof.s:204    .text:0000000000002890 $d
             forth.s:2478   .text:000000000000454e NEGQ
             forth.s:1050   .text:000000000000378c NEGAT
            strtof.s:224    .text:00000000000028cc _FLOATQ
            strtof.s:224    .text:00000000000028d4 FLOATQ
            strtof.s:228    .text:00000000000028d8 $d
             forth.s:2348   .text:00000000000043dc DECIM
             forth.s:2458   .text:000000000000452c CHARQ
             forth.s:395    .text:0000000000003242 TBRAN
            strtof.s:265    .text:000000000000297c get_decimals
            strtof.s:299    .text:0000000000002a18 error2
            strtof.s:280    .text:00000000000029c0 get_exponent
            strtof.s:276    .text:00000000000029ac f_done
            strtof.s:270    .text:0000000000002990 try_e
            strtof.s:302    .text:0000000000002a24 error3
            strtof.s:285    .text:00000000000029d4 build_float
            strtof.s:307    .text:0000000000002a38 error4
ARM GAS  forth.s 			page 248


             forth.s:472    .text:00000000000032c4 DRFROM
            strtof.s:315    .text:0000000000002a58 restore_base
            strtof.s:311    .text:0000000000002a44 e4
              ftoa.s:28     .text:0000000000002a68 rounding
              ftoa.s:48     .text:0000000000002a90 _ROUND
              ftoa.s:48     .text:0000000000002a96 $t
              ftoa.s:48     .text:0000000000002a98 ROUND
              ftoa.s:50     .text:0000000000002a9c $d
             forth.s:1196   .text:00000000000038d4 MAX
              ftoa.s:67     .text:0000000000002adc _CSTOP
              ftoa.s:67     .text:0000000000002ae0 $t
              ftoa.s:67     .text:0000000000002ae0 CSTOP
              ftoa.s:79     .text:0000000000002aec ITOA
              ftoa.s:81     .text:0000000000002af0 $d
             forth.s:1645   .text:0000000000003d34 STOD
             forth.s:997    .text:0000000000003710 DABS
             forth.s:2191   .text:0000000000004244 BDIGS
             forth.s:2255   .text:00000000000042e8 DIGS
             forth.s:2273   .text:000000000000431c SIGN
             forth.s:2287   .text:0000000000004344 EDIGS
             forth.s:2030   .text:00000000000040a0 CMOVE
              ftoa.s:114    .text:0000000000002b44 _SCALEUP
              ftoa.s:114    .text:0000000000002b4c $t
              ftoa.s:114    .text:0000000000002b4c SCALEUP
              ftoa.s:116    .text:0000000000002b50 $d
              ftoa.s:148    .text:0000000000002bac _SCALEDOWN
              ftoa.s:148    .text:0000000000002bb6 $t
              ftoa.s:148    .text:0000000000002bb8 SCALEDOWN
              ftoa.s:150    .text:0000000000002bbc $d
              ftoa.s:181    .text:0000000000002c14 EPART
              ftoa.s:182    .text:0000000000002c14 $t
              ftoa.s:183    .text:0000000000002c18 $d
              ftoa.s:206    .text:0000000000002c48 FPART
              ftoa.s:207    .text:0000000000002c48 $t
              ftoa.s:209    .text:0000000000002c4c $d
             forth.s:654    .text:000000000000343c ZNEQU
             forth.s:643    .text:0000000000003428 ZGREAT
              ftoa.s:262    .text:0000000000002d04 IPART
              ftoa.s:263    .text:0000000000002d04 $t
              ftoa.s:264    .text:0000000000002d08 $d
              ftoa.s:325    .text:0000000000002dc8 _FTOA
              ftoa.s:325    .text:0000000000002dcc $t
              ftoa.s:325    .text:0000000000002dcc FTOA
              ftoa.s:327    .text:0000000000002dd0 $d
              ftoa.s:377    .text:0000000000002eb0 nan
             forth.s:831    .text:00000000000035a0 BLANK
              ftoa.s:360    .text:0000000000002e60 zdz
              ftoa.s:399    .text:0000000000002f1c infinity
              ftoa.s:423    .text:0000000000002f64 _FDOT
              ftoa.s:423    .text:0000000000002f68 FDOT
              ftoa.s:425    .text:0000000000002f6c $d
             forth.s:1959   .text:0000000000003ff4 HERE
             forth.s:3826   .text:00000000000054f4 ALLOT
             forth.s:80     .text:0000000000002fc0 $t
             forth.s:104    .text:0000000000002fd8 COMPI_NEST
             forth.s:117    .text:0000000000002ff6 TSTDIN
             forth.s:124    .text:0000000000003000 TSTDOUT
ARM GAS  forth.s 			page 249


             forth.s:133    .text:000000000000300a $d
             forth.s:133    .text:000000000000300e _CFSR
             forth.s:145    .text:000000000000302a $d
             forth.s:145    .text:000000000000302e _BFAR
             forth.s:157    .text:000000000000304a $d
             forth.s:157    .text:000000000000304e _QKEY
             forth.s:157    .text:0000000000003054 QKEY
             forth.s:159    .text:0000000000003058 $d
             forth.s:2017   .text:0000000000004080 ATEXE
             forth.s:167    .text:0000000000003068 _KEY
             forth.s:167    .text:000000000000306c $t
             forth.s:167    .text:000000000000306c KEY
             forth.s:169    .text:0000000000003070 KEY1
             forth.s:170    .text:0000000000003070 $d
             forth.s:185    .text:0000000000003080 KEY2
             forth.s:192    .text:0000000000003088 _EMIT
             forth.s:194    .text:0000000000003094 $d
             forth.s:228    .text:00000000000030a4 _RAND
             forth.s:228    .text:00000000000030ac RAND
             forth.s:230    .text:00000000000030b0 $d
             forth.s:1293   .text:00000000000039a8 SEED
             forth.s:1801   .text:0000000000003e7c MODD
             forth.s:259    .text:0000000000003120 _PAUSE
             forth.s:259    .text:0000000000003124 PAUSE
             forth.s:261    .text:0000000000003128 $d
             forth.s:1312   .text:00000000000039d4 TIMER
             forth.s:263    .text:0000000000003130 PAUSE_LOOP
             forth.s:268    .text:0000000000003148 PAUSE_EXIT
             forth.s:275    .text:0000000000003150 _ULED
             forth.s:284    .text:0000000000003174 ULED_OFF
             forth.s:292    .text:0000000000003178 $d
             forth.s:292    .text:000000000000317c _JOYSTK
             forth.s:292    .text:0000000000003184 JOYSTK
             forth.s:294    .text:0000000000003188 $d
             forth.s:306    .text:00000000000031a8 _BEEP
             forth.s:306    .text:00000000000031b0 BEEP
             forth.s:331    .text:00000000000031e4 $d
             forth.s:331    .text:00000000000031e8 _NOP
             forth.s:331    .text:00000000000031ec $t
             forth.s:331    .text:00000000000031ec NOP
             forth.s:349    .text:00000000000031f8 $d
             forth.s:349    .text:00000000000031fc _EXECU
             forth.s:349    .text:0000000000003204 $t
             forth.s:369    .text:0000000000003220 NEXT1
             forth.s:387    .text:000000000000323c QBRAN1
             forth.s:418    .text:000000000000325c $d
             forth.s:418    .text:0000000000003260 _EXIT
             forth.s:418    .text:0000000000003268 EXIT
             forth.s:426    .text:000000000000326a $d
             forth.s:426    .text:000000000000326e _STORE
             forth.s:426    .text:0000000000003270 $t
             forth.s:436    .text:000000000000327c $d
             forth.s:436    .text:0000000000003280 _AT
             forth.s:436    .text:0000000000003282 $t
             forth.s:444    .text:0000000000003288 $d
             forth.s:444    .text:000000000000328c _CSTOR
             forth.s:454    .text:000000000000329c $d
ARM GAS  forth.s 			page 250


             forth.s:454    .text:00000000000032a0 _CAT
             forth.s:463    .text:00000000000032a8 $d
             forth.s:463    .text:00000000000032ac _RFROM
             forth.s:472    .text:00000000000032ba $d
             forth.s:472    .text:00000000000032be _DRFROM
             forth.s:472    .text:00000000000032c2 $t
             forth.s:484    .text:00000000000032da $d
             forth.s:484    .text:00000000000032de _RAT
             forth.s:493    .text:00000000000032ee $d
             forth.s:493    .text:00000000000032f2 _DRAT
             forth.s:493    .text:00000000000032f6 $t
             forth.s:493    .text:00000000000032f8 DRAT
             forth.s:505    .text:000000000000330a $d
             forth.s:505    .text:000000000000330e _TOR
             forth.s:514    .text:000000000000331e $d
             forth.s:514    .text:0000000000003322 _DTOR
             forth.s:514    .text:0000000000003326 $t
             forth.s:514    .text:0000000000003328 DTOR
             forth.s:526    .text:000000000000333a $d
             forth.s:526    .text:000000000000333e _RPSTOR
             forth.s:526    .text:0000000000003342 $t
             forth.s:526    .text:0000000000003344 RPSTOR
             forth.s:535    .text:000000000000334c $d
             forth.s:535    .text:0000000000003350 _SPSTOR
             forth.s:535    .text:0000000000003354 $t
             forth.s:535    .text:0000000000003354 SPSTOR
             forth.s:544    .text:000000000000335c $d
             forth.s:544    .text:0000000000003360 _SPAT
             forth.s:544    .text:0000000000003364 $t
             forth.s:544    .text:0000000000003364 SPAT
             forth.s:553    .text:000000000000336c $d
             forth.s:553    .text:0000000000003370 _RPAT
             forth.s:553    .text:0000000000003374 $t
             forth.s:553    .text:0000000000003374 RPAT
             forth.s:562    .text:000000000000337c $d
             forth.s:562    .text:0000000000003380 _DROP
             forth.s:571    .text:000000000000338e $d
             forth.s:571    .text:0000000000003392 _NIP
             forth.s:571    .text:0000000000003396 $t
             forth.s:571    .text:0000000000003398 NIP
             forth.s:579    .text:000000000000339e $d
             forth.s:579    .text:00000000000033a2 _DUPP
             forth.s:579    .text:00000000000033a6 $t
             forth.s:587    .text:00000000000033ae $d
             forth.s:587    .text:00000000000033b2 _SWAP
             forth.s:597    .text:00000000000033c0 $d
             forth.s:597    .text:00000000000033c4 _DSWAP
             forth.s:597    .text:00000000000033ca $t
             forth.s:612    .text:00000000000033dc $d
             forth.s:612    .text:00000000000033e0 _OVER
             forth.s:621    .text:00000000000033f0 $d
             forth.s:621    .text:00000000000033f4 _DOVER
             forth.s:621    .text:00000000000033fa $t
             forth.s:621    .text:00000000000033fc DOVER
             forth.s:635    .text:000000000000340e $d
             forth.s:635    .text:0000000000003412 _ZLESS
             forth.s:643    .text:000000000000341e $d
ARM GAS  forth.s 			page 251


             forth.s:643    .text:0000000000003422 _ZGREAT
             forth.s:654    .text:0000000000003434 $d
             forth.s:654    .text:0000000000003438 _ZNEQU
             forth.s:654    .text:000000000000343c $t
             forth.s:664    .text:0000000000003444 $d
             forth.s:664    .text:0000000000003448 _NEQU
             forth.s:664    .text:000000000000344c NEQU
             forth.s:676    .text:000000000000345a $d
             forth.s:676    .text:000000000000345e _ANDD
             forth.s:676    .text:0000000000003462 $t
             forth.s:685    .text:000000000000346e $d
             forth.s:685    .text:0000000000003472 _ORR
             forth.s:694    .text:0000000000003482 $d
             forth.s:694    .text:0000000000003486 _XORR
             forth.s:694    .text:000000000000348a $t
             forth.s:703    .text:0000000000003496 $d
             forth.s:703    .text:000000000000349a _UPLUS
             forth.s:703    .text:000000000000349e $t
             forth.s:703    .text:00000000000034a0 UPLUS
             forth.s:715    .text:00000000000034b0 $d
             forth.s:715    .text:00000000000034b4 _RSHIFT
             forth.s:724    .text:00000000000034c6 $d
             forth.s:724    .text:00000000000034ca _LSHIFT
             forth.s:733    .text:00000000000034de $d
             forth.s:733    .text:00000000000034e2 _PLUS
             forth.s:733    .text:00000000000034e4 $t
             forth.s:742    .text:00000000000034ec $d
             forth.s:742    .text:00000000000034f0 _SUBB
             forth.s:742    .text:00000000000034f2 $t
             forth.s:751    .text:00000000000034fe $d
             forth.s:751    .text:0000000000003502 _STAR
             forth.s:751    .text:0000000000003504 $t
             forth.s:760    .text:000000000000350e $d
             forth.s:760    .text:0000000000003512 _UMSTA
             forth.s:760    .text:0000000000003516 $t
             forth.s:760    .text:0000000000003518 UMSTA
             forth.s:772    .text:0000000000003524 $d
             forth.s:772    .text:0000000000003528 _MSTAR
             forth.s:772    .text:000000000000352c MSTAR
             forth.s:783    .text:0000000000003538 $d
             forth.s:783    .text:000000000000353c _ONEP
             forth.s:791    .text:0000000000003546 $d
             forth.s:791    .text:000000000000354a _ONEM
             forth.s:799    .text:0000000000003556 $d
             forth.s:799    .text:000000000000355a _TWOP
             forth.s:799    .text:0000000000003560 TWOP
             forth.s:807    .text:0000000000003566 $d
             forth.s:807    .text:000000000000356a _TWOM
             forth.s:807    .text:0000000000003570 TWOM
             forth.s:815    .text:0000000000003576 $d
             forth.s:815    .text:000000000000357a _CELLP
             forth.s:815    .text:0000000000003580 $t
             forth.s:815    .text:0000000000003580 CELLP
             forth.s:823    .text:0000000000003586 $d
             forth.s:823    .text:000000000000358a _CELLM
             forth.s:823    .text:0000000000003590 $t
             forth.s:823    .text:0000000000003590 CELLM
ARM GAS  forth.s 			page 252


             forth.s:831    .text:0000000000003596 $d
             forth.s:831    .text:000000000000359a _BLANK
             forth.s:840    .text:00000000000035aa $d
             forth.s:840    .text:00000000000035ae _CELLS
             forth.s:840    .text:00000000000035b4 $t
             forth.s:840    .text:00000000000035b4 CELLS
             forth.s:848    .text:00000000000035ba $d
             forth.s:848    .text:00000000000035be _CELLSL
             forth.s:848    .text:00000000000035c4 $t
             forth.s:848    .text:00000000000035c4 CELLSL
             forth.s:856    .text:00000000000035ca $d
             forth.s:856    .text:00000000000035ce _TWOST
             forth.s:856    .text:00000000000035d4 TWOST
             forth.s:864    .text:00000000000035da $d
             forth.s:864    .text:00000000000035de _TWOSL
             forth.s:872    .text:00000000000035ea $d
             forth.s:872    .text:00000000000035ee _QDUP
             forth.s:882    .text:00000000000035fe $d
             forth.s:882    .text:0000000000003602 _TUCK
             forth.s:882    .text:0000000000003608 TUCK
             forth.s:891    .text:0000000000003610 $d
             forth.s:891    .text:0000000000003614 _ROLL
             forth.s:891    .text:000000000000361c ROLL
             forth.s:893    .text:0000000000003620 $d
             forth.s:934    .text:0000000000003688 _ROT
             forth.s:934    .text:000000000000368c $t
             forth.s:945    .text:0000000000003696 $d
             forth.s:945    .text:000000000000369a _NROT
             forth.s:956    .text:00000000000036aa $d
             forth.s:956    .text:00000000000036ae _DDROP
             forth.s:956    .text:00000000000036b4 $t
             forth.s:965    .text:00000000000036be $d
             forth.s:965    .text:00000000000036c2 _TDROP
             forth.s:965    .text:00000000000036c8 $t
             forth.s:974    .text:00000000000036d2 $d
             forth.s:974    .text:00000000000036d6 _DDUP
             forth.s:984    .text:00000000000036e8 $d
             forth.s:984    .text:00000000000036ec _DPLUS
             forth.s:997    .text:0000000000003704 $d
             forth.s:997    .text:0000000000003708 _DABS
             forth.s:1013   .text:000000000000372c $d
             forth.s:1013   .text:0000000000003730 _UDGREAT
             forth.s:1013   .text:0000000000003734 $t
             forth.s:1013   .text:0000000000003734 UDGREAT
             forth.s:1030   .text:0000000000003750 $d
             forth.s:1030   .text:0000000000003754 _DZEQUAL
             forth.s:1030   .text:0000000000003758 $t
             forth.s:1030   .text:0000000000003758 DZEQUAL
             forth.s:1042   .text:000000000000376a $d
             forth.s:1042   .text:000000000000376e _INVER
             forth.s:1050   .text:000000000000377e $d
             forth.s:1050   .text:0000000000003782 _NEGAT
             forth.s:1058   .text:0000000000003792 $d
             forth.s:1058   .text:0000000000003796 _ABSS
             forth.s:1058   .text:000000000000379a $t
             forth.s:1068   .text:00000000000037a6 $d
             forth.s:1068   .text:00000000000037aa _CLZ
ARM GAS  forth.s 			page 253


             forth.s:1068   .text:00000000000037ae $t
             forth.s:1076   .text:00000000000037b6 $d
             forth.s:1076   .text:00000000000037ba _CTZ
             forth.s:1076   .text:00000000000037be $t
             forth.s:1076   .text:00000000000037c0 CTZ
             forth.s:1091   .text:00000000000037da $d
             forth.s:1091   .text:00000000000037de _FALSE
             forth.s:1091   .text:00000000000037e4 $t
             forth.s:1091   .text:00000000000037e4 FALSE
             forth.s:1101   .text:00000000000037f0 $d
             forth.s:1101   .text:00000000000037f4 _TRUE
             forth.s:1101   .text:00000000000037fc TRUE
             forth.s:1112   .text:000000000000380c $d
             forth.s:1112   .text:0000000000003810 _ZEQUAL
             forth.s:1112   .text:0000000000003814 ZEQUAL
             forth.s:1123   .text:0000000000003826 $d
             forth.s:1123   .text:000000000000382a _EQUAL
             forth.s:1123   .text:000000000000382c $t
             forth.s:1135   .text:000000000000383e $d
             forth.s:1135   .text:0000000000003842 _DIFF
             forth.s:1135   .text:0000000000003848 DIFF
             forth.s:1148   .text:0000000000003862 $d
             forth.s:1148   .text:0000000000003866 _ULESS
             forth.s:1160   .text:000000000000387e $d
             forth.s:1160   .text:0000000000003882 _LESS
             forth.s:1160   .text:0000000000003884 $t
             forth.s:1160   .text:0000000000003884 LESS
             forth.s:1172   .text:0000000000003896 $d
             forth.s:1172   .text:000000000000389a _UGREAT
             forth.s:1172   .text:00000000000038a0 UGREAT
             forth.s:1184   .text:00000000000038b2 $d
             forth.s:1184   .text:00000000000038b6 _GREAT
             forth.s:1184   .text:00000000000038b8 $t
             forth.s:1196   .text:00000000000038ca $d
             forth.s:1196   .text:00000000000038ce _MAX
             forth.s:1196   .text:00000000000038d2 $t
             forth.s:1207   .text:00000000000038e2 $d
             forth.s:1207   .text:00000000000038e6 _MIN
             forth.s:1207   .text:00000000000038ea $t
             forth.s:1218   .text:00000000000038fa $d
             forth.s:1218   .text:00000000000038fe _PSTOR
             forth.s:1218   .text:0000000000003904 PSTOR
             forth.s:1230   .text:0000000000003916 $d
             forth.s:1230   .text:000000000000391a _DSTOR
             forth.s:1230   .text:0000000000003920 DSTOR
             forth.s:1242   .text:0000000000003936 $d
             forth.s:1242   .text:000000000000393a _DAT
             forth.s:1242   .text:0000000000003940 DAT
             forth.s:1252   .text:000000000000394c $d
             forth.s:1252   .text:0000000000003950 _COUNT
             forth.s:1252   .text:0000000000003956 $t
             forth.s:1262   .text:0000000000003966 $d
             forth.s:1262   .text:000000000000396a _DNEGA
             forth.s:1262   .text:0000000000003972 $t
             forth.s:1262   .text:0000000000003974 DNEGA
             forth.s:1284   .text:0000000000003986 $d
             forth.s:1284   .text:000000000000398a _STATE
ARM GAS  forth.s 			page 254


             forth.s:1284   .text:0000000000003990 $t
             forth.s:1284   .text:0000000000003990 STATE
             forth.s:1293   .text:000000000000399c $d
             forth.s:1293   .text:00000000000039a0 _SEED
             forth.s:1303   .text:00000000000039b4 $d
             forth.s:1303   .text:00000000000039b8 _MSEC
             forth.s:1303   .text:00000000000039be $t
             forth.s:1312   .text:00000000000039ca $d
             forth.s:1312   .text:00000000000039ce _TIMER
             forth.s:1312   .text:00000000000039d4 $t
             forth.s:1321   .text:00000000000039e0 $d
             forth.s:1321   .text:00000000000039e4 _TBOOT
             forth.s:1321   .text:00000000000039ea $t
             forth.s:1321   .text:00000000000039ec TBOOT
             forth.s:1330   .text:00000000000039f8 $d
             forth.s:1330   .text:00000000000039fc _BASE
             forth.s:1341   .text:0000000000003a10 $d
             forth.s:1341   .text:0000000000003a14 _BCHR
             forth.s:1341   .text:0000000000003a1a $t
             forth.s:1341   .text:0000000000003a1c BCHR
             forth.s:1351   .text:0000000000003a28 TEMP
             forth.s:1360   .text:0000000000003a34 $d
             forth.s:1360   .text:0000000000003a38 _SPAN
             forth.s:1360   .text:0000000000003a40 SPAN
             forth.s:1369   .text:0000000000003a4c $d
             forth.s:1369   .text:0000000000003a50 _INN
             forth.s:1369   .text:0000000000003a54 $t
             forth.s:1369   .text:0000000000003a54 INN
             forth.s:1379   .text:0000000000003a60 $d
             forth.s:1379   .text:0000000000003a64 _NTIB
             forth.s:1379   .text:0000000000003a6c NTIB
             forth.s:1388   .text:0000000000003a78 $d
             forth.s:1388   .text:0000000000003a7c _TEVAL
             forth.s:1388   .text:0000000000003a82 $t
             forth.s:1388   .text:0000000000003a84 TEVAL
             forth.s:1398   .text:0000000000003a90 $d
             forth.s:1398   .text:0000000000003a94 _HLD
             forth.s:1398   .text:0000000000003a98 $t
             forth.s:1398   .text:0000000000003a98 HLD
             forth.s:1408   .text:0000000000003aa4 $d
             forth.s:1408   .text:0000000000003aa8 _CNTXT
             forth.s:1408   .text:0000000000003ab0 $t
             forth.s:1409   .text:0000000000003ab0 CRRNT
             forth.s:1419   .text:0000000000003abc $d
             forth.s:1419   .text:0000000000003ac0 _CPP
             forth.s:1419   .text:0000000000003ac4 CPP
             forth.s:1430   .text:0000000000003ad0 $d
             forth.s:1430   .text:0000000000003ad4 _UNUSED
             forth.s:1430   .text:0000000000003adc UNUSED
             forth.s:1442   .text:0000000000003af2 $d
             forth.s:1442   .text:0000000000003af6 _FCP
             forth.s:1442   .text:0000000000003afa $t
             forth.s:1442   .text:0000000000003afc FCP
             forth.s:1452   .text:0000000000003b08 $d
             forth.s:1452   .text:0000000000003b0c _LAST
             forth.s:1452   .text:0000000000003b14 LAST
             forth.s:1466   .text:0000000000003b20 $d
ARM GAS  forth.s 			page 255


             forth.s:1466   .text:0000000000003b24 _USER_BEGIN
             forth.s:1466   .text:0000000000003b30 USER_BEGIN
             forth.s:1470   .text:0000000000003b3c USR_BGN_ADR
             forth.s:1471   .text:0000000000003b3c $d
             forth.s:1477   .text:0000000000003b44 _USER_END
             forth.s:1477   .text:0000000000003b50 USER_END
             forth.s:1481   .text:0000000000003b5c USER_END_ADR
             forth.s:1482   .text:0000000000003b5c $d
             forth.s:1488   .text:0000000000003b64 _MAXINT
             forth.s:1488   .text:0000000000003b6c $t
             forth.s:1488   .text:0000000000003b6c MAXINT
             forth.s:1497   .text:0000000000003b7c $d
             forth.s:1497   .text:0000000000003b80 _MININT
             forth.s:1497   .text:0000000000003b88 $t
             forth.s:1497   .text:0000000000003b88 MININT
             forth.s:1506   .text:0000000000003b98 $d
             forth.s:1506   .text:0000000000003b9c _MAXUINT
             forth.s:1506   .text:0000000000003ba8 MAXUINT
             forth.s:1521   .text:0000000000003bb8 $d
             forth.s:1521   .text:0000000000003bbc _WITHI
             forth.s:1521   .text:0000000000003bc4 WITHI
             forth.s:1523   .text:0000000000003bc8 $d
             forth.s:1538   .text:0000000000003be8 _UMMOD
             forth.s:1538   .text:0000000000003bf0 UMMOD
             forth.s:1542   .text:0000000000003bfa UMMOD0
             forth.s:1549   .text:0000000000003c0a UMMOD1
             forth.s:1555   .text:0000000000003c14 UMMOD2
             forth.s:1568   .text:0000000000003c20 $d
             forth.s:1568   .text:0000000000003c24 _MSMOD
             forth.s:1568   .text:0000000000003c2c MSMOD
             forth.s:1570   .text:0000000000003c30 $d
             forth.s:1579   .text:0000000000003c58 MMOD1
             forth.s:1586   .text:0000000000003c74 MMOD2
             forth.s:1594   .text:0000000000003c94 MMOD3
             forth.s:1608   .text:0000000000003c9c _SMSLSHREM
             forth.s:1608   .text:0000000000003ca4 SMSLSHREM
             forth.s:1610   .text:0000000000003ca8 $d
             forth.s:1645   .text:0000000000003d30 _STOD
             forth.s:1645   .text:0000000000003d34 $t
             forth.s:1654   .text:0000000000003d40 $d
             forth.s:1654   .text:0000000000003d44 _D2STAR
             forth.s:1654   .text:0000000000003d48 $t
             forth.s:1654   .text:0000000000003d48 D2STAR
             forth.s:1666   .text:0000000000003d5a $d
             forth.s:1666   .text:0000000000003d5e _D2SL
             forth.s:1666   .text:0000000000003d62 $t
             forth.s:1666   .text:0000000000003d64 D2SL
             forth.s:1681   .text:0000000000003d72 $d
             forth.s:1681   .text:0000000000003d76 _DSLMOD
             forth.s:1681   .text:0000000000003d7c $t
             forth.s:1681   .text:0000000000003d7c DSLMOD
             forth.s:1717   .text:0000000000003dc8 $d
             forth.s:1717   .text:0000000000003dcc _DSLASH
             forth.s:1717   .text:0000000000003dd0 DSLASH
             forth.s:1719   .text:0000000000003dd4 $d
             forth.s:1739   .text:0000000000003e18 _DSTAR
             forth.s:1739   .text:0000000000003e1c DSTAR
ARM GAS  forth.s 			page 256


             forth.s:1788   .text:0000000000003e52 $d
             forth.s:1788   .text:0000000000003e56 _SLMOD
             forth.s:1790   .text:0000000000003e60 $d
             forth.s:1801   .text:0000000000003e78 _MODD
             forth.s:1801   .text:0000000000003e7c $t
             forth.s:1803   .text:0000000000003e80 $d
             forth.s:1812   .text:0000000000003e90 _SLASH
             forth.s:1812   .text:0000000000003e92 $t
             forth.s:1812   .text:0000000000003e94 SLASH
             forth.s:1814   .text:0000000000003e98 $d
             forth.s:1825   .text:0000000000003eac _SSMOD
             forth.s:1825   .text:0000000000003eb2 $t
             forth.s:1825   .text:0000000000003eb4 SSMOD
             forth.s:1827   .text:0000000000003eb8 $d
             forth.s:1839   .text:0000000000003ed0 _STASL
             forth.s:1839   .text:0000000000003ed4 STASL
             forth.s:1841   .text:0000000000003ed8 $d
             forth.s:1855   .text:0000000000003eec _CHARP
             forth.s:1855   .text:0000000000003ef2 $t
             forth.s:1855   .text:0000000000003ef4 CHARP
             forth.s:1865   .text:0000000000003efc $d
             forth.s:1865   .text:0000000000003f00 _CHARS
             forth.s:1865   .text:0000000000003f06 $t
             forth.s:1865   .text:0000000000003f08 CHARS
             forth.s:1875   .text:0000000000003f0c $d
             forth.s:1875   .text:0000000000003f10 _ALIGN
             forth.s:1875   .text:0000000000003f16 $t
             forth.s:1875   .text:0000000000003f18 ALIGN
             forth.s:1888   .text:0000000000003f28 $d
             forth.s:1888   .text:0000000000003f2c _ALGND
             forth.s:1888   .text:0000000000003f34 $t
             forth.s:1888   .text:0000000000003f34 ALGND
             forth.s:1899   .text:0000000000003f44 $d
             forth.s:1899   .text:0000000000003f48 _TCHAR
             forth.s:1899   .text:0000000000003f4e $t
             forth.s:1899   .text:0000000000003f50 TCHAR
             forth.s:1901   .text:0000000000003f54 $d
             forth.s:1911   .text:0000000000003f8c TCHA1
             forth.s:1919   .text:0000000000003f94 _DEPTH
             forth.s:1919   .text:0000000000003f9a $t
             forth.s:1919   .text:0000000000003f9c DEPTH
             forth.s:1931   .text:0000000000003fb4 $d
             forth.s:1931   .text:0000000000003fb8 _PICK
             forth.s:1942   .text:0000000000003fca $d
             forth.s:1942   .text:0000000000003fce _PUT
             forth.s:1942   .text:0000000000003fd2 $t
             forth.s:1942   .text:0000000000003fd4 PUT
             forth.s:1959   .text:0000000000003fe8 $d
             forth.s:1959   .text:0000000000003fec _HERE
             forth.s:1961   .text:0000000000003ff8 $d
             forth.s:1970   .text:0000000000004008 _PAD
             forth.s:1970   .text:000000000000400c $t
             forth.s:1972   .text:0000000000004010 $d
             forth.s:1983   .text:0000000000004028 _TIB
             forth.s:1983   .text:000000000000402c $t
             forth.s:1983   .text:000000000000402c TIB
             forth.s:1994   .text:0000000000004036 $d
ARM GAS  forth.s 			page 257


             forth.s:1994   .text:000000000000403a _SOURCID
             forth.s:1994   .text:0000000000004044 $t
             forth.s:1994   .text:0000000000004044 SOURCID
             forth.s:2006   .text:000000000000404e $d
             forth.s:2006   .text:0000000000004052 _SOURCE
             forth.s:2006   .text:000000000000405c SOURCE
             forth.s:2008   .text:0000000000004060 $d
             forth.s:2017   .text:0000000000004074 _ATEXE
             forth.s:2030   .text:0000000000004094 $d
             forth.s:2030   .text:0000000000004098 _CMOVE
             forth.s:2030   .text:000000000000409e $t
             forth.s:2044   .text:00000000000040c0 CMOV3
             forth.s:2039   .text:00000000000040b6 CMOV1
             forth.s:2036   .text:00000000000040ae CMOV0
             forth.s:2046   .text:00000000000040c4 CMOV2
             forth.s:2054   .text:00000000000040cc $d
             forth.s:2054   .text:00000000000040d0 _MOVE
             forth.s:2054   .text:00000000000040d8 MOVE
             forth.s:2063   .text:00000000000040da $d
             forth.s:2063   .text:00000000000040de _WMOVE
             forth.s:2063   .text:00000000000040e4 $t
             forth.s:2081   .text:000000000000410e MOVE1
             forth.s:2078   .text:000000000000410a MOVE3
             forth.s:2075   .text:0000000000004106 MOVE0
             forth.s:2086   .text:0000000000004118 MOVE2
             forth.s:2095   .text:0000000000004120 $d
             forth.s:2095   .text:0000000000004124 _FILL
             forth.s:2103   .text:000000000000413a FILL2
             forth.s:2099   .text:0000000000004132 FILL1
             forth.s:2113   .text:0000000000004142 $d
             forth.s:2113   .text:0000000000004146 _ERASE
             forth.s:2113   .text:000000000000414c $t
             forth.s:2113   .text:000000000000414c ERASE
             forth.s:2115   .text:0000000000004150 $d
             forth.s:2131   .text:000000000000417c _PACKS
             forth.s:2131   .text:0000000000004182 $t
             forth.s:2131   .text:0000000000004184 PACKS
             forth.s:2133   .text:0000000000004188 $d
             forth.s:2162   .text:00000000000041e0 _DIGIT
             forth.s:2162   .text:00000000000041e6 $t
             forth.s:2162   .text:00000000000041e8 DIGIT
             forth.s:2164   .text:00000000000041ec $d
             forth.s:2179   .text:0000000000004220 _EXTRC
             forth.s:2179   .text:0000000000004228 $t
             forth.s:2179   .text:0000000000004228 EXTRC
             forth.s:2181   .text:000000000000422c $d
             forth.s:2191   .text:0000000000004240 _BDIGS
             forth.s:2193   .text:0000000000004248 $d
             forth.s:2203   .text:000000000000425c _HOLD
             forth.s:2203   .text:0000000000004264 HOLD
             forth.s:2205   .text:0000000000004268 $d
             forth.s:2220   .text:000000000000428c _HOLDS
             forth.s:2220   .text:0000000000004292 $t
             forth.s:2220   .text:0000000000004294 HOLDS
             forth.s:2222   .text:0000000000004298 $d
             forth.s:2241   .text:00000000000042c4 _DIG
             forth.s:2241   .text:00000000000042c6 $t
ARM GAS  forth.s 			page 258


             forth.s:2241   .text:00000000000042c8 DIG
             forth.s:2243   .text:00000000000042cc $d
             forth.s:2255   .text:00000000000042e4 _DIGS
             forth.s:2257   .text:00000000000042ec DIGS1
             forth.s:2258   .text:00000000000042ec $d
             forth.s:2263   .text:0000000000004308 DIGS2
             forth.s:2273   .text:0000000000004314 _SIGN
             forth.s:2275   .text:0000000000004320 $d
             forth.s:2279   .text:0000000000004338 SIGN1
             forth.s:2287   .text:0000000000004340 _EDIGS
             forth.s:2289   .text:0000000000004348 $d
             forth.s:2304   .text:0000000000004364 STRR
             forth.s:2305   .text:0000000000004364 $t
             forth.s:2306   .text:0000000000004368 $d
             forth.s:2323   .text:0000000000004394 _HEX
             forth.s:2323   .text:0000000000004398 $t
             forth.s:2323   .text:0000000000004398 HEX
             forth.s:2325   .text:000000000000439c $d
             forth.s:2336   .text:00000000000043b4 _BIN
             forth.s:2336   .text:00000000000043b8 $t
             forth.s:2336   .text:00000000000043b8 BIN
             forth.s:2338   .text:00000000000043bc $d
             forth.s:2348   .text:00000000000043d4 _DECIM
             forth.s:2348   .text:00000000000043dc $t
             forth.s:2350   .text:00000000000043e0 $d
             forth.s:2365   .text:00000000000043f8 _DIGTQ
             forth.s:2365   .text:0000000000004400 DIGTQ
             forth.s:2367   .text:0000000000004404 $d
             forth.s:2380   .text:000000000000444c DGTQ1
             forth.s:2392   .text:0000000000004460 _DTOS
             forth.s:2392   .text:0000000000004464 $t
             forth.s:2394   .text:0000000000004468 $d
             forth.s:2425   .text:00000000000044b0 _TONBR
             forth.s:2425   .text:00000000000044b8 $t
             forth.s:2427   .text:00000000000044bc $d
             forth.s:2459   .text:000000000000452c $t
             forth.s:2502   .text:0000000000004578 SET_BASE
             forth.s:2504   .text:000000000000457c $d
             forth.s:2534   .text:00000000000045b8 _INTQ
             forth.s:2534   .text:00000000000045c0 INTQ
             forth.s:2537   .text:00000000000045c4 $d
             forth.s:2572   .text:0000000000004620 _NUMBERQ
             forth.s:2572   .text:0000000000004628 $t
             forth.s:2572   .text:0000000000004628 NUMBERQ
             forth.s:2574   .text:000000000000462c $d
             forth.s:2614   .text:00000000000046ac _SPACE
             forth.s:2614   .text:00000000000046b2 $t
             forth.s:2616   .text:00000000000046b8 $d
             forth.s:2625   .text:00000000000046c8 _SPACS
             forth.s:2625   .text:00000000000046d0 SPACS
             forth.s:2627   .text:00000000000046d4 $d
             forth.s:2633   .text:00000000000046f0 CHAR2
             forth.s:2631   .text:00000000000046ec CHAR1
             forth.s:2642   .text:0000000000004700 _TYPEE
             forth.s:2644   .text:000000000000470c $d
             forth.s:2650   .text:0000000000004724 TYPE2
             forth.s:2646   .text:0000000000004718 TYPE1
ARM GAS  forth.s 			page 259


             forth.s:2660   .text:0000000000004738 _SLTYPE
             forth.s:2660   .text:000000000000473e $t
             forth.s:2660   .text:0000000000004740 SLTYPE
             forth.s:2662   .text:0000000000004744 $d
             forth.s:2677   .text:000000000000476c _CR
             forth.s:2679   .text:0000000000004774 $d
             forth.s:2691   .text:0000000000004790 DOSTR
             forth.s:2692   .text:0000000000004790 $t
             forth.s:2694   .text:0000000000004794 $d
             forth.s:2713   .text:00000000000047c0 STRQP
             forth.s:2714   .text:00000000000047c0 $t
             forth.s:2715   .text:00000000000047c4 $d
             forth.s:2726   .text:00000000000047cc $t
             forth.s:2727   .text:00000000000047d0 $d
             forth.s:2739   .text:00000000000047dc LPAD
             forth.s:2740   .text:00000000000047dc $t
             forth.s:2741   .text:00000000000047e0 $d
             forth.s:2772   .text:0000000000004860 _DOTR
             forth.s:2772   .text:0000000000004864 DOTR
             forth.s:2774   .text:0000000000004868 $d
             forth.s:2856   .text:000000000000494c DTOA
             forth.s:2791   .text:0000000000004890 _UDOTR
             forth.s:2791   .text:0000000000004894 $t
             forth.s:2791   .text:0000000000004894 UDOTR
             forth.s:2793   .text:0000000000004898 $d
             forth.s:2809   .text:00000000000048c4 _UDOT
             forth.s:2811   .text:00000000000048cc $d
             forth.s:2827   .text:00000000000048f8 _DOT
             forth.s:2827   .text:00000000000048fa $t
             forth.s:2829   .text:0000000000004900 $d
             forth.s:2837   .text:0000000000004928 DOT1
             forth.s:2856   .text:0000000000004948 _DTOA
             forth.s:2856   .text:000000000000494c $t
             forth.s:2858   .text:0000000000004950 $d
             forth.s:2873   .text:0000000000004978 _DDOT
             forth.s:2873   .text:000000000000497c DDOT
             forth.s:2875   .text:0000000000004980 $d
             forth.s:2886   .text:00000000000049a0 _UDDOT
             forth.s:2886   .text:00000000000049a4 $t
             forth.s:2886   .text:00000000000049a4 UDDOT
             forth.s:2888   .text:00000000000049a8 $d
             forth.s:2904   .text:00000000000049d0 _HDOT
             forth.s:2904   .text:00000000000049d4 HDOT
             forth.s:2906   .text:00000000000049d8 $d
             forth.s:2928   .text:0000000000004a20 _QUEST
             forth.s:2928   .text:0000000000004a22 $t
             forth.s:2928   .text:0000000000004a24 QUEST
             forth.s:2930   .text:0000000000004a28 $d
             forth.s:2944   .text:0000000000004a34 PARS
             forth.s:2945   .text:0000000000004a34 $t
             forth.s:2946   .text:0000000000004a38 $d
             forth.s:3012   .text:0000000000004b48 PARS8
             forth.s:2976   .text:0000000000004abc PARS3
             forth.s:2959   .text:0000000000004a74 PARS1
             forth.s:2974   .text:0000000000004ab8 PARS2
             forth.s:2980   .text:0000000000004ac8 PARS4
             forth.s:2992   .text:0000000000004af8 PARS5
ARM GAS  forth.s 			page 260


             forth.s:2999   .text:0000000000004b1c PARS6
             forth.s:3005   .text:0000000000004b30 PARS7
             forth.s:3024   .text:0000000000004b5c _PARSE
             forth.s:3024   .text:0000000000004b62 $t
             forth.s:3024   .text:0000000000004b64 PARSE
             forth.s:3026   .text:0000000000004b68 $d
             forth.s:3048   .text:0000000000004ba8 _PARSENAME
             forth.s:3048   .text:0000000000004bb4 PARSENAME
             forth.s:3050   .text:0000000000004bb8 $d
             forth.s:3060   .text:0000000000004bc8 _DOTPR
             forth.s:3060   .text:0000000000004bcc DOTPR
             forth.s:3062   .text:0000000000004bd0 $d
             forth.s:3073   .text:0000000000004be8 _PAREN
             forth.s:3073   .text:0000000000004bea $t
             forth.s:3073   .text:0000000000004bec PAREN
             forth.s:3075   .text:0000000000004bf0 $d
             forth.s:3086   .text:0000000000004c08 _BKSLA
             forth.s:3086   .text:0000000000004c0a $t
             forth.s:3086   .text:0000000000004c0c BKSLA
             forth.s:3088   .text:0000000000004c10 $d
             forth.s:3099   .text:0000000000004c28 _CHAR
             forth.s:3099   .text:0000000000004c30 CHAR
             forth.s:3101   .text:0000000000004c34 $d
             forth.s:3111   .text:0000000000004c4c _IMCHAR
             forth.s:3111   .text:0000000000004c54 IMCHAR
             forth.s:3113   .text:0000000000004c58 $d
             forth.s:3898   .text:00000000000055b8 LITER
             forth.s:3122   .text:0000000000004c68 _WORDD
             forth.s:3122   .text:0000000000004c70 WORDD
             forth.s:3124   .text:0000000000004c74 $d
             forth.s:3136   .text:0000000000004c8c _TOKEN
             forth.s:3136   .text:0000000000004c92 $t
             forth.s:3136   .text:0000000000004c94 TOKEN
             forth.s:3138   .text:0000000000004c98 $d
             forth.s:3305   .text:0000000000004e94 UPPER
             forth.s:3152   .text:0000000000004cac _TOCFA
             forth.s:3152   .text:0000000000004cb4 TOCFA
             forth.s:3154   .text:0000000000004cb8 $d
             forth.s:3175   .text:0000000000004ce4 _SAMEQ
             forth.s:3175   .text:0000000000004cea $t
             forth.s:3175   .text:0000000000004cec SAMEQ
             forth.s:3177   .text:0000000000004cf0 $d
             forth.s:3194   .text:0000000000004d38 SAME2
             forth.s:3179   .text:0000000000004cfc SAME1
             forth.s:3209   .text:0000000000004d4c SEARCH
             forth.s:3210   .text:0000000000004d4c $t
             forth.s:3211   .text:0000000000004d50 $d
             forth.s:3218   .text:0000000000004d6c SEARCH1
             forth.s:3238   .text:0000000000004dc4 SEARCH6
             forth.s:3231   .text:0000000000004dac SEARCH2
             forth.s:3236   .text:0000000000004dbc SEARCH3
             forth.s:3245   .text:0000000000004ddc SEARCH4
             forth.s:3251   .text:0000000000004df8 SEARCH5
             forth.s:3267   .text:0000000000004e20 _NAMEQ
             forth.s:3267   .text:0000000000004e26 $t
             forth.s:3269   .text:0000000000004e2c $d
             forth.s:3284   .text:0000000000004e40 _ASCIZ
ARM GAS  forth.s 			page 261


             forth.s:3284   .text:0000000000004e46 $t
             forth.s:3284   .text:0000000000004e48 ASCIZ
             forth.s:3286   .text:0000000000004e4c $d
             forth.s:3305   .text:0000000000004e8c _UPPER
             forth.s:3305   .text:0000000000004e92 $t
             forth.s:3307   .text:0000000000004e98 $d
             forth.s:3338   .text:0000000000004f1c BKSP
             forth.s:3339   .text:0000000000004f1c $t
             forth.s:3340   .text:0000000000004f20 $d
             forth.s:3354   .text:0000000000004f64 BACK1
             forth.s:3363   .text:0000000000004f68 TAP
             forth.s:3364   .text:0000000000004f68 $t
             forth.s:3365   .text:0000000000004f6c $d
             forth.s:3378   .text:0000000000004f84 KTAP
             forth.s:3379   .text:0000000000004f84 TTAP
             forth.s:3380   .text:0000000000004f84 $t
             forth.s:3381   .text:0000000000004f88 $d
             forth.s:3395   .text:0000000000004fc8 KTAP2
             forth.s:3392   .text:0000000000004fc0 KTAP1
             forth.s:3407   .text:0000000000004fe0 _ACCEP
             forth.s:3409   .text:0000000000004fec $d
             forth.s:3412   .text:0000000000004ff8 ACCP1
             forth.s:3428   .text:0000000000005040 ACCP4
             forth.s:3424   .text:0000000000005034 ACCP2
             forth.s:3426   .text:0000000000005038 ACCP3
             forth.s:3439   .text:0000000000005054 _QUERY
             forth.s:3439   .text:000000000000505a $t
             forth.s:3439   .text:000000000000505c QUERY
             forth.s:3441   .text:0000000000005060 $d
             forth.s:3459   .text:0000000000005094 _REFILL
             forth.s:3459   .text:000000000000509c REFILL
             forth.s:3461   .text:00000000000050a0 $d
             forth.s:3475   .text:00000000000050c4 _SAVEINP
             forth.s:3475   .text:00000000000050d0 SAVEINP
             forth.s:3477   .text:00000000000050d4 $d
             forth.s:3490   .text:00000000000050f4 _RESTINP
             forth.s:3490   .text:0000000000005102 $t
             forth.s:3490   .text:0000000000005104 RESTINP
             forth.s:3492   .text:0000000000005108 $d
             forth.s:3511   .text:0000000000005130 _ABORT
             forth.s:3511   .text:0000000000005136 $t
             forth.s:3513   .text:000000000000513c ABORT1
             forth.s:3514   .text:000000000000513c $d
             forth.s:3601   .text:0000000000005244 LBRAC
             forth.s:3535   .text:000000000000517c PRT_ABORT
             forth.s:3536   .text:000000000000517c $t
             forth.s:3537   .text:0000000000005180 $d
             forth.s:3555   .text:00000000000051a8 ABORQ
             forth.s:3556   .text:00000000000051a8 $t
             forth.s:3557   .text:00000000000051ac $d
             forth.s:3579   .text:00000000000051dc _INTER
             forth.s:3581   .text:00000000000051ec $d
             forth.s:3590   .text:0000000000005228 INTE1
             forth.s:3587   .text:000000000000521e $t
             forth.s:3588   .text:0000000000005220 $d
             forth.s:3594   .text:0000000000005238 INTE2
             forth.s:3601   .text:0000000000005240 _LBRAC
ARM GAS  forth.s 			page 262


             forth.s:3601   .text:0000000000005242 $t
             forth.s:3603   .text:0000000000005248 $d
             forth.s:3616   .text:0000000000005270 _DOTOK
             forth.s:3616   .text:0000000000005274 $t
             forth.s:3616   .text:0000000000005274 DOTOK
             forth.s:3618   .text:0000000000005278 $d
             forth.s:3624   .text:000000000000529c DOTO1
             forth.s:3625   .text:000000000000529c $d
             forth.s:3633   .text:00000000000052a8 _QSTAC
             forth.s:3633   .text:00000000000052b0 QSTAC
             forth.s:3635   .text:00000000000052b4 $d
             forth.s:3637   .text:00000000000052ca $t
             forth.s:3638   .text:00000000000052cc $d
             forth.s:3645   .text:00000000000052d4 _EVAL
             forth.s:3647   .text:00000000000052e0 EVAL1
             forth.s:3648   .text:00000000000052e0 $d
             forth.s:3656   .text:0000000000005308 EVAL2
             forth.s:3672   .text:0000000000005318 _EVALUATE
             forth.s:3672   .text:0000000000005324 EVALUATE
             forth.s:3675   .text:0000000000005328 $d
             forth.s:3707   .text:00000000000053a8 _PRESE
             forth.s:3718   .text:00000000000053bc $d
             forth.s:3718   .text:00000000000053c0 _QUIT
             forth.s:3719   .text:00000000000053c8 $d
             forth.s:3721   .text:00000000000053d4 QUIT1
             forth.s:3723   .text:00000000000053d8 QUIT2
             forth.s:3733   .text:00000000000053ec _FORGET
             forth.s:3733   .text:00000000000053f4 FORGET
             forth.s:3735   .text:00000000000053f8 $d
             forth.s:4596   .text:0000000000005e88 OVERT
             forth.s:3762   .text:0000000000005440 $d
             forth.s:3762   .text:0000000000005444 _POSTPONE
             forth.s:3762   .text:0000000000005450 POSTPONE
             forth.s:3764   .text:0000000000005454 $d
             forth.s:3787   .text:000000000000548c ITICK
             forth.s:4639   .text:0000000000005f08 CALLC
             forth.s:3774   .text:0000000000005464 _TICK
             forth.s:3774   .text:0000000000005466 $t
             forth.s:3774   .text:0000000000005468 TICK
             forth.s:3776   .text:000000000000546c $d
             forth.s:3780   .text:0000000000005480 TICK1
             forth.s:3787   .text:0000000000005488 _ITICK
             forth.s:3787   .text:000000000000548c $t
             forth.s:3789   .text:0000000000005490 $d
             forth.s:3804   .text:000000000000549c _FIND
             forth.s:3804   .text:00000000000054a4 FIND
             forth.s:3806   .text:00000000000054a8 $d
             forth.s:3826   .text:00000000000054ec _ALLOT
             forth.s:3826   .text:00000000000054f2 $t
             forth.s:3828   .text:00000000000054f8 $d
             forth.s:3837   .text:0000000000005508 _COMMA
             forth.s:3837   .text:000000000000550a $t
             forth.s:3837   .text:000000000000550c COMMA
             forth.s:3839   .text:0000000000005510 $d
             forth.s:3853   .text:000000000000552c $d
             forth.s:3853   .text:0000000000005530 _CCOMMA
             forth.s:3853   .text:0000000000005534 CCOMMA
ARM GAS  forth.s 			page 263


             forth.s:3855   .text:0000000000005538 $d
             forth.s:3868   .text:0000000000005558 _BCOMP
             forth.s:3868   .text:0000000000005562 $t
             forth.s:3868   .text:0000000000005564 BCOMP
             forth.s:3870   .text:0000000000005568 $d
             forth.s:3880   .text:0000000000005578 _COMPI
             forth.s:3880   .text:0000000000005580 $t
             forth.s:3880   .text:0000000000005580 COMPI
             forth.s:3882   .text:0000000000005584 $d
             forth.s:3898   .text:00000000000055b0 _LITER
             forth.s:3898   .text:00000000000055b8 $t
             forth.s:3900   .text:00000000000055bc $d
             forth.s:3910   .text:00000000000055d0 STRCQ
             forth.s:3911   .text:00000000000055d0 $t
             forth.s:3912   .text:00000000000055d4 $d
             forth.s:3934   .text:000000000000560c _FOR
             forth.s:3934   .text:0000000000005610 $t
             forth.s:3934   .text:0000000000005610 FOR
             forth.s:3936   .text:0000000000005614 $d
             forth.s:3945   .text:000000000000562c _DO
             forth.s:3945   .text:0000000000005630 DO
             forth.s:3947   .text:0000000000005634 $d
             forth.s:3959   .text:0000000000005654 _QDO
             forth.s:3959   .text:0000000000005658 $t
             forth.s:3959   .text:0000000000005658 QDO
             forth.s:3961   .text:000000000000565c $d
             forth.s:3975   .text:00000000000056bc DOPLOOP
             forth.s:3976   .text:00000000000056bc $t
             forth.s:3995   .text:00000000000056e4 $d
             forth.s:3995   .text:00000000000056e8 _PLOOP
             forth.s:3995   .text:00000000000056ee $t
             forth.s:3995   .text:00000000000056f0 PLOOP
             forth.s:3997   .text:00000000000056f4 $d
             forth.s:4016   .text:0000000000005734 resolve_leave
             forth.s:4002   .text:000000000000570c DOLOOP
             forth.s:4003   .text:000000000000570c $t
             forth.s:4018   .text:0000000000005738 $d
             forth.s:4033   .text:0000000000005764 _LOOP
             forth.s:4033   .text:000000000000576c LOOP
             forth.s:4035   .text:0000000000005770 $d
             forth.s:4044   .text:000000000000578c _UNLOOP
             forth.s:4044   .text:0000000000005794 UNLOOP
             forth.s:4053   .text:000000000000579c $d
             forth.s:4053   .text:00000000000057a0 _LEAVE
             forth.s:4053   .text:00000000000057a6 $t
             forth.s:4053   .text:00000000000057a8 LEAVE
             forth.s:4055   .text:00000000000057ac $d
             forth.s:4066   .text:00000000000057dc DOLEAVE
             forth.s:4067   .text:00000000000057dc $t
             forth.s:4078   .text:00000000000057e8 $d
             forth.s:4078   .text:00000000000057ec _BEGIN
             forth.s:4078   .text:00000000000057f2 $t
             forth.s:4078   .text:00000000000057f4 BEGIN
             forth.s:4080   .text:00000000000057f8 $d
             forth.s:4089   .text:0000000000005800 $d
             forth.s:4089   .text:0000000000005804 _FNEXT
             forth.s:4089   .text:000000000000580c FNEXT
ARM GAS  forth.s 			page 264


             forth.s:4091   .text:0000000000005810 $d
             forth.s:4099   .text:0000000000005828 _I
             forth.s:4099   .text:000000000000582a $t
             forth.s:4099   .text:000000000000582c I
             forth.s:4108   .text:0000000000005838 $d
             forth.s:4108   .text:000000000000583c _J
             forth.s:4108   .text:000000000000583e $t
             forth.s:4108   .text:0000000000005840 J
             forth.s:4118   .text:000000000000584c $d
             forth.s:4118   .text:0000000000005850 _UNTIL
             forth.s:4118   .text:0000000000005856 $t
             forth.s:4118   .text:0000000000005858 UNTIL
             forth.s:4120   .text:000000000000585c $d
             forth.s:4129   .text:0000000000005874 _AGAIN
             forth.s:4129   .text:000000000000587a $t
             forth.s:4129   .text:000000000000587c AGAIN
             forth.s:4131   .text:0000000000005880 $d
             forth.s:4140   .text:0000000000005898 _IFF
             forth.s:4140   .text:000000000000589c IFF
             forth.s:4142   .text:00000000000058a0 $d
             forth.s:4154   .text:00000000000058c8 _AHEAD
             forth.s:4154   .text:00000000000058ce $t
             forth.s:4154   .text:00000000000058d0 AHEAD
             forth.s:4156   .text:00000000000058d4 $d
             forth.s:4168   .text:00000000000058fc _REPEA
             forth.s:4168   .text:0000000000005904 REPEA
             forth.s:4170   .text:0000000000005908 $d
             forth.s:4181   .text:0000000000005920 _THENN
             forth.s:4181   .text:0000000000005928 THENN
             forth.s:4183   .text:000000000000592c $d
             forth.s:4194   .text:0000000000005940 _AFT
             forth.s:4194   .text:0000000000005944 $t
             forth.s:4194   .text:0000000000005944 AFT
             forth.s:4196   .text:0000000000005948 $d
             forth.s:4208   .text:0000000000005960 _ELSEE
             forth.s:4208   .text:0000000000005968 ELSEE
             forth.s:4210   .text:000000000000596c $d
             forth.s:4220   .text:0000000000005980 _WHILE
             forth.s:4220   .text:0000000000005986 $t
             forth.s:4220   .text:0000000000005988 WHILE
             forth.s:4222   .text:000000000000598c $d
             forth.s:4232   .text:000000000000599c _CASE
             forth.s:4232   .text:00000000000059a4 CASE
             forth.s:4234   .text:00000000000059a8 $d
             forth.s:4243   .text:00000000000059b8 _OF
             forth.s:4243   .text:00000000000059bc OF
             forth.s:4245   .text:00000000000059c0 $d
             forth.s:4259   .text:00000000000059fc _ENDOF
             forth.s:4259   .text:0000000000005a02 $t
             forth.s:4259   .text:0000000000005a04 ENDOF
             forth.s:4261   .text:0000000000005a08 $d
             forth.s:4277   .text:0000000000005a3c _ENDCASE
             forth.s:4277   .text:0000000000005a44 $t
             forth.s:4277   .text:0000000000005a44 ENDCASE
             forth.s:4279   .text:0000000000005a48 $d
             forth.s:4296   .text:0000000000005a80 _RECURSE
             forth.s:4296   .text:0000000000005a88 $t
ARM GAS  forth.s 			page 265


             forth.s:4296   .text:0000000000005a88 RECURSE
             forth.s:4298   .text:0000000000005a8c $d
             forth.s:4310   .text:0000000000005aa4 _ABRTQ
             forth.s:4310   .text:0000000000005aac ABRTQ
             forth.s:4312   .text:0000000000005ab0 $d
             forth.s:4322   .text:0000000000005ac8 _STRQ
             forth.s:4322   .text:0000000000005acc STRQ
             forth.s:4324   .text:0000000000005ad0 $d
             forth.s:4334   .text:0000000000005ae8 _STRSLHQ
             forth.s:4334   .text:0000000000005aec $t
             forth.s:4334   .text:0000000000005aec STRSLHQ
             forth.s:4336   .text:0000000000005af0 $d
             forth.s:4366   .text:0000000000005b88 GETC
             forth.s:4380   .text:0000000000005ba6 ESCAPE
             forth.s:4367   .text:0000000000005b88 $t
             forth.s:4382   .text:0000000000005baa $d
             forth.s:4415   .text:0000000000005c56 PARSE_HEX
             forth.s:4448   .text:0000000000005cda esc_char
             forth.s:4416   .text:0000000000005c56 $t
             forth.s:4417   .text:0000000000005c5a $d
             forth.s:4434   .text:0000000000005ca2 TO_HEX
             forth.s:4435   .text:0000000000005ca2 $t
             forth.s:4436   .text:0000000000005ca6 $d
             forth.s:4457   .text:0000000000005cf3 STRCSLHQ
             forth.s:4468   .text:0000000000005cf7 _CSTRQ
             forth.s:4468   .text:0000000000005cfa $t
             forth.s:4468   .text:0000000000005cfc CSTRQ
             forth.s:4470   .text:0000000000005d00 $d
             forth.s:4483   .text:0000000000005d30 _DOTQ
             forth.s:4483   .text:0000000000005d34 DOTQ
             forth.s:4485   .text:0000000000005d38 $d
             forth.s:4499   .text:0000000000005d50 _UNIQU
             forth.s:4499   .text:0000000000005d58 $t
             forth.s:4499   .text:0000000000005d58 UNIQU
             forth.s:4501   .text:0000000000005d5c $d
             forth.s:4508   .text:0000000000005d84 UNIQ1
             forth.s:4505   .text:0000000000005d78 $d
             forth.s:4518   .text:0000000000005d8c SNAME
             forth.s:4519   .text:0000000000005d8c $t
             forth.s:4520   .text:0000000000005d90 $d
             forth.s:4536   .text:0000000000005dd4 SNAM1
             forth.s:4548   .text:0000000000005de8 _SCOMP
             forth.s:4548   .text:0000000000005df4 SCOMP
             forth.s:4550   .text:0000000000005df8 $d
             forth.s:4562   .text:0000000000005e30 SCOM2
             forth.s:4559   .text:0000000000005e28 SCOM1
             forth.s:4567   .text:0000000000005e44 SCOM3
             forth.s:4576   .text:0000000000005e4c COLON_ABORT
             forth.s:4577   .text:0000000000005e4c $t
             forth.s:4578   .text:0000000000005e50 $d
             forth.s:4596   .text:0000000000005e80 _OVERT
             forth.s:4596   .text:0000000000005e86 $t
             forth.s:4598   .text:0000000000005e8c $d
             forth.s:4609   .text:0000000000005ea4 _SEMIS
             forth.s:4609   .text:0000000000005ea6 $t
             forth.s:4609   .text:0000000000005ea8 SEMIS
             forth.s:4611   .text:0000000000005eac $d
ARM GAS  forth.s 			page 266


             forth.s:4624   .text:0000000000005ecc _RBRAC
             forth.s:4624   .text:0000000000005ece $t
             forth.s:4624   .text:0000000000005ed0 RBRAC
             forth.s:4626   .text:0000000000005ed4 $d
             forth.s:4639   .text:0000000000005efc _CALLC
             forth.s:4641   .text:0000000000005f0c $d
             forth.s:4655   .text:0000000000005f24 _BUFFERCOL
             forth.s:4655   .text:0000000000005f2c $t
             forth.s:4655   .text:0000000000005f2c BUFFERCOL
             forth.s:4657   .text:0000000000005f30 $d
             forth.s:4839   .text:0000000000006158 CREAT
             forth.s:4674   .text:0000000000005f5c _COLON
             forth.s:4674   .text:0000000000005f5e $t
             forth.s:4674   .text:0000000000005f60 COLON
             forth.s:4676   .text:0000000000005f64 $d
             forth.s:4688   .text:0000000000005f80 _IMMED
             forth.s:4688   .text:0000000000005f8a $t
             forth.s:4688   .text:0000000000005f8c IMMED
             forth.s:4690   .text:0000000000005f90 $d
             forth.s:4704   .text:0000000000005fb8 $t
             forth.s:4710   .text:0000000000005fb8 DODOES
             forth.s:4712   .text:0000000000005fbc $d
             forth.s:5152   .text:0000000000006544 TOVECTOR
             forth.s:4728   .text:0000000000005fe4 $d
             forth.s:4728   .text:0000000000005fe8 _DOES
             forth.s:4728   .text:0000000000005fee $t
             forth.s:4728   .text:0000000000005ff0 DOES
             forth.s:4730   .text:0000000000005ff4 $d
             forth.s:4740   .text:0000000000006018 _DEFERAT
             forth.s:4740   .text:0000000000006020 DEFERAT
             forth.s:4742   .text:0000000000006024 $d
             forth.s:4751   .text:0000000000006034 _ACTIONOF
             forth.s:4751   .text:000000000000603e $t
             forth.s:4751   .text:0000000000006040 ACTIONOF
             forth.s:4753   .text:0000000000006044 $d
             forth.s:4766   .text:0000000000006068 _DEFERSTO
             forth.s:4766   .text:0000000000006070 DEFERSTO
             forth.s:4768   .text:0000000000006074 $d
             forth.s:4778   .text:0000000000006090 _DEFER
             forth.s:4778   .text:0000000000006096 $t
             forth.s:4778   .text:0000000000006098 DEFER
             forth.s:4780   .text:000000000000609c $d
             forth.s:4790   .text:00000000000060c0 NO_ACTION
             forth.s:4791   .text:00000000000060c0 $t
             forth.s:4792   .text:00000000000060c4 $d
             forth.s:4794   .text:00000000000060e0 $d
             forth.s:4804   .text:00000000000060e8 _NONAME
             forth.s:4804   .text:00000000000060f0 $t
             forth.s:4804   .text:00000000000060f0 NONAME
             forth.s:4806   .text:00000000000060f4 $d
             forth.s:4819   .text:0000000000006108 _IS
             forth.s:4819   .text:000000000000610c IS
             forth.s:4821   .text:0000000000006110 $d
             forth.s:4839   .text:0000000000006150 _CREAT
             forth.s:4841   .text:000000000000615c $d
             forth.s:4856   .text:0000000000006198 DOVAR
             forth.s:4857   .text:0000000000006198 $t
ARM GAS  forth.s 			page 267


             forth.s:4868   .text:00000000000061a6 $d
             forth.s:4868   .text:00000000000061aa _VARIA
             forth.s:4868   .text:00000000000061b4 VARIA
             forth.s:4870   .text:00000000000061b8 $d
             forth.s:4880   .text:00000000000061cc DOCON
             forth.s:4881   .text:00000000000061cc $t
             forth.s:4892   .text:00000000000061d8 $d
             forth.s:4892   .text:00000000000061dc _VALUE
             forth.s:4892   .text:00000000000061e2 $t
             forth.s:4892   .text:00000000000061e4 VALUE
             forth.s:4894   .text:00000000000061e8 $d
             forth.s:4910   .text:0000000000006220 _TO
             forth.s:4910   .text:0000000000006224 TO
             forth.s:4912   .text:0000000000006228 $d
             forth.s:4924   .text:0000000000006248 _CONST
             forth.s:4924   .text:0000000000006254 CONST
             forth.s:4926   .text:0000000000006258 $d
             forth.s:4948   .text:0000000000006288 DMP
             forth.s:4949   .text:0000000000006288 $t
             forth.s:4950   .text:000000000000628c $d
             forth.s:4968   .text:00000000000062e0 PDUM2
             forth.s:4962   .text:00000000000062c8 PDUM1
             forth.s:4983   .text:00000000000062f8 $d
             forth.s:4983   .text:00000000000062fc _DUMP
             forth.s:4983   .text:0000000000006304 DUMP
             forth.s:4985   .text:0000000000006308 $d
             forth.s:5011   .text:0000000000006384 DUMP4
             forth.s:5001   .text:000000000000635c DUMP1
             forth.s:5013   .text:000000000000638c DUMP3
             forth.s:5026   .text:00000000000063a0 TDOT
             forth.s:5027   .text:00000000000063a0 $t
             forth.s:5028   .text:00000000000063a4 $d
             forth.s:5067   .text:0000000000006438 _DOTS
             forth.s:5067   .text:000000000000643c DOTS
             forth.s:5069   .text:0000000000006440 $d
             forth.s:5076   .text:000000000000645c DOTS2
             forth.s:5072   .text:0000000000006450 DOTS1
             forth.s:5081   .text:000000000000646c RBASE
             forth.s:5082   .text:000000000000646c $t
             forth.s:5090   .text:000000000000647c RDOT
             forth.s:5092   .text:0000000000006480 $d
             forth.s:5119   .text:00000000000064e4 _TRACE
             forth.s:5119   .text:00000000000064ea $t
             forth.s:5119   .text:00000000000064ec TRACE
             forth.s:5121   .text:00000000000064f0 $d
             forth.s:5140   .text:0000000000006534 _TOBODY
             forth.s:5140   .text:000000000000653a $t
             forth.s:5140   .text:000000000000653c TOBODY
             forth.s:5161   .text:000000000000654c $d
             forth.s:5161   .text:0000000000006550 _TONFA
             forth.s:5161   .text:0000000000006558 TONFA
             forth.s:5163   .text:000000000000655c $d
             forth.s:5166   .text:0000000000006568 TNAM1
             forth.s:5177   .text:000000000000659c TNAM2
             forth.s:5187   .text:00000000000065ac _DOTID
             forth.s:5187   .text:00000000000065b0 $t
             forth.s:5187   .text:00000000000065b0 DOTID
ARM GAS  forth.s 			page 268


             forth.s:5189   .text:00000000000065b4 $d
             forth.s:5197   .text:00000000000065d8 DOTI1
             forth.s:5198   .text:00000000000065e6 $t
             forth.s:5199   .text:00000000000065e8 $d
             forth.s:5201   *ABS*:0000000000000000 WANT_SEE
             forth.s:5274   .text:00000000000065f0 _WORDS
             forth.s:5274   .text:00000000000065f6 $t
             forth.s:5274   .text:00000000000065f8 WORDS
             forth.s:5276   .text:00000000000065fc $d
             forth.s:5281   .text:0000000000006614 WORS1
             forth.s:5319   .text:00000000000066c8 WORS2
             forth.s:5330   .text:00000000000066d8 _MARKER
             forth.s:5330   .text:00000000000066e0 MARKER
             forth.s:5332   .text:00000000000066e4 $d
             forth.s:5335   .text:00000000000066f0 $t
             forth.s:5336   .text:00000000000066f4 $d
             forth.s:5351   .text:0000000000006724 _ARRAY
             forth.s:5351   .text:000000000000672a $t
             forth.s:5351   .text:000000000000672c ARRAY
             forth.s:5353   .text:0000000000006730 $d
             forth.s:5367   .text:000000000000676c DO_ARRAY
             forth.s:5368   .text:000000000000676c $t
             forth.s:5369   .text:0000000000006770 $d
             forth.s:5387   .text:000000000000678c VERSN
             forth.s:5388   .text:000000000000678c $t
             forth.s:5389   .text:0000000000006790 $d
             forth.s:5397   .text:00000000000067a0 _HI
             forth.s:5397   .text:00000000000067a4 HI
             forth.s:5399   .text:00000000000067a8 $d
             forth.s:5400   .text:00000000000067c2 $t
             forth.s:5401   .text:00000000000067c4 $d
             forth.s:5425   .text:0000000000006810 $t
             forth.s:5426   .text:0000000000006814 $d
             forth.s:5438   .text:0000000000006830 PS2_QUERY
             forth.s:5439   .text:0000000000006830 $t
             forth.s:5440   .text:0000000000006834 $d
             forth.s:5454   .text:000000000000689a $t
             forth.s:5455   .text:000000000000689c $d
             forth.s:5465   .text:00000000000068a8 IF_SENSE
             forth.s:5466   .text:00000000000068a8 $t
             forth.s:5467   .text:00000000000068ac $d
             forth.s:5481   .text:00000000000068dc READY
             forth.s:5482   .text:00000000000068dc $t
             forth.s:5483   .text:00000000000068e0 $d
             forth.s:5483   .text:00000000000068ea $t
             forth.s:5484   .text:00000000000068ec $d
             forth.s:5502   .text:0000000000006914 COLD1
             forth.s:5503   .text:0000000000006914 $d
             forth.s:5518   .text:0000000000006964 COLD2
             forth.s:5521   .text:0000000000006964 $d
             forth.s:5524   .text:0000000000006968 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
ARM GAS  forth.s 			page 269


              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
       environment.s:32     .text:0000000000000971 $d
       environment.s:32     .text:0000000000000972 $t
       environment.s:107    .text:0000000000000a0f $d
       environment.s:107    .text:0000000000000a10 $t
       environment.s:141    .text:0000000000000a57 $d
       environment.s:141    .text:0000000000000a58 $t
       environment.s:187    .text:0000000000000abd $d
       environment.s:187    .text:0000000000000abe $t
       environment.s:201    .text:0000000000000ae9 $d
       environment.s:201    .text:0000000000000aea $t
          ser-term.s:90     .text:0000000000000baf $d
          ser-term.s:90     .text:0000000000000bb0 $t
          ser-term.s:110    .text:0000000000000be9 $d
          ser-term.s:110    .text:0000000000000bea $t
          ser-term.s:133    .text:0000000000000c27 $d
          ser-term.s:133    .text:0000000000000c28 $t
          ser-term.s:164    .text:0000000000000c6f $d
          ser-term.s:164    .text:0000000000000c70 $t
          ser-term.s:191    .text:0000000000000ce5 $d
          ser-term.s:191    .text:0000000000000ce6 $t
          ser-term.s:203    .text:0000000000000d13 $d
          ser-term.s:203    .text:0000000000000d14 $t
             tvout.s:264    .text:0000000000000f5f $d
             tvout.s:264    .text:0000000000000f60 $t
             tvout.s:278    .text:0000000000000f93 $d
             tvout.s:278    .text:0000000000000f94 $t
             tvout.s:306    .text:0000000000000fed $d
             tvout.s:306    .text:0000000000000fee $t
             tvout.s:325    .text:000000000000101b $d
             tvout.s:325    .text:000000000000101c $t
             tvout.s:427    .text:0000000000001155 $d
             tvout.s:427    .text:0000000000001156 $t
             tvout.s:448    .text:00000000000011af $d
             tvout.s:448    .text:00000000000011b0 $t
             tvout.s:495    .text:0000000000001245 $d
             tvout.s:495    .text:0000000000001246 $t
           ps2_kbd.s:307    .text:0000000000001933 $d
           ps2_kbd.s:307    .text:0000000000001934 $t
           ps2_kbd.s:396    .text:0000000000001a2f $d
           ps2_kbd.s:396    .text:0000000000001a30 $t
           ps2_kbd.s:616    .text:0000000000001cd1 $d
           ps2_kbd.s:616    .text:0000000000001cd2 $t
           ps2_kbd.s:633    .text:0000000000001d0b $d
           ps2_kbd.s:633    .text:0000000000001d0c $t
         spi-flash.s:87     .text:0000000000001df7 $d
         spi-flash.s:87     .text:0000000000001df8 $t
         spi-flash.s:206    .text:0000000000001f7b $d
         spi-flash.s:206    .text:0000000000001f7c $t
         spi-flash.s:281    .text:0000000000002089 $d
         spi-flash.s:281    .text:000000000000208a $t
         spi-flash.s:315    .text:00000000000020fb $d
ARM GAS  forth.s 			page 270


         spi-flash.s:315    .text:00000000000020fc $t
         spi-flash.s:333    .text:0000000000002137 $d
         spi-flash.s:333    .text:0000000000002138 $t
         spi-flash.s:355    .text:000000000000218b $d
         spi-flash.s:355    .text:000000000000218c $t
         spi-flash.s:401    .text:0000000000002203 $d
         spi-flash.s:401    .text:0000000000002204 $t
               fpu.s:222    .text:0000000000002413 $d
               fpu.s:222    .text:0000000000002414 $t
               fpu.s:235    .text:0000000000002433 $d
               fpu.s:235    .text:0000000000002434 $t
               fpu.s:249    .text:0000000000002453 $d
               fpu.s:249    .text:0000000000002454 $t
               fpu.s:262    .text:0000000000002473 $d
               fpu.s:262    .text:0000000000002474 $t
               fpu.s:285    .text:00000000000024b1 $d
               fpu.s:285    .text:00000000000024b2 $t
               fpu.s:297    .text:00000000000024d1 $d
               fpu.s:297    .text:00000000000024d2 $t
               fpu.s:319    .text:000000000000250b $d
               fpu.s:319    .text:000000000000250c $t
               fpu.s:330    .text:0000000000002527 $d
               fpu.s:330    .text:0000000000002528 $t
               fpu.s:340    .text:0000000000002541 $d
               fpu.s:340    .text:0000000000002542 $t
               fpu.s:353    .text:0000000000002571 $d
               fpu.s:353    .text:0000000000002572 $t
               fpu.s:379    .text:00000000000025c1 $d
               fpu.s:379    .text:00000000000025c2 $t
               fpu.s:403    .text:000000000000260b $d
               fpu.s:403    .text:000000000000260c $t
               fpu.s:421    .text:000000000000263d $d
               fpu.s:421    .text:000000000000263e $t
               fpu.s:431    .text:0000000000002659 $d
               fpu.s:431    .text:000000000000265a $t
            strtof.s:224    .text:00000000000028d3 $d
            strtof.s:224    .text:00000000000028d4 $t
              ftoa.s:423    .text:0000000000002f67 $d
              ftoa.s:423    .text:0000000000002f68 $t
             forth.s:133    .text:0000000000003013 $d
             forth.s:133    .text:0000000000003014 $t
             forth.s:145    .text:0000000000003033 $d
             forth.s:145    .text:0000000000003034 $t
             forth.s:157    .text:0000000000003053 $d
             forth.s:157    .text:0000000000003054 $t
             forth.s:192    .text:000000000000308d $d
             forth.s:192    .text:000000000000308e $t
             forth.s:228    .text:00000000000030ab $d
             forth.s:228    .text:00000000000030ac $t
             forth.s:259    .text:0000000000003123 $d
             forth.s:259    .text:0000000000003124 $t
             forth.s:275    .text:0000000000003155 $d
             forth.s:275    .text:0000000000003156 $t
             forth.s:292    .text:0000000000003183 $d
             forth.s:292    .text:0000000000003184 $t
             forth.s:306    .text:00000000000031ad $d
             forth.s:306    .text:00000000000031ae $t
ARM GAS  forth.s 			page 271


             forth.s:418    .text:0000000000003265 $d
             forth.s:418    .text:0000000000003266 $t
             forth.s:444    .text:000000000000328f $d
             forth.s:444    .text:0000000000003290 $t
             forth.s:454    .text:00000000000032a3 $d
             forth.s:454    .text:00000000000032a4 $t
             forth.s:463    .text:00000000000032af $d
             forth.s:463    .text:00000000000032b0 $t
             forth.s:484    .text:00000000000032e1 $d
             forth.s:484    .text:00000000000032e2 $t
             forth.s:505    .text:0000000000003311 $d
             forth.s:505    .text:0000000000003312 $t
             forth.s:562    .text:0000000000003385 $d
             forth.s:562    .text:0000000000003386 $t
             forth.s:587    .text:00000000000033b7 $d
             forth.s:587    .text:00000000000033b8 $t
             forth.s:612    .text:00000000000033e5 $d
             forth.s:612    .text:00000000000033e6 $t
             forth.s:635    .text:0000000000003415 $d
             forth.s:635    .text:0000000000003416 $t
             forth.s:643    .text:0000000000003425 $d
             forth.s:643    .text:0000000000003426 $t
             forth.s:664    .text:000000000000344b $d
             forth.s:664    .text:000000000000344c $t
             forth.s:685    .text:0000000000003475 $d
             forth.s:685    .text:0000000000003476 $t
             forth.s:715    .text:00000000000034bb $d
             forth.s:715    .text:00000000000034bc $t
             forth.s:724    .text:00000000000034d1 $d
             forth.s:724    .text:00000000000034d2 $t
             forth.s:772    .text:000000000000352b $d
             forth.s:772    .text:000000000000352c $t
             forth.s:783    .text:000000000000353f $d
             forth.s:783    .text:0000000000003540 $t
             forth.s:791    .text:000000000000354d $d
             forth.s:791    .text:000000000000354e $t
             forth.s:799    .text:000000000000355d $d
             forth.s:799    .text:000000000000355e $t
             forth.s:807    .text:000000000000356d $d
             forth.s:807    .text:000000000000356e $t
             forth.s:831    .text:000000000000359d $d
             forth.s:831    .text:000000000000359e $t
             forth.s:856    .text:00000000000035d1 $d
             forth.s:856    .text:00000000000035d2 $t
             forth.s:864    .text:00000000000035e1 $d
             forth.s:864    .text:00000000000035e2 $t
             forth.s:872    .text:00000000000035f3 $d
             forth.s:872    .text:00000000000035f4 $t
             forth.s:882    .text:0000000000003607 $d
             forth.s:882    .text:0000000000003608 $t
             forth.s:891    .text:0000000000003619 $d
             forth.s:891    .text:000000000000361a $t
             forth.s:945    .text:000000000000369f $d
             forth.s:945    .text:00000000000036a0 $t
             forth.s:974    .text:00000000000036db $d
             forth.s:974    .text:00000000000036dc $t
             forth.s:984    .text:00000000000036ef $d
ARM GAS  forth.s 			page 272


             forth.s:984    .text:00000000000036f0 $t
             forth.s:997    .text:000000000000370d $d
             forth.s:997    .text:000000000000370e $t
             forth.s:1042   .text:0000000000003775 $d
             forth.s:1042   .text:0000000000003776 $t
             forth.s:1050   .text:0000000000003789 $d
             forth.s:1050   .text:000000000000378a $t
             forth.s:1101   .text:00000000000037f9 $d
             forth.s:1101   .text:00000000000037fa $t
             forth.s:1112   .text:0000000000003813 $d
             forth.s:1112   .text:0000000000003814 $t
             forth.s:1135   .text:0000000000003845 $d
             forth.s:1135   .text:0000000000003846 $t
             forth.s:1148   .text:0000000000003869 $d
             forth.s:1148   .text:000000000000386a $t
             forth.s:1172   .text:000000000000389d $d
             forth.s:1172   .text:000000000000389e $t
             forth.s:1218   .text:0000000000003901 $d
             forth.s:1218   .text:0000000000003902 $t
             forth.s:1230   .text:000000000000391d $d
             forth.s:1230   .text:000000000000391e $t
             forth.s:1242   .text:000000000000393d $d
             forth.s:1242   .text:000000000000393e $t
             forth.s:1293   .text:00000000000039a5 $d
             forth.s:1293   .text:00000000000039a6 $t
             forth.s:1330   .text:0000000000003a01 $d
             forth.s:1330   .text:0000000000003a02 $t
             forth.s:1360   .text:0000000000003a3d $d
             forth.s:1360   .text:0000000000003a3e $t
             forth.s:1379   .text:0000000000003a69 $d
             forth.s:1379   .text:0000000000003a6a $t
             forth.s:1419   .text:0000000000003ac3 $d
             forth.s:1419   .text:0000000000003ac4 $t
             forth.s:1430   .text:0000000000003adb $d
             forth.s:1430   .text:0000000000003adc $t
             forth.s:1452   .text:0000000000003b11 $d
             forth.s:1452   .text:0000000000003b12 $t
             forth.s:1466   .text:0000000000003b2f $d
             forth.s:1466   .text:0000000000003b30 $t
             forth.s:1477   .text:0000000000003b4d $d
             forth.s:1477   .text:0000000000003b4e $t
             forth.s:1506   .text:0000000000003ba5 $d
             forth.s:1506   .text:0000000000003ba6 $t
             forth.s:1521   .text:0000000000003bc3 $d
             forth.s:1521   .text:0000000000003bc4 $t
             forth.s:1538   .text:0000000000003bef $d
             forth.s:1538   .text:0000000000003bf0 $t
             forth.s:1568   .text:0000000000003c2b $d
             forth.s:1568   .text:0000000000003c2c $t
             forth.s:1608   .text:0000000000003ca3 $d
             forth.s:1608   .text:0000000000003ca4 $t
             forth.s:1717   .text:0000000000003dcf $d
             forth.s:1717   .text:0000000000003dd0 $t
             forth.s:1739   .text:0000000000003e1b $d
             forth.s:1739   .text:0000000000003e1c $t
             forth.s:1788   .text:0000000000003e5b $d
             forth.s:1788   .text:0000000000003e5c $t
ARM GAS  forth.s 			page 273


             forth.s:1839   .text:0000000000003ed3 $d
             forth.s:1839   .text:0000000000003ed4 $t
             forth.s:1931   .text:0000000000003fbd $d
             forth.s:1931   .text:0000000000003fbe $t
             forth.s:1959   .text:0000000000003ff1 $d
             forth.s:1959   .text:0000000000003ff2 $t
             forth.s:2006   .text:0000000000004059 $d
             forth.s:2006   .text:000000000000405a $t
             forth.s:2017   .text:000000000000407d $d
             forth.s:2017   .text:000000000000407e $t
             forth.s:2054   .text:00000000000040d5 $d
             forth.s:2054   .text:00000000000040d6 $t
             forth.s:2095   .text:0000000000004129 $d
             forth.s:2095   .text:000000000000412a $t
             forth.s:2191   .text:0000000000004243 $d
             forth.s:2191   .text:0000000000004244 $t
             forth.s:2203   .text:0000000000004261 $d
             forth.s:2203   .text:0000000000004262 $t
             forth.s:2255   .text:00000000000042e7 $d
             forth.s:2255   .text:00000000000042e8 $t
             forth.s:2273   .text:0000000000004319 $d
             forth.s:2273   .text:000000000000431a $t
             forth.s:2287   .text:0000000000004343 $d
             forth.s:2287   .text:0000000000004344 $t
             forth.s:2365   .text:00000000000043ff $d
             forth.s:2365   .text:0000000000004400 $t
             forth.s:2534   .text:00000000000045bd $d
             forth.s:2534   .text:00000000000045be $t
             forth.s:2625   .text:00000000000046cf $d
             forth.s:2625   .text:00000000000046d0 $t
             forth.s:2642   .text:0000000000004705 $d
             forth.s:2642   .text:0000000000004706 $t
             forth.s:2677   .text:000000000000476f $d
             forth.s:2677   .text:0000000000004770 $t
             forth.s:2772   .text:0000000000004863 $d
             forth.s:2772   .text:0000000000004864 $t
             forth.s:2809   .text:00000000000048c7 $d
             forth.s:2809   .text:00000000000048c8 $t
             forth.s:2873   .text:000000000000497b $d
             forth.s:2873   .text:000000000000497c $t
             forth.s:2904   .text:00000000000049d3 $d
             forth.s:2904   .text:00000000000049d4 $t
             forth.s:3048   .text:0000000000004bb3 $d
             forth.s:3048   .text:0000000000004bb4 $t
             forth.s:3060   .text:0000000000004bcb $d
             forth.s:3060   .text:0000000000004bcc $t
             forth.s:3099   .text:0000000000004c2d $d
             forth.s:3099   .text:0000000000004c2e $t
             forth.s:3111   .text:0000000000004c53 $d
             forth.s:3111   .text:0000000000004c54 $t
             forth.s:3122   .text:0000000000004c6d $d
             forth.s:3122   .text:0000000000004c6e $t
             forth.s:3152   .text:0000000000004cb1 $d
             forth.s:3152   .text:0000000000004cb2 $t
             forth.s:3407   .text:0000000000004fe7 $d
             forth.s:3407   .text:0000000000004fe8 $t
             forth.s:3459   .text:000000000000509b $d
ARM GAS  forth.s 			page 274


             forth.s:3459   .text:000000000000509c $t
             forth.s:3475   .text:00000000000050cf $d
             forth.s:3475   .text:00000000000050d0 $t
             forth.s:3579   .text:00000000000051e7 $d
             forth.s:3579   .text:00000000000051e8 $t
             forth.s:3633   .text:00000000000052af $d
             forth.s:3633   .text:00000000000052b0 $t
             forth.s:3645   .text:00000000000052d9 $d
             forth.s:3645   .text:00000000000052da $t
             forth.s:3672   .text:0000000000005321 $d
             forth.s:3672   .text:0000000000005322 $t
             forth.s:3707   .text:00000000000053af $d
             forth.s:3707   .text:00000000000053b0 $t
             forth.s:3718   .text:00000000000053c5 $d
             forth.s:3718   .text:00000000000053c6 $t
             forth.s:3733   .text:00000000000053f3 $d
             forth.s:3733   .text:00000000000053f4 $t
             forth.s:3762   .text:000000000000544d $d
             forth.s:3762   .text:000000000000544e $t
             forth.s:3804   .text:00000000000054a1 $d
             forth.s:3804   .text:00000000000054a2 $t
             forth.s:3853   .text:0000000000005533 $d
             forth.s:3853   .text:0000000000005534 $t
             forth.s:3945   .text:000000000000562f $d
             forth.s:3945   .text:0000000000005630 $t
             forth.s:4033   .text:0000000000005769 $d
             forth.s:4033   .text:000000000000576a $t
             forth.s:4044   .text:0000000000005793 $d
             forth.s:4044   .text:0000000000005794 $t
             forth.s:4089   .text:0000000000005809 $d
             forth.s:4089   .text:000000000000580a $t
             forth.s:4140   .text:000000000000589b $d
             forth.s:4140   .text:000000000000589c $t
             forth.s:4168   .text:0000000000005903 $d
             forth.s:4168   .text:0000000000005904 $t
             forth.s:4181   .text:0000000000005925 $d
             forth.s:4181   .text:0000000000005926 $t
             forth.s:4208   .text:0000000000005965 $d
             forth.s:4208   .text:0000000000005966 $t
             forth.s:4232   .text:00000000000059a1 $d
             forth.s:4232   .text:00000000000059a2 $t
             forth.s:4243   .text:00000000000059bb $d
             forth.s:4243   .text:00000000000059bc $t
             forth.s:4310   .text:0000000000005aab $d
             forth.s:4310   .text:0000000000005aac $t
             forth.s:4322   .text:0000000000005acb $d
             forth.s:4322   .text:0000000000005acc $t
             forth.s:4483   .text:0000000000005d33 $d
             forth.s:4483   .text:0000000000005d34 $t
             forth.s:4548   .text:0000000000005df1 $d
             forth.s:4548   .text:0000000000005df2 $t
             forth.s:4639   .text:0000000000005f05 $d
             forth.s:4639   .text:0000000000005f06 $t
             forth.s:4740   .text:000000000000601f $d
             forth.s:4740   .text:0000000000006020 $t
             forth.s:4766   .text:000000000000606f $d
             forth.s:4766   .text:0000000000006070 $t
ARM GAS  forth.s 			page 275


             forth.s:4819   .text:000000000000610b $d
             forth.s:4819   .text:000000000000610c $t
             forth.s:4839   .text:0000000000006157 $d
             forth.s:4839   .text:0000000000006158 $t
             forth.s:4868   .text:00000000000061b3 $d
             forth.s:4868   .text:00000000000061b4 $t
             forth.s:4910   .text:0000000000006223 $d
             forth.s:4910   .text:0000000000006224 $t
             forth.s:4924   .text:0000000000006251 $d
             forth.s:4924   .text:0000000000006252 $t
             forth.s:4983   .text:0000000000006301 $d
             forth.s:4983   .text:0000000000006302 $t
             forth.s:5067   .text:000000000000643b $d
             forth.s:5067   .text:000000000000643c $t
             forth.s:5161   .text:0000000000006555 $d
             forth.s:5161   .text:0000000000006556 $t
             forth.s:5330   .text:00000000000066df $d
             forth.s:5330   .text:00000000000066e0 $t
             forth.s:5397   .text:00000000000067a3 $d
             forth.s:5397   .text:00000000000067a4 $t
             forth.s:5496   .text:00000000000068fd $d
             forth.s:5496   .text:00000000000068fe $t

UNDEFINED SYMBOLS
_mstack
