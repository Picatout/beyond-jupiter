ARM GAS  forth.s 			page 1


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/**********************************
  22              	   Hardware initialization
  23              	**********************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
ARM GAS  forth.s 			page 2


  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
ARM GAS  forth.s 			page 3


  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
ARM GAS  forth.s 			page 4


 142              	    .equ USART_CR1,12
 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	   
 179              	   /* NVIC block */
 180              	   .equ NVIC_BASE_ADR, 0xE000E000
 181              	   .equ NVIC_ISER0, 0x100
 182              	   .equ NVIC_ISER1, 0x104
 183              	   .equ NVIC_ISER2, 0x108
 184              	   .equ NVIC_ISER3, 0x10c
 185              	   .equ NVIC_ISER4, 0x110
 186              	   .equ NVIC_ISER5, 0x114
 187              	   .equ NVIC_ISER6, 0x118
 188              	   .equ NVIC_ISER7, 0x11c
 189              	   .equ NVIC_ICER0, 0x180
 190              	   .equ NVIC_ICER1, 0x184 
 191              	   .equ NVIC_ICER2, 0x188 
 192              	   .equ NVIC_ICER3, 0x18C 
 193              	   .equ NVIC_ICER4, 0x190 
 194              	   .equ NVIC_ICER5, 0x194 
 195              	   .equ NVIC_ICER6, 0x198 
 196              	   .equ NVIC_ICER7, 0x19C 
 197              	   .equ NVIC_ISPR0, 0x200
 198              	   .equ NVIC_ISPR1, 0x204
ARM GAS  forth.s 			page 5


 199              	   .equ NVIC_ISPR2, 0x208 
 200              	   .equ NVIC_ISPR3, 0x20c 
 201              	   .equ NVIC_ISPR4, 0x210 
 202              	   .equ NVIC_ISPR5, 0x214 
 203              	   .equ NVIC_ISPR6, 0x218 
 204              	   .equ NVIC_ISPR7, 0x21c 
 205              	   .equ NVIC_ICPR0, 0x280
 206              	   .equ NVIC_ICPR1, 0x284
 207              	   .equ NVIC_ICPR2, 0x288
 208              	   .equ NVIC_ICPR3, 0x28c
 209              	   .equ NVIC_ICPR4, 0x290
 210              	   .equ NVIC_ICPR5, 0x294
 211              	   .equ NVIC_ICPR6, 0x298
 212              	   .equ NVIC_ICPR7, 0x29c
 213              	   .equ NVIC_IABR0, 0x300
 214              	   .equ NVIC_IABR1, 0x304
 215              	   .equ NVIC_IABR2, 0x308
 216              	   .equ NVIC_IABR3, 0x30c
 217              	   .equ NVIC_IABR4, 0x310
 218              	   .equ NVIC_IABR5, 0x314
 219              	   .equ NVIC_IABR6, 0x318
 220              	   .equ NVIC_IABR7, 0x31c
 221              	/*  NVIC_IPR0 - NVIC_IPR59 */
 222              	   .equ NVIC_IPR_BASE, 0xE000E400 
 223              	
 224              	/*  IRQ number */
 225              	   .equ NMI_IRQ, (-14) // non maskable
 226              	   .equ HF_IRQ, (-13)  // hard fault
 227              	   .equ MM_IRQ, (-12)  // memory Management
 228              	   .equ BF_IRQ, (-11)  // bus fault 
 229              	   .equ UF_IRQ, (-10)  // usage fault 
 230              	   .equ SVC_IRQ, (-5)  // service call 
 231              	   .equ DM_IRQ, (-4)  // debug monitor
 232              	   .equ PSV_IRQ, (-2) // pending service 
 233              	   .equ STCK_IRQ, (-1) // systick 
 234              	   .equ WWDG_IRQ, (0) // window watchdog 
 235              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 236              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 237              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 238              	   .equ FLASH_IRQ, (4) // flash global 
 239              	   .equ RCC_IRQ, (5)  // real time clock 
 240              	   .equ EXTI0_IRQ, (6) // 
 241              	   .equ EXTI1_IRQ, (7)
 242              	   .equ EXTI2_IRQ, (8)
 243              	   .equ EXTI3_IRQ, (9)
 244              	   .equ EXTI4_IRQ, (10)
 245              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 246              	   .equ DMA1S1_IRQ, (12)
 247              	   .equ DMA1S2_IRQ, (13)
 248              	   .equ DMA1S3_IRQ, (14)
 249              	   .equ DMA1S4_IRQ, (15)
 250              	   .equ DMA1S5_IRQ, (16)
 251              	   .equ DMA1S6_IRQ, (17)
 252              	   .equ ADC_IRQ, (18)
 253              	   .equ EXIT9_5_IRQ, (23)
 254              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 255              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
ARM GAS  forth.s 			page 6


 256              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 257              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 258              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 259              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 260              	   .equ TIM4_IRQ, (30) // TIMER4 global
 261              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 262              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 263              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 264              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 265              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 266              	   .equ SPI2_IRQ, (36)  // SPI2 global
 267              	   .equ USART1_IRQ, (37) // USART1 global
 268              	   .equ USART2_IRQ, (38) // USART2 global
 269              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 270              	   .equ EXTI17_IRQ, (41)
 271              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 272              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 273              	   .equ SDIO_IRQ, (49) // SDIO global
 274              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 275              	   .equ SPI3_IRQ, (51)
 276              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 277              	   .equ DMA2S1_IRQ, (57) 
 278              	   .equ DMAS2_IRQ, (58)
 279              	   .equ DMAS3_IRQ, (59)
 280              	   .equ DMAS4_IRQ, (60)
 281              	   .equ OTG_FS_IRQ, (67)
 282              	   .equ DMA2S5_IRQ, (68)
 283              	   .equ DMA2S6_IRQ, (69)
 284              	   .equ DMA2S7_IRQ, (70)
 285              	   .equ USART6_IRQ, (71)
 286              	   .equ I2C3EV_IRQ, (72)
 287              	   .equ I2C3ER_IRQ, (73)
 288              	   .equ FPU_IRQ, (81) // FPU global
 289              	   .equ SPI4_IRQ, (84)
 290              	   .equ SPI5_IRQ, (85)
 291              	   
 292              	
 293              	/* TIMERS registers */
 294              	.equ TIM1_BASE_ADR,0x40010000
 295              	.equ TIM9_BASE_ADR,0x40010400
 296              	.equ TIM10_BASE_ADR,0x40010800
 297              	.equ TIM11_BASE_ADR,0x40010C00
 298              	
 299              	.equ TIM2_BASE_ADR,0x40000000
 300              	.equ TIM3_BASE_ADR,0x40000400
 301              	.equ TIM4_BASE_ADR,0x40000800
 302              	.equ TIM5_BASE_ADR,0x40000C00
 303              	
 304              	/* TIMER1 */
 305              	.equ TIM1_RCR,48 
 306              	.equ TIM1_BDTR,68 
 307              	
 308              	/* TIMER2..TIMER5 */
 309              	.equ TIM_CR1,0
 310              	.equ TIM_CR2,4
 311              	.equ TIM_SMCR,8
 312              	.equ TIM_DIER,12
ARM GAS  forth.s 			page 7


 313              	.equ TIM_SR,16
 314              	.equ TIM_EGR,20
 315              	.equ TIM_CCMR1,24
 316              	.equ TIM_CCMR2,28
 317              	.equ TIM_CCER,32
 318              	.equ TIM_CNT,36
 319              	.equ TIM_PSC,40
 320              	.equ TIM_ARR,44
 321              	.equ TIM_CCR1,52
 322              	.equ TIM_CCR2,56
 323              	.equ TIM_CCR3,60
 324              	.equ TIM_CCR4,64
 325              	.equ TIM_DCR,72
 326              	.equ TIM_DMAR,76
 327              	.equ TIM2_OR,80
 328              	.equ TIM5_OR,80 
 329              	
 330              	/* SYSCFG registers */
 331              	.equ SYSCFG_BASE_ADR, 0x40013800
 332              	
 333              	.equ SYSCFG_MEMRMP,0
 334              	.equ SYSCFG_PMC,4
 335              	.equ SYSCFG_EXTICR1,8
 336              	.equ SYSCFG_EXTICR2,12
 337              	.equ SYSCFG_EXTICR3,16
 338              	.equ SYSCFG_EXTICR4,20
 339              	.equ SYSCFG_CMPCR,32
 340              	
 341              	/* EXTI registers */
 342              	.equ EXTI_BASE_ADR, 0x40013C00
 343              	
 344              	.equ EXTI_IMR,0
 345              	.equ EXTI_EMR,4
 346              	.equ EXTI_RTSR,8
 347              	.equ EXTI_FTSR,12
 348              	.equ EXTI_SWIER,16
 349              	.equ EXTI_PR,20
  31              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
ARM GAS  forth.s 			page 8


  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
ARM GAS  forth.s 			page 9


  77              	  .equ NBASE, BOOT+4  // numeric conversion base 
  78              	  .equ TMP, NBASE+4   // temporary variable
  79              	  .equ CSPAN, TMP+4  // character count received by expect  
  80              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  81              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  82              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  83              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  84              	  .equ HOLD, EVAL+4   // hold pointer 
  85              	  .equ CTXT, HOLD+4  // context pointer 
  86              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  87              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  88              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  89              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  90              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  91              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  92              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  93              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  94              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  95              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  96              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  97              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
  98              	  .equ KBD_QUEUE_SIZE, 16 
  99              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 100              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 101              	  .equ KBD_QTAIL,KBD_QHEAD+4
 102              	  .equ ROW,KBD_QTAIL+4 
 103              	  .equ COL,ROW+4 
 104              	  .equ BK_COLOR,COL+4 
 105              	  .equ PEN_COLOR,BK_COLOR+4
 106              	
 107              	/***********************************************
 108              	* MACROS
 109              	*	Assemble inline direct threaded code ending.
 110              	***********************************************/
 111              		.macro _CALL fn /* low level routine call */ 
 112              	 	PUSH {LR}
 113              		BL \fn  
 114              		POP {LR}
 115              		.endm
 116              		
 117              		.macro _RET /* exit sub-routine */ 
 118              		BX LR 
 119              		.endm 
 120              	
 121              		/* dictionary header  */
 122              		.macro _HEADER  label, nlen, name
 123              			.word LINK 
 124              			.equ LINK , . 
 125              		_\label: .byte \nlen    // name field
 126              			.ascii "\name"
 127              			.p2align 2 
 128              		\label:   // code field 
 129              		.endm 
 130              		
 131              	
 132              	// local function header 
 133              		.macro _FUNC label 
ARM GAS  forth.s 			page 10


 134              		.section .text, "ax", %progbits 
 135              		.p2align 2 
 136              		.type \label, %function  
 137              		\label:
 138              		.endm 
 139              	
 140              	// global function header 
 141              		.macro _GBL_FUNC label 
 142              		.global \label 
 143              		_FUNC \label 
 144              		.endm 
 145              	
 146              	
 147              	// load large constant to register 
 148              		.macro _MOV32 r, value 
 149              		mov \r,#(\value&0xffff)
 150              		movt \r,#(\value>>16)
 151              		.endm 
 152              	
 153              		.macro _NEXT /* direct jump INEXT */ 
 154              		B INEXT   
 155              		.endm 
 156              	
 157              	 	.macro	_NEST /*start high level word */
 158              		BX INX  
 159              		NOP.N 
 160              		.endm
 161              	
 162              		.macro _ADR label 
 163              		.word 1+\label  
 164              		.endm 
 165              	
 166              	 	.macro	_UNNEST	/*end high level word */
 167              		_ADR UNNEST 
 168              		.endm
 169              	
 170              	 	.macro	_DOLIT u /*long literals */
 171              		_ADR	DOLIT
 172              		.word	\u 
 173              		.endm
 174              	
 175              		.macro _DOTQP len, text 
 176              		_ADR DOTQP 
 177              		.byte \len 
 178              		.ascii "\text" 
 179              		.p2align 2 
 180              		.endm
 181              	
 182              		.macro _COMPI name 
 183              		_DOLIT \name 
 184              		_ADR CALLC 
 185              		.endm 
 186              	
 187              		.macro _ABORQ len,name 
 188              		_ADR ABORQ 
 189              		.byte \len 
 190              		.ascii "\name"
ARM GAS  forth.s 			page 11


 191              		.p2align 2 
 192              		.endm
 193              	
 194              		.macro _BRAN label 
 195              		_ADR BRAN 
 196              		.word \label 
 197              		.endm 
 198              	
 199              		.macro _QBRAN label 
 200              		_ADR QBRAN 
 201              		.word \label
 202              		.endm 
 203              	
 204              		.macro _DONXT label 
 205              		_ADR DONXT
 206              		.word \label 
 207              		.endm 
 208              	
 209              	 	.macro	_PUSH	/*push TOS on data stack*/
 210              		STR	TOS,[DSP,#-4]!
 211              		.endm
 212              	
 213              	 	.macro	_POP /*pop data stack to TOS */
 214              		LDR	TOS,[DSP],#4
 215              		.endm
  32              	
  33              	/*************************************
  34              	*   interrupt service vectors table 
  35              	**************************************/
  36              	   .section  .isr_vector,"a",%progbits
  37              	  .type  isr_vectors, %object
  38              	
  39              	isr_vectors:
  40 0000 00000000 	  .word   _mstack          /* main return stack address */
  41 0004 00000000 	  .word   reset_handler    /* startup address */
  42              	/* core interrupts || exceptions */
  43 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  44 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  45 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  46 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  47 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  48 001c 00000000 	  .word   0 /* -9 */
  49 0020 00000000 	  .word   0 /* -8 */ 
  50 0024 00000000 	  .word   0 /* -7 */
  51 0028 00000000 	  .word   0	/* -6 */
  52 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  53 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  54 0034 00000000 	  .word   0 /* -3 */
  55 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  56 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  57              	 irq0:  
  58              	  /* External Interrupts */
  59 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  60 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  61 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  62 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  63 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
ARM GAS  forth.s 			page 12


  64 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  65 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  66 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  67 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  68 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  69 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  70 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  71 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  72 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  73 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  74 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  75 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  76 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  77 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  78 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  79 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  80 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  81 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  82 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  83 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  84 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  85 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  86 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  87 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  88 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  89 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  90 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  91 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  92 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  93 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  94 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  95 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  96 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  97 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  98 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  99 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
 100 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 101 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 102 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 103 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 104 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 105 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 106 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 107 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 108 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 109 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 110 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 111 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 112 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 113 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 114 011c 00000000 	  .word      0 /* IRQ55, not used  */
 115 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 116 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 117 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 118 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 119 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 120 0134 00000000 	  .word		 0 /* IRQ61, not used */
ARM GAS  forth.s 			page 13


 121 0138 00000000 	  .word		 0 /* IRQ62, not used */
 122 013c 00000000 	  .word		 0 /* IRQ63, not used */
 123 0140 00000000 	  .word		 0 /* IRQ64, not used */
 124 0144 00000000 	  .word		 0 /* IRQ65, not used */
 125 0148 00000000 	  .word		 0 /* IRQ66, not used */
 126 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 127 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 128 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 129 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 130 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 131 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 132 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 133 0168 00000000 	  .word		 0 /* IRQ74, not used */
 134 016c 00000000 	  .word		 0 /* IRQ75, not used */
 135 0170 00000000 	  .word		 0 /* IRQ76, not used */
 136 0174 00000000 	  .word		 0 /* IRQ77, not used */
 137 0178 00000000 	  .word		 0 /* IRQ78, not used */
 138 017c 00000000 	  .word		 0 /* IRQ79, not used */
 139 0180 00000000 	  .word		 0 /* IRQ80, not used */
 140 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 141 0188 00000000 	  .word		 0 /* IRQ82, not used */
 142 018c 00000000 	  .word		 0 /* IRQ83, not used */
 143 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 144 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 145              	isr_end:
 146              	  .size  isr_vectors, .-isr_vectors
 147 0198 00000000 	  .p2align 9
 147      00000000 
 147      00000000 
 147      00000000 
 147      00000000 
 148              	
 149              	/*****************************************************
 150              	* default isr handler called on unexpected interrupt
 151              	*****************************************************/
 152              	   .section  .text, "ax", %progbits 
 153              	   
 154              	  .type default_handler, %function
 155              	  .p2align 2 
 156              	  .global default_handler
 157              	default_handler:
 158 0000 014D     		ldr r5,exception_msg 
 159 0002 00F053F8 		bl uart_puts 
 160 0006 34E0     		b reset_mcu    
 161              	  .size  default_handler, .-default_handler
 162              	exception_msg:
 163 0008 0C000000 		.word .+4 
 164 000c 12       		.byte 18
 165 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 165      65707469 
 165      6F6E2072 
 165      65626F6F 
 165      7421
 166 001f 00       		.p2align 2
 167              	
 168              	/*********************************
 169              		system milliseconds counter
ARM GAS  forth.s 			page 14


 170              	*********************************/	
 171              	  .type systick_handler, %function
 172              	  .p2align 2 
 173              	  .global systick_handler
 174              	systick_handler:
 175 0020 4FF00003 	  _MOV32 r3,UPP
 175      C2F20003 
 176 0028 9868     	  ldr r0,[r3,#TICKS]  
 177 002a 00F10100 	  add r0,#1
 178 002e 9860     	  str r0,[r3,#TICKS]
 179 0030 D868     	  ldr r0,[r3,#CD_TIMER]
 180 0032 10B1     	  cbz r0, systick_exit
 181 0034 A0F10100 	  sub r0,#1
 182 0038 D860     	  str r0,[r3,#CD_TIMER]
 183              	systick_exit:
 184 003a 7047     	  bx lr
 185              	
 186              	/**************************
 187              		UART RX handler
 188              	**************************/
 189              		.p2align 2
 190              		.type uart_rx_handler, %function
 191              	uart_rx_handler:
 192 003c 4FF48053 		_MOV32 r3,UART 
 192      C4F20103 
 193 0044 1868     		ldr r0,[r3,#USART_SR]
 194 0046 5968     		ldr r1,[r3,#USART_DR]
 195 0048 10F0200F 		tst r0,#(1<<5) // RXNE 
 196 004c 0AD0     		beq 2f // no char received 
 197 004e 0329     		cmp r1,#3
 198 0050 09D0     		beq user_reboot // received CTRL-C then reboot MCU 
 199 0052 04F14400 		add r0,UP,#RX_QUEUE
 200 0056 A26D     		ldr r2,[UP,#RX_TAIL]
 201 0058 8154     		strb r1,[r0,r2]
 202 005a 02F10102 		add r2,#1 
 203 005e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
 204 0062 A265     		str r2,[UP,#RX_TAIL]
 205              	2:	
 206 0064 7047     		bx lr 
 207              	
 208              	user_reboot:
 209 0066 084D     		ldr r5,user_reboot_msg
 210 0068 00B500F0 		_CALL uart_puts 
 210      1FF85DF8 
 210      04EB
 211              	reset_mcu:
 212 0072 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 212      CEF20000 
 213 007a C168     		ldr r1,[r0,#SCB_AIRCR]
 214 007c 41F00401 		orr r1,#(1<<2)
 215 0080 C0F2FA51 		movt r1,#SCB_VECTKEY
 216 0084 C160     		str r1,[r0,#SCB_AIRCR]
 217 0086 FEE7     		b . 
 218              		.p2align 2 
 219              	user_reboot_msg:
 220 0088 8C000000 		.word .+4
 221 008c 0D       		.byte 13 
ARM GAS  forth.s 			page 15


 222 008d 0D757365 		.ascii "\ruser reboot!"
 222      72207265 
 222      626F6F74 
 222      21
 223 009a 00BF     		.p2align 2 
 224              	
 225              	 /***********************
 226              	  send byte to uart 
 227              	  input: 
 228              	    r0 byte to send 
 229              	    r1 UART_BASE_ADR 
 230              	************************/
 231              	uart_putc:
 232 009c 04B4     	    push {r2}
 233 009e 0A68     	1:  ldr r2,[r1,#USART_SR]
 234 00a0 12F08002 	    ands r2,#0x80 // TXE 
 235 00a4 FBD0     	    beq 1b
 236 00a6 4860     	    str r0,[r1,#USART_DR] 
 237 00a8 04BC     	    pop {r2}
 238 00aa 7047     	    _RET 
 239              	
 240              	/*****************************
 241              	 send counted string to uart 
 242              	 input: 
 243              	    r5 string* 
 244              	 use:
 245              	    r0  byte to send 
 246              	    r1  UART_BASE_ADR
 247              	    r2  string length 
 248              	*****************************/
 249              		.type uart_puts,%function 
 250              	uart_puts:
 251 00ac 4FF48051 	  	_MOV32 r1,UART 
 251      C4F20101 
 252 00b4 15F8012B 		  ldrb r2,[r5],#1 // string length
 253 00b8 1240     		  ands r2,r2
 254 00ba 0CD0     	1:	beq 9f 
 255 00bc 15F8010B 	2:  ldrb r0,[r5],#1
 256 00c0 00B5FFF7 	    _CALL uart_putc 
 256      EBFF5DF8 
 256      04EB
 257 00ca 013A     		  subs r2,r2,#1 
 258 00cc F6D1     		  bne 2b 
 259 00ce 0A68     	3:	ldr r2,[r1,#USART_SR]
 260 00d0 12F04002 		  ands r2,#(1<<6)
 261 00d4 FBD0     		  beq 3b 
 262 00d6 7047     	9:  _RET  
 263              	
 264              	
 265              	/**************************************
 266              	  reset_handler execute at MCU reset
 267              	***************************************/
 268              	  .type  reset_handler, %function
 269              	  .p2align 2 
 270              	  .global reset_handler
 271              	reset_handler:
 272 00d8 4FF00000 		_MOV32 r0,RAM_END
ARM GAS  forth.s 			page 16


 272      C2F20200 
 273 00e0 8546     		mov sp,r0  
 274 00e2 FFF7FEFF 		bl	remap 
 275 00e6 00F01FF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 276 00ea 00F089F8 		bl  uart_init
 277 00ee FFF7FEFF 		bl	tv_init
 278 00f2 FFF7FEFF 	  bl  kbd_init  
 279 00f6 00F003F8 		bl forth_init 
 280 00fa 03F0E5B8 		b COLD 
 281              	
 282              	
 283              	
 284              		.type forth_init, %function 
 285 00fe 00BF     	  .p2align 2 
 286              	forth_init:
 287 0100 4FF00004 		_MOV32 UP,UPP 
 287      C2F20004 
 288 0108 4FF47F47 		_MOV32 DSP,SPP
 288      C2F20107 
 289 0110 4FF68078 		_MOV32 RSP,RPP
 289      C2F20108 
 290 0118 DFF85CA3 	  ldr INX,=NEST
 291 011c 4AF0010A 	  orr INX,#1 
 292 0120 86EA0606 		EOR TOS,TOS  
 293 0124 7047     		_RET 
 294              	
 295              	
 296              	
 297              	  .type init_devices, %function
 298 0126 00BF     	  .p2align 2 
 299              	init_devices:
 300              	/* init clock to HSE 96 Mhz */
 301              	/* set 3 wait states in FLASH_ACR_LATENCY */
 302 0128 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 302      C4F20200 
 303 0130 4FF00301 	  mov r1,#3 
 304 0134 0160     	  str r1,[r0,#FLASH_ACR]
 305              	/* configure clock for HSE, 25 Mhz crystal */
 306              	/* enable HSE in RCC_CR */
 307 0136 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 307      C4F20200 
 308 013e 0168     	  ldr r1,[r0,#RCC_CR]
 309 0140 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 310 0144 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 311              	/* wait HSERDY loop */
 312              	wait_hserdy:
 313 0146 0168     	  ldr r1,[r0,#RCC_CR]
 314 0148 11F4003F 	  tst r1,#(1<<17)
 315 014c FBD0     	  beq wait_hserdy
 316              	
 317              	/************************************************* 
 318              	   configure PLL  and source 
 319              	   SYSCLOCK=96 Mhz
 320              	   select HSE as  PLL source clock
 321              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 322              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 323              	****************************************************/
ARM GAS  forth.s 			page 17


 324              	  /* set RCC_PLLCFGR */
 325 014e 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 325      C4F20200 
 326 0156 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 326      C0F24041 
 327 015e 4160     	  str r1,[r0,#RCC_PLLCFGR]
 328              	  /* enable PLL */
 329 0160 0168     	  ldr r1,[r0,#RCC_CR]
 330 0162 41F08071 	  orr r1, #(1<<24)
 331 0166 0160     	  str r1,[r0,#RCC_CR]
 332              	/* wait for PLLRDY */
 333              	wait_pllrdy:
 334 0168 0168     	  ldr r1,[r0,#RCC_CR]
 335 016a 11F0007F 	  tst r1,#(1<<25)
 336 016e FBD1     	  bne wait_pllrdy 
 337              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 338 0170 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 338      C0F21901 
 339 0178 8160     	  str r1,[r0,#RCC_CFGR]
 340              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 341 017a 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 017c 41F00201 	  orr r1,#2
 343 0180 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 344              	/* wait for SWS==2 */
 345              	wait_sws:
 346 0182 8168     	  ldr r1,[r0,#RCC_CFGR]
 347 0184 11F0080F 	  tst r1,#(2<<2)
 348 0188 FBD0     	  beq wait_sws
 349              	/* now sysclock is 96 Mhz */
 350              	
 351              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 352 018a 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 353 018e 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 354 0190 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 355 0194 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 356              	/* configure GPIOC:13 as output for user LED */
 357 0196 4FF40060 	  _MOV32 r0,LED_GPIO 
 357      C4F20200 
 358 019e 4FF00D01 	  mov r1,#LED_PIN
 359 01a2 4FF01102 	  mov r2,#OUTPUT_OD 
 360 01a6 00B500F0 	  _CALL gpio_config 
 360      B5F85DF8 
 360      04EB
 361 01b0 4FF00102 	  mov r2,#1
 362 01b4 00B500F0 	  _CALL gpio_out 
 362      04F95DF8 
 362      04EB
 363              	/* enable compensation CELL for fast I/O */
 364 01be 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 364      C4F20101 
 365 01c6 4FF00100 		mov r0,#1 
 366 01ca 0862     		str r0,[R1,#SYSCFG_CMPCR]
 367              	/* wait for ready bit */ 
 368 01cc 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 369 01ce 10F4807F 	    tst r0,#(1<<8)
 370 01d2 FBD0     		beq 1b 	
 371              	
ARM GAS  forth.s 			page 18


 372              	
 373              	/* configure systicks for 1msec ticks */
 374              	// set priority to 15 (lowest)
 375 01d4 4FF0FF30 	  mov r0,#STCK_IRQ
 376 01d8 4FF00F01 	  mov r1,#15 
 377 01dc 00B500F0 	  _CALL nvic_set_priority
 377      5BF85DF8 
 377      04EB
 378 01e6 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 378      CEF20000 
 379 01ee 47F2FF61 	  _MOV32 r1,95999 
 379      C0F20101 
 380 01f6 4160     	  str r1,[r0,#STK_LOAD]
 381 01f8 4FF00701 	  mov r1,#7
 382 01fc 0160     	  str r1,[r0,STK_CTL]
 383 01fe 7047     	  _RET  
 384              	
 385              	/*******************************
 386              	  initialize UART peripheral 
 387              	********************************/
 388              		.type uart_init, %function
 389              	uart_init:
 390              	/* set GPIOA PIN 9, uart TX  */
 391 0200 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 391      C4F20200 
 392 0208 0168     	  ldr r1,[r0,#GPIO_MODER]
 393 020a 6FF47012 	  mvn r2,#0xf<<(2*9)
 394 020e 01EA0201 	  and r1,r1,r2
 395 0212 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 396 0216 41EA0201 	  orr r1,r1,r2 
 397 021a 0160     	  str r1,[r0,#GPIO_MODER]
 398              	/* select alternate functions USART1==AF07 */ 
 399 021c 4FF4EE61 	  mov r1,#0x77<<4 
 400 0220 4162     	  str r1,[r0,#GPIO_AFRH]
 401              	/* configure USART1 registers */
 402 0222 4FF48050 	  _MOV32 r0,UART 
 402      C4F20100 
 403              	/* BAUD rate */
 404 022a 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 405 022e 8160     	  str r1,[r0,#USART_BRR]
 406 0230 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 407 0234 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 408              	/* set interrupt priority */
 409 0236 4FF02500 	  mov r0,#USART1_IRQ 
 410 023a 4FF00101 	  mov r1,#1 
 411 023e 00B500F0 	  _CALL nvic_set_priority
 411      2AF85DF8 
 411      04EB
 412              	/* enable interrupt in NVIC */
 413 0248 4FF02500 	  mov r0,#USART1_IRQ 
 414 024c 00B500F0 	  _CALL nvic_enable_irq  
 414      3CF85DF8 
 414      04EB
 415 0256 7047     	  _RET  
 416              	
 417              	/* copy system variables to RAM */ 
 418              		.type remap, %function 
ARM GAS  forth.s 			page 19


 419              	    .global remap 
 420              	remap:
 421              	// copy system to RAM 	
 422 0258 4FF00000 		_MOV32 r0,RAM_ADR 
 422      C2F20000 
 423 0260 8649     		ldr r1,=UZERO 
 424 0262 4FF0A002 		mov r2,#ULAST-UZERO 
 425 0266 02F10302 		add r2,r2,#3
 426 026a 22F00302 		and r2,r2,#~3 
 427 026e 51F8043B 	1:	ldr r3,[r1],#4 
 428 0272 40F8043B 		str r3,[r0],#4 
 429 0276 043A     		subs R2,#4 
 430 0278 F9D1     		bne 1b
 431              	// zero end of RAM 
 432 027a 4FF00002 		_MOV32 r2,RAM_END 
 432      C2F20202 
 433 0282 83EA0303 		eor r3,r3,r3 
 434 0286 40F8043B 	2:  str r3,[r0],#4
 435 028a 9042     		cmp r0,r2 
 436 028c FBDB     		blt 2b 
 437 028e 4FF00004 		_MOV32 UP,RAM_ADR  
 437      C2F20004 
 438 0296 7047     		_RET 
 439              	
 440              	// set irq priority 
 441              	// 0 highest 
 442              	// 15 lowest
 443              	// input: r0 IRQn  
 444              	//        r1  ipr 
 445              	nvic_set_priority:
 446 0298 08B4     	    push {r3}
 447 029a 0028     	    cmp r0,#0 
 448 029c 08D4     	    bmi negative_irq 
 449 029e 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 449      CEF20003 
 450 02a6 4FEA0111 	    lsl r1,#4 
 451 02aa 1954     	    strb r1,[r3,r0]
 452 02ac 08BC     	    pop {r3}
 453 02ae 7047     	    _RET 
 454              	negative_irq:
 455 02b0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 455      CEF20003 
 456 02b8 00F00F00 	    and r0,#0XF 
 457 02bc A0F10400 	    sub r0,#4 
 458 02c0 4FEA0111 	    lsl r1,#4 
 459 02c4 1954     	    strb r1,[r3,r0]
 460 02c6 08BC     	    pop {r3}
 461 02c8 7047     	    _RET 
 462              	
 463              	
 464              	// enable interrupt in nvic 
 465              	// input: r0 = IRQn 
 466              	nvic_enable_irq: 
 467 02ca 0EB4     	    push {r1,r2,r3}
 468 02cc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 468      CEF20003 
 469 02d4 0146     	    mov r1,r0 
ARM GAS  forth.s 			page 20


 470 02d6 4FEA5111 	    lsr r1,#5  
 471 02da 4FEA8101 	    lsl r1,#2  // ISERn  
 472 02de 00F01F00 	    and r0,#31 // bit#
 473 02e2 4FF00102 	    mov r2,#1 
 474 02e6 02FA00F2 	    lsl r2,r0
 475 02ea 5A50     	    str r2,[r3,r1]
 476 02ec 0EBC     	    pop {r1,r2,r3}
 477 02ee 7047     	    _RET 
 478              	
 479              	// disable interrupt in nvic
 480              	// input: r0 = IRQn
 481              	nvic_disable_irq:
 482 02f0 0EB4     	    push {r1,r2,r3}
 483 02f2 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 483      CEF20003 
 484 02fa 0146     	    mov r1,r0 
 485 02fc 4FEA5111 	    lsr r1,#5  
 486 0300 4FEA8101 	    lsl r1,#2  // ISERn
 487 0304 00F01F00 	    and r0,#31 // bit#
 488 0308 4FF00102 	    mov r2,#1 
 489 030c 02FA00F2 	    lsl r2,r0
 490 0310 5A50     	    str r2,[r3,r1]
 491 0312 0EBC     	    pop {r1,r2,r3}
 492 0314 7047     	    _RET 
 493              	
 494              	/**********************************
 495              	  gpio_config 
 496              	  Configure gpio mode 
 497              	  input:
 498              	    r0   GPIOx 
 499              	    r1   pin 
 500              	    r2   mode 
 501              	  output:
 502              	    none 
 503              	  use:
 504              	    r3,r5,r11  
 505              	**********************************/
 506              	gpio_config:
 507 0316 2DE92808 	    push {r3,r5,r11}
 508              	//  clear registers field 
 509 031a 4FF00105 	    mov r5,#1
 510 031e 05FA01F5 	    lsl r5,r1
 511 0322 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 512 0326 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 513 0328 03EA0503 	    and r3,r5 
 514 032c 4360     	    str r3,[r0,#GPIO_OTYPER]
 515 032e 4FF00305 	    mov r5,#3 
 516 0332 4FF0020B 	    mov r11,#2 
 517 0336 01FB0BFB 	    mul r11,r1 
 518 033a 05FA0BF5 	    lsl r5,r11 
 519 033e 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 520 0342 0368     	    ldr r3,[r0,#GPIO_MODER]
 521 0344 03EA0503 	    and r3,r5 
 522 0348 0360     	    str r3,[r0,#GPIO_MODER]
 523 034a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 524 034c 03EA0503 	    and r3,r5 
 525 0350 C360     	    str r3,[r0,#GPIO_PUPDR]
ARM GAS  forth.s 			page 21


 526              	// set mode register, r2 low nibble  
 527 0352 02F00305 	    and r5,r2,#3    
 528 0356 05FA0BF5 	    lsl r5,r11 // mode 
 529 035a 0368     	    ldr r3,[r0,#GPIO_MODER]
 530 035c 43EA0503 	    orr r3,r5 
 531 0360 0360     	    str r3,[r0,#GPIO_MODER]
 532 0362 032A     	    cmp r2,#3
 533 0364 13D0     	    beq 9f // analog input 
 534 0366 12F00305 	    ands r5,r2,#3 
 535 036a 08D0     	    beq input_pull 
 536              	output_type:
 537 036c 4FEA1212 	    lsr r2,#4 
 538 0370 02FA01F2 	    lsl r2,r1 // 1 bit field 
 539 0374 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 540 0376 43EA0203 	    orr r3,r2 
 541 037a 4360     	    str r3,[r0,#GPIO_OTYPER]
 542 037c 07E0     	    b 9f 
 543              	input_pull:
 544 037e C368     	    ldr r3,[r0,#GPIO_PUPDR]
 545 0380 4FEA1212 	    lsr r2,#4 
 546 0384 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 547 0388 43EA0203 	    orr r3,r2 
 548 038c C360     	    str r3,[r0,#GPIO_PUPDR]
 549 038e BDE82808 	9:  pop {r3,r5,r11}
 550 0392 7047     	    _RET 
 551              	
 552              	// configure gpio speed 
 553              	// input:
 554              	//    r0   GPIO_BASE_ADR 
 555              	//    r1   pin 
 556              	//    r2   speed
 557              	// use:
 558              	//  r3,r5,r11 
 559              	gpio_speed:
 560 0394 2DE92808 	    push {r3,r5,r11}
 561 0398 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 562 039a 4FF00305 	    mov r5,#3
 563 039e 4FF0020B 	    mov r11,#2 
 564 03a2 01FB0BFB 	    mul r11,r1 
 565 03a6 05FA0BF5 	    lsl r5,r11
 566 03aa 6FEA0505 	    mvn r5,r5 
 567 03ae 03EA0503 	    and r3,r5   
 568 03b2 02FA0BF2 	    lsl r2,r11  
 569 03b6 43EA0203 	    orr r3,r2 
 570 03ba 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 571 03bc BDE82808 	    pop {r3,r5,r11}
 572 03c0 7047     	    _RET
 573              	
 574              	/**************************** 
 575              	  gpio_out port,pin,0|1
 576              	  input:
 577              	    r0   gpio_base_adr 
 578              	    r1   pin 
 579              	    r2   data 0|1 
 580              	**************************/
 581              	gpio_out:
 582 03c2 08B4     	    push {r3}
ARM GAS  forth.s 			page 22


 583 03c4 4FF00103 	    mov r3,#1 
 584 03c8 03FA01F3 	    lsl r3,r1 
 585 03cc 0AB9     	    cbnz r2, 1f 
 586 03ce 4FEA0343 	    lsl r3,#16 
 587 03d2 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 588 03d4 08BC     	    pop {r3}
 589 03d6 7047     	    _RET 
 590              	
 591              	/******************************************************
 592              	*  COLD start moves the following to USER variables.
 593              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 594              	******************************************************/
 595              		.p2align 2
 596              	UZERO:
 597 03d8 00000000 		.word 0  			/*Reserved */
 598 03dc 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 599 03e0 00000000 		.word 0      /* TICKS */
 600 03e4 00000000 	    .word 0     /* CD_TIMER */
 601 03e8 58320000 		.word HI  /*'BOOT */
 602 03ec 0A000000 		.word BASEE 	/*BASE */
 603 03f0 00000000 		.word 0			/*tmp */
 604 03f4 00000000 		.word 0			/*SPAN */
 605 03f8 00000000 		.word 0			/*>IN */
 606 03fc 00000000 		.word 0			/*#TIB */
 607 0400 00FF0120 		.word TIBB	/*TIBU */
 608 0404 C0270000 		.word INTER	/*'EVAL */
 609 0408 00000000 		.word 0			/*HLD */
 610 040c C0320000 		.word _LASTN	/*CONTEXT */
 611 0410 1C330000 		.word CTOP  	/* FCP end of system dictionnary */
 612 0414 442F0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 613 0418 C0320000 		.word _LASTN	/*LAST word in dictionary */
 614 041c 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 614      00000000 
 614      00000000 
 614      00000000 
 615 042c 00000000 		.word 0  /* RX_HEAD */
 616 0430 00000000 		.word 0  /* RX_TAIL */ 
 617 0434 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 618 0438 00000000 		.word 0  /* VID_STATE, video state */  
 619 043c 00000000 	    .word 0  /* VID_FIELD, field */
 620 0440 00810120 		.word VID_BUFF /* video_buffer address */ 
 621 0444 00000000 	    .word 0 /* kbd struct */
 622 0448 00000000 		.space KBD_QUEUE_SIZE,0  
 622      00000000 
 622      00000000 
 622      00000000 
 623 0458 00000000 		.word 0  /* kbd queue head */
 624 045c 00000000 		.word 0 /* kbd queue tail */ 
 625 0460 00000000 	    .word 0 /* tv cursor row */
 626 0464 00000000 	    .word 0 /* tv cursor column */ 
 627 0468 00000000 	    .word 0 /* tv back color */
 628 046c 07000000 	    .word 7 /* tv font color */
 629 0470 00000000 	    .word 0,0 
 629      00000000 
 630              	ULAST:
 631 0478 64110000 	
 631      D8030000 
ARM GAS  forth.s 			page 23


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	  .syntax unified
  22              	  .cpu cortex-m4
  23              	  .fpu softvfp 
  24              	  .thumb
  25              	
  26              	  .include "stm32f411ce.inc"
  27              	  .include "tvout.inc"
   1              	
   2              	  .equ HRES, 320  // horizontal resolution
   3              	  .equ VRES, 200   // vertical resolution
   4              	  .equ BPP, 4     // bits per pixel
   5              	  .equ BPR, (HRES*BPP/8)  // bytes per row
   6              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
   7              	
   8              	  .equ CHAR_WIDTH, 6 
   9              	  .equ CHAR_HEIGHT, 8
  10              	  
  28              	
  29              	  .equ FCLK, 96000000
  30              	  .equ FHORZ, 15734 
  31              	  .equ HPER,(FCLK/FHORZ-1)
  32              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  33              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7µS
  34              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3µS
  35              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1µs
  36              	  .equ LEFT_MARGIN, (750) 
  37              	  .equ VIDEO_FIRST_LINE, 40
  38              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  39              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14µSec
  40              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62µSec
  41              	
  42              	// video state 
  43              	  .equ ST_VSYNC, 0 
  44              	  .equ ST_PREVID,1 
  45              	  .equ ST_VIDEO,2 
  46              	  .equ ST_POSTVID,3    
  47              	// field 
ARM GAS  forth.s 			page 24


  48              	   .equ ODD_FIELD,0 
  49              	   .equ EVEN_FIELD,-1
  50              	
  51              	/*******************************************************
  52              	NOTES:
  53              	 1) Values computed for a 96Mhz sysclock 
  54              	 2) Video sync output on PB1 use T3_CH4
  55              	 3) video out trigger TIMER3 CH3 
  56              	********************************************************/
  57              	
  58              	/**************************************
  59              	  initialize TIMER3 CH4 to generate tv_out
  60              	  synchronization signal.
  61              	**************************************/ 
  62              	  _GBL_FUNC tv_init
  63              	// configure PA0:3 as OUTPUT_OD 
  64 0480 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR 
  64      C4F20200 
  65 0488 0168     	  ldr r1,[r0,#GPIO_MODER]
  66 048a 4FF05502 	  mov r2,#0x55
  67 048e 41EA0201 	  orr r1,r2
  68 0492 0160     	  str r1,[r0,#GPIO_MODER]
  69 0494 81EA0101 	  eor r1,r1 
  70 0498 4161     	  str r1,[r0,#GPIO_ODR]  
  71              	// configure PB1 as OUTPUT_AFPP 
  72              	// this is TIM3_CC4 output compare 
  73 049a 00F58060 	  add r0,#0x400 // GPIOB_BASE_ADR
  74 049e 4FF00101 	  mov r1,#1 // pin 1 
  75 04a2 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  76 04a6 00B5FFF7 	  _CALL gpio_config 
  76      35FF5DF8 
  76      04EB
  77 04b0 4FF00101 	  mov r1,#1 
  78 04b4 4FF00202 	  mov r2,#2
  79 04b8 00B5FFF7 	  _CALL gpio_speed 
  79      6BFF5DF8 
  79      04EB
  80              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  81 04c2 016A     	  ldr r1,[r0,#GPIO_AFRL]
  82 04c4 41F02001 	  orr r1,#(2<<4) // r2 
  83 04c8 0162     	  str r1,[r0,#GPIO_AFRL]
  84              	// enable peripheral clock 
  85 04ca 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  85      C4F20202 
  86 04d2 4FF00200 	  mov r0,#2 
  87 04d6 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  88 04d8 41EA0001 	  orr r1,r0 
  89 04dc 1164     	  str r1,[r2,#RCC_APB1ENR]
  90              	// configure TIMER3   
  91 04de 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
  91      C4F20002 
  92 04e6 41F2D470 	  mov r0,#HPER
  93 04ea D062     	  str r0,[r2,#TIM_ARR]
  94 04ec 40F23F50 	  mov r0,#VIDEO_DELAY 
  95 04f0 D063     	  str r0,[r2,#TIM_CCR3]
  96 04f2 4FF4E170 	  mov r0,#HPULSE 
  97 04f6 1064     	  str r0,[r2,#TIM_CCR4]  
ARM GAS  forth.s 			page 25


  98 04f8 47F27000 	  mov r0,#(7<<12)+(7<<4)
  99 04fc D061     	  str r0,[r2,#TIM_CCMR2]
 100 04fe 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 101 0502 1062     	  str r0,[r2,#TIM_CCER]
 102 0504 4FF00100 	  mov r0,#1 
 103 0508 D060     	  str r0,[r2,#TIM_DIER]
 104 050a 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 105              	// enable interrupt in NVIC controller 
 106 050c 4FF01D00 	  mov r0,#TIM3_IRQ 
 107 0510 4FF00101 	  mov r1,#1
 108 0514 00B5FFF7 	  _CALL nvic_set_priority
 108      BFFE5DF8 
 108      04EB
 109 051e 4FF01D00 	  mov r0,#TIM3_IRQ 
 110 0522 00B5FFF7 	  _CALL nvic_enable_irq
 110      D1FE5DF8 
 110      04EB
 111 052c 7047     	  _RET
 112              	
 113              	/*************************************
 114              	  TIMER3 interrupt for tv_out
 115              	  T1 line # 
 116              	  T0 TIM3_BASE_ADR 
 117              	*************************************/
 118 052e 00BF     	  _GBL_FUNC tv_out_isr
 119 0530 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 119      C4F20000 
 120 0538 81EA0101 	  eor T1,T1
 121 053c 0161     	  str T1,[T0,#TIM_SR]
 122 053e E16D     	  ldr T1,[UP,#VID_CNTR]
 123 0540 01F10101 	  add T1,#1 
 124 0544 E165     	  str T1,[UP,#VID_CNTR]
 125              	/** machine state cases **/
 126 0546 226E     	  ldr T2,[UP,#VID_STATE]
 127 0548 002A     	  cmp T2,#ST_VSYNC 
 128 054a 07D0     	  beq state_vsync
 129 054c 012A     	  cmp T2,#ST_PREVID 
 130 054e 2FD0     	  beq state_pre_video 
 131 0550 022A     	  cmp T2,#ST_VIDEO 
 132 0552 36D0     	  beq state_video_out 
 133 0554 032A     	  cmp T2,#ST_POSTVID 
 134 0556 60D0     	  beq state_post_video
 135 0558 FFF7FEBF 	  b default_handler // invalid state 
 136              	/*** vertical sync state **/
 137              	state_vsync:
 138 055c 0129     	  cmp T1,#1
 139 055e 06D1     	  bne 1f 
 140              	/****** set vertical pre-sync  *****/
 141 0560 4FF0DB01 	  mov T1,#SERRATION
 142 0564 0164     	  str T1,[T0,#TIM_CCR4]
 143 0566 40F6E931 	  mov T1,#SYNC_LINE 
 144 056a C162     	  str T1,[T0,#TIM_ARR]
 145 056c 68E0     	  b tv_isr_exit 
 146 056e 0729     	1: cmp T1,#7
 147 0570 03D1     	  bne 2f 
 148              	// vertical sync pulse   
 149 0572 40F62821 	  mov T1,#VSYNC_PULSE
ARM GAS  forth.s 			page 26


 150 0576 0164     	  str T1,[T0,#TIM_CCR4]
 151 0578 62E0     	  b tv_isr_exit
 152 057a 0D29     	2: cmp T1,#13
 153 057c 03D1     	   bne 3f  
 154              	// set vertical post-sync    
 155 057e 4FF0DB01 	   mov T1,#SERRATION 
 156 0582 0164     	   str T1,[T0,#TIM_CCR4]
 157 0584 5CE0     	   b tv_isr_exit   
 158 0586 1229     	3: cmp T1,#18
 159 0588 03D1     	   bne 4f 
 160              	// if even field full line  
 161 058a 616E     	   ldr T1,[UP,#VID_FIELD]
 162 058c 0029     	   cmp T1,#ODD_FIELD  
 163 058e 57D0     	   beq tv_isr_exit 
 164 0590 01E0     	   b sync_end 
 165 0592 1329     	4: cmp T1,#19 
 166 0594 54D1     	   bne tv_isr_exit
 167              	sync_end: 
 168 0596 4FF00901 	   mov T1,#9
 169 059a E165     	   str T1,[UP,#VID_CNTR]
 170 059c 4FF4E171 	   mov T1,#HPULSE 
 171 05a0 0164     	   str T1,[T0,#TIM_CCR4] 
 172 05a2 41F2D471 	   mov T1,#HPER 
 173 05a6 C162     	   str T1,[T0,#TIM_ARR] 
 174 05a8 4FF00101 	   mov T1,#ST_PREVID 
 175 05ac 2166     	   str T1,[UP,#VID_STATE]
 176 05ae 47E0     	   b tv_isr_exit 
 177              	/*****************************/
 178              	state_pre_video:
 179 05b0 2829     	   cmp T1,#VIDEO_FIRST_LINE
 180 05b2 45D4     	   bmi tv_isr_exit 
 181 05b4 4FF00201 	   mov T1,#ST_VIDEO 
 182 05b8 2166     	   str T1,[UP,#VID_STATE]
 183 05ba 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 184 05be C160     	   str T1,[T0,#TIM_DIER]
 185 05c0 3EE0     	   b tv_isr_exit 
 186              	/**************************
 187              	    VIDEO OUTPUT 
 188              	**************************/   
 189              	state_video_out:
 190 05c2 F029     	   cmp T1,#VIDEO_LAST_LINE 
 191 05c4 06D9     	   bls 1f 
 192 05c6 4FF00301 	   mov T1,#ST_POSTVID 
 193 05ca 2166     	   str T1,[UP,#VID_STATE]
 194 05cc 4FF00101 	   mov T1,#1 
 195 05d0 C160     	   str T1,[T0,#TIM_DIER]
 196 05d2 35E0     	   b tv_isr_exit 
 197              	1: // video output
 198 05d4 A06E     	   ldr T0,[UP,#VID_BUFFER]
 199 05d6 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 200 05da 4FF0A003 	   mov T3,#160
 201 05de 03FB01F1 	   mul T1,T3 
 202 05e2 0844     	   add T0,T1  
 203 05e4 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 203      C4F20201 
 204 05ec 0278     	2: ldrb T2,[T0]
 205 05ee 4FEA1212 	   lsr T2,#4 
ARM GAS  forth.s 			page 27


 206 05f2 4A61     	   str T2,[T1,#GPIO_ODR]
 207 05f4 AFF30080 	   nop.w
 208 05f8 AFF30080 	   nop.w 
 209 05fc 10F8012B 	   ldrb T2,[T0],#1
 210 0600 02F00F02 	   and T2,#15 
 211 0604 4A61     	   str T2,[T1,#GPIO_ODR]
 212 0606 AFF30080 	   nop.w
 213 060a AFF30080 	   nop.w  
 214 060e 013B     	   subs T3,#1
 215 0610 ECD1     	   bne 2b  
 216 0612 4FF47022 	   mov T2,#(15<<16) 
 217 0616 8A61     	   str T2,[T1,#GPIO_BSRR]
 218 0618 12E0     	   b tv_isr_exit 
 219              	state_post_video:
 220 061a 4FF48372 	   mov T2,#262
 221 061e 9142     	   cmp T1,T2
 222 0620 0ED4     	   bmi tv_isr_exit     
 223              	// odd field line 262 half line 
 224 0622 616E     	   ldr T1,[UP,VID_FIELD]
 225 0624 11B9     	   cbnz T1, frame_end 
 226 0626 40F6E931 	   mov T1,#SYNC_LINE
 227 062a C162     	   str T1,[T0,#TIM_ARR]      
 228              	frame_end: 
 229 062c 4FF00001 	   mov T1,#ST_VSYNC 
 230 0630 2166     	   str T1,[UP,#VID_STATE]
 231 0632 81EA0101 	   eor T1,T1 
 232 0636 E165     	   str T1,[UP,#VID_CNTR]
 233 0638 616E     	   ldr T1,[UP,#VID_FIELD]
 234 063a 6FEA0101 	   mvn T1,T1  
 235 063e 6166     	   str T1,[UP,#VID_FIELD]
 236              	tv_isr_exit: 
 237 0640 7047     	   _RET   
 238              	
 239              	
 240              	/***************************
 241              	    FORTH WORDS 
 242              	***************************/
 243              	    .equ LINK, 0 
 244              	
 245              	// BACK-COLOR ( -- a )
 246              	//   back color variable 
 247 0642 00000000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 247      0A424143 
 247      4B2D434F 
 247      4C4F5200 
 247      00BF
 248 0654 47F8046D 		_PUSH 
 249 0658 04F19006 		ADD TOS,UP,#BK_COLOR
 250 065c 00F086BD 		_NEXT
 251              	
 252              	// PEN-COLOR ( -- a )
 253              	// pen color variable 
 254 0660 46060000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 254      0950454E 
 254      2D434F4C 
 254      4F5200BF 
 255 0670 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 28


 256 0674 04F19406 		ADD TOS,UP,#PEN_COLOR
 257 0678 00F078BD 		_NEXT 
 258              	
 259              	// COLUMN ( -- a )
 260              	// cursor column variable 
 261 067c 64060000 	  _HEADER COLUMN,6,"COLUMN"
 261      06434F4C 
 261      554D4E00 
 262 0688 47F8046D 	  _PUSH 
 263 068c 04F18C06 	  ADD TOS,UP,#COL 
 264 0690 00F06CBD 	  _NEXT 
 265              	
 266              	// ROW ( -- a )
 267              	// cursor row 
 268 0694 80060000 	  _HEADER CURSOR_ROW,3,"ROW"
 268      03524F57 
 269 069c 47F8046D 	  _PUSH 
 270 06a0 04F18806 	  ADD TOS,UP,#ROW 
 271 06a4 00F062BD 	  _NEXT 
 272              	
 273              	// ROW>Y ( n1 - n2 )
 274              	// convert cursor row to y coord 
 275 06a8 98060000 	  _HEADER ROWY,5,"ROW>Y"
 275      05524F57 
 275      3E5900BF 
 276 06b4 4FF00800 	  mov T0,#CHAR_HEIGHT
 277 06b8 00FB06F6 	  mul TOS,T0 
 278 06bc 00F056BD 	  _NEXT 
 279              	
 280              	// COL>X ( n1 -- n2 )
 281              	// convert cursor column to x coord 
 282 06c0 AC060000 	  _HEADER COLX,5,"COL>X" 
 282      05434F4C 
 282      3E5800BF 
 283 06cc 4FF00600 	  mov T0,#CHAR_WIDTH 
 284 06d0 00FB06F6 	  mul TOS,T0 
 285 06d4 00F04ABD 	  _NEXT 
 286              	
 287              	// FONT ( -- a )
 288              	// return address of font table
 289 06d8 C4060000 	  _HEADER FONT,4,"FONT" 
 289      04464F4E 
 289      540000BF 
 290 06e4 47F8046D 	  _PUSH 
 291 06e8 E34E     	  ldr TOS,=font_6x8 
 292 06ea 00F03FBD 	  _NEXT 
 293              	
 294              	// VIDBUFF ( -- a )
 295              	// address of video buffer 
 296 06ee DC060000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 296      07564944 
 296      42554646 
 296      00BF
 297 06fc 47F8046D 	  _PUSH 
 298 0700 A66E     	  LDR TOS,[UP,#VID_BUFFER]
 299 0702 00F033BD 	  _NEXT 
 300              	
ARM GAS  forth.s 			page 29


 301              	
 302              	// PLOT ( x y op -- )
 303              	// draw a pixel 
 304              	//    0 back color 
 305              	//    1 pen color 
 306              	//    2 invert (invert color pixels )
 307              	//    3 xor pen color  
 308 0706 F2060000 	    _HEADER PLOT,4,"PLOT"
 308      04504C4F 
 308      5400
 309              	// compute video buffer byte address from coords
 310 0710 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 311 0712 4FF0A002 	    mov T2,#BPR // bytes per row  
 312 0716 02FB00F0 	    mul T0,T2 
 313 071a 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 314 071e 1044     	    add T0,T2 
 315 0720 A36E     	    ldr T3,[UP,#VID_BUFFER] 
 316 0722 0344     	    add T3,T0 // T3 -> byte address 
 317 0724 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 318 0726 4FF00F02 	    mov T2,#15 // AND mask 
 319 072a 11F0010F 	    tst T1,#1 
 320 072e 01D0     	    beq 1f 
 321 0730 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 322 0734 D148     	1:  ldr T0,=plot_op 
 323 0736 D0E806F0 	    tbb [T0,TOS]
 324              	op_back:
 325 073a 05EA0205 	    and WP,T2 // mask out nibble 
 326 073e 94F89000 	    ldrb T0,[UP,#BK_COLOR]
 327 0742 11F0010F 	    tst T1,#1 
 328 0746 01D1     	    bne 1f 
 329 0748 4FEA0010 	    lsl T0,#4 // high nibble  
 330 074c 45EA0005 	1:  orr WP,T0  
 331 0750 1D70     	    strb WP,[T3]
 332 0752 1AE0     	    b 9f 
 333              	op_pen: 
 334 0754 05EA0205 	    and WP,T2 
 335 0758 94F89400 	    ldrb T0,[UP,#PEN_COLOR]
 336 075c 11F0010F 	    tst T1,#1
 337 0760 01D1     	    bne 1f 
 338 0762 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 339 0766 45EA0005 	1:	orr WP,T0 
 340 076a 1D70     	    strb WP,[T3]
 341 076c 0DE0     	    b 9f 
 342              	op_invert:
 343 076e 85EA0205 	    eor WP,T2 
 344 0772 1D70     	    strb WP,[T3]
 345 0774 09E0     	    b 9f 
 346              	op_xor:
 347 0776 D4F89400 	    ldr T0,[UP,#PEN_COLOR]
 348 077a 11F0010F 	    tst T1,#1 
 349 077e 01D1     	    bne 1f 
 350 0780 4FEA0010 	    lsl T0,#4 
 351 0784 85EA0005 	1:  eor WP,T0 
 352 0788 1D70     	    strb WP,[T3]
 353 078a 57F8046B 	9:  _POP 
 354 078e 00F0EDBC 	    _NEXT 
 355              	
ARM GAS  forth.s 			page 30


 356 0792 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 357              	
 358              	
 359              	// VSYNC ( -- )
 360              	// wait vertical sync phase 
 361 0796 0A070000 	    _HEADER VSYNC,5,"VSYNC"
 361      05565359 
 361      4E43
 362 07a0 E06D     	1:  ldr T0,[UP,#VID_CNTR]
 363 07a2 0028     	    cmp T0,#0
 364 07a4 FCD1     	    bne 1b
 365 07a6 00F0E1BC 	    _NEXT 
 366              	
 367              	// CLS ( -- )
 368              	// clear TV screen 
 369 07aa 9A070000 	    _HEADER CLS,3,"CLS"
 369      03434C53 
 369      00BF
 370 07b4 80EA0000 	    eor T0,T0 
 371 07b8 94F89010 	    ldrb T1,[UP,#BK_COLOR]
 372 07bc 40EA0100 	    orr T0,T1 
 373 07c0 4FEA0111 	    lsl T1,#4 
 374 07c4 40EA0100 	    orr T0,T1 
 375 07c8 4FEA0021 	    lsl T1,T0,#8 
 376 07cc 40EA0100 	    orr T0,T1 
 377 07d0 4FEA0041 	    lsl T1,T0,#16
 378 07d4 40EA0100 	    orr T0,T1 
 379 07d8 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 380 07dc A26E     	    ldr T2,[UP,#VID_BUFFER]
 381 07de 5050     	1:	str T0,[T2,T1]
 382 07e0 0439     	    subs T1,#4
 383 07e2 FCD1     	    bne 1b
 384 07e4 1060     	    str T0,[T2]
 385 07e6 80EA0000 	    eor T0,T0 
 386 07ea C4F88800 	    str T0,[UP,#ROW]
 387 07ee C4F88C00 	    str T0,[UP,#COL]
 388 07f2 00F0BBBC 	    _NEXT 
 389              	
 390              	
 391              	// CLRLINE ( n -- )
 392              	// clear text line 
 393 07f6 AE070000 	  _HEADER CLRLINE,7,"CLRLINE"
 393      07434C52 
 393      4C494E45 
 393      00BF
 394 0804 504700BF 	  _NEST
 395 0808 DD120000 	  _DOLIT (BPR*CHAR_HEIGHT)
 395      00050000 
 396 0810 11140000 	  _ADR DUPP  
 397 0814 B9130000 	  _ADR TOR 
 398 0818 F5140000 	  _ADR STAR
 399 081c FD060000 	  _ADR VIDBUFF
 400 0820 D5140000 	  _ADR PLUS
 401 0824 91130000 	  _ADR RFROM   
 402 0828 DD120000 	  _DOLIT 0 
 402      00000000 
 403 0830 411C0000 	  _ADR FILL 
ARM GAS  forth.s 			page 31


 404 0834 73110000 	  _UNNEST 
 405              	
 406              	// SCROLLUP ( -- )
 407              	// scroll up tv screen 1 char height 
 408 0838 FA070000 	  _HEADER SCROLLUP,8,"SCROLLUP"
 408      08534352 
 408      4F4C4C55 
 408      500000BF 
 409 0848 504700BF 	  _NEST 
 410 084c FD060000 	  _ADR VIDBUFF 
 411 0850 11140000 	  _ADR DUPP 
 412 0854 DD120000 	  _DOLIT BPR*CHAR_HEIGHT 
 412      00050000 
 413 085c 11140000 	  _ADR DUPP 
 414 0860 B9130000 	  _ADR TOR 
 415 0864 D5140000 	  _ADR PLUS 
 416 0868 21140000 	  _ADR SWAP 
 417 086c DD120000 	  _DOLIT VIDEO_BUFFER_SIZE 
 417      007D0000 
 418 0874 91130000 	  _ADR RFROM  
 419 0878 E5140000 	  _ADR SUBB 
 420 087c 0D1C0000 	  _ADR MOVE
 421 0880 DD120000 	  _DOLIT 24 
 421      18000000 
 422 0888 05080000 	  _ADR CLRLINE 
 423 088c 73110000 	  _UNNEST 
 424              	
 425              	//  RIGHT ( -- )
 426              	// move cursor 1 char. right 
 427 0890 3C080000 	  _HEADER RIGHT,5,"RIGHT"
 427      05524947 
 427      485400BF 
 428 089c D4F88C00 	  ldr T0,[UP,#COL]
 429 08a0 00F10100 	  add T0,#1
 430 08a4 3528     	  cmp T0,#53
 431 08a6 09D5     	  bpl TVCR  
 432 08a8 C4F88C00 	  str T0,[UP,#COL]
 433 08ac 00F05EBC 	  _NEXT 
 434              	
 435              	
 436              	// TV-CR 
 437              	// carriage return line feed 
 438 08b0 94080000 	  _HEADER TVCR,5,"TV-CR"
 438      0554562D 
 438      435200BF 
 439 08bc 80EA0000 	  eor T0,T0 
 440 08c0 C4F88C00 	  str T0,[UP,#COL]
 441 08c4 D4F88800 	  ldr T0,[UP,#ROW]
 442 08c8 1828     	  cmp T0,#24
 443 08ca 05D0     	  beq 2f 
 444 08cc 00F10100 	  add T0,#1 
 445 08d0 C4F88800 	  str T0,[UP,#ROW]
 446 08d4 00F04ABC 	  _NEXT 
 447              	// calling a colon word 
 448              	// from a code word   
 449 08d8 48F804CD 	2: STMFD	RSP!,{IP}
 450 08dc DFF8A0C1 	   ldr IP,=3f 
ARM GAS  forth.s 			page 32


 451 08e0 00F044BC 	   b INEXT 
 452              	3: 
 453 08e4 49080000 	  _ADR SCROLLUP 
 454 08e8 73110000 	  _UNNEST  
 455              	
 456              	
 457              	// extract font pixel 
 458              	FONT_PIXEL: // ( r -- 0|1 )
 459 08ec 4FF08000 	    mov T0,#128 
 460 08f0 06EA0006 	    and TOS,T0 
 461 08f4 4FEAD616 	    lsr TOS,#7
 462 08f8 00F038BC 	    _NEXT 
 463              	
 464              	// increment x coord 
 465              	INCR_X: // ( x y -- x' y )
 466 08fc 3868     	  ldr T0,[DSP]
 467 08fe 00F10100 	  add T0,#1 
 468 0902 3860     	  str T0,[DSP]
 469 0904 00F032BC 	  _NEXT 
 470              	
 471              	// shift font row data
 472              	NEXT_PIXEL:
 473 0908 4FEA4606 	    lsl TOS,#1
 474 090c 00F02EBC 	    _NEXT 
 475              	
 476              	
 477              	// CHAR_ROW 
 478              	// plot character row 
 479              	// {x y r -- }
 480              	//  _HEADER CHAR_ROW,7,"CHARROW"
 481              	CHAR_ROW:  
 482 0910 504700BF 	    _NEST 
 483 0914 DD120000 	    _DOLIT 5 
 483      05000000 
 484 091c B9130000 	    _ADR TOR 
 485 0920 B9130000 	1:  _ADR TOR 
 486 0924 49160000 	    _ADR DDUP 
 487 0928 A5130000 	    _ADR RAT
 488 092c ED080000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 489 0930 11070000 	    _ADR PLOT 
 490 0934 FD080000 	    _ADR INCR_X 
 491 0938 91130000 	    _ADR RFROM 
 492 093c 09090000 	    _ADR NEXT_PIXEL
 493              	    //_DOLIT 1 
 494              	    //_ADR LSHIFT 
 495 0940 01130000 	    _DONXT 1b
 495      20090000 
 496 0948 35160000 	    _ADR TDROP 
 497 094c 73110000 	    _UNNEST 
 498              	
 499              	
 500              	CHAR_FONT: // ( c -- c-adr )
 501 0950 A6F12006 	   sub TOS,#32
 502 0954 4FF00800 	   mov T0,#8 
 503 0958 00FB06F6 	   mul TOS,T0 
 504 095c 4648     	   ldr T0,=font_6x8
 505 095e 0644     	   add TOS,T0 
ARM GAS  forth.s 			page 33


 506 0960 00F004BC 	   _NEXT 
 507              	
 508              	/**********************************
 509              	   TV-PUTC ( c -- )
 510              	   draw character in video buffer
 511              	**********************************/
 512 0964 B4080000 	    _HEADER TVPUTC,7,"TV-PUTC"
 512      0754562D 
 512      50555443 
 513 0970 504700BF 	    _NEST 
 514 0974 51090000 	    _ADR CHAR_FONT 
 515 0978 89060000 	    _ADR COLUMN 
 516 097c 65130000 	    _ADR AT
 517 0980 CD060000 	    _ADR COLX  // x coord 
 518 0984 9D060000 	    _ADR CURSOR_ROW 
 519 0988 65130000 	    _ADR AT    
 520 098c B5060000 	    _ADR ROWY  // {c-adr x y -- } 
 521 0990 F9150000 	    _ADR ROT  // TEST 
 522 0994 DD120000 	    _DOLIT 7   
 522      07000000 
 523 099c B9130000 	    _ADR TOR  
 524 09a0 B9130000 	1:  _ADR TOR  // { x y }
 525 09a4 49160000 	    _ADR DDUP  // { x y x y }
 526 09a8 A5130000 	    _ADR RAT 
 527 09ac 85130000 	    _ADR CAT   // { x y x y r }
 528 09b0 11090000 	    _ADR CHAR_ROW 
 529 09b4 31150000 	    _ADR ONEP // {x y' }
 530 09b8 91130000 	    _ADR RFROM 
 531 09bc 31150000 	    _ADR ONEP // {x y' c-adr' }
 532 09c0 01130000 	    _DONXT 1b
 532      A0090000 
 533 09c8 35160000 	    _ADR TDROP  
 534 09cc 9D080000 	    _ADR RIGHT
 535 09d0 73110000 	    _UNNEST  
 536              	
 537              	// PRINT ( cstr -- )
 538              	// print counted string 
 539 09d4 68090000 	    _HEADER PRINT,5,"PRINT"
 539      05505249 
 539      4E5400BF 
 540 09e0 504700BF 	    _NEST 
 541 09e4 95170000 	    _ADR COUNT 
 542 09e8 41150000 	    _ADR ONEM 
 543 09ec B9130000 	    _ADR TOR 
 544 09f0 11140000 	1:  _ADR DUPP 
 545 09f4 85130000 	    _ADR CAT 
 546 09f8 71090000 	    _ADR TVPUTC 
 547 09fc 31150000 	    _ADR ONEP 
 548 0a00 01130000 	    _DONXT 1b 
 548      F0090000 
 549 0a08 01140000 	    _ADR DROP 
 550 0a0c 73110000 	    _UNNEST 
 551              	
 552              	// CURPOS ( line col -- )
 553              	// set text cursor position 
 554 0a10 D8090000 	    _HEADER CURPOS,6,"CURPOS"
 554      06435552 
ARM GAS  forth.s 			page 34


 554      504F5300 
 555 0a1c 352E     	    cmp TOS,#53
 556 0a1e 01D4     	    bmi 1f 
 557 0a20 4FF03406 	    mov TOS,#52
 558 0a24 C4F88C60 	1:  str TOS,[UP,#COL]
 559 0a28 57F8046B 	    _POP
 560 0a2c 192E     	    cmp TOS,#25
 561 0a2e 01D4     	    bmi 1f 
 562 0a30 4FF01806 	    mov TOS,#24 
 563 0a34 C4F88860 	1:  str TOS,[UP,#ROW]
 564 0a38 57F8046B 	    _POP 
 565 0a3c 96E3     	    _NEXT 
 566              	
 567              	// INPUT ( -- c-adr )
 568              	// input a string in pad 
 569 0a3e 140A0000 	    _HEADER INPUT,5,"INPUT"
 569      05494E50 
 569      5554
 570 0a48 504700BF 	    _NEST 
 571 0a4c 851B0000 	    _ADR PAD 
 572 0a50 11140000 	    _ADR DUPP 
 573 0a54 31150000 	    _ADR ONEP 
 574 0a58 DD120000 	    _DOLIT 53
 574      35000000 
 575 0a60 AD260000 	    _ADR ACCEP
 576 0a64 21140000 	    _ADR SWAP 
 577 0a68 01140000 	    _ADR DROP 
 578 0a6c 35140000 	    _ADR OVER 
 579 0a70 71130000 	    _ADR CSTOR  
 580 0a74 73110000 	    _UNNEST 
 581              	
 582              	
 583              		.section .rodata 
 584              		.p2align 2
 585              	/********************************************
 586              	    TV font  ASCII 6 pixels x 8 pixels 
 587              	********************************************/
 588              	font_6x8:
 589 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 589      00000000 
 590 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 590      20002000 
 591 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 591      00000000 
 592 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 592      F8505000 
 593 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 593      28F02000 
 594 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 594      40981800 
 595 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 595      A8906800 
 596 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 596      00000000 
 597 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 597      40201000 
 598 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
ARM GAS  forth.s 			page 35


 598      10204000 
 599 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 599      A8200000 
 600 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 600      20200000 
 601 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 601      60204000 
 602 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 602      00000000 
 603 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 603      00606000 
 604 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 604      40800000 
 605 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 605      C8887000 
 606 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 606      2020F800 
 607 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 607      4080F800 
 608 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 608      0808F000 
 609 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 609      F8101000 
 610 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 610      0808F000 
 611 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 611      88887000 
 612 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 612      40404000 
 613 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 613      88887000 
 614 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 614      08087000 
 615 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 615      60600000 
 616 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 616      60204000 
 617 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 617      40201000 
 618 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 618      F8000000 
 619 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 619      10204000 
 620 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 620      20002000 
 621 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 621      A8A87000 
 622 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 622      88888800 
 623 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 623      8888F000 
 624 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 624      80807800 
 625 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 625      8888F000 
 626 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 626      8080F800 
ARM GAS  forth.s 			page 36


 627 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 627      80808000 
 628 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 628      88887000 
 629 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 629      88888800 
 630 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 630      20207000 
 631 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 631      08906000 
 632 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 632      A0908800 
 633 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 633      8080F800 
 634 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 634      88888800 
 635 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 635      98888800 
 636 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 636      88887000 
 637 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 637      80808000 
 638 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 638      A8987800 
 639 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 639      A0908800 
 640 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 640      0808F000 
 641 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 641      20202000 
 642 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 642      88887000 
 643 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 643      88502000 
 644 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 644      A8D88800 
 645 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 645      50888800 
 646 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 646      20202000 
 647 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 647      8080F800 
 648 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 648      40406000 
 649 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 649      10080000 
 650 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 650      08081800 
 651 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 651      00000000 
 652 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 652      0000F800 
 653 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 653      00000000 
 654 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 654      78887800 
 655 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
ARM GAS  forth.s 			page 37


 655      C888F000 
 656 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 656      80887000 
 657 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 657      98887800 
 658 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 658      F8807000 
 659 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 659      40404000 
 660 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 660      88780870 
 661 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 661      88888800 
 662 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 662      20202000 
 663 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 663      10906000 
 664 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 664      C0A09000 
 665 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 665      20207000 
 666 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 666      A8888800 
 667 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 667      88888800 
 668 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 668      88887000 
 669 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 669      88F08080 
 670 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 670      90B05018 
 671 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 671      80808000 
 672 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 672      7008F000 
 673 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 673      40483000 
 674 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 674      88986800 
 675 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 675      88502000 
 676 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 676      A8A85000 
 677 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 677      20508800 
 678 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 678      88780870 
 679 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 679      2040F800 
 680 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 680      40402000 
 681 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 681      20202000 
 682 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 682      20204000 
 683 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 683      10000000 
ARM GAS  forth.s 			page 38


 684 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 684      FCFCFCFC 
 685 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 685      10204000 
 686 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 686      40201000 
 687 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 687      20200000 
 688 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 688      A8702000 
 689 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 689      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
ARM GAS  forth.s 			page 39


   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	 
  15              	// control keys 
  16              	SC_TAB =	    0x0D    //standard
  17              	SC_ENTER =	    0x5A    //standard
  18              	SC_CAPS =	    0x58    //standard
  19              	SC_NUM =	    0x77    //standard
  20              	SC_SCROLL   =	    0x7E    //standard
  21              	SC_LSHIFT =	    0x12    //standard
  22              	SC_RSHIFT =	    0x59    //standard
  23              	SC_LCTRL =	    0x14    //standard
  24              	SC_LALT =	    0x11    //standard
  25              	SC_BKSP =	    0x66    //standard
  26              	SC_ESC =	    0x76    //standard
  27              	SC_F1 =	    0x05    //standard
  28              	SC_F2 =	    0x06    //standard
  29              	SC_F3 =	    0x04    //standard
  30              	SC_F4 =	    0x0c    //standard
  31              	SC_F5 =	    0x03    //standard
  32              	SC_F6 =	    0x0b    //standard
  33              	SC_F7 =	    0x83    //standard
  34              	SC_F8 =	    0x0a    //standard
  35              	SC_F9 =	    0x01    //standard
  36              	SC_F10 =	    0x09    //standard
  37              	SC_F11 =	    0x78    //standard
  38              	SC_F12 =	    0x07    //standard
  39              	SC_KPMUL =	    0x7c    //standard
  40              	SC_KPMINUS =	    0x7b    //standard
  41              	SC_KPPLUS =	    0x79    //standard
  42              	SC_KPDOT =	    0x71    //standard
  43              	SC_KP0 =	    0x70    //standard
  44              	SC_KP1 =	    0x69    //standard
  45              	SC_KP2 =	    0x72    //standard
  46              	SC_KP3 =	    0x7a    //standard
  47              	SC_KP4 =	    0x6b    //standard
  48              	SC_KP5 =	    0x73    //standard
  49              	SC_KP6 =	    0x74    //standard
  50              	SC_KP7 =	    0x6c    //standard
  51              	SC_KP8 =	    0x75    //standard
  52              	SC_KP9 =	    0x7d    //standard
  53              	
  54              	// extended keycode, i.e. preceded by 0xe0
  55              	SC_RCTRL =   0x14
  56              	SC_LGUI =    0x1f
  57              	SC_RGUI =    0x27 
  58              	SC_RALT =    0x11
  59              	SC_APPS =    0x2f
  60              	SC_UP	 =    0x75
  61              	SC_DOWN =    0x72
  62              	SC_LEFT =    0x6B
ARM GAS  forth.s 			page 40


  63              	SC_RIGHT =   0x74
  64              	SC_INSERT =  0x70
  65              	SC_HOME =    0x6c
  66              	SC_PGUP =    0x7d
  67              	SC_PGDN =    0x7a
  68              	SC_DEL	 =    0x71
  69              	SC_END	 =    0x69
  70              	SC_KPDIV =   0x4a
  71              	SC_KPENTER = 0x5a
  72              	SC_LWINDOW = 0x1f
  73              	SC_RWINDOW = 0x27
  74              	SC_MENU = 0x5d 
  75              	 
  76              	 
  77              	//virtual key codes   
  78              	VK_BACK =	8
  79              	VK_TAB =	9
  80              	VK_ESC =	27
  81              	VK_ENTER =	'\r'
  82              	VK_SPACE =	' ' 
  83              	VK_DELETE =	127 
  84              	VK_F1 =	128
  85              	VK_F2 =	129
  86              	VK_F3 =	130
  87              	VK_F4 =	131
  88              	VK_F5 =	132
  89              	VK_F6 =	133
  90              	VK_F7 =	134
  91              	VK_F8 =	135
  92              	VK_F9 =	136
  93              	VK_F10 =	138
  94              	VK_F11 =	139
  95              	VK_F12 =	140
  96              	VK_UP =	141
  97              	VK_DOWN =	142
  98              	VK_LEFT =	143
  99              	VK_RIGHT =	144
 100              	VK_HOME =	145
 101              	VK_END =	146
 102              	VK_PGUP =	147
 103              	VK_PGDN =	148
 104              	VK_INSERT =	149
 105              	VK_APPS =	151
 106              	VK_PRN	=	152
 107              	VK_PAUSE =	153
 108              	VK_NLOCK =    154 // numlock
 109              	VK_CLOCK =	155 // capslock
 110              	VK_LSHIFT =	156
 111              	VK_LCTRL =	157
 112              	VK_LALT =	158
 113              	VK_RSHIFT =	159
 114              	VK_LGUI =	160
 115              	VK_RCTRL =	161
 116              	VK_RGUI =	162
 117              	VK_RALT =	163
 118              	VK_SCROLL =	164
 119              	VK_NUM	=	165 
ARM GAS  forth.s 			page 41


 120              	VK_CAPS =	168
 121              	//<SHIFT>-<KEY> 
 122              	VK_SUP	=	169
 123              	VK_SDOWN =	170
 124              	VK_SLEFT =	171
 125              	VK_SRIGHT =	172
 126              	VK_SHOME =	173
 127              	VK_SEND	=	174
 128              	VK_SPGUP =	175
 129              	VK_SPGDN =	176
 130              	VK_SDEL  =    191
 131              	//<CTRL>-<KEY>
 132              	VK_CUP	=	177
 133              	VK_CDOWN =	178	
 134              	VK_CLEFT =	179
 135              	VK_CRIGHT =	180
 136              	VK_CHOME =	181
 137              	VK_CEND =	182
 138              	VK_CPGUP =	183
 139              	VK_CPGDN =	184
 140              	VK_CDEL  =    185
 141              	VK_CBACK =    186
 142              	VK_LWINDOW =  187
 143              	VK_RWINDOW =  188
 144              	VK_MENU	=   189
 145              	VK_SLEEP =	190
 146              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0a84 1C61     	   .byte 0x1c,'a' 
   9 0a86 3262     	   .byte 0x32,'b'
  10 0a88 2163     	   .byte 0x21,'c'
  11 0a8a 2364     	   .byte 0x23,'d'
  12 0a8c 2465     	   .byte 0x24,'e'
  13 0a8e 2B66     	   .byte 0x2b,'f'
  14 0a90 3467     	   .byte 0x34,'g'
  15 0a92 3368     	   .byte 0x33,'h'
  16 0a94 4369     	   .byte 0x43,'i'
  17 0a96 3B6A     	   .byte 0x3B,'j'
  18 0a98 426B     	   .byte 0x42,'k'
  19 0a9a 4B6C     	   .byte 0x4b,'l'
  20 0a9c 3A6D     	   .byte 0x3a,'m'
  21 0a9e 316E     	   .byte 0x31,'n'
  22 0aa0 446F     	   .byte 0x44,'o'
  23 0aa2 4D70     	   .byte 0x4d,'p'
  24 0aa4 1571     	   .byte 0x15,'q'
  25 0aa6 2D72     	   .byte 0x2d,'r'
  26 0aa8 1B73     	   .byte 0x1b,'s'
  27 0aaa 2C74     	   .byte 0x2c,'t'
  28 0aac 3C75     	   .byte 0x3c,'u'
  29 0aae 2A76     	   .byte 0x2a,'v'
  30 0ab0 1D77     	   .byte 0x1d,'w'
  31 0ab2 2278     	   .byte 0x22,'x'
  32 0ab4 3579     	   .byte 0x35,'y'
  33 0ab6 1A7A     	   .byte 0x1a,'z'
ARM GAS  forth.s 			page 42


  34 0ab8 4530     	   .byte 0x45,'0'
  35 0aba 1631     	   .byte 0x16,'1'
  36 0abc 1E32     	   .byte 0x1e,'2'
  37 0abe 2633     	   .byte 0x26,'3'
  38 0ac0 2534     	   .byte 0x25,'4'
  39 0ac2 2E35     	   .byte 0x2e,'5'
  40 0ac4 3636     	   .byte 0x36,'6'
  41 0ac6 3D37     	   .byte 0x3d,'7'
  42 0ac8 3E38     	   .byte 0x3e,'8'
  43 0aca 4639     	   .byte 0x46,'9'
  44 0acc 0E60     	   .byte 0x0e,'`'
  45 0ace 4E2D     	   .byte 0x4e,'-'
  46 0ad0 553D     	   .byte 0x55,'='
  47 0ad2 5D5C     	   .byte 0x5d,'\\'
  48 0ad4 545B     	   .byte 0x54,'['
  49 0ad6 5B5D     	   .byte 0x5b,']'
  50 0ad8 4C3B     	   .byte 0x4c,';'
  51 0ada 5227     	   .byte 0x52,'\''
  52 0adc 412C     	   .byte 0x41,','
  53 0ade 492E     	   .byte 0x49,'.'
  54 0ae0 7C2A     	   .byte 0x7c,'*'
  55 0ae2 792B     	   .byte 0x79,'+'
  56 0ae4 2920     	   .byte 0x29,' '
  57 0ae6 5A0D     	   .byte SC_ENTER,'\r'
  58 0ae8 6608     	   .byte SC_BKSP,8
  59 0aea 0D09     	   .byte SC_TAB,9
  60 0aec 761B     	   .byte SC_ESC,27
  61 0aee 119E     	   .byte SC_LALT,VK_LALT 
  62 0af0 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0af2 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0af4 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0af6 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0af8 589B     	   .byte SC_CAPS,VK_CLOCK 
  67 0afa 0580     	   .byte SC_F1,VK_F1
  68 0afc 0681     	   .byte SC_F2,VK_F2
  69 0afe 0482     	   .byte SC_F3,VK_F3
  70 0b00 0C83     	   .byte SC_F4,VK_F4
  71 0b02 0384     	   .byte SC_F5,VK_F5
  72 0b04 0B85     	   .byte SC_F6,VK_F6
  73 0b06 8386     	   .byte SC_F7,VK_F7
  74 0b08 0A87     	   .byte SC_F8,VK_F8
  75 0b0a 0188     	   .byte SC_F9,VK_F9
  76 0b0c 098A     	   .byte SC_F10,VK_F10
  77 0b0e 788B     	   .byte SC_F11,VK_F11
  78 0b10 078C     	   .byte SC_F12,VK_F12
  79 0b12 7030     	   .byte SC_KP0,'0'
  80 0b14 6931     	   .byte SC_KP1,'1'
  81 0b16 7232     	   .byte SC_KP2,'2'
  82 0b18 7A33     	   .byte SC_KP3,'3'
  83 0b1a 6B34     	   .byte SC_KP4,'4'
  84 0b1c 7335     	   .byte SC_KP5,'5'
  85 0b1e 7436     	   .byte SC_KP6,'6'
  86 0b20 6C37     	   .byte SC_KP7,'7'
  87 0b22 7538     	   .byte SC_KP8,'8'
  88 0b24 7D39     	   .byte SC_KP9,'9'
  89 0b26 7C2A     	   .byte SC_KPMUL,'*'
  90 0b28 4A2F     	   .byte SC_KPDIV,'/'
ARM GAS  forth.s 			page 43


  91 0b2a 792B     	   .byte SC_KPPLUS,'+'
  92 0b2c 7B2D     	   .byte SC_KPMINUS,'-'
  93 0b2e 712E     	   .byte SC_KPDOT,'.'
  94 0b30 5A0D     	   .byte SC_KPENTER,'\r'
  95 0b32 0000     	   .byte 0,0
  96              	   
  97              	// shifted key 
  98              	shifted:
  99 0b34 6141     	   .byte 'a','A'
 100 0b36 6242     	   .byte 'b','B'
 101 0b38 6343     	   .byte 'c','C'
 102 0b3a 6444     	   .byte 'd','D'
 103 0b3c 6545     	   .byte 'e','E'
 104 0b3e 6646     	   .byte 'f','F'
 105 0b40 6747     	   .byte 'g','G'
 106 0b42 6848     	   .byte 'h','H'
 107 0b44 6949     	   .byte 'i','I'
 108 0b46 6A4A     	   .byte 'j','J'
 109 0b48 6B4B     	   .byte 'k','K'
 110 0b4a 6C4C     	   .byte 'l','L'
 111 0b4c 6D4D     	   .byte 'm','M'
 112 0b4e 6E4E     	   .byte 'n','N'
 113 0b50 6F4F     	   .byte 'o','O'
 114 0b52 7050     	   .byte 'p','P'
 115 0b54 7151     	   .byte 'q','Q'
 116 0b56 7252     	   .byte 'r','R'
 117 0b58 7353     	   .byte 's','S'
 118 0b5a 7454     	   .byte 't','T'
 119 0b5c 7555     	   .byte 'u','U'
 120 0b5e 7656     	   .byte 'v','V'
 121 0b60 7757     	   .byte 'w','W'
 122 0b62 7858     	   .byte 'x','X'
 123 0b64 7959     	   .byte 'y','Y'
 124 0b66 7A5A     	   .byte 'z','Z'
 125 0b68 3121     	   .byte '1','!'
 126 0b6a 3240     	   .byte '2','@'
 127 0b6c 3323     	   .byte '3','#'
 128 0b6e 3424     	   .byte '4','$'
 129 0b70 3525     	   .byte '5','%'
 130 0b72 365E     	   .byte '6','^'
 131 0b74 3726     	   .byte '7','&'
 132 0b76 382A     	   .byte '8','*'
 133 0b78 3928     	   .byte '9','('
 134 0b7a 3029     	   .byte '0',')'
 135 0b7c 2D5F     	   .byte '-','_'
 136 0b7e 3D2B     	   .byte '=','+'
 137 0b80 607E     	   .byte '`','~'
 138 0b82 2722     	   .byte '\'','"'
 139 0b84 2C3C     	   .byte ',','<'
 140 0b86 2E3E     	   .byte '.','>'
 141 0b88 2F3F     	   .byte '/','?'
 142 0b8a 5C7C     	   .byte '\\','|'
 143 0b8c 3B3A     	   .byte ';',':'
 144 0b8e 5B7B     	   .byte '[','{'
 145 0b90 5D7D     	   .byte ']','}'
 146 0b92 0000     	   .byte 0,0
 147              	   
ARM GAS  forth.s 			page 44


 148              	//alt char keys 
 149              	altchar:
 150 0b94 315C     	   .byte '1','\\'
 151 0b96 3240     	   .byte '2','@'
 152 0b98 332F     	   .byte '3','/'
 153              	//   .byte '4','�'
 154              	//   .byte '5','�'
 155 0b9a 363F     	   .byte '6','?'
 156 0b9c 377C     	   .byte '7','|'
 157              	//   .byte '8','�'
 158 0b9e 397B     	   .byte '9','{'
 159 0ba0 307D     	   .byte '0','}'
 160              	//   .byte '-','�'
 161              	//   .byte '=','�'
 162 0ba2 0000     	   .byte 0,0
 163              	   
 164              	// extended keycodes 
 165              	extended:
 166 0ba4 14A1     	    .byte SC_RCTRL,VK_RCTRL
 167 0ba6 1FA0     	    .byte SC_LGUI,VK_LGUI
 168 0ba8 27A2     	    .byte SC_RGUI,VK_RGUI 
 169 0baa 11A3     	    .byte SC_RALT,VK_RALT
 170 0bac 2F97     	    .byte SC_APPS,VK_APPS
 171 0bae 758D     	    .byte SC_UP,VK_UP
 172 0bb0 728E     	    .byte SC_DOWN,VK_DOWN
 173 0bb2 6B8F     	    .byte SC_LEFT,VK_LEFT
 174 0bb4 7490     	    .byte SC_RIGHT,VK_RIGHT
 175 0bb6 7095     	    .byte SC_INSERT,VK_INSERT
 176 0bb8 6C91     	    .byte SC_HOME,VK_HOME
 177 0bba 7D93     	    .byte SC_PGUP,VK_PGUP
 178 0bbc 7A94     	    .byte SC_PGDN,VK_PGDN
 179 0bbe 717F     	    .byte SC_DEL,VK_DELETE
 180 0bc0 6992     	    .byte SC_END,VK_END
 181 0bc2 4A2F     	    .byte SC_KPDIV,'/'
 182 0bc4 5A0D     	    .byte SC_KPENTER,'\r'
 183 0bc6 1200     	    .byte 0x12,0
 184 0bc8 7C00     	    .byte 0x7c,0
 185 0bca 0000     	    .byte 0,0
 186              	    
 187              	   
 188              	// CTRL-n  keycodes 
 189              	controls:
 190 0bcc 1FA0     	   .byte SC_LGUI,VK_LGUI
 191 0bce 14A1     	   .byte SC_RCTRL,VK_RCTRL
 192 0bd0 27A2     	   .byte SC_RGUI,VK_RGUI
 193 0bd2 11A3     	   .byte SC_RALT,VK_RALT
 194 0bd4 2F97     	   .byte SC_APPS,VK_APPS
 195 0bd6 7095     	   .byte SC_INSERT,VK_INSERT
 196 0bd8 6C91     	   .byte SC_HOME,VK_HOME
 197 0bda 7D93     	   .byte SC_PGUP,VK_PGUP
 198 0bdc 717F     	   .byte SC_DEL,VK_DELETE
 199 0bde 6992     	   .byte SC_END,VK_END
 200 0be0 7A94     	   .byte SC_PGDN,VK_PGDN
 201 0be2 758D     	   .byte SC_UP,VK_UP
 202 0be4 6B8F     	   .byte SC_LEFT,VK_LEFT
 203 0be6 728E     	   .byte SC_DOWN,VK_DOWN
 204 0be8 7490     	   .byte SC_RIGHT,VK_RIGHT
ARM GAS  forth.s 			page 45


 205 0bea 4A2F     	   .byte SC_KPDIV,'/'
 206 0bec 5A0D     	   .byte SC_ENTER,VK_ENTER
 207 0bee 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 208 0bf0 149D     	   .byte SC_LCTRL,VK_LCTRL
 209 0bf2 119E     	   .byte SC_LALT,VK_LALT
 210 0bf4 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 211 0bf6 5A0D     	   .byte SC_KPENTER,VK_ENTER
 212 0bf8 761B     	   .byte SC_ESC,VK_ESC
 213 0bfa 779A     	   .byte SC_NUM,VK_NLOCK
 214 0bfc 589B     	   .byte SC_CAPS,VK_CLOCK
 215 0bfe 0000     	   .byte 0,0
 216              	
 217              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_PAR_ERR,(1<<0)     // parity error 
  54              	    .equ KBD_FRAME_ERR,(1<<1)   // frame error 
  55              	    .equ KBD_CAPSLK,(1<<2) // capslock 
  56              	    .equ KBD_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_ALT,(1<<5)    // alt down
  59              	    .equ KBD_ALTCHAR,(1<<6) // altchar down 
  60              	    .equ KBD_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_RXSHIFT,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 12 
  68              	    .equ KBD_CLOCK_PIN, 11
  69              	
  70              	/**********************************
  71              	    kbd_isr
  72              	    interrupt service routine 
  73              	    EXTI0 connected to keyboard 
  74              	    clock signal and triggered 
  75              	    on falling edge 
  76              	**********************************/
  77              	    _GBL_FUNC kbd_isr 
  78 0c00 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  78      C4F20102 
  79 0c08 4FF40060 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  80 0c0c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
ARM GAS  forth.s 			page 46


  81 0c0e 4FF00002 	    _MOV32 r2,GPIOA_BASE_ADR
  81      C4F20202 
  82 0c16 108A     	    ldrh r0,[r2,#GPIO_IDR]
  83 0c18 94F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  84 0c1c 0029     	    cmp r1,#0 
  85 0c1e 19D0     	    beq start_bit 
  86 0c20 0929     	    cmp r1,#9 
  87 0c22 25D0     	    beq parity_bit 
  88 0c24 0A29     	    cmp r1,#10 
  89 0c26 33D0     	    beq stop_bit 
  90              	    // data bit 
  91 0c28 94F86D20 	    ldrb r2,[UP,#KBD_RXSHIFT]
  92 0c2c 4FEA5202 	    lsr r2,#1 
  93 0c30 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
  94 0c34 07D0     	    beq 1f 
  95 0c36 42F08002 	    orr r2,#(1<<7)
  96 0c3a 94F86F00 	    ldrb r0,[UP,#KBD_PARITY]
  97 0c3e 00F10100 	    add r0,#1 
  98 0c42 84F86F00 	    strb r0,[UP,#KBD_PARITY]
  99 0c46 84F86D20 	1:  strb r2,[UP,#KBD_RXSHIFT]
 100 0c4a 01F10101 	    add r1,#1 
 101 0c4e 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
 102 0c52 3EE0     	    b 9f         
 103              	start_bit:
 104 0c54 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) 
 105 0c58 3BD1     	    bne 9f // not a start bit 
 106 0c5a 01F10101 	    add r1,#1 
 107 0c5e 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
 108 0c62 81EA0101 	    eor r1,r1 
 109 0c66 84F86D10 	    strb r1,[UP,#KBD_RXSHIFT]
 110 0c6a 84F86F10 	    strb r1,[UP,#KBD_PARITY]
 111 0c6e 30E0     	    b 9f 
 112              	parity_bit:
 113 0c70 94F86F10 	    ldrb r1,[UP,#KBD_PARITY]
 114 0c74 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 115 0c78 03D0     	    beq 1f  
 116 0c7a 01F10101 	    add r1,#1 
 117 0c7e 84F86F10 	    strb r1,[UP,#KBD_PARITY]  
 118 0c82 94F86C10 	1:  ldrb r1,[UP,#KBD_BITCNTR]
 119 0c86 01F10101 	    add r1,#1
 120 0c8a 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]    
 121 0c8e 20E0     	    b 9f      
 122              	stop_bit:
 123 0c90 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 124 0c94 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 125 0c98 12D0     	    beq 2f
 126 0c9a 94F86F10 	    ldrb r1,[UP,#KBD_PARITY]
 127 0c9e 11F0010F 	    tst r1,#1 
 128 0ca2 12D0     	    beq 8f // parity error 
 129              	// store code in queue 
 130 0ca4 D4F88410 	    ldr r1,[UP,#KBD_QTAIL]
 131 0ca8 04F17002 	    add r2,UP,#KBD_QUEUE
 132 0cac 94F86D00 	    ldrb r0,[UP,#KBD_RXSHIFT]
 133 0cb0 5054     	    strb r0,[r2,r1]
 134 0cb2 01F10101 	    add r1,#1
 135 0cb6 01F00F01 	    and r1,#KBD_QUEUE_SIZE-1
 136 0cba 84F88410 	    strb r1,[UP,#KBD_QTAIL]
ARM GAS  forth.s 			page 47


 137 0cbe 04E0     	    b 8f 
 138              	2:  // framing error 
 139 0cc0 41F00201 	    orr r1,#KBD_FRAME_ERR   
 140 0cc4 84F86E10 	    strb r1,[UP,#KBD_FLAGS]
 141 0cc8 FFE7     	    b 8f 
 142 0cca 80EA0000 	8:  eor r0,r0 
 143 0cce A4F86C00 	    strh r0,[UP,#KBD_BITCNTR]
 144 0cd2 7047     	9:  _RET 
 145              	    
 146              	/**********************************
 147              	    kbd_init 
 148              	    initialize keyboard 
 149              	    PS2 clock on PA11 
 150              	    PS2 data on PA12 
 151              	**********************************/
 152              	    _GBL_FUNC kbd_init 
 153              	// interrupt triggered on falling edge 
 154 0cd4 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 154      C4F20102 
 155 0cdc 4FF40060 	   mov r0,#(1<<KBD_CLOCK_PIN)
 156 0ce0 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI11 
 157 0ce2 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 158 0ce4 80EA0000 	   eor r0,r0 
 159 0ce8 C4F88000 	   str r0,[UP,#KBD_QHEAD]
 160 0cec C4F88400 	   str r0,[UP,#KBD_QTAIL]
 161              	// enable interrupt EXTI15_10_IRQ in NVIC 
 162 0cf0 4FF02800 	   mov r0,#EXTI15_10_IRQ
 163 0cf4 00B5FFF7 	   _CALL nvic_enable_irq 
 163      E8FA5DF8 
 163      04EB
 164 0cfe 7047     	   _RET 
 165              	
 166              	
 167              	// ASYNC-KEY ( -- n )
 168              	// return async key flags 
 169 0d00 420A0000 	    _HEADER ASYNC_KEY,9,"ASYNC-KEY"
 169      09415359 
 169      4E432D4B 
 169      455900BF 
 170 0d10 47F8046D 	    _PUSH 
 171 0d14 94F86E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 172 0d18 06F0FC06 	    and TOS,#0xFC  
 173 0d1c 26E2     	    _NEXT 
 174              	
 175              	// KEY-ERR? ( -- 0|1|2)
 176              	// report keyboard error 
 177 0d1e 040D0000 	    _HEADER KEYERRQ,8,"KEY-ERR?"
 177      084B4559 
 177      2D455252 
 177      3F00
 178 0d2c 47F8046D 	    _PUSH 
 179 0d30 94F86E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 180 0d34 06F00306 	    and TOS,#3 
 181 0d38 18E2     	    _NEXT     
 182              	
 183              	// KEY-RST-ERR ( -- )
 184              	// reset keyboard error flags 
ARM GAS  forth.s 			page 48


 185 0d3a 220D0000 	    _HEADER KEY_RST_ERR,11,"KEY-RST-ERR"
 185      0B4B4559 
 185      2D525354 
 185      2D455252 
 185      00BF
 186 0d4c 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 187 0d50 00F0FC00 	    and T0,#0xFC 
 188 0d54 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 189 0d58 08E2     	    _NEXT 
 190              	
 191              	// KEYCODE 
 192              	// extract keyboard scancode from queue.
 193              	// output:
 194              	//        T0  keycode | 0 
 195              	keycode: 
 196 0d5a 0EB4     	    push {T1,T2,T3}
 197 0d5c 80EA0000 	    eor T0,T0  
 198 0d60 04F17003 	    add T3,UP,#KBD_QUEUE
 199 0d64 D4F88010 	    ldr T1,[UP,#KBD_QHEAD]
 200 0d68 D4F88420 	    ldr T2,[UP,#KBD_QTAIL]
 201 0d6c 9142     	    cmp T1,T2 
 202 0d6e 06D0     	    beq 2f  
 203 0d70 585C     	    ldrb T0,[T3,T1]
 204 0d72 01F10101 	    add T1,#1 
 205 0d76 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 206 0d7a C4F88010 	    str T1,[UP,#KBD_QHEAD]
 207 0d7e 0EBC     	2:  pop {T1,T2,T3}
 208 0d80 7047     	    _RET 
 209              	
 210              	wait_code:
 211 0d82 00B5FFF7 	    _CALL keycode 
 211      E9FF5DF8 
 211      04EB
 212 0d8c 0000     	    movs T0,T0
 213 0d8e F8D0     	    beq wait_code  
 214 0d90 7047     	    _RET 
 215              	
 216              	// translation table scan 
 217              	// input:
 218              	//      T0   target code 
 219              	//      T1   table pointer 
 220              	// output: 
 221              	//        T0   0 | code 
 222              	table_scan:
 223 0d92 04B4     	    push {T2}
 224 0d94 11F8012B 	1:  ldrb T2,[T1],#1
 225 0d98 22B1     	    cbz T2,2f 
 226 0d9a 8242     	    cmp T2,T0
 227 0d9c 02D0     	    beq 2f 
 228 0d9e 01F10101 	    add T1,#1 
 229 0da2 F7E7     	    b 1b 
 230 0da4 0878     	2:  ldrb T0,[T1] 
 231 0da6 04BC     	9:  pop {T2}
 232 0da8 7047     	    _RET 
 233              	
 234              	// INKEY ( -- 0|key )
 235              	// get a character from keyboard
ARM GAS  forth.s 			page 49


 236              	// don't wait for it.
 237 0daa 3E0D0000 	    _HEADER INKEY,5,"INKEY"
 237      05494E4B 
 237      4559
 238 0db4 47F8046D 	    _PUSH 
 239 0db8 86EA0606 	    eor TOS,TOS 
 240 0dbc DF49     	    ldr T1,=sc_ascii // translation table
 241 0dbe 00B5FFF7 	    _CALL keycode
 241      CBFF5DF8 
 241      04EB
 242 0dc8 C8B1     	    cbz T0,inkey_exit  
 243 0dca E028     	    cmp T0,#XT_KEY // extended keycode 
 244 0dcc 2AD0     	    beq xcode
 245 0dce E128     	    cmp T0,#XT2_KEY // pause 
 246 0dd0 1ED0     	    beq pause_key 
 247 0dd2 F028     	    cmp T0,#KEY_REL // key released
 248 0dd4 2ED0     	    beq released 
 249 0dd6 00B5FFF7 	7:  _CALL table_scan 
 249      DBFF5DF8 
 249      04EB
 250 0de0 9B28     	    cmp T0,#VK_CLOCK
 251 0de2 0CD0     	    beq inkey_exit 
 252 0de4 0646     	    mov TOS,T0
 253 0de6 00B500F0 	8:  _CALL do_async_key 
 253      45F85DF8 
 253      04EB
 254 0df0 FF28     	    cmp T0,#255
 255 0df2 04D1     	    bne inkey_exit 
 256 0df4 00B500F0 	    _CALL do_modifiers
 256      64F85DF8 
 256      04EB
 257              	inkey_exit:     
 258 0dfe 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 259 0e02 6FF08001 	    mvn T1,#KBD_REL 
 260 0e06 00EA0100 	    and T0,T1 
 261 0e0a 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 262 0e0e ADE1     	    _NEXT
 263              	pause_key: // discard next 7 codes 
 264 0e10 4FF00701 	    mov T1,#7 
 265 0e14 00B5FFF7 	1:  _CALL wait_code 
 265      B4FF5DF8 
 265      04EB
 266 0e1e 0139     	    subs T1,#1
 267 0e20 F8D1     	    bne 1b 
 268 0e22 A3E1     	    _NEXT 
 269              	xcode: // extended scancode 
 270 0e24 C649     	    ldr T1,=extended // extended code translation table 
 271 0e26 00B5FFF7 	    _CALL wait_code
 271      ABFF5DF8 
 271      04EB
 272 0e30 F028     	    cmp T0,#KEY_REL
 273 0e32 D0D1     	    bne 7b 
 274              	released: // key released
 275 0e34 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 276 0e38 40F08000 	    orr T0,#KBD_REL 
 277 0e3c 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 278 0e40 00B5FFF7 	    _CALL wait_code 
ARM GAS  forth.s 			page 50


 278      9EFF5DF8 
 278      04EB
 279 0e4a 00B5FFF7 	    _CALL table_scan
 279      A1FF5DF8 
 279      04EB
 280 0e54 9B28     	    cmp T0,#VK_CLOCK
 281 0e56 05D0     	    beq toggle_capslock 
 282 0e58 00B500F0 	    _CALL do_async_key 
 282      0CF85DF8 
 282      04EB
 283 0e62 CCE7     	    b inkey_exit  
 284              	toggle_capslock:
 285              	// when capslock is released toggle its flag
 286 0e64 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 287 0e68 4FF00401 	    mov T1,#KBD_CAPSLK 
 288 0e6c 80EA0100 	    eor T0,T1 
 289 0e70 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 290 0e74 C3E7     	    b inkey_exit 
 291              	
 292              	// check if async key 
 293              	// and process it
 294              	do_async_key:
 295 0e76 00B500F0 	    _CALL is_async_key  
 295      54F85DF8 
 295      04EB
 296 0e80 FF28     	    cmp T0,#255
 297 0e82 1DD0     	    beq 9f 
 298              	// asynchornous key, set/reset flag 
 299              	set_async_key: 
 300 0e84 86EA0606 	    eor TOS,TOS // no key to return 
 301 0e88 94F86E20 	    ldrb T2,[UP,#KBD_FLAGS] 
 302 0e8c AD49     	    ldr T1,=async_jump 
 303 0e8e D1E800F0 	    tbb [T1,T0]
 304              	shift_key:
 305 0e92 4FF00800 	    mov T0,#KBD_SHIFT 
 306 0e96 07E0     	    b set_reset
 307              	ctrl_key:
 308 0e98 4FF01000 	    mov T0,#KBD_CTRL
 309 0e9c 04E0     	    b set_reset 
 310              	alt_key:
 311 0e9e 4FF02000 	    mov T0,#KBD_ALT 
 312 0ea2 01E0     	    b set_reset 
 313              	altchar_key:
 314 0ea4 4FF04000 	    mov T0,#KBD_ALTCHAR 
 315              	set_reset:
 316 0ea8 12F0800F 	    tst T2,#KBD_REL 
 317 0eac 04D0     	    beq 1f 
 318 0eae 6FEA0000 	    mvn T0,T0
 319 0eb2 02EA0002 	    and T2,T0
 320 0eb6 01E0     	    b 2f
 321 0eb8 42EA0002 	1:  orr T2,T0 
 322 0ebc 84F86E20 	2:  strb T2,[UP,#KBD_FLAGS]
 323 0ec0 7047     	9:  _RET 
 324              	
 325              	// check for modifiers flags 
 326              	// and process it.
 327              	do_modifiers:
ARM GAS  forth.s 			page 51


 328 0ec2 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 329 0ec6 10F0080F 	    tst T0,#KBD_SHIFT 
 330 0eca 05D1     	    bne shift_down 
 331 0ecc 10F0400F 	    tst T0,#KBD_ALTCHAR 
 332 0ed0 05D1     	    bne altchar_down 
 333 0ed2 10F0100F 	    tst T0,#KBD_CTRL
 334 0ed6 0DE0     	    b 9f 
 335              	shift_down:
 336 0ed8 3046     	    mov T0,TOS 
 337 0eda 9B49     	    ldr T1,=shifted 
 338 0edc 04E0     	    b 8f 
 339              	altchar_down:
 340 0ede 3046     	    mov T0,TOS 
 341 0ee0 9A49     	    ldr T1,=altchar
 342 0ee2 01E0     	    b 8f
 343              	ctrl_down:
 344 0ee4 3046     	    mov T0,TOS 
 345 0ee6 9A49     	    ldr T1,=controls 
 346 0ee8 00B5FFF7 	8:  _CALL table_scan
 346      52FF5DF8 
 346      04EB
 347 0ef2 0646     	    mov TOS,T0
 348 0ef4 00B500F0 	9:  _CALL do_capslock 
 348      03F85DF8 
 348      04EB
 349 0efe 7047     	    _RET 
 350              	
 351              	do_capslock:
 352 0f00 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 353 0f04 10F0040F 	    tst T0,#KBD_CAPSLK 
 354 0f08 0BD0     	    beq 9f 
 355 0f0a 412E     	    cmp TOS,#'A'
 356 0f0c 09D4     	    bmi 9f 
 357 0f0e 5B2E     	    cmp TOS,#'Z'+1 
 358 0f10 03D4     	    bmi 3f 
 359 0f12 612E     	    cmp TOS,#'a'
 360 0f14 05D4     	    bmi 9f 
 361 0f16 7B2E     	    cmp TOS,#'z'+1
 362 0f18 03D5     	    bpl 9f 
 363 0f1a 4FF02000 	3:  mov T0,#(1<<5)
 364 0f1e 86EA0006 	    eor TOS,T0 
 365 0f22 7047     	9:  _RET 
 366              	
 367              	// check if it is an asynchronous key 
 368              	// input:
 369              	//        T0  virtual code
 370              	// output:
 371              	//        T0 code order | -1 
 372              	is_async_key:
 373 0f24 8B49     	    ldr T1,=async_keys
 374 0f26 34E7     	    b table_scan
 375              	
 376              	// asynchronous key table 
 377              	async_keys:
 378 0f28 9C00     	    .byte VK_LSHIFT,0 // left shift 
 379 0f2a 9F00     	    .byte VK_RSHIFT,0 // right shift 
 380 0f2c 9D01     	    .byte VK_LCTRL,1  // left control 
ARM GAS  forth.s 			page 52


 381 0f2e A101     	    .byte VK_RCTRL,1  // right control 
 382 0f30 9E02     	    .byte VK_LALT,2  // left alt 
 383 0f32 A303     	    .byte VK_RALT,3   // right alt (alt char)
 384 0f34 00FF     	    .byte 0,255 
 385              	
 386              	async_jump: // tbb table for async keys 
 387 0f36 00       	    .byte 0 // shift  key 
 388 0f37 03       	    .byte (ctrl_key-shift_key)/2
 389 0f38 06       	    .byte (alt_key-shift_key)/2
 390 0f39 09       	    .byte (altchar_key-shift_key)/2
 391              	
 392              	/**************************
 393              	wait next clock pulse falling edge 
 394              	    input:
 395              	        r3 is gpio base address
 396              	***************************/
 397              	wait_kbd_clock:
 398 0f3a 01B4     	    push {r0}
 399 0f3c 1869     	1:  ldr r0,[r3,#GPIO_IDR]
 400 0f3e 10F4006F 	    tst r0,#(1<<KBD_CLOCK_PIN)
 401 0f42 FBD0     	    beq 1b
 402 0f44 1869     	2:  ldr r0,[r3,#GPIO_IDR]
 403 0f46 10F4006F 	    tst r0,#(1<<KBD_CLOCK_PIN)
 404 0f4a FBD1     	    bne 2b 
 405 0f4c 01BC     	    pop {r0}
 406 0f4e 7047     	    _RET 
 407              	
 408              	/***************************
 409              	 send byte do keyboard
 410              	 input:
 411              	    r0  byte to send 
 412              	 use: 
 413              	    r0 temp 
 414              	    r1 io pin  
 415              	    r2 bit to send 
 416              	    r3 GPIOA_BASE_ADR 
 417              	    r5 byte to send
 418              	    r6 bit counter  
 419              	    r11 parity counter 
 420              	***************************/
 421              	kbd_send:
 422 0f50 2DE96E08 	    push {r1,r2,r3,r5,r6,r11}
 423              	// disable keyboard interrupt 
 424 0f54 0546     	    mov r5,r0  
 425 0f56 4FF02800 	    mov r0,#EXTI15_10_IRQ
 426 0f5a 00B5FFF7 	    _CALL nvic_disable_irq 
 426      C8F95DF8 
 426      04EB
 427              	// disable video interrupt 
 428              	//    mov r0,#TIM3_IRQ 
 429              	//    _CALL nvic_disable_irq 
 430              	// hold clock low for 150µsec 
 431 0f64 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
 431      C4F20203 
 432 0f6c 1846     	    mov r0,r3 
 433 0f6e 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 434 0f72 4FF01102 	    mov r2,#OUTPUT_OD
ARM GAS  forth.s 			page 53


 435 0f76 00B5FFF7 	    _CALL gpio_config 
 435      CDF95DF8 
 435      04EB
 436              	// put clock line to 0 for 150µsec     
 437 0f80 1846     	    mov r0,r3 
 438 0f82 4FF00B01 	    mov r1,#KBD_CLOCK_PIN
 439 0f86 82EA0202 	    eor r2,r2 
 440 0f8a 00B5FFF7 	    _CALL gpio_out 
 440      19FA5DF8 
 440      04EB
 441 0f94 4FF46150 	    mov r0,#150*96 
 442 0f98 0138     	1:  subs r0,#1 
 443 0f9a FDD1     	    bne 1b
 444              	// take control of data line 
 445              	// and put it to 0 for start bit.    
 446 0f9c 1846     	    mov r0,r3 
 447 0f9e 4FF00C01 	    mov r1,#KBD_DATA_PIN  
 448 0fa2 4FF01102 	    mov r2,#OUTPUT_OD 
 449 0fa6 00B5FFF7 	    _CALL gpio_config 
 449      B5F95DF8 
 449      04EB
 450 0fb0 1846     	    mov r0,r3 
 451 0fb2 4FF00C01 	    mov r1,#KBD_DATA_PIN 
 452 0fb6 82EA0202 	    eor r2,r2 
 453 0fba 00B5FFF7 	    _CALL gpio_out
 453      01FA5DF8 
 453      04EB
 454              	// release clock line 
 455 0fc4 1846     	    mov r0,r3 
 456 0fc6 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 457 0fca 4FF00002 	    mov r2,#INPUT_FLOAT
 458 0fce 00B5FFF7 	    _CALL gpio_config
 458      A1F95DF8 
 458      04EB
 459 0fd8 4FF00806 	    mov r6,#8 // bit counter 
 460 0fdc 8BEA0B0B 	    eor r11,r11 // parity counter  
 461 0fe0 00B5FFF7 	1:  _CALL wait_kbd_clock 
 461      AAFF5DF8 
 461      04EB
 462 0fea 1846     	    mov r0,r3 
 463 0fec 4FF00C01 	    mov r1,#KBD_DATA_PIN
 464 0ff0 C5F30002 	    ubfx r2,r5,#0,#1 // extract bit to send 
 465 0ff4 0AB1     	    cbz r2,2f 
 466 0ff6 0BF1010B 	    add r11,#1 // increment parity counter  
 467 0ffa 00B5FFF7 	2:  _CALL gpio_out
 467      E1F95DF8 
 467      04EB
 468 1004 4FEA5505 	    lsr r5,#1  // next bit to send in b0 
 469 1008 013E     	    subs r6,#1  // decrement bit counter 
 470 100a E9D1     	    bne 1b
 471              	//  send parity bit 
 472 100c 82EA0202 	    eor r2,r2 
 473 1010 1BF0010F 	    tst r11,#1
 474 1014 01D1     	    bne 3f 
 475 1016 02F10102 	    add r2,#1
 476 101a 1846     	3:  mov r0,r3
 477 101c 4FF00C01 	    mov r1,#KBD_DATA_PIN
ARM GAS  forth.s 			page 54


 478 1020 00B5FFF7 	    _CALL gpio_out
 478      CEF95DF8 
 478      04EB
 479 102a 00B5FFF7 	    _CALL wait_kbd_clock
 479      85FF5DF8 
 479      04EB
 480              	// send stop bit 
 481              	// by releasing data line 
 482 1034 1846     	    mov r0,r3 
 483 1036 4FF00C01 	    mov r1,#KBD_DATA_PIN  
 484 103a 4FF00002 	    mov r2,#INPUT_FLOAT  
 485 103e 00B5FFF7 	    _CALL gpio_config 
 485      69F95DF8 
 485      04EB
 486 1048 1869     	1:  ldr r0,[r3,#GPIO_IDR]
 487 104a 10F4006F 	    tst r0,#(1<<KBD_CLOCK_PIN)
 488 104e FBD0     	    beq 1b
 489              	// wait ACK bit i.e. both lines == 0 
 490 1050 1869     	2:  ldr r0,[r3,#GPIO_IDR]
 491 1052 10F4C05F 	    tst r0,#(1<<KBD_CLOCK_PIN)+(1<<KBD_DATA_PIN)
 492 1056 FBD1     	    bne 2b
 493              	// wait both line released to 1
 494 1058 1869     	3:  ldr r0,[r3,#GPIO_IDR]
 495 105a 00F4C050 	    and r0,#(1<<KBD_CLOCK_PIN)+(1<<KBD_DATA_PIN)
 496 105e B0F5C05F 	    cmp r0,#(1<<KBD_CLOCK_PIN)+(1<<KBD_DATA_PIN)
 497 1062 F9D1     	    bne 3b 
 498 1064 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
 498      C4F20102 
 499 106c 4FF40060 	    mov r0,#(1<<KBD_CLOCK_PIN) 
 500 1070 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
 501 1072 4FF02800 	    mov r0,#EXTI15_10_IRQ
 502 1076 00B5FFF7 	    _CALL nvic_enable_irq
 502      27F95DF8 
 502      04EB
 503              	//    mov r0,#TIM3_IRQ 
 504              	//    _CALL nvic_enable_irq 
 505 1080 BDE82E08 	    pop {r1,r2,r3,r5,r11}
 506 1084 7047     	    _RET 
 507              	
 508              	 
 509              	// flush keyboard queue 
 510              	kbd_clear_queue:
 511 1086 80EA0000 	    eor T0,T0 
 512 108a C4F88000 	    str T0,[UP,#KBD_QHEAD]
 513 108e C4F88400 	    str T0,[UP,#KBD_QTAIL]
 514 1092 7047     	    _RET 
 515              	
 516              	// KBD-RST ( -- c )
 517              	// send a reset command to keyboard
 518 1094 AE0D0000 	    _HEADER KBD_RST,7,"KBD-RST"
 518      074B4244 
 518      2D525354 
 519 10a0 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 520 10a4 00B5FFF7 	    _CALL kbd_send 
 520      53FF5DF8 
 520      04EB
 521 10ae 00B5FFF7 	    _CALL kbd_clear_queue 
ARM GAS  forth.s 			page 55


 521      E9FF5DF8 
 521      04EB
 522 10b8 00B5FFF7 	2:  _CALL wait_code 
 522      62FE5DF8 
 522      04EB
 523 10c2 FE28     	    cmp T0,#KBD_CMD_RESEND 
 524 10c4 ECD0     	    beq 1b 
 525 10c6 FA28     	    cmp T0,#KBD_ACK 
 526 10c8 F6D1     	    bne 2b
 527 10ca 00B5FFF7 	    _CALL wait_code 
 527      59FE5DF8 
 527      04EB
 528 10d4 47F8046D 	    _PUSH 
 529 10d8 0646     	    mov TOS,T0  
 530 10da 47E0     	    _NEXT 
 531              	
 532              	// KBD-LED ( c -- )
 533              	// send command to control
 534              	// keyboard LEDS 
 535 10dc 98100000 	    _HEADER KBD_LED,7,"KBD-LED"
 535      074B4244 
 535      2D4C4544 
 536 10e8 00B5FFF7 	1:  _CALL kbd_clear_queue
 536      CCFF5DF8 
 536      04EB
 537 10f2 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 538 10f6 00B5FFF7 	    _CALL kbd_send 
 538      2AFF5DF8 
 538      04EB
 539 1100 00B5FFF7 	2:  _CALL wait_code 
 539      3EFE5DF8 
 539      04EB
 540 110a FE28     	    cmp T0,#KBD_CMD_RESEND
 541 110c ECD0     	    beq 1b
 542 110e FA28     	    cmp T0,#KBD_ACK  
 543 1110 F6D1     	    bne 2b 
 544 1112 3046     	2:  mov T0,TOS 
 545 1114 00F00700 	    and T0,#7 
 546 1118 00B5FFF7 	    _CALL kbd_send 
 546      19FF5DF8 
 546      04EB
 547 1122 00B5FFF7 	3:  _CALL wait_code 
 547      2DFE5DF8 
 547      04EB
 548 112c FE28     	    cmp T0,#KBD_CMD_RESEND 
 549 112e F0D0     	    beq 2b
 550 1130 FA28     	    cmp T0,#KBD_ACK 
 551 1132 F6D1     	    bne 3b  
 552 1134 57F8046B 	    _POP 
 553 1138 18E0     	    _NEXT 
 554 113a 0000840A 	
 554      0000A40B 
 554      0000360F 
 554      0000340B 
 554      0000940B 
   1              	/* 
   2              	****************************************************
ARM GAS  forth.s 			page 56


   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R12	is used as IP , inner interpreter address pointer 
  12              	*   UP  IS used AS WP 
  13              	*	WP 	is used as UP , working register 
  14              	*	R8 	is used as link register by _NEST macro it is initialized 
  15              	*  		NEST address and MUST BE PRESERVED.
  16              	*
  17              	*     Use USART1 for console I/O
  18              	*     port config: 115200 8N1 
  19              	*     TX on  PA9,  RX on PA10  
  20              	*
  21              	*     eForth is executed from flash, not copied to RAM
  22              	*     eForth use main stack R13 as return stack (thread stack not used) 
  23              	*
  24              	*     Forth return stack is at end of RAM (addr=0x200020000) and reserve 512 bytes
  25              	*   
  26              	******************************************************
  27              	
  28              	*****************************************************************************
  29              	*	STM32eForth version 7.20
  30              	*	Chen-Hanson Ting,  July 2014
  31              	
  32              	*	Subroutine Threaded Forth Model
  33              	*	Adapted to STM32F407-Discovery Board
  34              	*	Assembled by Keil uVision 5.10
  35              	
  36              	*	Version 4.03
  37              	*	Direct Threaded Forth Model
  38              	*	Derived from 80386 eForth versin 4.02
  39              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  40              	
  41              	*	Version 5.02, 09oct04cht
  42              	*	fOR ADuC702x from Analog Devices
  43              	*	Version 6.01, 10apr08cht a
  44              	*	.p2align 2 to at91sam7x256
  45              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  46              	*	Running under uVision3 RealView from Keil
  47              	*	Version 7.01, 29jun14cht
  48              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  49              	*	.p2aligned to eForth 2 Model
  50              	*	Assembled to flash memory and executed therefrom.
  51              	*	Version 7.10, 30jun14cht
  52              	*	Flash memory mapped to Page 0 where codes are executed
  53              	*	Version 7.20, 02jul14cht
  54              	*	Irreducible Complexity
  55              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  56              	*	TURNKEY saves current application from RAM to flash.
  57              	*********************************************************/
  58              	
  59              		.syntax unified
ARM GAS  forth.s 			page 57


  60              		.cpu cortex-m4
  61              		.fpu softvfp  
  62              		.thumb
  63              	
  64              		.include "stm32f411ce.inc"
  65              		
  66              		.section .text, "ax", %progbits
  67              	
  68              	/***********************************
  69              	//  Start of eForth system 
  70              	***********************************/
  71              	
  72              		.p2align 2 
  73              	
  74              	// PUSH TOS, to be used in colon definition 
  75              	TPUSH:
  76 1158 47F8046D 		_PUSH
  77 115c 06E0     		_NEXT
  78              	
  79              	// POP TOS, to be used in colon defintion  
  80              	TPOP:
  81 115e 57F8046B 		_POP 
  82 1162 03E0     		_NEXT
  83              	
  84              	// hi level word enter 
  85              	NEST: 
  86 1164 48F804CD 		STMFD	RSP!,{IP}
  87 1168 05F1030C 		ADD IP,WP,#3
  88              	// inner interprer
  89              	INEXT: 
  90 116c 5CF8045B 		LDR WP,[IP],#4 
  91 1170 2847     		BX WP  
  92              	UNNEST:
  93 1172 58F804CB 		LDMFD RSP!,{IP}
  94 1176 5CF8045B 		LDR WP,[IP],#4 
  95 117a 2847     		BX WP  
  96              	
  97              		.p2align 2 
  98              	
  99              	// compile "BX 	R8" 
 100              	// this is the only way 
 101              	// a colon defintion in RAM 
 102              	// can jump to NEST
 103              	// R8 is initialized to NEST address 
 104              	// and must be preserved   
 105              	COMPI_NEST:
 106 117c 04F13C01 		add T1,UP,#USER_CTOP 
 107 1180 0968     		ldr T1,[T1]
 108 1182 44F25072 		mov T2,#0x4700+(10<<3)
 109 1186 21F8022B 		strh T2,[T1],#2
 110 118a 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 111 118e 21F8022B 		strh T2,[T1],#2 
 112 1192 04F13C02 		add T2,UP,#USER_CTOP 
 113 1196 1160     		str T1,[T2]
 114 1198 E8E7     		_NEXT  
 115              	
 116              	
ARM GAS  forth.s 			page 58


 117              	// RANDOM ( n+ -- {0..n+ - 1} )
 118              	// return pseudo random number 
 119              	// REF: https://en.wikipedia.org/wiki/Xorshift
 120              	
 121 119a E0100000 		.word LINK 
 122 119e 06       	_RAND: .byte 6
 123 119f 52414E44 		.ascii "RANDOM"
 123      4F4D
 124 11a5 0000BF   		.p2align 2 
 125              	RAND:
 126 11a8 504700BF 		_NEST
 127 11ac 9D160000 		_ADR ABSS   
 128 11b0 DD170000 		_ADR SEED 
 129 11b4 65130000 		_ADR AT 
 130 11b8 11140000 		_ADR DUPP 
 131 11bc DD120000 		_DOLIT 13
 131      0D000000 
 132 11c4 C5140000 		_ADR LSHIFT 
 133 11c8 7D140000 		_ADR XORR  
 134 11cc 11140000 		_ADR DUPP 
 135 11d0 DD120000 		_DOLIT 17 
 135      11000000 
 136 11d8 AD140000 		_ADR RSHIFT 
 137 11dc 7D140000 		_ADR XORR 
 138 11e0 11140000 		_ADR DUPP
 139 11e4 DD120000 		_DOLIT 5 
 139      05000000 
 140 11ec C5140000 		_ADR LSHIFT 
 141 11f0 7D140000 		_ADR XORR  
 142 11f4 11140000 		_ADR DUPP 
 143 11f8 DD170000 		_ADR SEED 
 144 11fc 51130000 		_ADR STORE 
 145 1200 DD120000 		_DOLIT 0x7FFFFFFF
 145      FFFFFF7F 
 146 1208 55140000 		_ADR ANDD 
 147 120c 21140000 		_ADR SWAP 
 148 1210 411A0000 		_ADR MODD 
 149 1214 73110000 		_UNNEST 
 150              	
 151              	
 152              	// PAUSE ( u -- ) 
 153              	// suspend execution for u milliseconds
 154 1218 9E110000 		.word _RAND
 155 121c 05       	_PAUSE: .byte 5
 156 121d 50415553 		.ascii "PAUSE"
 156      45
 157 1222 00BF     		.p2align 2
 158              	PAUSE:
 159 1224 504700BF 		_NEST 
 160 1228 05180000 		_ADR TIMER 
 161 122c 51130000 		_ADR STORE 
 162              	PAUSE_LOOP:
 163 1230 05180000 		_ADR TIMER 
 164 1234 65130000 		_ADR AT 
 165 1238 1F130000 		_QBRAN PAUSE_EXIT 
 165      48120000 
 166 1240 33130000 		_BRAN PAUSE_LOOP 
ARM GAS  forth.s 			page 59


 166      30120000 
 167              	PAUSE_EXIT: 		
 168 1248 73110000 		_UNNEST 
 169              	
 170              	//  ULED ( T|F -- )
 171              	// control user LED, -1 ON, 0 OFF  
 172 124c 1C120000 		.word _PAUSE
 173 1250 04       	_ULED: .byte 4
 174 1251 554C4544 		.ascii "ULED"
 175 1255 0000BF   		.p2align 2
 176              		.type ULED, %function 
 177              	ULED:
 178 1258 4FF40050 		mov T0,#(1<<LED_PIN)
 179 125c 4FF40061 		_MOV32 T1,LED_GPIO 
 179      C4F20201 
 180 1264 3600     		movs TOS,TOS 
 181 1266 57F8046B 		_POP
 182 126a 03D0     		beq ULED_OFF
 183 126c 4FEA0040 		lsl T0,#16 
 184 1270 8861     		str T0,[T1,#GPIO_BSRR]
 185 1272 7BE7     		_NEXT 
 186              	ULED_OFF:
 187 1274 8861     		str T0,[T1,#GPIO_BSRR]
 188 1276 79E7     		_NEXT    
 189              	
 190              	//    ?KEY	 ( -- c T | F )
 191              	// 	Return input character and true, or a false if no input.
 192 1278 50120000 		.word	_ULED
 193 127c 04       	_QRX:	.byte   4
 194 127d 3F4B4559 		.ascii "?KEY"
 195 1281 0000BF   		.p2align 2 
 196              	QKEY:
 197              	QRX: 
 198 1284 47F8046D 		_PUSH
 199 1288 A06D     		ldr T0,[UP,#RX_TAIL] 
 200 128a 616D     		ldr T1,[UP,#RX_HEAD]
 201 128c 90EA0106 		eors TOS,T0,T1 
 202 1290 0CD0     		beq 1f
 203 1292 04F14400 		add T0,UP,#RX_QUEUE 
 204 1296 0844     		add T0,T1 
 205 1298 0678     		ldrb TOS,[T0]
 206 129a 01F10101 		add T1,#1 
 207 129e 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 208 12a2 6165     		str T1,[UP,#RX_HEAD]
 209 12a4 47F8046D 		_PUSH 
 210 12a8 4FF0FF36 		mov TOS,#-1
 211 12ac 5EE7     	1:	_NEXT 
 212              	
 213              	//    TX!	 ( c -- )
 214              	// 	Send character c to the output device.
 215              	
 216 12ae 7C120000 		.word	_QRX
 217 12b2 04       	_TXSTO:	.byte 4
 218 12b3 454D4954 		.ascii "EMIT"
 219 12b7 00       		.p2align 2 	
 220              	TXSTO:
 221              	EMIT:
ARM GAS  forth.s 			page 60


 222              	TECHO:
 223 12b8 4FF48055 		_MOV32 WP,UART 
 223      C4F20105 
 224 12c0 2868     	1:  ldr T0,[WP,#USART_SR]
 225 12c2 10F0800F 	    tst T0,#0x80 // TXE flag 
 226 12c6 FBD0     		beq 1b 
 227 12c8 2E71     		strb TOS,[WP,#USART_DR]	 
 228 12ca 57F8046B 		_POP
 229 12ce 4DE7     		_NEXT 
 230              		
 231              	/***************
 232              	//  The kernel
 233              	***************/
 234              	
 235              	//    NOP	( -- )
 236              	// 	do nothing.
 237              	
 238 12d0 B2120000 		.word	_TXSTO
 239 12d4 03       	_NOP:	.byte   3
 240 12d5 4E4F50   		.ascii "NOP"
 241              		.p2align 2 	
 242              	NOP:
 243 12d8 48E7     		_NEXT 
 244              	 
 245              	
 246              	//    doLIT	( -- w )
 247              	// 	Push an inline literal.
 248              	
 249              	// 	.word	_NOP
 250              	// _LIT	.byte   COMPO+5
 251              	// 	.ascii "doLIT"
 252 12da 00BF     	 	.p2align 2 	
 253              	DOLIT:
 254 12dc 47F8046D 		_PUSH				//  store TOS on data stack
 255 12e0 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 256 12e4 42E7     		_NEXT 
 257              	
 258              	//    EXECUTE	( ca -- )
 259              	// 	Execute the word at ca.
 260              	
 261 12e6 D4120000 		.word	_NOP
 262 12ea 07       	_EXECU:	.byte   7
 263 12eb 45584543 		.ascii "EXECUTE"
 263      555445
 264 12f2 00BF     		.p2align 2 	
 265              	EXECU: 
 266 12f4 46F00105 		ORR	WP,TOS,#1 
 267 12f8 57F8046B 		_POP
 268 12fc 2847     		BX WP 
 269 12fe 35E7     		_NEXT 
 270              	
 271              	//    next	( -- ) counter on R:
 272              	// 	Run time code for the single index loop.
 273              	// 	: next ( -- ) \ hilevel model
 274              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 275              	
 276              	// 	.word	_EXECU
ARM GAS  forth.s 			page 61


 277              	// _DONXT	.byte   COMPO+4
 278              	// 	.ascii "next"
 279              	// 	.p2align 2 	
 280              	DONXT:
 281 1300 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 282 1304 22B9     		CBNZ T2,NEXT1 
 283              		/* loop done */
 284 1306 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 285 130a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 286 130e 2DE7     		_NEXT
 287              	NEXT1:
 288              		/* decrement loop counter */
 289 1310 A2F10102 		SUB	T2,T2,#1
 290 1314 C8F80020 		STR	T2,[RSP]
 291 1318 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 292 131c 26E7     		_NEXT 
 293              	
 294              	//    ?branch	( f -- )
 295              	// 	Branch if flag is zero.
 296              	
 297              	// 	.word	_DONXT
 298              	// _QBRAN	.byte   COMPO+7
 299              	// 	.ascii "?branch"
 300              	// 	.p2align 2 	
 301              	QBRAN:
 302 131e 3600     		MOVS	TOS,TOS
 303 1320 57F8046B 		_POP
 304 1324 02D1     		BNE	QBRAN1
 305 1326 DCF800C0 		LDR	IP,[IP]
 306 132a 1FE7     		_NEXT
 307              	QBRAN1:
 308 132c 0CF1040C 	 	ADD	IP,IP,#4
 309 1330 1CE7     		_NEXT
 310              	
 311              	//    branch	( -- )
 312              	// 	Branch to an inline address.
 313              	
 314              	// 	.word	_QBRAN
 315              	// _BRAN	.byte   COMPO+6
 316              	// 	.ascii "branch"
 317              	// 	.p2align 2 	
 318              	BRAN:
 319 1332 DCF800C0 		LDR	IP,[IP]
 320 1336 19E7     		_NEXT
 321              	
 322              	//    EXIT	(  -- )
 323              	// 	Exit the currently executing command.
 324              	
 325 1338 EA120000 		.word	_EXECU
 326 133c 04       	_EXIT:	.byte   4
 327 133d 45584954 		.ascii "EXIT"
 328 1341 0000BF   		.p2align 2 	
 329              	EXIT:
 330 1344 73110000 		_UNNEST
 331              	
 332              	//    !	   ( w a -- )
 333              	// 	Pop the data stack to memory.
ARM GAS  forth.s 			page 62


 334              	
 335 1348 3C130000 		.word	_EXIT
 336 134c 01       	_STORE:	.byte   1
 337 134d 21       		.ascii "!"
 338 134e 00BF     		.p2align 2 	
 339              	STORE:
 340 1350 57F8045B 		LDR	WP,[DSP],#4
 341 1354 3560     		STR	WP,[TOS]
 342 1356 57F8046B 		_POP
 343 135a 07E7     		_NEXT 
 344              	
 345              	//    @	   ( a -- w )
 346              	// 	Push memory location to the data stack.
 347              	
 348 135c 4C130000 		.word	_STORE
 349 1360 01       	_AT:	.byte   1
 350 1361 40       		.ascii "@"
 351 1362 00BF     		.p2align 2 	
 352              	AT:
 353 1364 3668     		LDR	TOS,[TOS]
 354 1366 01E7     		_NEXT 
 355              	
 356              	//    C!	  ( c b -- )
 357              	// 	Pop the data stack to byte memory.
 358              	
 359 1368 60130000 		.word	_AT
 360 136c 02       	_CSTOR:	.byte   2
 361 136d 4321     		.ascii "C!"
 362 136f 00       		.p2align 2 	
 363              	CSTOR:
 364 1370 57F8045B 		LDR	WP,[DSP],#4
 365 1374 3570     		STRB WP,[TOS]
 366 1376 57F8046B 		_POP
 367 137a F7E6     		_NEXT
 368              	
 369              	//    C@	  ( b -- c )
 370              	// 	Push byte memory location to the data stack.
 371              	
 372 137c 6C130000 		.word	_CSTOR
 373 1380 02       	_CAT:	.byte   2
 374 1381 4340     		.ascii "C@"
 375 1383 00       		.p2align 2 	
 376              	CAT:
 377 1384 3678     		LDRB	TOS,[TOS]
 378 1386 F1E6     		_NEXT 
 379              	
 380              	//    R>	  ( -- w )
 381              	// 	Pop the return stack to the data stack.
 382              	
 383 1388 80130000 		.word	_CAT
 384 138c 02       	_RFROM:	.byte   2
 385 138d 523E     		.ascii "R>"
 386 138f 00       		.p2align 2 	
 387              	RFROM:
 388 1390 47F8046D 		_PUSH
 389 1394 58F8046B 		LDR	TOS,[RSP],#4
 390 1398 E8E6     		_NEXT 
ARM GAS  forth.s 			page 63


 391              	
 392              	//    R@	  ( -- w )
 393              	// 	Copy top of return stack to the data stack.
 394              	
 395 139a 8C130000 		.word	_RFROM
 396 139e 02       	_RAT:	.byte   2
 397 139f 5240     		.ascii "R@"
 398 13a1 0000BF   		.p2align 2 	
 399              	RAT:
 400 13a4 47F8046D 		_PUSH
 401 13a8 D8F80060 		LDR	TOS,[RSP]
 402 13ac DEE6     		_NEXT 
 403              	
 404              	//    >R	  ( w -- )
 405              	// 	Push the data stack to the return stack.
 406              	
 407 13ae 9E130000 		.word	_RAT
 408 13b2 42       	_TOR:	.byte   COMPO+2
 409 13b3 3E52     		.ascii ">R"
 410 13b5 0000BF   		.p2align 2 	
 411              	TOR:
 412 13b8 48F8046D 		STR	TOS,[RSP,#-4]!
 413 13bc 57F8046B 		_POP
 414 13c0 D4E6     		_NEXT
 415              	
 416              	//	RP! ( u -- )
 417              	// initialize RPP with u 
 418 13c2 B2130000 		.word _TOR 
 419 13c6 03       	_RPSTOR: .byte 3 
 420 13c7 525021   		.ascii "RP!" 
 421 13ca 00BF     		.p2align 2 
 422              	RPSTOR:
 423 13cc B046     		MOV RSP,TOS 
 424 13ce 57F8046B 		_POP  
 425 13d2 CBE6     		_NEXT 
 426              	
 427              	
 428              	//	SP! ( u -- )
 429              	// initialize SPP with u 
 430 13d4 C6130000 		.word _RPSTOR  
 431 13d8 03       	_SPSTOR: .byte 3 
 432 13d9 535021   		.ascii "SP!" 
 433              		.p2align 2 
 434              	SPSTOR:
 435 13dc 3746     		MOV DSP,TOS 
 436 13de 86EA0606 		EOR TOS,TOS,TOS 
 437 13e2 C3E6     		_NEXT 
 438              	
 439              	//    SP@	 ( -- a )
 440              	// 	Push the current data stack pointer.
 441              	
 442 13e4 D8130000 		.word	_SPSTOR
 443 13e8 03       	_SPAT:	.byte   3
 444 13e9 535040   		.ascii "SP@"
 445              		.p2align 2 	
 446              	SPAT:
 447 13ec 47F8046D 		_PUSH
ARM GAS  forth.s 			page 64


 448 13f0 3E46     		MOV	TOS,DSP
 449 13f2 BBE6     		_NEXT
 450              	
 451              	//    DROP	( w -- )
 452              	// 	Discard top stack item.
 453              	
 454 13f4 E8130000 		.word	_SPAT
 455 13f8 04       	_DROP:	.byte   4
 456 13f9 44524F50 		.ascii "DROP"
 457 13fd 0000BF   		.p2align 2 	
 458              	DROP:
 459 1400 57F8046B 		_POP
 460 1404 B2E6     		_NEXT 
 461              	
 462              	//    DUP	 ( w -- w w )
 463              	// 	Duplicate the top stack item.
 464              	
 465 1406 F8130000 		.word	_DROP
 466 140a 03       	_DUPP:	.byte   3
 467 140b 445550   		.ascii "DUP"
 468 140e 00BF     		.p2align 2 	
 469              	DUPP:
 470 1410 47F8046D 		_PUSH
 471 1414 AAE6     		_NEXT 
 472              	
 473              	//    SWAP	( w1 w2 -- w2 w1 )
 474              	// 	Exchange top two stack items.
 475              	
 476 1416 0A140000 		.word	_DUPP
 477 141a 04       	_SWAP:	.byte   4
 478 141b 53574150 		.ascii "SWAP"
 479 141f 00       		.p2align 2 	
 480              	SWAP:
 481 1420 3D68     		LDR	WP,[DSP]
 482 1422 3E60     		STR	TOS,[DSP]
 483 1424 2E46     		MOV	TOS,WP
 484 1426 A1E6     		_NEXT 
 485              	
 486              	//    OVER	( w1 w2 -- w1 w2 w1 )
 487              	// 	Copy second stack item to top.
 488              	
 489 1428 1A140000 		.word	_SWAP
 490 142c 04       	_OVER:	.byte   4
 491 142d 4F564552 		.ascii "OVER"
 492 1431 0000BF   		.p2align 2 	
 493              	OVER:
 494 1434 47F8046D 		_PUSH
 495 1438 7E68     		LDR	TOS,[DSP,#4]
 496 143a 97E6     		_NEXT 
 497              	
 498              	//    0<	  ( n -- t )
 499              	// 	Return true if n is negative.
 500              	
 501 143c 2C140000 		.word	_OVER
 502 1440 02       	_ZLESS:	.byte   2
 503 1441 303C     		.ascii "0<"
 504 1443 00       		.p2align 2 	
ARM GAS  forth.s 			page 65


 505              	ZLESS:
 506              	//	MOV	WP,#0
 507              	//	ADD	TOS,WP,TOS,ASR #32
 508 1444 4FEAE676 		ASR TOS,#31
 509 1448 90E6     		_NEXT 
 510              	
 511              	//    AND	 ( w w -- w )
 512              	// 	Bitwise AND.
 513              	
 514 144a 40140000 		.word	_ZLESS
 515 144e 03       	_ANDD:	.byte   3
 516 144f 414E44   		.ascii "AND"
 517 1452 00BF     		.p2align 2 	
 518              	ANDD:
 519 1454 57F8045B 		LDR	WP,[DSP],#4
 520 1458 06EA0506 		AND	TOS,TOS,WP
 521 145c 86E6     		_NEXT 
 522              	
 523              	//    OR	  ( w w -- w )
 524              	// 	Bitwise inclusive OR.
 525              	
 526 145e 4E140000 		.word	_ANDD
 527 1462 02       	_ORR:	.byte   2
 528 1463 4F52     		.ascii "OR"
 529 1465 0000BF   		.p2align 2 	
 530              	ORR:
 531 1468 57F8045B 		LDR	WP,[DSP],#4
 532 146c 46EA0506 		ORR	TOS,TOS,WP
 533 1470 7CE6     		_NEXT 
 534              	
 535              	//    XOR	 ( w w -- w )
 536              	// 	Bitwise exclusive OR.
 537              	
 538 1472 62140000 		.word	_ORR
 539 1476 03       	_XORR:	.byte   3
 540 1477 584F52   		.ascii "XOR"
 541 147a 00BF     		.p2align 2 	
 542              	XORR:
 543 147c 57F8045B 		LDR	WP,[DSP],#4
 544 1480 86EA0506 		EOR	TOS,TOS,WP
 545 1484 72E6     		_NEXT 
 546              	
 547              	//    UM+	 ( w w -- w cy )
 548              	// 	Add two numbers, return the sum and carry flag.
 549              	
 550 1486 76140000 		.word	_XORR
 551 148a 03       	_UPLUS:	.byte   3
 552 148b 554D2B   		.ascii "UM+"
 553 148e 00BF     		.p2align 2 	
 554              	UPLUS:
 555 1490 3D68     		LDR	WP,[DSP]
 556 1492 AD19     		ADDS	WP,WP,TOS
 557 1494 4FF00006 		MOV	TOS,#0
 558 1498 46F10006 		ADC	TOS,TOS,#0
 559 149c 3D60     		STR	WP,[DSP]
 560 149e 65E6     		_NEXT 
 561              	
ARM GAS  forth.s 			page 66


 562              	//    RSHIFT	 ( w # -- w )
 563              	// 	arithmetic Right shift # bits.
 564              	
 565 14a0 8A140000 		.word	_UPLUS
 566 14a4 06       	_RSHIFT:	.byte   6
 567 14a5 52534849 		.ascii "RSHIFT"
 567      4654
 568 14ab 00       		.p2align 2 	
 569              	RSHIFT:
 570 14ac 57F8045B 		LDR	WP,[DSP],#4
 571 14b0 45FA06F6 		MOV	TOS,WP,ASR TOS
 572 14b4 5AE6     		_NEXT 
 573              	
 574              	//    LSHIFT	 ( w # -- w )
 575              	// 	Right shift # bits.
 576              	
 577 14b6 A4140000 		.word	_RSHIFT
 578 14ba 06       	_LSHIFT:	.byte   6
 579 14bb 4C534849 		.ascii "LSHIFT"
 579      4654
 580 14c1 0000BF   		.p2align 2 	
 581              	LSHIFT:
 582 14c4 57F8045B 		LDR	WP,[DSP],#4
 583 14c8 05FA06F6 		MOV	TOS,WP,LSL TOS
 584 14cc 4EE6     		_NEXT
 585              	
 586              	//    +	 ( w w -- w )
 587              	// 	Add.
 588              	
 589 14ce BA140000 		.word	_LSHIFT
 590 14d2 01       	_PLUS:	.byte   1
 591 14d3 2B       		.ascii "+"
 592              		.p2align 2 	
 593              	PLUS:
 594 14d4 57F8045B 		LDR	WP,[DSP],#4
 595 14d8 2E44     		ADD	TOS,TOS,WP
 596 14da 47E6     		_NEXT 
 597              	
 598              	//    -	 ( w w -- w )
 599              	// 	Subtract.
 600              	
 601 14dc D2140000 		.word	_PLUS
 602 14e0 01       	_SUBB:	.byte   1
 603 14e1 2D       		.ascii "-"
 604 14e2 00BF     		.p2align 2 	
 605              	SUBB:
 606 14e4 57F8045B 		LDR	WP,[DSP],#4
 607 14e8 C6EB0506 		RSB	TOS,TOS,WP
 608 14ec 3EE6     		_NEXT 
 609              	
 610              	//    *	 ( w w -- w )
 611              	// 	Multiply.
 612              	
 613 14ee E0140000 		.word	_SUBB
 614 14f2 01       	_STAR:	.byte   1
 615 14f3 2A       		.ascii "*"
 616              		.p2align 2 	
ARM GAS  forth.s 			page 67


 617              	STAR:
 618 14f4 57F8045B 		LDR	WP,[DSP],#4
 619 14f8 05FB06F6 		MUL	TOS,WP,TOS
 620 14fc 36E6     		_NEXT 
 621              	
 622              	//    UM*	 ( w w -- ud )
 623              	// 	Unsigned multiply.
 624              	
 625 14fe F2140000 		.word	_STAR
 626 1502 03       	_UMSTA:	.byte   3
 627 1503 554D2A   		.ascii "UM*"
 628 1506 00BF     		.p2align 2 	
 629              	UMSTA:
 630 1508 3D68     		LDR	WP,[DSP]
 631 150a A6FB0523 		UMULL	T2,T3,TOS,WP
 632 150e 3A60     		STR	T2,[DSP]
 633 1510 1E46     		MOV	TOS,T3
 634 1512 2BE6     		_NEXT 
 635              	
 636              	//    M*	 ( w w -- d )
 637              	// 	signed multiply.
 638              	
 639 1514 02150000 		.word	_UMSTA
 640 1518 02       	_MSTAR:	.byte   2
 641 1519 4D2A     		.ascii "M*"
 642 151b 00       		.p2align 2 	
 643              	MSTAR:
 644 151c 3D68     		LDR	WP,[DSP]
 645 151e 86FB0523 		SMULL	T2,T3,TOS,WP
 646 1522 3A60     		STR	T2,[DSP]
 647 1524 1E46     		MOV	TOS,T3
 648 1526 21E6     		_NEXT 
 649              	
 650              	//    1+	 ( w -- w+1 )
 651              	// 	Add 1.
 652              	
 653 1528 18150000 		.word	_MSTAR
 654 152c 02       	_ONEP:	.byte   2
 655 152d 312B     		.ascii "1+"
 656 152f 00       		.p2align 2 	
 657              	ONEP:
 658 1530 06F10106 		ADD	TOS,TOS,#1
 659 1534 1AE6     		_NEXT 
 660              	
 661              	//    1-	 ( w -- w-1 )
 662              	// 	Subtract 1.
 663              	
 664 1536 2C150000 		.word	_ONEP
 665 153a 02       	_ONEM:	.byte   2
 666 153b 312D     		.ascii "1-"
 667 153d 0000BF   		.p2align 2 	
 668              	ONEM:
 669 1540 A6F10106 		SUB	TOS,TOS,#1
 670 1544 12E6     		_NEXT 
 671              	
 672              	//    2+	 ( w -- w+2 )
 673              	// 	Add 1.
ARM GAS  forth.s 			page 68


 674              	
 675 1546 3A150000 		.word	_ONEM
 676 154a 02       	_TWOP:	.byte   2
 677 154b 322B     		.ascii "2+"
 678 154d 0000BF   		.p2align 2 	
 679              	TWOP:
 680 1550 06F10206 		ADD	TOS,TOS,#2
 681 1554 0AE6     		_NEXT
 682              	
 683              	//    2-	 ( w -- w-2 )
 684              	// 	Subtract 2.
 685              	
 686 1556 4A150000 		.word	_TWOP
 687 155a 02       	_TWOM:	.byte   2
 688 155b 322D     		.ascii "2-"
 689 155d 0000BF   		.p2align 2 	
 690              	TWOM:
 691 1560 A6F10206 		SUB	TOS,TOS,#2
 692 1564 02E6     		_NEXT
 693              	
 694              	//    CELL+	( w -- w+4 )
 695              	// 	Add CELLL.
 696              	
 697 1566 5A150000 		.word	_TWOM
 698 156a 05       	_CELLP:	.byte   5
 699 156b 43454C4C 		.ascii "CELL+"
 699      2B
 700              		.p2align 2 	
 701              	CELLP:
 702 1570 06F10406 		ADD	TOS,TOS,#CELLL
 703 1574 FAE5     		_NEXT
 704              	
 705              	//    CELL-	( w -- w-4 )
 706              	// 	Subtract CELLL.
 707              	
 708 1576 6A150000 		.word	_CELLP
 709 157a 05       	_CELLM:	.byte   5
 710 157b 43454C4C 		.ascii "CELL-"
 710      2D
 711              		.p2align 2 	
 712              	CELLM:
 713 1580 A6F10406 		SUB	TOS,TOS,#CELLL
 714 1584 F2E5     		_NEXT
 715              	 
 716              	//    BL	( -- 32 )
 717              	// 	Blank (ASCII space).
 718              	
 719 1586 7A150000 		.word	_CELLM
 720 158a 02       	_BLANK:	.byte   2
 721 158b 424C     		.ascii "BL"
 722 158d 0000BF   		.p2align 2 	
 723              	BLANK:
 724 1590 47F8046D 		_PUSH
 725 1594 4FF02006 		MOV	TOS,#32
 726 1598 E8E5     		_NEXT 
 727              	
 728              	//    CELLS	( w -- w*4 )
ARM GAS  forth.s 			page 69


 729              	// 	Multiply 4.
 730              	
 731 159a 8A150000 		.word	_BLANK
 732 159e 05       	_CELLS:	.byte   5
 733 159f 43454C4C 		.ascii "CELLS"
 733      53
 734              		.p2align 2 	
 735              	CELLS:
 736 15a4 4FEA8606 		MOV	TOS,TOS,LSL#2
 737 15a8 E0E5     		_NEXT
 738              	
 739              	//    CELL/	( w -- w/4 )
 740              	// 	Divide by 4.
 741              	
 742 15aa 9E150000 		.word	_CELLS
 743 15ae 05       	_CELLSL:	.byte   5
 744 15af 43454C4C 		.ascii "CELL/"
 744      2F
 745              		.p2align 2 	
 746              	CELLSL:
 747 15b4 4FEAA606 		MOV	TOS,TOS,ASR#2
 748 15b8 D8E5     		_NEXT
 749              	
 750              	//    2*	( w -- w*2 )
 751              	// 	Multiply 2.
 752              	
 753 15ba AE150000 		.word	_CELLSL
 754 15be 02       	_TWOST:	.byte   2
 755 15bf 322A     		.ascii "2*"
 756 15c1 0000BF   		.p2align 2 	
 757              	TWOST:
 758 15c4 4FEA4606 		MOV	TOS,TOS,LSL#1
 759 15c8 D0E5     		_NEXT
 760              	
 761              	//    2/	( w -- w/2 )
 762              	// 	Divide by 2.
 763              	
 764 15ca BE150000 		.word	_TWOST
 765 15ce 02       	_TWOSL:	.byte   2
 766 15cf 322F     		.ascii "2/"
 767 15d1 0000BF   		.p2align 2 	
 768              	TWOSL:
 769 15d4 4FEA6606 		MOV	TOS,TOS,ASR#1
 770 15d8 C8E5     		_NEXT
 771              	
 772              	//    ?DUP	( w -- w w | 0 )
 773              	// 	Conditional duplicate.
 774              	
 775 15da CE150000 		.word	_TWOSL
 776 15de 04       	_QDUP:	.byte   4
 777 15df 3F445550 		.ascii "?DUP"
 778 15e3 00       		.p2align 2 	
 779              	QDUP:
 780 15e4 3500     		MOVS	WP,TOS
 781 15e6 18BF     		IT NE 
 782 15e8 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 783 15ec BEE5     		_NEXT
ARM GAS  forth.s 			page 70


 784              	
 785              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 786              	// 	Rotate top 3 items.
 787              	
 788 15ee DE150000 		.word	_QDUP
 789 15f2 03       	_ROT:	.byte   3
 790 15f3 524F54   		.ascii "ROT"
 791 15f6 00BF     		.p2align 2 	
 792              	ROT:
 793 15f8 3868     		LDR	T0,[DSP]  // w2 
 794 15fa 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 795 15fc 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 796 15fe 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 797 1600 B4E5     		_NEXT
 798              	
 799              	// -ROT ( w1 w2 w3 -- w3 w1 w2 )
 800              	// left rotate top 3 elements 
 801 1602 F2150000 		.word _ROT 
 802 1606 04       	_NROT: .byte 4 
 803 1607 2D524F54 		.ascii "-ROT"
 804 160b 00       		.p2align 2 
 805              	NROT:
 806 160c 7868     		LDR T0,[DSP,#4]
 807 160e 7E60     		STR TOS,[DSP,#4]	
 808 1610 3E68     		LDR TOS,[DSP]
 809 1612 3860     		STR T0,[DSP]
 810 1614 AAE5     		_NEXT 
 811              	
 812              	//    2DROP	( w1 w2 -- )
 813              	// 	Drop top 2 items.
 814              	
 815 1616 06160000 		.word	_NROT
 816 161a 05       	_DDROP:	.byte   5
 817 161b 3244524F 		.ascii "2DROP"
 817      50
 818              		.p2align 2 	
 819              	DDROP:
 820 1620 57F8046B 		_POP
 821 1624 57F8046B 		_POP
 822 1628 A0E5     		_NEXT 
 823              	
 824 162a 1A160000 		.word _DDROP 
 825 162e 05       	_TDROP: .byte 5 
 826 162f 3344524F 		.ascii "3DROP"
 826      50
 827              		.p2align 2
 828              	TDROP:
 829 1634 07F10807 	    add DSP,#8 
 830 1638 57F8046B 	    _POP 
 831 163c 96E5     	    _NEXT 
 832              	
 833              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 834              	// 	Duplicate top 2 items.
 835              	
 836 163e 2E160000 		.word	_TDROP
 837 1642 04       	_DDUP:	.byte   4
 838 1643 32445550 		.ascii "2DUP"
ARM GAS  forth.s 			page 71


 839 1647 00       		.p2align 2 	
 840              	DDUP:
 841 1648 3868     		LDR	T0,[DSP] // w1
 842 164a 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 843 164e 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 844 1652 8BE5     		_NEXT
 845              	
 846              	//    D+	( d1 d2 -- d3 )
 847              	// 	Add top 2 double numbers.
 848              	
 849 1654 42160000 		.word	_DDUP
 850 1658 02       	_DPLUS:	.byte   2
 851 1659 442B     		.ascii "D+"
 852 165b 00       		.p2align 2 	
 853              	DPLUS:
 854 165c 57F8045B 		LDR	WP,[DSP],#4
 855 1660 57F8042B 		LDR	T2,[DSP],#4
 856 1664 3B68     		LDR	T3,[DSP]
 857 1666 ED18     		ADDS	WP,WP,T3
 858 1668 3D60     		STR	WP,[DSP]
 859 166a 46EB0206 		ADC	TOS,TOS,T2
 860 166e 7DE5     		_NEXT
 861              	
 862              	//    NOT	 ( w -- !w )
 863              	// 	1"s complement.
 864              	
 865 1670 58160000 		.word	_DPLUS
 866 1674 03       	_INVER:	.byte   3
 867 1675 4E4F54   		.ascii "NOT"
 868              		.p2align 2 	
 869              	INVER:
 870 1678 6FEA0606 		MVN	TOS,TOS
 871 167c 76E5     		_NEXT
 872              	
 873              	//    NEGATE	( w -- -w )
 874              	// 	2's complement.
 875              	
 876 167e 74160000 		.word	_INVER
 877 1682 06       	_NEGAT:	.byte   6
 878 1683 4E454741 		.ascii "NEGATE"
 878      5445
 879 1689 0000BF   		.p2align 2 	
 880              	NEGAT:
 881 168c C6F10006 		RSB	TOS,TOS,#0
 882 1690 6CE5     		_NEXT
 883              	
 884              	//    ABS	 ( w -- |w| )
 885              	// 	Absolute.
 886              	
 887 1692 82160000 		.word	_NEGAT
 888 1696 03       	_ABSS:	.byte   3
 889 1697 414253   		.ascii "ABS"
 890 169a 00BF     		.p2align 2 	
 891              	ABSS:
 892 169c 16F0004F 		TST	TOS,#0x80000000
 893 16a0 18BF     		IT NE
 894 16a2 7642     	    RSBNE   TOS,TOS,#0
ARM GAS  forth.s 			page 72


 895 16a4 62E5     		_NEXT
 896              	
 897              	//  0= ( w -- f )
 898              	// TOS==0?
 899              	
 900 16a6 96160000 		.word _ABSS
 901 16aa 02       	_ZEQUAL: .byte 2
 902 16ab 303D     		.ascii "0="
 903 16ad 0000BF   		.p2align 2
 904              	ZEQUAL:
 905 16b0 16B9     		cbnz TOS,1f
 906 16b2 4FF0FF36 		mov TOS,#-1
 907 16b6 59E5     		_NEXT 
 908 16b8 86EA0606 	1:  eor TOS,TOS,TOS  
 909 16bc 56E5     		_NEXT 	
 910              	
 911              	//    =	 ( w w -- t )
 912              	// 	Equal?
 913              	
 914 16be AA160000 		.word	_ZEQUAL
 915 16c2 01       	_EQUAL:	.byte   1
 916 16c3 3D       		.ascii "="
 917              		.p2align 2 	
 918              	EQUAL:
 919 16c4 57F8045B 		LDR	WP,[DSP],#4
 920 16c8 AE42     		CMP	TOS,WP
 921 16ca 0CBF     		ITE EQ 
 922 16cc 6FF00006 	    MVNEQ	TOS,#0
 923 16d0 0026     		MOVNE	TOS,#0
 924 16d2 4BE5     		_NEXT
 925              	
 926              	//    U<	 ( w w -- t )
 927              	// 	Unsigned less?
 928              	
 929 16d4 C2160000 		.word	_EQUAL
 930 16d8 02       	_ULESS:	.byte   2
 931 16d9 553C     		.ascii "U<"
 932 16db 00       		.p2align 2 	
 933              	ULESS:
 934 16dc 57F8045B 		LDR	WP,[DSP],#4
 935 16e0 B542     		CMP	WP,TOS
 936 16e2 34BF     		ITE CC 
 937 16e4 6FF00006 		MVNCC	TOS,#0
 938 16e8 0026     		MOVCS	TOS,#0
 939 16ea 3FE5     		_NEXT
 940              	
 941              	//    <	( w w -- t )
 942              	// 	Less?
 943              	
 944 16ec D8160000 		.word	_ULESS
 945 16f0 01       	_LESS:	.byte   1
 946 16f1 3C       		.ascii "<"
 947 16f2 00BF     		.p2align 2 	
 948              	LESS:
 949 16f4 57F8045B 		LDR	WP,[DSP],#4
 950 16f8 B542     		CMP	WP,TOS
 951 16fa B4BF     	    ITE LT
ARM GAS  forth.s 			page 73


 952 16fc 6FF00006 		MVNLT	TOS,#0
 953 1700 0026     		MOVGE	TOS,#0
 954 1702 33E5     		_NEXT 
 955              	
 956              	//    >	( w w -- t )
 957              	// 	greater?
 958              	
 959 1704 F0160000 		.word	_LESS
 960 1708 01       	_GREAT:	.byte   1
 961 1709 3E       		.ascii ">"
 962 170a 00BF     		.p2align 2 	
 963              	GREAT:
 964 170c 57F8045B 		LDR	WP,[DSP],#4
 965 1710 B542     		CMP	WP,TOS
 966 1712 CCBF     		ITE GT
 967 1714 6FF00006 	    MVNGT	TOS,#0
 968 1718 0026     		MOVLE	TOS,#0
 969 171a 27E5     		_NEXT
 970              	
 971              	//    MAX	 ( w w -- max )
 972              	// 	Leave maximum.
 973              	
 974 171c 08170000 		.word	_GREAT
 975 1720 03       	_MAX:	.byte   3
 976 1721 4D4158   		.ascii "MAX"
 977              		.p2align 2 	
 978              	MAX:
 979 1724 57F8045B 		LDR	WP,[DSP],#4
 980 1728 B542     		CMP	WP,TOS
 981 172a C8BF     		IT GT 
 982 172c 2E46     		MOVGT	TOS,WP
 983 172e 1DE5     		_NEXT 
 984              	
 985              	//    MIN	 ( w w -- min )
 986              	// 	Leave minimum.
 987              	
 988 1730 20170000 		.word	_MAX
 989 1734 03       	_MIN:	.byte   3
 990 1735 4D494E   		.ascii "MIN"
 991              		.p2align 2 	
 992              	MIN:
 993 1738 57F8045B 		LDR	WP,[DSP],#4
 994 173c B542     		CMP	WP,TOS
 995 173e B8BF     		IT LT
 996 1740 2E46     		MOVLT	TOS,WP
 997 1742 13E5     		_NEXT
 998              	
 999              	//    +!	 ( w a -- )
 1000              	// 	Add to memory.
 1001              	
 1002 1744 34170000 		.word	_MIN
 1003 1748 02       	_PSTOR:	.byte   2
 1004 1749 2B21     		.ascii "+!"
 1005 174b 00       		.p2align 2 	
 1006              	PSTOR:
 1007 174c 57F8045B 		LDR	WP,[DSP],#4
 1008 1750 3268     		LDR	T2,[TOS]
ARM GAS  forth.s 			page 74


 1009 1752 2A44     		ADD	T2,T2,WP
 1010 1754 3260     		STR	T2,[TOS]
 1011 1756 57F8046B 		_POP
 1012 175a 07E5     		_NEXT
 1013              	
 1014              	//    2!	 ( d a -- )
 1015              	// 	Store double number.
 1016              	
 1017 175c 48170000 		.word	_PSTOR
 1018 1760 02       	_DSTOR:	.byte   2
 1019 1761 3221     		.ascii "2!"
 1020 1763 00       		.p2align 2 	
 1021              	DSTOR:
 1022 1764 57F8045B 		LDR	WP,[DSP],#4
 1023 1768 57F8042B 		LDR	T2,[DSP],#4
 1024 176c 46F8045B 		STR	WP,[TOS],#4
 1025 1770 3260     		STR	T2,[TOS]
 1026 1772 57F8046B 		_POP
 1027 1776 F9E4     		_NEXT
 1028              	
 1029              	//    2@	 ( a -- d )
 1030              	// 	Fetch double number.
 1031              	
 1032 1778 60170000 		.word	_DSTOR
 1033 177c 02       	_DAT:	.byte   2
 1034 177d 3240     		.ascii "2@"
 1035 177f 00       		.p2align 2 	
 1036              	DAT:
 1037 1780 7568     		LDR	WP,[TOS,#4]
 1038 1782 47F8045D 		STR	WP,[DSP,#-4]!
 1039 1786 3668     		LDR	TOS,[TOS]
 1040 1788 F0E4     		_NEXT
 1041              	
 1042              	//    COUNT	( b -- b+1 c )
 1043              	// 	Fetch length of string.
 1044              	
 1045 178a 7C170000 		.word	_DAT
 1046 178e 05       	_COUNT:	.byte   5
 1047 178f 434F554E 		.ascii "COUNT"
 1047      54
 1048              		.p2align 2 	
 1049              	COUNT:
 1050 1794 16F8015B 		LDRB	WP,[TOS],#1
 1051 1798 47F8046D 		_PUSH
 1052 179c 2E46     		MOV	TOS,WP
 1053 179e E5E4     		_NEXT
 1054              	
 1055              	//    DNEGATE	( d -- -d )
 1056              	// 	Negate double number.
 1057              	
 1058 17a0 8E170000 		.word	_COUNT
 1059 17a4 07       	_DNEGA:	.byte   7
 1060 17a5 444E4547 		.ascii "DNEGATE"
 1060      415445
 1061              		.p2align 2 	
 1062              	DNEGA:
 1063 17ac 3D68     		LDR	WP,[DSP]
ARM GAS  forth.s 			page 75


 1064 17ae A2EB0202 		SUB	T2,T2,T2
 1065 17b2 551B     		SUBS WP,T2,WP
 1066 17b4 62EB0606 		SBC	TOS,T2,TOS
 1067 17b8 3D60     		STR	WP,[DSP]
 1068 17ba D7E4     		_NEXT
 1069              	
 1070              	// **************************************************************************
 1071              	//  System and user variables
 1072              	
 1073              	//    doVAR	( -- a )
 1074              	// 	Run time routine for VARIABLE and CREATE.
 1075              	
 1076              	// 	.word	_DNEGA
 1077              	// _DOVAR	.byte  COMPO+5
 1078              	// 	.ascii "doVAR"
 1079              	// 	.p2align 2 	
 1080              	DOVAR:
 1081 17bc 47F8046D 		_PUSH
 1082 17c0 6646     		MOV TOS,IP
 1083 17c2 0CF1040C 		ADD IP,IP,#4 
 1084 17c6 D4E4     		B UNNEST 
 1085              	
 1086              	//    doCON	( -- a ) 
 1087              	// 	Run time routine for CONSTANT.
 1088              	
 1089              	// 	.word	_DOVAR
 1090              	// _DOCON	.byte  COMPO+5
 1091              	// 	.ascii "doCON"
 1092              	// 	.p2align 2 	
 1093              	DOCON:
 1094 17c8 47F8046D 		_PUSH
 1095 17cc 5CF8046B 		LDR.W TOS,[IP],#4 
 1096 17d0 CFE4     		B UNNEST 
 1097              	
 1098              	/***********************
 1099              	  system variables 
 1100              	***********************/
 1101              	
 1102              	 // SEED ( -- a)
 1103              	 // return PRNG seed address 
 1104              	
 1105 17d2 A4170000 		.word _DNEGA
 1106 17d6 04       	_SEED: .byte 4
 1107 17d7 53454544 		.ascii "SEED"
 1108 17db 00       		.p2align 2
 1109              	SEED:
 1110 17dc 47F8046D 		_PUSH 
 1111 17e0 04F10406 		ADD TOS,UP,#RNDSEED
 1112 17e4 C2E4     		_NEXT 	
 1113              	
 1114              	//  MSEC ( -- a)
 1115              	// return address of milliseconds counter
 1116 17e6 D6170000 	  .word _SEED 
 1117 17ea 04       	_MSEC: .byte 4
 1118 17eb 4D534543 	  .ascii "MSEC"
 1119 17ef 00       	  .p2align 2 
 1120              	MSEC:
ARM GAS  forth.s 			page 76


 1121 17f0 47F8046D 	  _PUSH
 1122 17f4 04F10806 	  ADD TOS,UP,#TICKS
 1123 17f8 B8E4     	  _NEXT 
 1124              	
 1125              	// TIMER ( -- a )
 1126              	// count down timer 
 1127 17fa EA170000 	  .word _MSEC
 1128 17fe 05       	_TIMER:  .byte 5
 1129 17ff 54494D45 	  .ascii "TIMER"
 1129      52
 1130              	  .p2align 2 
 1131              	TIMER:
 1132 1804 47F8046D 	  _PUSH 
 1133 1808 04F10C06 	  ADD TOS,UP,#CD_TIMER
 1134 180c AEE4     	  _NEXT
 1135              	
 1136              	//    'BOOT	 ( -- a )
 1137              	// 	Application.
 1138              	
 1139 180e FE170000 		.word	_TIMER
 1140 1812 05       	_TBOOT:	.byte   5
 1141 1813 27424F4F 		.ascii "'BOOT"
 1141      54
 1142              		.p2align 2 	
 1143              	TBOOT:
 1144 1818 47F8046D 		_PUSH
 1145 181c 04F11006 		ADD	TOS,UP,#BOOT 
 1146 1820 A4E4     		_NEXT
 1147              		
 1148              	//    BASE	( -- a )
 1149              	// 	Storage of the radix base for numeric I/O.
 1150              	
 1151 1822 12180000 		.word	_TBOOT
 1152 1826 04       	_BASE:	.byte   4
 1153 1827 42415345 		.ascii "BASE"
 1154 182b 00       		.p2align 2 	
 1155              	BASE:
 1156 182c 47F8046D 		_PUSH
 1157 1830 04F11406 		ADD	TOS,UP,#NBASE
 1158 1834 9AE4     		_NEXT
 1159              	
 1160              	//    tmp	 ( -- a )
 1161              	// 	A temporary storage location used in parse and find.
 1162              	
 1163              	// 	.word	_BASE
 1164              	// _TEMP	.byte   COMPO+3
 1165              	// 	.ascii "tmp"
 1166              	// 	.p2align 2 	
 1167              	TEMP:
 1168 1836 47F8046D 		_PUSH
 1169 183a 04F11806 		ADD	TOS,UP,#TMP
 1170 183e 95E4     		_NEXT
 1171              	
 1172              	//    SPAN	( -- a )
 1173              	// 	Hold character count received by EXPECT.
 1174              	
 1175 1840 26180000 		.word	_BASE
ARM GAS  forth.s 			page 77


 1176 1844 04       	_SPAN:	.byte   4
 1177 1845 5350414E 		.ascii "SPAN"
 1178 1849 0000BF   		.p2align 2 	
 1179              	SPAN:
 1180 184c 47F8046D 		_PUSH
 1181 1850 04F11C06 		ADD	TOS,UP,#CSPAN
 1182 1854 8AE4     		_NEXT
 1183              	
 1184              	//    >IN	 ( -- a )
 1185              	// 	Hold the character pointer while parsing input stream.
 1186              	
 1187 1856 44180000 		.word	_SPAN
 1188 185a 03       	_INN:	.byte   3
 1189 185b 3E494E   		.ascii ">IN"
 1190 185e 00BF     		.p2align 2 	
 1191              	INN:
 1192 1860 47F8046D 		_PUSH
 1193 1864 04F12006 		ADD	TOS,UP,#TOIN
 1194 1868 80E4     		_NEXT
 1195              	
 1196              	//    #TIB	( -- a )
 1197              	// 	Hold the current count and address of the terminal input buffer.
 1198              	
 1199 186a 5A180000 		.word	_INN
 1200 186e 04       	_NTIB:	.byte   4
 1201 186f 23544942 		.ascii "#TIB"
 1202 1873 00       		.p2align 2 	
 1203              	NTIB:
 1204 1874 47F8046D 		_PUSH
 1205 1878 04F12406 		ADD	TOS,UP,#NTIBB
 1206 187c 76E4     		_NEXT
 1207              	
 1208              	//    'EVAL	( -- a )
 1209              	// 	Execution vector of EVAL.
 1210              	
 1211 187e 6E180000 		.word	_NTIB
 1212 1882 05       	_TEVAL:	.byte   5
 1213 1883 27455641 		.ascii "'EVAL"
 1213      4C
 1214              		.p2align 2 	
 1215              	TEVAL:
 1216 1888 47F8046D 		_PUSH
 1217 188c 04F12C06 		ADD	TOS,UP,#EVAL
 1218 1890 6CE4     		_NEXT
 1219              	
 1220              	//    HLD	 ( -- a )
 1221              	// 	Hold a pointer in building a numeric output string.
 1222              	
 1223 1892 82180000 		.word	_TEVAL
 1224 1896 03       	_HLD:	.byte   3
 1225 1897 484C44   		.ascii "HLD"
 1226 189a 00BF     		.p2align 2 	
 1227              	HLD:
 1228 189c 47F8046D 		_PUSH
 1229 18a0 04F13006 		ADD	TOS,UP,#HOLD
 1230 18a4 62E4     		_NEXT
 1231              	
ARM GAS  forth.s 			page 78


 1232              	//    CONTEXT	( -- a )
 1233              	// 	A area to specify vocabulary search order.
 1234              	
 1235 18a6 96180000 		.word	_HLD
 1236 18aa 07       	_CNTXT:	.byte   7
 1237 18ab 434F4E54 		.ascii "CONTEXT"
 1237      455854
 1238 18b2 00BF     		.p2align 2 	
 1239              	CNTXT:
 1240              	CRRNT:
 1241 18b4 47F8046D 		_PUSH
 1242 18b8 04F13406 		ADD	TOS,UP,#CTXT
 1243 18bc 56E4     		_NEXT
 1244              	
 1245              	//    CP	( -- a )
 1246              	// 	Point to top name in RAM vocabulary.
 1247              	
 1248 18be AA180000 		.word	_CNTXT
 1249 18c2 02       	_CP:	.byte   2
 1250 18c3 4350     		.ascii "CP"
 1251 18c5 0000BF   		.p2align 2 	
 1252              	CPP:
 1253 18c8 47F8046D 		_PUSH
 1254 18cc 04F13C06 		ADD	TOS,UP,#USER_CTOP
 1255 18d0 4CE4     		_NEXT
 1256              	
 1257              	//   FCP ( -- a )
 1258              	//  Point ot top of Forth system dictionary
 1259 18d2 C2180000 		.word _CP
 1260 18d6 03       	_FCP: .byte 3            
 1261 18d7 464350   		.ascii "FCP"
 1262 18da 00BF     		.p2align 2 
 1263              	FCP: 
 1264 18dc 47F8046D 		_PUSH 
 1265 18e0 04F13806 		ADD TOS,UP,#FORTH_CTOP 
 1266 18e4 42E4     		_NEXT 
 1267              	
 1268              	//    LAST	( -- a )
 1269              	// 	Point to the last name in the name dictionary.
 1270              	
 1271 18e6 D6180000 		.word	_FCP
 1272 18ea 04       	_LAST:	.byte   4
 1273 18eb 4C415354 		.ascii "LAST"
 1274 18ef 00       		.p2align 2 	
 1275              	LAST:
 1276 18f0 47F8046D 		_PUSH
 1277 18f4 04F14006 		ADD	TOS,UP,#LASTN
 1278 18f8 38E4     		_NEXT
 1279              	
 1280              	
 1281              	/***********************
 1282              		system constants 
 1283              	***********************/
 1284              	
 1285              	//	USER_BEGIN ( -- a )
 1286              	//  where user area begin in RAM
 1287 18fa EA180000 		.word _LAST
ARM GAS  forth.s 			page 79


 1288 18fe 0A       	_USER_BGN: .byte 10
 1289 18ff 55534552 		.ascii "USER_BEGIN"
 1289      5F424547 
 1289      494E
 1290 1909 0000BF   		.p2align 2
 1291              	USER_BEGIN:
 1292 190c 47F8046D 		_PUSH 
 1293 1910 004E     		ldr TOS,USR_BGN_ADR 
 1294 1912 2BE4     		_NEXT 
 1295              	USR_BGN_ADR:
 1296 1914 12050020 	.word  DTOP 
 1297              	
 1298              	//  USER_END ( -- a )
 1299              	//  where user area end in RAM 
 1300 1918 FE180000 		.word _USER_BGN
 1301 191c 08       	_USER_END: .byte 8 
 1302 191d 55534552 		.ascii "USER_END" 
 1302      5F454E44 
 1303 1925 0000BF   		.p2align 2 
 1304              	USER_END:
 1305 1928 47F8046D 		_PUSH 
 1306 192c 004E     		ldr TOS,USER_END_ADR 
 1307 192e 1DE4     		_NEXT 
 1308              	USER_END_ADR:
 1309 1930 FC800120 		.word DEND 
 1310              	
 1311              	
 1312              	/* *********************
 1313              	  Common functions
 1314              	***********************/
 1315              	
 1316              	//    WITHIN	( u ul uh -- t )
 1317              	// 	Return true if u is within the range of ul and uh.
 1318              	
 1319 1934 1C190000 		.word	_USER_END 
 1320 1938 06       	_WITHI:	.byte   6
 1321 1939 57495448 		.ascii "WITHIN"
 1321      494E
 1322 193f 00       		.p2align 2 	
 1323              	WITHI:
 1324 1940 504700BF 		_NEST
 1325 1944 35140000 		_ADR	OVER
 1326 1948 E5140000 		_ADR	SUBB
 1327 194c B9130000 		_ADR	TOR
 1328 1950 E5140000 		_ADR	SUBB
 1329 1954 91130000 		_ADR	RFROM
 1330 1958 DD160000 		_ADR	ULESS
 1331 195c 73110000 		_UNNEST
 1332              	
 1333              	//  Divide
 1334              	
 1335              	//    UM/MOD	( udl udh u -- ur uq )
 1336              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1337              	
 1338 1960 38190000 		.word	_WITHI
 1339 1964 06       	_UMMOD:	.byte   6
 1340 1965 554D2F4D 		.ascii "UM/MOD"
ARM GAS  forth.s 			page 80


 1340      4F44
 1341 196b 00       		.p2align 2 	
 1342              	UMMOD:
 1343 196c 4FF00103 		MOV	T3,#1
 1344 1970 57F8045B 		LDR	WP,[DSP],#4
 1345 1974 3A68     		LDR	T2,[DSP]
 1346              	UMMOD0:
 1347 1976 9218     		ADDS	T2,T2,T2
 1348 1978 6D41     		ADCS	WP,WP,WP
 1349 197a 04D3     		BCC	UMMOD1
 1350 197c A5EB0605 		SUB	WP,WP,TOS
 1351 1980 02F10102 		ADD	T2,T2,#1
 1352 1984 04E0     		B UMMOD2
 1353              	UMMOD1:
 1354 1986 AD1B     		SUBS	WP,WP,TOS 
 1355 1988 28BF     		IT CS 
 1356 198a 0132     		ADDCS	T2,T2,#1
 1357 198c 00D2     		BCS	UMMOD2
 1358 198e 3544     		ADD	WP,WP,TOS
 1359              	UMMOD2:
 1360 1990 DB18     		ADDS	T3,T3,T3
 1361 1992 F0D3     		BCC	UMMOD0
 1362 1994 1646     		MOV	TOS,T2
 1363 1996 3D60     		STR	WP,[DSP]
 1364 1998 FFF7E8BB 		_NEXT
 1365              	
 1366              	//    M/MOD	( d n -- r q )
 1367              	// 	Signed floored divide of double by single. Return mod and quotient.
 1368              	
 1369 199c 64190000 		.word	_UMMOD
 1370 19a0 05       	_MSMOD:	.byte  5
 1371 19a1 4D2F4D4F 		.ascii "M/MOD"
 1371      44
 1372 19a6 00BF     		.p2align 2 	
 1373              	MSMOD:	
 1374 19a8 504700BF 		_NEST
 1375 19ac 11140000 		_ADR	DUPP
 1376 19b0 45140000 		_ADR	ZLESS
 1377 19b4 11140000 		_ADR	DUPP
 1378 19b8 B9130000 		_ADR	TOR
 1379 19bc 1F130000 		_QBRAN MMOD1
 1379      D4190000 
 1380 19c4 8D160000 		_ADR	NEGAT
 1381 19c8 B9130000 		_ADR	TOR
 1382 19cc AD170000 		_ADR	DNEGA
 1383 19d0 91130000 		_ADR	RFROM
 1384              	MMOD1:
 1385 19d4 B9130000 		_ADR	TOR
 1386 19d8 11140000 		_ADR	DUPP
 1387 19dc 45140000 		_ADR	ZLESS
 1388 19e0 1F130000 		_QBRAN MMOD2
 1388      F0190000 
 1389 19e8 A5130000 		_ADR	RAT
 1390 19ec D5140000 		_ADR	PLUS
 1391              	MMOD2:
 1392 19f0 91130000 		_ADR	RFROM
 1393 19f4 6D190000 		_ADR	UMMOD
ARM GAS  forth.s 			page 81


 1394 19f8 91130000 		_ADR	RFROM
 1395 19fc 1F130000 		_QBRAN	MMOD3
 1395      101A0000 
 1396 1a04 21140000 		_ADR	SWAP
 1397 1a08 8D160000 		_ADR	NEGAT
 1398 1a0c 21140000 		_ADR	SWAP
 1399              	MMOD3:   
 1400 1a10 73110000 		_UNNEST
 1401              	
 1402              	//    /MOD	( n n -- r q )
 1403              	// 	Signed divide. Return mod and quotient.
 1404              	
 1405 1a14 A0190000 		.word	_MSMOD
 1406 1a18 04       	_SLMOD:	.byte   4
 1407 1a19 2F4D4F44 		.ascii "/MOD"
 1408 1a1d 0000BF   		.p2align 2 	
 1409              	SLMOD:
 1410 1a20 504700BF 		_NEST
 1411 1a24 35140000 		_ADR	OVER
 1412 1a28 45140000 		_ADR	ZLESS
 1413 1a2c 21140000 		_ADR	SWAP
 1414 1a30 A9190000 		_ADR	MSMOD
 1415 1a34 73110000 		_UNNEST
 1416              	
 1417              	//    MOD	 ( n n -- r )
 1418              	// 	Signed divide. Return mod only.
 1419              	
 1420 1a38 181A0000 		.word	_SLMOD
 1421 1a3c 03       	_MODD:	.byte  3
 1422 1a3d 4D4F44   		.ascii "MOD"
 1423              		.p2align 2 	
 1424              	MODD:
 1425 1a40 504700BF 		_NEST
 1426 1a44 211A0000 		_ADR	SLMOD
 1427 1a48 01140000 		_ADR	DROP
 1428 1a4c 73110000 		_UNNEST
 1429              	
 1430              	//    /	   ( n n -- q )
 1431              	// 	Signed divide. Return quotient only.
 1432              	
 1433 1a50 3C1A0000 		.word	_MODD
 1434 1a54 01       	_SLASH:	.byte  1
 1435 1a55 2F       		.ascii "/"
 1436 1a56 00BF     		.p2align 2 	
 1437              	SLASH:
 1438 1a58 504700BF 		_NEST
 1439 1a5c 211A0000 		_ADR	SLMOD
 1440 1a60 21140000 		_ADR	SWAP
 1441 1a64 01140000 		_ADR	DROP
 1442 1a68 73110000 		_UNNEST
 1443              	
 1444              	//    */MOD	( n1 n2 n3 -- r q )
 1445              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1446              	
 1447 1a6c 541A0000 		.word	_SLASH
 1448 1a70 05       	_SSMOD:	.byte  5
 1449 1a71 2A2F4D4F 		.ascii "*/MOD"
ARM GAS  forth.s 			page 82


 1449      44
 1450 1a76 00BF     		.p2align 2 	
 1451              	SSMOD:
 1452 1a78 504700BF 		_NEST
 1453 1a7c B9130000 		_ADR	TOR
 1454 1a80 1D150000 		_ADR	MSTAR
 1455 1a84 91130000 		_ADR	RFROM
 1456 1a88 A9190000 		_ADR	MSMOD
 1457 1a8c 73110000 		_UNNEST
 1458              	
 1459              	//    */	  ( n1 n2 n3 -- q )
 1460              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1461              	
 1462 1a90 701A0000 		.word	_SSMOD
 1463 1a94 02       	_STASL:	.byte  2
 1464 1a95 2A2F     		.ascii "*/"
 1465 1a97 00       		.p2align 2 	
 1466              	STASL:
 1467 1a98 504700BF 		_NEST
 1468 1a9c 791A0000 		_ADR	SSMOD
 1469 1aa0 21140000 		_ADR	SWAP
 1470 1aa4 01140000 		_ADR	DROP
 1471 1aa8 73110000 		_UNNEST
 1472              	
 1473              	// **************************************************************************
 1474              	//  Miscellaneous
 1475              	
 1476              	//    ALIGNED	( b -- a )
 1477              	// 	Align address to the cell boundary.
 1478              	
 1479 1aac 941A0000 		.word	_STASL
 1480 1ab0 07       	_ALGND:	.byte   7
 1481 1ab1 414C4947 		.ascii "ALIGNED"
 1481      4E4544
 1482              		.p2align 2 	
 1483              	ALGND:
 1484 1ab8 06F10306 		ADD	TOS,TOS,#3
 1485 1abc 6FF00305 		MVN	WP,#3
 1486 1ac0 06EA0506 		AND	TOS,TOS,WP
 1487 1ac4 FFF752BB 		_NEXT
 1488              	
 1489              	//    >CHAR	( c -- c )
 1490              	// 	Filter non-printing characters.
 1491              	
 1492 1ac8 B01A0000 		.word	_ALGND
 1493 1acc 05       	_TCHAR:	.byte  5
 1494 1acd 3E434841 		.ascii ">CHAR"
 1494      52
 1495 1ad2 00BF     		.p2align 2 	
 1496              	TCHAR:
 1497 1ad4 504700BF 		_NEST
 1498 1ad8 DD120000 		_DOLIT  0x7F
 1498      7F000000 
 1499 1ae0 55140000 		_ADR	ANDD
 1500 1ae4 11140000 		_ADR	DUPP	// mask msb
 1501 1ae8 91150000 		_ADR	BLANK
 1502 1aec DD120000 		_DOLIT 	127
ARM GAS  forth.s 			page 83


 1502      7F000000 
 1503 1af4 41190000 		_ADR	WITHI	// check for printable
 1504 1af8 79160000 		_ADR	INVER
 1505 1afc 1F130000 		_QBRAN	TCHA1
 1505      101B0000 
 1506 1b04 01140000 		_ADR	DROP
 1507 1b08 DD120000 		_DOLIT 	'_'	// replace non-printables
 1507      5F000000 
 1508              	TCHA1:
 1509 1b10 73110000 		  _UNNEST
 1510              	
 1511              	//    DEPTH	( -- n )
 1512              	// 	Return the depth of the data stack.
 1513              	
 1514 1b14 CC1A0000 		.word	_TCHAR
 1515 1b18 05       	_DEPTH:	.byte  5
 1516 1b19 44455054 		.ascii "DEPTH"
 1516      48
 1517 1b1e 00BF     		.p2align 2 	
 1518              	DEPTH:
 1519 1b20 4FF47F42 		_MOV32 T2,SPP 
 1519      C2F20102 
 1520 1b28 A2EB0702 		SUB	T2,T2,DSP
 1521 1b2c 47F8046D 		_PUSH
 1522 1b30 4FEAA206 		ASR	TOS,T2,#2
 1523 1b34 FFF71ABB 		_NEXT
 1524              	
 1525              	//    PICK	( ... +n -- ... w )
 1526              	// 	Copy the nth stack item to tos.
 1527              	
 1528 1b38 181B0000 		.word	_DEPTH
 1529 1b3c 04       	_PICK:	.byte  4
 1530 1b3d 5049434B 		.ascii "PICK"
 1531 1b41 0000BF   		.p2align 2 	
 1532              	PICK:
 1533 1b44 504700BF 		_NEST
 1534 1b48 31150000 		_ADR	ONEP
 1535 1b4c A5150000 		_ADR	CELLS
 1536 1b50 ED130000 		_ADR	SPAT
 1537 1b54 D5140000 		_ADR	PLUS
 1538 1b58 65130000 		_ADR	AT
 1539 1b5c 73110000 		_UNNEST
 1540              	
 1541              	// **************************************************************************
 1542              	//  Memory access
 1543              	
 1544              	//    HERE	( -- a )
 1545              	// 	Return the top of the code dictionary.
 1546              	
 1547 1b60 3C1B0000 		.word	_PICK
 1548 1b64 04       	_HERE:	.byte  4
 1549 1b65 48455245 		.ascii "HERE"
 1550 1b69 0000BF   		.p2align 2 	
 1551              	HERE:
 1552 1b6c 504700BF 		_NEST
 1553 1b70 C9180000 		_ADR	CPP
 1554 1b74 65130000 		_ADR	AT
ARM GAS  forth.s 			page 84


 1555 1b78 73110000 		_UNNEST
 1556              		
 1557              	//    PAD	 ( -- a )
 1558              	// 	Return the address of a temporary buffer.
 1559              	
 1560 1b7c 641B0000 		.word	_HERE
 1561 1b80 03       	_PAD:	.byte  3
 1562 1b81 504144   		.ascii "PAD"
 1563              		.p2align 2 	
 1564              	PAD:
 1565 1b84 504700BF 		_NEST
 1566 1b88 6D1B0000 		_ADR	HERE
 1567 1b8c DD120000 		_DOLIT 80
 1567      50000000 
 1568 1b94 D5140000 		_ADR PLUS 
 1569 1b98 73110000 		_UNNEST
 1570              	
 1571              	//    TIB	 ( -- a )
 1572              	// 	Return the address of the terminal input buffer.
 1573              	
 1574 1b9c 801B0000 		.word	_PAD
 1575 1ba0 03       	_TIB:	.byte  3
 1576 1ba1 544942   		.ascii "TIB"
 1577              		.p2align 2 	
 1578              	TIB:
 1579 1ba4 47F8046D 		_PUSH
 1580 1ba8 A66A     		ldr TOS,[UP,#TIBUF]
 1581 1baa FFF7DFBA 		_NEXT
 1582              	
 1583              	//    @EXECUTE	( a -- )
 1584              	// 	Execute vector stored in address a.
 1585              	
 1586 1bae A01B0000 		.word	_TIB
 1587 1bb2 08       	_ATEXE:	.byte   8
 1588 1bb3 40455845 		.ascii "@EXECUTE"
 1588      43555445 
 1589 1bbb 00       		.p2align 2 	
 1590              	ATEXE: 
 1591 1bbc 3500     		MOVS	WP,TOS
 1592 1bbe 57F8046B 		_POP
 1593 1bc2 2D68     		LDR	WP,[WP]
 1594 1bc4 45F00105 		ORR	WP,WP,#1
 1595 1bc8 18BF     	    IT NE 
 1596 1bca 2847     		BXNE	WP
 1597 1bcc FFF7CEBA 		_NEXT
 1598              	
 1599              	//    CMOVE	( b1 b2 u -- )
 1600              	// 	Copy u bytes from b1 to b2.
 1601              	
 1602 1bd0 B21B0000 		.word	_ATEXE
 1603 1bd4 05       	_CMOVE:	.byte   5
 1604 1bd5 434D4F56 		.ascii "CMOVE"
 1604      45
 1605 1bda 00BF     		.p2align 2 	
 1606              	CMOVE:
 1607 1bdc 57F8042B 		LDR	T2,[DSP],#4
 1608 1be0 57F8043B 		LDR	T3,[DSP],#4
ARM GAS  forth.s 			page 85


 1609 1be4 03E0     		B CMOV1
 1610              	CMOV0:
 1611 1be6 13F8015B 		LDRB	WP,[T3],#1
 1612 1bea 02F8015B 		STRB	WP,[T2],#1
 1613              	CMOV1:
 1614 1bee 3600     		MOVS	TOS,TOS
 1615 1bf0 02D0     		BEQ	CMOV2
 1616 1bf2 A6F10106 		SUB	TOS,TOS,#1
 1617 1bf6 F6E7     		B CMOV0
 1618              	CMOV2:
 1619 1bf8 57F8046B 		_POP
 1620 1bfc FFF7B6BA 		_NEXT
 1621              	
 1622              	//    MOVE	( a1 a2 u -- )
 1623              	// 	Copy u words from a1 to a2.
 1624              	
 1625 1c00 D41B0000 		.word	_CMOVE
 1626 1c04 04       	_MOVE:	.byte   4
 1627 1c05 4D4F5645 		.ascii "MOVE"
 1628 1c09 0000BF   		.p2align 2 	
 1629              	MOVE:
 1630 1c0c 26F00306 		AND	TOS,TOS,#-4
 1631 1c10 57F8042B 		LDR	T2,[DSP],#4
 1632 1c14 57F8043B 		LDR	T3,[DSP],#4
 1633 1c18 03E0     		B MOVE1
 1634              	MOVE0:
 1635 1c1a 53F8045B 		LDR	WP,[T3],#4
 1636 1c1e 42F8045B 		STR	WP,[T2],#4
 1637              	MOVE1:
 1638 1c22 3600     		MOVS	TOS,TOS
 1639 1c24 02D0     		BEQ	MOVE2
 1640 1c26 A6F10406 		SUB	TOS,TOS,#4
 1641 1c2a F6E7     		B MOVE0
 1642              	MOVE2:
 1643 1c2c 57F8046B 		_POP
 1644 1c30 FFF79CBA 		_NEXT
 1645              	
 1646              	//    FILL	( b u c -- )
 1647              	// 	Fill u bytes of character c to area beginning at b.
 1648              	
 1649 1c34 041C0000 		.word	_MOVE
 1650 1c38 04       	_FILL:	.byte   4
 1651 1c39 46494C4C 		.ascii "FILL"
 1652 1c3d 0000BF   		.p2align 2 	
 1653              	FILL:
 1654 1c40 03CF     		LDMFD DSP!,{T0,T1} 
 1655 1c42 0000     		MOVS T0,T0 
 1656 1c44 03D0     		BEQ FILL2
 1657              	FILL1:
 1658 1c46 01F8016B 		STRB	TOS,[T1],#1
 1659 1c4a 0138     		SUBS	T0,T0,#1
 1660 1c4c FBD1     		BNE FILL1
 1661              	FILL2:
 1662 1c4e 57F8046B 		_POP
 1663 1c52 FFF78BBA 		_NEXT
 1664              	
 1665              	//    PACK$	( b u a -- a )
ARM GAS  forth.s 			page 86


 1666              	// 	Build a counted word with u characters from b. Null fill.
 1667              	
 1668 1c56 381C0000 		.word	_FILL
 1669 1c5a 05       	_PACKS:	.byte  5
 1670 1c5b 5041434B 		.ascii "PACK$$"
 1670      2424
 1671 1c61 0000BF   		.p2align 2 	
 1672              	PACKS:
 1673 1c64 504700BF 		_NEST
 1674 1c68 B91A0000 		_ADR	ALGND
 1675 1c6c 11140000 		_ADR	DUPP
 1676 1c70 B9130000 		_ADR	TOR			// strings only on cell boundary
 1677 1c74 35140000 		_ADR	OVER
 1678 1c78 D5140000 		_ADR	PLUS
 1679 1c7c 31150000 		_ADR	ONEP
 1680 1c80 DD120000 		_DOLIT 	0xFFFFFFFC
 1680      FCFFFFFF 
 1681 1c88 55140000 		_ADR	ANDD			// count mod cell
 1682 1c8c DD120000 		_DOLIT 	0
 1682      00000000 
 1683 1c94 21140000 		_ADR	SWAP
 1684 1c98 51130000 		_ADR	STORE			// null fill cell
 1685 1c9c A5130000 		_ADR	RAT
 1686 1ca0 49160000 		_ADR	DDUP
 1687 1ca4 71130000 		_ADR	CSTOR
 1688 1ca8 31150000 		_ADR	ONEP			// save count
 1689 1cac 21140000 		_ADR	SWAP
 1690 1cb0 DD1B0000 		_ADR	CMOVE
 1691 1cb4 91130000 		_ADR	RFROM
 1692 1cb8 73110000 		_UNNEST   			// move string
 1693              	
 1694              	// **************************************************************************
 1695              	//  Numeric output, single precision
 1696              	
 1697              	//    DIGIT	( u -- c )
 1698              	// 	Convert digit u to a character.
 1699              	
 1700 1cbc 5A1C0000 		.word	_PACKS
 1701 1cc0 05       	_DIGIT:	.byte  5
 1702 1cc1 44494749 		.ascii "DIGIT"
 1702      54
 1703 1cc6 00BF     		.p2align 2 	
 1704              	DIGIT:
 1705 1cc8 504700BF 		_NEST
 1706 1ccc DD120000 		_DOLIT 9
 1706      09000000 
 1707 1cd4 35140000 		_ADR	OVER
 1708 1cd8 F5160000 		_ADR	LESS
 1709 1cdc DD120000 		_DOLIT	7
 1709      07000000 
 1710 1ce4 55140000 		_ADR	ANDD
 1711 1ce8 D5140000 		_ADR	PLUS
 1712 1cec DD120000 		_DOLIT	'0'
 1712      30000000 
 1713 1cf4 D5140000 		_ADR	PLUS 
 1714 1cf8 73110000 		_UNNEST
 1715              	
ARM GAS  forth.s 			page 87


 1716              	//    EXTRACT	( n base -- n c )
 1717              	// 	Extract the least significant digit from n.
 1718              	
 1719 1cfc C01C0000 		.word	_DIGIT
 1720 1d00 07       	_EXTRC:	.byte  7
 1721 1d01 45585452 		.ascii "EXTRACT"
 1721      414354
 1722              		.p2align 2 	
 1723              	EXTRC:
 1724 1d08 504700BF 		_NEST
 1725 1d0c DD120000 		_DOLIT 0
 1725      00000000 
 1726 1d14 21140000 		_ADR	SWAP
 1727 1d18 6D190000 		_ADR	UMMOD
 1728 1d1c 21140000 		_ADR	SWAP
 1729 1d20 C91C0000 		_ADR	DIGIT
 1730 1d24 73110000 		_UNNEST
 1731              	
 1732              	//    <#	  ( -- )
 1733              	// 	Initiate the numeric output process.
 1734              	
 1735 1d28 001D0000 		.word	_EXTRC
 1736 1d2c 02       	_BDIGS:	.byte  2
 1737 1d2d 3C23     		.ascii "<#"
 1738 1d2f 00       		.p2align 2 	
 1739              	BDIGS:
 1740 1d30 504700BF 		_NEST
 1741 1d34 851B0000 		_ADR	PAD
 1742 1d38 9D180000 		_ADR	HLD
 1743 1d3c 51130000 		_ADR	STORE
 1744 1d40 73110000 		_UNNEST
 1745              	
 1746              	//    HOLD	( c -- )
 1747              	// 	Insert a character into the numeric output string.
 1748              	
 1749 1d44 2C1D0000 		.word	_BDIGS
 1750 1d48 04       	_HOLD:	.byte  4
 1751 1d49 484F4C44 		.ascii "HOLD"
 1752 1d4d 0000BF   		.p2align 2 	
 1753              	HOLD:
 1754 1d50 504700BF 		_NEST
 1755 1d54 9D180000 		_ADR	HLD
 1756 1d58 65130000 		_ADR	AT
 1757 1d5c 41150000 		_ADR	ONEM
 1758 1d60 11140000 		_ADR	DUPP
 1759 1d64 9D180000 		_ADR	HLD
 1760 1d68 51130000 		_ADR	STORE
 1761 1d6c 71130000 		_ADR	CSTOR
 1762 1d70 73110000 		_UNNEST
 1763              	
 1764              	//    #	   ( u -- u )
 1765              	// 	Extract one digit from u and append the digit to output string.
 1766              	
 1767 1d74 481D0000 		.word	_HOLD
 1768 1d78 01       	_DIG:	.byte  1
 1769 1d79 23       		.ascii "#"
 1770 1d7a 00BF     		.p2align 2 	
ARM GAS  forth.s 			page 88


 1771              	DIG:
 1772 1d7c 504700BF 		_NEST
 1773 1d80 2D180000 		_ADR	BASE
 1774 1d84 65130000 		_ADR	AT
 1775 1d88 091D0000 		_ADR	EXTRC
 1776 1d8c 511D0000 		_ADR	HOLD
 1777 1d90 73110000 		_UNNEST
 1778              	
 1779              	//    #S	  ( u -- 0 )
 1780              	// 	Convert u until all digits are added to the output string.
 1781              	
 1782 1d94 781D0000 		.word	_DIG
 1783 1d98 02       	_DIGS:	.byte  2
 1784 1d99 2353     		.ascii "#S"
 1785 1d9b 00       		.p2align 2 	
 1786              	DIGS:
 1787 1d9c 504700BF 		_NEST
 1788              	DIGS1:
 1789 1da0 7D1D0000 	    _ADR	DIG
 1790 1da4 11140000 		_ADR	DUPP
 1791 1da8 1F130000 		_QBRAN 	DIGS2
 1791      B81D0000 
 1792 1db0 33130000 		_BRAN	DIGS1
 1792      A01D0000 
 1793              	DIGS2:
 1794 1db8 73110000 		  _UNNEST
 1795              	
 1796              	//    SIGN	( n -- )
 1797              	// 	Add a minus sign to the numeric output string.
 1798              	
 1799 1dbc 981D0000 		.word	_DIGS
 1800 1dc0 04       	_SIGN:	.byte  4
 1801 1dc1 5349474E 		.ascii "SIGN"
 1802 1dc5 0000BF   		.p2align 2 	
 1803              	SIGN:
 1804 1dc8 504700BF 		_NEST
 1805 1dcc 45140000 		_ADR	ZLESS
 1806 1dd0 1F130000 		_QBRAN	SIGN1
 1806      E41D0000 
 1807 1dd8 DD120000 		_DOLIT '-'
 1807      2D000000 
 1808 1de0 511D0000 		_ADR	HOLD
 1809              	SIGN1:
 1810 1de4 73110000 		  _UNNEST
 1811              	
 1812              	//    #>	  ( w -- b u )
 1813              	// 	Prepare the output word to be TYPE'd.
 1814              	
 1815 1de8 C01D0000 		.word	_SIGN
 1816 1dec 02       	_EDIGS:	.byte  2
 1817 1ded 233E     		.ascii "#>"
 1818 1def 00       		.p2align 2 	
 1819              	EDIGS:
 1820 1df0 504700BF 		_NEST
 1821 1df4 01140000 		_ADR	DROP
 1822 1df8 9D180000 		_ADR	HLD
 1823 1dfc 65130000 		_ADR	AT
ARM GAS  forth.s 			page 89


 1824 1e00 851B0000 		_ADR	PAD
 1825 1e04 35140000 		_ADR	OVER
 1826 1e08 E5140000 		_ADR	SUBB
 1827 1e0c 73110000 		_UNNEST
 1828              	
 1829              	//    str	 ( n -- b u )
 1830              	// 	Convert a signed integer to a numeric string.
 1831              	
 1832              	// 	.word	_EDIGS
 1833              	// _STRR	.byte  3
 1834              	// 	.ascii "str"
 1835              	// 	.p2align 2 	
 1836              	STRR:
 1837 1e10 504700BF 		_NEST
 1838 1e14 11140000 		_ADR	DUPP
 1839 1e18 B9130000 		_ADR	TOR
 1840 1e1c 9D160000 		_ADR	ABSS
 1841 1e20 311D0000 		_ADR	BDIGS
 1842 1e24 9D1D0000 		_ADR	DIGS
 1843 1e28 91130000 		_ADR	RFROM
 1844 1e2c C91D0000 		_ADR	SIGN
 1845 1e30 F11D0000 		_ADR	EDIGS
 1846 1e34 73110000 		_UNNEST
 1847              	
 1848              	//    HEX	 ( -- )
 1849              	// 	Use radix 16 as base for numeric conversions.
 1850              	
 1851 1e38 EC1D0000 		.word	_EDIGS
 1852 1e3c 03       	_HEX:	.byte  3
 1853 1e3d 484558   		.ascii "HEX"
 1854              		.p2align 2 	
 1855              	HEX:
 1856 1e40 504700BF 		_NEST
 1857 1e44 DD120000 		_DOLIT 16
 1857      10000000 
 1858 1e4c 2D180000 		_ADR	BASE
 1859 1e50 51130000 		_ADR	STORE
 1860 1e54 73110000 		_UNNEST
 1861              	
 1862              	//    DECIMAL	( -- )
 1863              	// 	Use radix 10 as base for numeric conversions.
 1864              	
 1865 1e58 3C1E0000 		.word	_HEX
 1866 1e5c 07       	_DECIM:	.byte  7
 1867 1e5d 44454349 		.ascii "DECIMAL"
 1867      4D414C
 1868              		.p2align 2 	
 1869              	DECIM:
 1870 1e64 504700BF 		_NEST
 1871 1e68 DD120000 		_DOLIT 10
 1871      0A000000 
 1872 1e70 2D180000 		_ADR	BASE
 1873 1e74 51130000 		_ADR	STORE
 1874 1e78 73110000 		_UNNEST
 1875              	
 1876              	// **************************************************************************
 1877              	//  Numeric input, single precision
ARM GAS  forth.s 			page 90


 1878              	
 1879              	//    DIGIT?	( c base -- u t )
 1880              	// 	Convert a character to its numeric value. A flag indicates success.
 1881              	
 1882 1e7c 5C1E0000 		.word	_DECIM
 1883 1e80 06       	_DIGTQ:	.byte  6
 1884 1e81 44494749 		.ascii "DIGIT?"
 1884      543F
 1885 1e87 00       		.p2align 2 	
 1886              	DIGTQ:
 1887 1e88 504700BF 		_NEST
 1888 1e8c B9130000 		_ADR	TOR
 1889 1e90 DD120000 		_DOLIT 	'0'
 1889      30000000 
 1890 1e98 E5140000 		_ADR	SUBB
 1891 1e9c DD120000 		_DOLIT 9
 1891      09000000 
 1892 1ea4 35140000 		_ADR	OVER
 1893 1ea8 F5160000 		_ADR	LESS
 1894 1eac 1F130000 		_QBRAN	DGTQ1
 1894      D41E0000 
 1895 1eb4 DD120000 		_DOLIT 7
 1895      07000000 
 1896 1ebc E5140000 		_ADR	SUBB
 1897 1ec0 11140000 		_ADR	DUPP
 1898 1ec4 DD120000 		_DOLIT	10
 1898      0A000000 
 1899 1ecc F5160000 		_ADR	LESS
 1900 1ed0 69140000 		_ADR	ORR
 1901              	DGTQ1:
 1902 1ed4 11140000 		_ADR	DUPP
 1903 1ed8 91130000 		_ADR	RFROM
 1904 1edc DD160000 		_ADR	ULESS
 1905 1ee0 73110000 		_UNNEST
 1906              	
 1907              	//    NUMBER?	( a -- n T | a F )
 1908              	// 	Convert a number word to integer. Push a flag on tos.
 1909              	
 1910 1ee4 801E0000 		.word	_DIGTQ
 1911 1ee8 07       	_NUMBQ:	.byte  7
 1912 1ee9 4E554D42 		.ascii "NUMBER?"
 1912      45523F
 1913              		.p2align 2 	
 1914              	NUMBQ:
 1915 1ef0 504700BF 		_NEST
 1916 1ef4 2D180000 		_ADR	BASE
 1917 1ef8 65130000 		_ADR	AT
 1918 1efc B9130000 		_ADR	TOR
 1919 1f00 DD120000 		_DOLIT	0
 1919      00000000 
 1920 1f08 35140000 		_ADR	OVER
 1921 1f0c 95170000 		_ADR	COUNT
 1922 1f10 35140000 		_ADR	OVER
 1923 1f14 85130000 		_ADR	CAT
 1924 1f18 DD120000 		_DOLIT '$'
 1924      24000000 
 1925 1f20 C5160000 		_ADR	EQUAL
ARM GAS  forth.s 			page 91


 1926 1f24 1F130000 		_QBRAN	NUMQ1
 1926      401F0000 
 1927 1f2c 411E0000 		_ADR	HEX
 1928 1f30 21140000 		_ADR	SWAP
 1929 1f34 31150000 		_ADR	ONEP
 1930 1f38 21140000 		_ADR	SWAP
 1931 1f3c 41150000 		_ADR	ONEM
 1932              	NUMQ1:
 1933 1f40 35140000 		_ADR	OVER
 1934 1f44 85130000 		_ADR	CAT
 1935 1f48 DD120000 		_DOLIT	'-'
 1935      2D000000 
 1936 1f50 C5160000 		_ADR	EQUAL
 1937 1f54 B9130000 		_ADR	TOR
 1938 1f58 21140000 		_ADR	SWAP
 1939 1f5c A5130000 		_ADR	RAT
 1940 1f60 E5140000 		_ADR	SUBB
 1941 1f64 21140000 		_ADR	SWAP
 1942 1f68 A5130000 		_ADR	RAT
 1943 1f6c D5140000 		_ADR	PLUS
 1944 1f70 E5150000 		_ADR	QDUP
 1945 1f74 1F130000 		_QBRAN	NUMQ6
 1945      08200000 
 1946 1f7c 41150000 		_ADR	ONEM
 1947 1f80 B9130000 		_ADR	TOR
 1948              	NUMQ2:
 1949 1f84 11140000 		_ADR	DUPP
 1950 1f88 B9130000 		_ADR	TOR
 1951 1f8c 85130000 		_ADR	CAT
 1952 1f90 2D180000 		_ADR	BASE
 1953 1f94 65130000 		_ADR	AT
 1954 1f98 891E0000 		_ADR	DIGTQ
 1955 1f9c 1F130000 		_QBRAN	NUMQ4
 1955      EC1F0000 
 1956 1fa4 21140000 		_ADR	SWAP
 1957 1fa8 2D180000 		_ADR	BASE
 1958 1fac 65130000 		_ADR	AT
 1959 1fb0 F5140000 		_ADR	STAR
 1960 1fb4 D5140000 		_ADR	PLUS
 1961 1fb8 91130000 		_ADR	RFROM
 1962 1fbc 31150000 		_ADR	ONEP
 1963 1fc0 01130000 		_DONXT	NUMQ2
 1963      841F0000 
 1964 1fc8 A5130000 		_ADR	RAT
 1965 1fcc 21140000 		_ADR	SWAP
 1966 1fd0 01140000 		_ADR	DROP
 1967 1fd4 1F130000 		_QBRAN	NUMQ3
 1967      E01F0000 
 1968 1fdc 8D160000 		_ADR	NEGAT
 1969              	NUMQ3:
 1970 1fe0 21140000 		_ADR	SWAP
 1971 1fe4 33130000 		_BRAN	NUMQ5
 1971      04200000 
 1972              	NUMQ4:
 1973 1fec 91130000 		_ADR	RFROM
 1974 1ff0 91130000 		_ADR	RFROM
 1975 1ff4 21160000 		_ADR	DDROP
ARM GAS  forth.s 			page 92


 1976 1ff8 21160000 		_ADR	DDROP
 1977 1ffc DD120000 		_DOLIT	0
 1977      00000000 
 1978              	NUMQ5:
 1979 2004 11140000 		_ADR	DUPP
 1980              	NUMQ6:
 1981 2008 91130000 		_ADR	RFROM
 1982 200c 21160000 		_ADR	DDROP
 1983 2010 91130000 		_ADR	RFROM
 1984 2014 2D180000 		_ADR	BASE
 1985 2018 51130000 		_ADR	STORE
 1986 201c 73110000 		_UNNEST
 1987              	
 1988              	// **************************************************************************
 1989              	//  Basic I/O
 1990              	
 1991              	//    KEY	 ( -- c )
 1992              	// 	Wait for and return an input character.
 1993              	
 1994 2020 E81E0000 		.word	_NUMBQ
 1995 2024 03       	_KEY:	.byte  3
 1996 2025 4B4559   		.ascii "KEY"
 1997              		.p2align 2 	
 1998              	KEY:
 1999 2028 504700BF 		_NEST
 2000              	KEY1:
 2001 202c 85120000 		_ADR	QRX
 2002 2030 1F130000 		_QBRAN	KEY1
 2002      2C200000 
 2003 2038 73110000 		_UNNEST
 2004              	
 2005              	//    SPACE	( -- )
 2006              	// 	Send the blank character to the output device.
 2007              	
 2008 203c 24200000 		.word	_KEY
 2009 2040 05       	_SPACE:	.byte  5
 2010 2041 53504143 		.ascii "SPACE"
 2010      45
 2011 2046 00BF     		.p2align 2 	
 2012              	SPACE:
 2013 2048 504700BF 		_NEST
 2014 204c 91150000 		_ADR	BLANK
 2015 2050 B9120000 		_ADR	EMIT
 2016 2054 73110000 		_UNNEST
 2017              	
 2018              	//    SPACES	( +n -- )
 2019              	// 	Send n spaces to the output device.
 2020              	
 2021 2058 40200000 		.word	_SPACE
 2022 205c 06       	_SPACS:	.byte  6
 2023 205d 53504143 		.ascii "SPACES"
 2023      4553
 2024 2063 00       		.p2align 2 	
 2025              	SPACS:
 2026 2064 504700BF 		_NEST
 2027 2068 DD120000 		_DOLIT	0
 2027      00000000 
ARM GAS  forth.s 			page 93


 2028 2070 25170000 		_ADR	MAX
 2029 2074 B9130000 		_ADR	TOR
 2030 2078 33130000 		_BRAN	CHAR2
 2030      84200000 
 2031              	CHAR1:
 2032 2080 49200000 		_ADR	SPACE
 2033              	CHAR2:
 2034 2084 01130000 		_DONXT	CHAR1
 2034      80200000 
 2035 208c 73110000 		_UNNEST
 2036              	
 2037              	//    TYPE	( b u -- )
 2038              	// 	Output u characters from b.
 2039              	
 2040 2090 5C200000 		.word	_SPACS
 2041 2094 04       	_TYPEE:	.byte	4
 2042 2095 54595045 		.ascii "TYPE"
 2043 2099 0000BF   		.p2align 2 	
 2044              	TYPEE:
 2045 209c 504700BF 		_NEST
 2046 20a0 B9130000 		_ADR  TOR   // ( a+1 -- R: u )
 2047 20a4 33130000 		_BRAN	TYPE2
 2047      B8200000 
 2048              	TYPE1:  
 2049 20ac 95170000 		_ADR  COUNT
 2050 20b0 D51A0000 		_ADR TCHAR
 2051 20b4 B9120000 		_ADR EMIT
 2052              	TYPE2:  
 2053 20b8 01130000 		_DONXT	TYPE1
 2053      AC200000 
 2054 20c0 01140000 		_ADR	DROP
 2055 20c4 73110000 		_UNNEST
 2056              	
 2057              	//    CR	  ( -- )
 2058              	// 	Output a carriage return and a line feed.
 2059              	
 2060 20c8 94200000 		.word	_TYPEE
 2061 20cc 02       	_CR:	.byte  2
 2062 20cd 4352     		.ascii "CR"
 2063 20cf 00       		.p2align 2 	
 2064              	CR:
 2065 20d0 504700BF 		_NEST
 2066 20d4 DD120000 		_DOLIT	CRR
 2066      0D000000 
 2067 20dc B9120000 		_ADR	EMIT
 2068 20e0 DD120000 		_DOLIT	LF
 2068      0A000000 
 2069 20e8 B9120000 		_ADR	EMIT
 2070 20ec 73110000 		_UNNEST
 2071              	
 2072              	//    do_$	( -- a )
 2073              	// 	Return the address of a compiled string.
 2074              	//  adjust return address to skip over it.
 2075              	
 2076              	// 	.word	_CR
 2077              	// _DOSTR	.byte  COMPO+3
 2078              	// 	.ascii "do$$"
ARM GAS  forth.s 			page 94


 2079              	// 	.p2align 2 	
 2080              	DOSTR:
 2081 20f0 504700BF 		_NEST     
 2082              	/* compiled string address is 2 levels deep */
 2083 20f4 91130000 		_ADR	RFROM	// { -- a1 }
 2084 20f8 91130000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2085 20fc 11140000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2086 2100 95170000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2087 2104 D5140000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2088 2108 B91A0000 		_ADR	ALGND	//  end of string
 2089              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2090 210c B9130000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2091 2110 21140000 		_ADR	SWAP	//  count tugged
 2092 2114 B9130000 		_ADR	TOR     //  ( -- a2) is string address
 2093 2118 73110000 		_UNNEST
 2094              	
 2095              	//    $"|	( -- a )
 2096              	// 	Run time routine compiled by _". Return address of a compiled string.
 2097              	
 2098              	// 	.word	_DOSTR
 2099              	// _STRQP	.byte  COMPO+3
 2100              	// 	.ascii "$\"|"
 2101              	// 	.p2align 2 	
 2102              	STRQP:
 2103 211c 504700BF 		_NEST
 2104 2120 F1200000 		_ADR	DOSTR
 2105 2124 73110000 		_UNNEST			// force a call to dostr
 2106              	
 2107              	//    .$	( a -- )
 2108              	// 	Run time routine of ." . Output a compiled string.
 2109              	
 2110              	// 	.word	_STRQP
 2111              	// _DOTST	.byte  COMPO+2
 2112              	// 	.ascii ".$$"
 2113              	// 	.p2align 2 	
 2114              	DOTST:
 2115 2128 504700BF 		_NEST
 2116 212c 95170000 		_ADR	COUNT // ( -- a+1 c )
 2117 2130 9D200000 		_ADR	TYPEE
 2118 2134 73110000 		_UNNEST
 2119              	
 2120              	//    ."|	( -- )
 2121              	// 	Run time routine of ." . Output a compiled string.
 2122              	
 2123              	// 	.word	_DOTST
 2124              	// _DOTQP	.byte  COMPO+3
 2125              	// 	.ascii ".""|"
 2126              	// 	.p2align 2 	
 2127              	DOTQP:
 2128 2138 504700BF 		_NEST
 2129 213c F1200000 		_ADR	DOSTR
 2130 2140 29210000 		_ADR	DOTST
 2131 2144 73110000 		_UNNEST
 2132              	
 2133              	//    .R	  ( n +n -- )
 2134              	// 	Display an integer in a field of n columns, right justified.
 2135              	
ARM GAS  forth.s 			page 95


 2136 2148 CC200000 		.word	_CR
 2137 214c 02       	_DOTR:	.byte  2
 2138 214d 2E52     		.ascii ".R"
 2139 214f 00       		.p2align 2 	
 2140              	DOTR:
 2141 2150 504700BF 		_NEST
 2142 2154 B9130000 		_ADR	TOR
 2143 2158 111E0000 		_ADR	STRR
 2144 215c 91130000 		_ADR	RFROM
 2145 2160 35140000 		_ADR	OVER
 2146 2164 E5140000 		_ADR	SUBB
 2147 2168 65200000 		_ADR	SPACS
 2148 216c 9D200000 		_ADR	TYPEE
 2149 2170 73110000 		_UNNEST
 2150              	
 2151              	//    U.R	 ( u +n -- )
 2152              	// 	Display an unsigned integer in n column, right justified.
 2153              	
 2154 2174 4C210000 		.word	_DOTR
 2155 2178 03       	_UDOTR:	.byte  3
 2156 2179 552E52   		.ascii "U.R"
 2157              		.p2align 2 	
 2158              	UDOTR:
 2159 217c 504700BF 		_NEST
 2160 2180 B9130000 		_ADR	TOR
 2161 2184 311D0000 		_ADR	BDIGS
 2162 2188 9D1D0000 		_ADR	DIGS
 2163 218c F11D0000 		_ADR	EDIGS
 2164 2190 91130000 		_ADR	RFROM
 2165 2194 35140000 		_ADR	OVER
 2166 2198 E5140000 		_ADR	SUBB
 2167 219c 65200000 		_ADR	SPACS
 2168 21a0 9D200000 		_ADR	TYPEE
 2169 21a4 73110000 		_UNNEST
 2170              	
 2171              	//    U.	  ( u -- )
 2172              	// 	Display an unsigned integer in free format.
 2173              	
 2174 21a8 78210000 		.word	_UDOTR
 2175 21ac 02       	_UDOT:	.byte  2
 2176 21ad 552E     		.ascii "U."
 2177 21af 00       		.p2align 2 	
 2178              	UDOT:
 2179 21b0 504700BF 		_NEST
 2180 21b4 311D0000 		_ADR	BDIGS
 2181 21b8 9D1D0000 		_ADR	DIGS
 2182 21bc F11D0000 		_ADR	EDIGS
 2183 21c0 49200000 		_ADR	SPACE
 2184 21c4 9D200000 		_ADR	TYPEE
 2185 21c8 73110000 		_UNNEST
 2186              	
 2187              	//    .	   ( w -- )
 2188              	// 	Display an integer in free format, preceeded by a space.
 2189              	
 2190 21cc AC210000 		.word	_UDOT
 2191 21d0 01       	_DOT:	.byte  1
 2192 21d1 2E       		.ascii "."
ARM GAS  forth.s 			page 96


 2193 21d2 00BF     		.p2align 2 	
 2194              	DOT:
 2195 21d4 504700BF 		_NEST
 2196 21d8 2D180000 		_ADR	BASE
 2197 21dc 65130000 		_ADR	AT
 2198 21e0 DD120000 		_DOLIT 10
 2198      0A000000 
 2199 21e8 7D140000 		_ADR	XORR			// ?decimal
 2200 21ec 1F130000 		_QBRAN	DOT1
 2200      FC210000 
 2201 21f4 B1210000 		_ADR	UDOT
 2202 21f8 73110000 		_UNNEST			// no,display unsigned
 2203              	DOT1:
 2204 21fc 111E0000 	    _ADR	STRR
 2205 2200 49200000 		_ADR	SPACE
 2206 2204 9D200000 		_ADR	TYPEE
 2207 2208 73110000 		_UNNEST			// yes, display signed
 2208              	
 2209              	//    ?	   ( a -- )
 2210              	// 	Display the contents in a memory cell.
 2211              	
 2212 220c D0210000 		.word	_DOT
 2213 2210 01       	_QUEST:	.byte  1
 2214 2211 3F       		.ascii "?"
 2215 2212 00BF     		.p2align 2 	
 2216              	QUEST:
 2217 2214 504700BF 		_NEST
 2218 2218 65130000 		_ADR	AT
 2219 221c D5210000 		_ADR	DOT
 2220 2220 73110000 		_UNNEST
 2221              	
 2222              	// **************************************************************************
 2223              	//  Parsing
 2224              	
 2225              	//    parse	( b u c -- b u delta //  string> )
 2226              	// 	Scan word delimited by c. Return found string and its offset.
 2227              	
 2228              	// 	.word	_QUEST
 2229              	// _PARS	.byte  5
 2230              	// 	.ascii "parse"
 2231              	// 	.p2align 2 	
 2232              	PARS:
 2233 2224 504700BF 		_NEST
 2234 2228 37180000 		_ADR	TEMP
 2235 222c 51130000 		_ADR	STORE
 2236 2230 35140000 		_ADR	OVER
 2237 2234 B9130000 		_ADR	TOR
 2238 2238 11140000 		_ADR	DUPP
 2239 223c 1F130000 		_QBRAN	PARS8
 2239      38230000 
 2240 2244 41150000 		_ADR	ONEM
 2241 2248 37180000 		_ADR	TEMP
 2242 224c 65130000 		_ADR	AT
 2243 2250 91150000 		_ADR	BLANK
 2244 2254 C5160000 		_ADR	EQUAL
 2245 2258 1F130000 		_QBRAN	PARS3
 2245      AC220000 
ARM GAS  forth.s 			page 97


 2246 2260 B9130000 		_ADR	TOR
 2247              	PARS1:
 2248 2264 91150000 		_ADR	BLANK
 2249 2268 35140000 		_ADR	OVER
 2250 226c 85130000 		_ADR	CAT			// skip leading blanks 
 2251 2270 E5140000 		_ADR	SUBB
 2252 2274 45140000 		_ADR	ZLESS
 2253 2278 79160000 		_ADR	INVER
 2254 227c 1F130000 		_QBRAN	PARS2
 2254      A8220000 
 2255 2284 31150000 		_ADR	ONEP
 2256 2288 01130000 		_DONXT	PARS1
 2256      64220000 
 2257 2290 91130000 		_ADR	RFROM
 2258 2294 01140000 		_ADR	DROP
 2259 2298 DD120000 		_DOLIT	0
 2259      00000000 
 2260 22a0 11140000 		_ADR	DUPP
 2261 22a4 73110000 		_UNNEST
 2262              	PARS2:
 2263 22a8 91130000 		_ADR	RFROM
 2264              	PARS3:
 2265 22ac 35140000 		_ADR	OVER
 2266 22b0 21140000 		_ADR	SWAP
 2267 22b4 B9130000 		_ADR	TOR
 2268              	PARS4:
 2269 22b8 37180000 		_ADR	TEMP
 2270 22bc 65130000 		_ADR	AT
 2271 22c0 35140000 		_ADR	OVER
 2272 22c4 85130000 		_ADR	CAT
 2273 22c8 E5140000 		_ADR	SUBB			// scan for delimiter
 2274 22cc 37180000 		_ADR	TEMP
 2275 22d0 65130000 		_ADR	AT
 2276 22d4 91150000 		_ADR	BLANK
 2277 22d8 C5160000 		_ADR	EQUAL
 2278 22dc 1F130000 		_QBRAN	PARS5
 2278      E8220000 
 2279 22e4 45140000 		_ADR	ZLESS
 2280              	PARS5:
 2281 22e8 1F130000 		_QBRAN	PARS6
 2281      0C230000 
 2282 22f0 31150000 		_ADR	ONEP
 2283 22f4 01130000 		_DONXT	PARS4
 2283      B8220000 
 2284 22fc 11140000 		_ADR	DUPP
 2285 2300 B9130000 		_ADR	TOR
 2286 2304 33130000 		_BRAN	PARS7
 2286      20230000 
 2287              	PARS6:
 2288 230c 91130000 		_ADR	RFROM
 2289 2310 01140000 		_ADR	DROP
 2290 2314 11140000 		_ADR	DUPP
 2291 2318 31150000 		_ADR	ONEP
 2292 231c B9130000 		_ADR	TOR
 2293              	PARS7:
 2294 2320 35140000 		_ADR	OVER
 2295 2324 E5140000 		_ADR	SUBB
ARM GAS  forth.s 			page 98


 2296 2328 91130000 		_ADR	RFROM
 2297 232c 91130000 		_ADR	RFROM
 2298 2330 E5140000 		_ADR	SUBB
 2299 2334 73110000 		_UNNEST
 2300              	PARS8:
 2301 2338 35140000 		_ADR	OVER
 2302 233c 91130000 		_ADR	RFROM
 2303 2340 E5140000 		_ADR	SUBB
 2304 2344 73110000 		_UNNEST
 2305              	
 2306              	//    PARSE	( c -- b u //  string> )
 2307              	// 	Scan input stream and return counted string delimited by c.
 2308              	
 2309 2348 10220000 		.word	_QUEST
 2310 234c 05       	_PARSE:	.byte  5
 2311 234d 50415253 		.ascii "PARSE"
 2311      45
 2312 2352 00BF     		.p2align 2 	
 2313              	PARSE:
 2314 2354 504700BF 		_NEST
 2315 2358 B9130000 		_ADR	TOR
 2316 235c A51B0000 		_ADR	TIB
 2317 2360 61180000 		_ADR	INN
 2318 2364 65130000 		_ADR	AT
 2319 2368 D5140000 		_ADR	PLUS			// current input buffer pointer
 2320 236c 75180000 		_ADR	NTIB
 2321 2370 65130000 		_ADR	AT
 2322 2374 61180000 		_ADR	INN
 2323 2378 65130000 		_ADR	AT
 2324 237c E5140000 		_ADR	SUBB			// remaining count
 2325 2380 91130000 		_ADR	RFROM
 2326 2384 25220000 		_ADR	PARS
 2327 2388 61180000 		_ADR	INN
 2328 238c 4D170000 		_ADR	PSTOR
 2329 2390 73110000 		_UNNEST
 2330              	
 2331              	//    .(	  ( -- )
 2332              	// 	Output following string up to next ) .
 2333              	
 2334 2394 4C230000 		.word	_PARSE
 2335 2398 82       	_DOTPR:	.byte  IMEDD+2
 2336 2399 2E28     		.ascii ".("
 2337 239b 00       		.p2align 2 	
 2338              	DOTPR:
 2339 239c 504700BF 		_NEST
 2340 23a0 DD120000 		_DOLIT	')'
 2340      29000000 
 2341 23a8 55230000 		_ADR	PARSE
 2342 23ac 9D200000 		_ADR	TYPEE
 2343 23b0 73110000 		_UNNEST
 2344              	
 2345              	//    (	   ( -- )
 2346              	// 	Ignore following string up to next ) . A comment.
 2347              	
 2348 23b4 98230000 		.word	_DOTPR
 2349 23b8 81       	_PAREN:	.byte  IMEDD+1
 2350 23b9 28       		.ascii "("
ARM GAS  forth.s 			page 99


 2351 23ba 00BF     		.p2align 2 	
 2352              	PAREN:
 2353 23bc 504700BF 		_NEST
 2354 23c0 DD120000 		_DOLIT	')'
 2354      29000000 
 2355 23c8 55230000 		_ADR	PARSE
 2356 23cc 21160000 		_ADR	DDROP
 2357 23d0 73110000 		_UNNEST
 2358              	
 2359              	//    \	   ( -- )
 2360              	// 	Ignore following text till the end of line.
 2361              	
 2362 23d4 B8230000 		.word	_PAREN
 2363 23d8 81       	_BKSLA:	.byte  IMEDD+1
 2364 23d9 5C       		.byte	'\\'
 2365 23da 00BF     		.p2align 2 	
 2366              	BKSLA:
 2367 23dc 504700BF 		_NEST
 2368 23e0 75180000 		_ADR	NTIB
 2369 23e4 65130000 		_ADR	AT
 2370 23e8 61180000 		_ADR	INN
 2371 23ec 51130000 		_ADR	STORE
 2372 23f0 73110000 		_UNNEST
 2373              	
 2374              	//    CHAR	( -- c )
 2375              	// 	Parse next word and return its first character.
 2376              	
 2377 23f4 D8230000 		.word	_BKSLA
 2378 23f8 04       	_CHAR:	.byte  4
 2379 23f9 43484152 		.ascii "CHAR"
 2380 23fd 0000BF   		.p2align 2 	
 2381              	CHAR:
 2382 2400 504700BF 		_NEST
 2383 2404 91150000 		_ADR	BLANK
 2384 2408 55230000 		_ADR	PARSE
 2385 240c 01140000 		_ADR	DROP
 2386 2410 85130000 		_ADR	CAT
 2387 2414 73110000 		_UNNEST
 2388              	
 2389              	//    WORD	( c -- a //  string> )
 2390              	// 	Parse a word from input stream and copy it to code dictionary.
 2391              	
 2392 2418 F8230000 		.word	_CHAR
 2393 241c 04       	_WORDD:	.byte  4
 2394 241d 574F5244 		.ascii "WORD"
 2395 2421 0000BF   		.p2align 2 	
 2396              	WORDD:
 2397 2424 504700BF 		_NEST
 2398 2428 55230000 		_ADR	PARSE
 2399 242c 6D1B0000 		_ADR	HERE
 2400 2430 71150000 		_ADR	CELLP
 2401 2434 651C0000 		_ADR	PACKS
 2402 2438 73110000 		_UNNEST
 2403              	
 2404              	//    TOKEN	( -- a //  string> )
 2405              	// 	Parse a word from input stream and copy it to name dictionary.
 2406              	
ARM GAS  forth.s 			page 100


 2407 243c 1C240000 		.word	_WORDD
 2408 2440 05       	_TOKEN:	.byte  5
 2409 2441 544F4B45 		.ascii "TOKEN"
 2409      4E
 2410 2446 00BF     		.p2align 2 	
 2411              	TOKEN:
 2412 2448 504700BF 		_NEST
 2413 244c 91150000 		_ADR	BLANK
 2414 2450 25240000 		_ADR	WORDD
 2415 2454 73110000 		_UNNEST
 2416              	
 2417              	// **************************************************************************
 2418              	//  Dictionary search
 2419              	
 2420              	//    NAME>	( na -- ca )
 2421              	// 	Return a code address given a name address.
 2422              	
 2423 2458 40240000 		.word	_TOKEN
 2424 245c 05       	_NAMET:	.byte  5
 2425 245d 4E414D45 		.ascii "NAME>"
 2425      3E
 2426 2462 00BF     		.p2align 2 	
 2427              	NAMET:
 2428 2464 504700BF 		_NEST
 2429 2468 95170000 		_ADR	COUNT
 2430 246c DD120000 		_DOLIT	0x1F
 2430      1F000000 
 2431 2474 55140000 		_ADR	ANDD
 2432 2478 D5140000 		_ADR	PLUS
 2433 247c B91A0000 		_ADR	ALGND
 2434 2480 73110000 		_UNNEST
 2435              	
 2436              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2437              	// 	Compare u bytes in two strings. Return 0 if identical.
 2438              	//
 2439              	//  Picatout 2020-12-01, 
 2440              	//      Because of problem with .align directive that
 2441              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2442              	// 		words  to do a byte by byte comparison. 
 2443              	//
 2444 2484 5C240000 		.word	_NAMET
 2445 2488 05       	_SAMEQ:	.byte  5
 2446 2489 53414D45 		.ascii "SAME?"
 2446      3F
 2447 248e 00BF     		.p2align 2	
 2448              	SAMEQ:
 2449 2490 504700BF 		_NEST
 2450 2494 B9130000 		_ADR	TOR
 2451 2498 33130000 		_BRAN	SAME2
 2451      DC240000 
 2452              	SAME1:
 2453 24a0 35140000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2454 24a4 A5130000 		_ADR	RAT   // a1 a2 a1 u 
 2455 24a8 D5140000 		_ADR	PLUS  // a1 a2 a1+u 
 2456 24ac 85130000 		_ADR	CAT	   // a1 a2 c1    		
 2457 24b0 35140000 		_ADR	OVER  // a1 a2 c1 a2 
 2458 24b4 A5130000 		_ADR	RAT    
ARM GAS  forth.s 			page 101


 2459 24b8 D5140000 		_ADR	PLUS    
 2460 24bc 85130000 		_ADR	CAT	  // a1 a2 c1 c2
 2461 24c0 E5140000 		_ADR	SUBB  
 2462 24c4 E5150000 		_ADR	QDUP
 2463 24c8 1F130000 		_QBRAN	SAME2
 2463      DC240000 
 2464 24d0 91130000 		_ADR	RFROM
 2465 24d4 01140000 		_ADR	DROP
 2466 24d8 73110000 		_UNNEST	// strings not equal
 2467              	SAME2:
 2468 24dc 01130000 		_DONXT	SAME1
 2468      A0240000 
 2469 24e4 DD120000 		_DOLIT	0
 2469      00000000 
 2470 24ec 73110000 		_UNNEST	// strings equal
 2471              	
 2472              	//    find	( a na -- ca na | a F )
 2473              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2474              	
 2475              	//  Picatout 2020-12-01,  
 2476              	//		Modified from original. See comment for word "SAME?" 
 2477              	
 2478              	// 	.word	_SAMEQ
 2479              	// _FIND	.byte  4
 2480              	// 	.ascii "find"
 2481              	// 	.p2align 2 	
 2482              	FIND:
 2483 24f0 504700BF 		_NEST
 2484 24f4 21140000 		_ADR	SWAP			// na a	
 2485 24f8 95170000 		_ADR	COUNT			// na a+1 count
 2486 24fc 11140000 		_ADR	DUPP 
 2487 2500 37180000 		_ADR	TEMP
 2488 2504 51130000 		_ADR	STORE			// na a+1 count 
 2489 2508 B9130000 		_ADR  TOR		// na a+1  R: count  
 2490 250c 21140000 		_ADR	SWAP			// a+1 na
 2491              	FIND1:
 2492 2510 11140000 		_ADR	DUPP			// a+1 na na
 2493 2514 1F130000 		_QBRAN	FIND6	// end of vocabulary
 2493      68250000 
 2494 251c 11140000 		_ADR	DUPP			// a+1 na na
 2495 2520 85130000 		_ADR	CAT			// a+1 na name1
 2496 2524 DD120000 		_DOLIT	MASKK
 2496      1FFFFFFF 
 2497 252c 55140000 		_ADR	ANDD
 2498 2530 A5130000 		_ADR	RAT			// a+1 na name1 count 
 2499 2534 7D140000 		_ADR	XORR			// a+1 na,  same length?
 2500 2538 1F130000 		_QBRAN	FIND2
 2500      50250000 
 2501 2540 81150000 		_ADR	CELLM			// a+1 la
 2502 2544 65130000 		_ADR	AT			// a+1 next_na
 2503 2548 33130000 		_BRAN	FIND1			// try next word
 2503      10250000 
 2504              	FIND2:   
 2505 2550 31150000 		_ADR	ONEP			// a+1 na+1
 2506 2554 37180000 		_ADR	TEMP
 2507 2558 65130000 		_ADR	AT			// a+1 na+1 count
 2508 255c 91240000 		_ADR	SAMEQ		// a+1 na+1 ? 
ARM GAS  forth.s 			page 102


 2509              	FIND3:	
 2510 2560 33130000 		_BRAN	FIND4
 2510      80250000 
 2511              	FIND6:	
 2512 2568 91130000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2513 256c 01140000 		_ADR	DROP			// a+1 0
 2514 2570 21140000 		_ADR	SWAP			// 0 a+1
 2515 2574 41150000 		_ADR	ONEM			// 0 a
 2516 2578 21140000 		_ADR	SWAP			// a 0 
 2517 257c 73110000 		_UNNEST			// return without a match
 2518              	FIND4:	
 2519 2580 1F130000 		_QBRAN	FIND5			// a+1 na+1
 2519      9C250000 
 2520 2588 41150000 		_ADR	ONEM			// a+1 na
 2521 258c 81150000 		_ADR	CELLM			// a+4 la
 2522 2590 65130000 		_ADR	AT			// a+1 next_na
 2523 2594 33130000 		_BRAN	FIND1			// compare next name
 2523      10250000 
 2524              	FIND5:	
 2525 259c 91130000 		_ADR	RFROM			// a+1 na+1 count
 2526 25a0 01140000 		_ADR	DROP			// a+1 na+1
 2527 25a4 21140000 		_ADR	SWAP			// na+1 a+1
 2528 25a8 01140000 		_ADR	DROP			// na+1
 2529 25ac 41150000 		_ADR	ONEM			// na
 2530 25b0 11140000 		_ADR	DUPP			// na na
 2531 25b4 65240000 		_ADR	NAMET			// na ca
 2532 25b8 21140000 		_ADR	SWAP			// ca na
 2533 25bc 73110000 		_UNNEST			//  return with a match
 2534              	
 2535              	//    NAME?	( a -- ca na | a F )
 2536              	// 	Search all context vocabularies for a string.
 2537              	
 2538 25c0 88240000 		.word	_SAMEQ
 2539 25c4 05       	_NAMEQ:	.byte  5
 2540 25c5 4E414D45 		.ascii "NAME?"
 2540      3F
 2541 25ca 00BF     		.p2align 2 	
 2542              	NAMEQ:
 2543 25cc 504700BF 		_NEST
 2544 25d0 B5180000 		_ADR	CNTXT
 2545 25d4 65130000 		_ADR	AT
 2546 25d8 F1240000 		_ADR	FIND
 2547 25dc 73110000 		_UNNEST
 2548              	
 2549              	// **************************************************************************
 2550              	//  Terminal input
 2551              	
 2552              	//    	  ( bot eot cur -- bot eot cur )
 2553              	// 	Backup the cursor by one character.
 2554              	
 2555              	// 	.word	_NAMEQ
 2556              	// _BKSP	.byte  2
 2557              	// 	.ascii "^H"
 2558              	// 	.p2align 2 	
 2559              	BKSP:
 2560 25e0 504700BF 		_NEST
 2561 25e4 B9130000 		_ADR	TOR
ARM GAS  forth.s 			page 103


 2562 25e8 35140000 		_ADR	OVER
 2563 25ec 91130000 		_ADR	RFROM
 2564 25f0 21140000 		_ADR	SWAP
 2565 25f4 35140000 		_ADR	OVER
 2566 25f8 7D140000 		_ADR	XORR
 2567 25fc 1F130000 		_QBRAN	BACK1
 2567      28260000 
 2568 2604 DD120000 		_DOLIT	BKSPP
 2568      08000000 
 2569 260c B9120000 		_ADR	TECHO
 2570 2610 41150000 		_ADR	ONEM
 2571 2614 91150000 		_ADR	BLANK
 2572 2618 B9120000 		_ADR	TECHO
 2573 261c DD120000 		_DOLIT	BKSPP
 2573      08000000 
 2574 2624 B9120000 		_ADR	TECHO
 2575              	BACK1:
 2576 2628 73110000 		  _UNNEST
 2577              	
 2578              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2579              	// 	Accept and echo the key stroke and bump the cursor.
 2580              	
 2581              	// 	.word	_BKSP
 2582              	// _TAP	.byte  3
 2583              	// 	.ascii "TAP"
 2584              	// 	.p2align 2 	
 2585              	TAP:
 2586 262c 504700BF 		_NEST
 2587 2630 11140000 		_ADR	DUPP
 2588 2634 B9120000 		_ADR	TECHO
 2589 2638 35140000 		_ADR	OVER
 2590 263c 71130000 		_ADR	CSTOR
 2591 2640 31150000 		_ADR	ONEP
 2592 2644 73110000 		_UNNEST
 2593              	
 2594              	//    kTAP	( bot eot cur c -- bot eot cur )
 2595              	// 	Process a key stroke, CR or backspace.
 2596              	
 2597              	// 	.word	_TAP
 2598              	// _KTAP	.byte  4
 2599              	// 	.ascii "kTAP"
 2600              	// 	.p2align 2 	
 2601              	KTAP:
 2602              	TTAP:
 2603 2648 504700BF 		_NEST
 2604 264c 11140000 		_ADR	DUPP
 2605 2650 DD120000 		_DOLIT	CRR
 2605      0D000000 
 2606 2658 7D140000 		_ADR	XORR
 2607 265c 1F130000 		_QBRAN  KTAP2
 2607      8C260000 
 2608 2664 DD120000 		_DOLIT	BKSPP
 2608      08000000 
 2609 266c 7D140000 		_ADR	XORR
 2610 2670 1F130000 		_QBRAN	KTAP1
 2610      84260000 
 2611 2678 91150000 		_ADR	BLANK
ARM GAS  forth.s 			page 104


 2612 267c 2D260000 		_ADR	TAP
 2613 2680 73110000 		_UNNEST
 2614              	//	.word	0			// patch
 2615              	KTAP1:
 2616 2684 E1250000 		_ADR	BKSP
 2617 2688 73110000 		_UNNEST
 2618              	KTAP2:
 2619 268c 01140000 		_ADR	DROP
 2620 2690 21140000 		_ADR	SWAP
 2621 2694 01140000 		_ADR	DROP
 2622 2698 11140000 		_ADR	DUPP
 2623 269c 73110000 		_UNNEST
 2624              	
 2625              	//    ACCEPT	( b u -- b u )
 2626              	// 	Accept characters to input buffer. Return with actual count.
 2627              	
 2628 26a0 C4250000 		.word	_NAMEQ
 2629 26a4 06       	_ACCEP:	.byte  6
 2630 26a5 41434345 		.ascii "ACCEPT"
 2630      5054
 2631 26ab 00       		.p2align 2 	
 2632              	ACCEP:
 2633 26ac 504700BF 		_NEST
 2634 26b0 35140000 		_ADR	OVER
 2635 26b4 D5140000 		_ADR	PLUS
 2636 26b8 35140000 		_ADR	OVER
 2637              	ACCP1:
 2638 26bc 49160000 		_ADR	DDUP
 2639 26c0 7D140000 		_ADR	XORR
 2640 26c4 1F130000 		_QBRAN	ACCP4
 2640      04270000 
 2641 26cc 29200000 		_ADR	KEY
 2642 26d0 11140000 		_ADR	DUPP
 2643 26d4 91150000 		_ADR	BLANK
 2644 26d8 DD120000 		_DOLIT 127
 2644      7F000000 
 2645 26e0 41190000 		_ADR	WITHI
 2646 26e4 1F130000 		_QBRAN	ACCP2
 2646      F8260000 
 2647 26ec 2D260000 		_ADR	TAP
 2648 26f0 33130000 		_BRAN	ACCP3
 2648      FC260000 
 2649              	ACCP2:
 2650 26f8 49260000 		_ADR	KTAP
 2651              	ACCP3:	  
 2652 26fc 33130000 		_BRAN	ACCP1
 2652      BC260000 
 2653              	ACCP4:
 2654 2704 01140000 		_ADR	DROP
 2655 2708 35140000 		_ADR	OVER
 2656 270c E5140000 		_ADR	SUBB
 2657 2710 73110000 		_UNNEST
 2658              	
 2659              	//    QUERY	( -- )
 2660              	// 	Accept input stream to terminal input buffer.
 2661              	
 2662 2714 A4260000 		.word	_ACCEP
ARM GAS  forth.s 			page 105


 2663 2718 05       	_QUERY:	.byte  5
 2664 2719 51554552 		.ascii "QUERY"
 2664      59
 2665 271e 00BF     		.p2align 2 	
 2666              	QUERY:
 2667 2720 504700BF 		_NEST
 2668 2724 A51B0000 		_ADR	TIB
 2669 2728 DD120000 		_DOLIT 80
 2669      50000000 
 2670 2730 AD260000 		_ADR	ACCEP
 2671 2734 75180000 		_ADR	NTIB
 2672 2738 51130000 		_ADR	STORE
 2673 273c 01140000 		_ADR	DROP
 2674 2740 DD120000 		_DOLIT	0
 2674      00000000 
 2675 2748 61180000 		_ADR	INN
 2676 274c 51130000 		_ADR	STORE
 2677 2750 73110000 		_UNNEST
 2678              	
 2679              	// **************************************************************************
 2680              	//  Error handling
 2681              	
 2682              	//    ABORT	( a -- )
 2683              	// 	Reset data stack and jump to QUIT.
 2684              	
 2685 2754 18270000 		.word	_QUERY
 2686 2758 05       	_ABORT:	.byte  5
 2687 2759 41424F52 		.ascii "ABORT"
 2687      54
 2688 275e 00BF     		.p2align 2 	
 2689              	ABORT:
 2690 2760 504700BF 		_NEST
 2691              	ABORT1:
 2692 2764 49200000 		_ADR	SPACE
 2693 2768 95170000 		_ADR	COUNT
 2694 276c 9D200000 		_ADR	TYPEE
 2695 2770 DD120000 		_DOLIT	0X3F
 2695      3F000000 
 2696 2778 B9120000 		_ADR	EMIT
 2697 277c D1200000 		_ADR	CR
 2698 2780 E9280000 		_ADR	PRESE
 2699 2784 33130000 		_BRAN	QUIT
 2699      08290000 
 2700              	
 2701              	//    _abort"	( f -- )
 2702              	// 	Run time routine of ABORT" . Abort with a message.
 2703              	
 2704              	// 	.word	_ABORT
 2705              	// _ABORQ	.byte  COMPO+6
 2706              	// 	.ascii "abort\""
 2707              	// 	.p2align 2 	
 2708              	ABORQ:
 2709 278c 504700BF 		_NEST
 2710 2790 F1200000 		_ADR	DOSTR
 2711 2794 21140000 		_ADR	SWAP 
 2712 2798 1F130000 		_QBRAN	1f	// text flag
 2712      A8270000 
ARM GAS  forth.s 			page 106


 2713 27a0 33130000 		_BRAN	ABORT1
 2713      64270000 
 2714              	1:
 2715 27a8 01140000 		_ADR	DROP
 2716 27ac 73110000 		_UNNEST			// drop error
 2717              	
 2718              	// **************************************************************************
 2719              	//  The text interpreter
 2720              	
 2721              	//    $INTERPRET  ( a -- )
 2722              	// 	Interpret a word. If failed, try to convert it to an integer.
 2723              	
 2724 27b0 58270000 		.word	_ABORT
 2725 27b4 0A       	_INTER:	.byte  10
 2726 27b5 2424494E 		.ascii "$$INTERPRET"
 2726      54455250 
 2726      524554
 2727              		.p2align 2 	
 2728              	INTER:
 2729 27c0 504700BF 		_NEST
 2730 27c4 CD250000 		_ADR	NAMEQ
 2731 27c8 E5150000 		_ADR	QDUP	// ?defined
 2732 27cc 1F130000 		_QBRAN	INTE1
 2732      00280000 
 2733 27d4 65130000 		_ADR	AT
 2734 27d8 DD120000 		_DOLIT	COMPO
 2734      40000000 
 2735 27e0 55140000 		_ADR	ANDD	// ?compile only lexicon bits
 2736 27e4 8D270000 		_ABORQ	13," compile only"
 2736      0D20636F 
 2736      6D70696C 
 2736      65206F6E 
 2736      6C7900BF 
 2737 27f8 F5120000 		_ADR	EXECU
 2738 27fc 73110000 		_UNNEST			// execute defined word
 2739              	INTE1:
 2740 2800 F11E0000 		_ADR	NUMBQ
 2741 2804 1F130000 		_QBRAN	INTE2
 2741      10280000 
 2742 280c 73110000 		_UNNEST
 2743              	INTE2:
 2744 2810 61270000 		_ADR	ABORT	// error
 2745              	
 2746              	//    [	   ( -- )
 2747              	// 	Start the text interpreter.
 2748              	
 2749 2814 B4270000 		.word	_INTER
 2750 2818 81       	_LBRAC:	.byte  IMEDD+1
 2751 2819 5B       		.ascii "["
 2752 281a 00BF     		.p2align 2 	
 2753              	LBRAC:
 2754 281c 504700BF 		_NEST
 2755 2820 DD120000 		_DOLIT	INTER
 2755      C0270000 
 2756 2828 89180000 		_ADR	TEVAL
 2757 282c 51130000 		_ADR	STORE
 2758 2830 73110000 		_UNNEST
ARM GAS  forth.s 			page 107


 2759              	
 2760              	//    .OK	 ( -- )
 2761              	// 	Display "ok" only while interpreting.
 2762              	
 2763 2834 18280000 		.word	_LBRAC
 2764 2838 03       	_DOTOK:	.byte  3
 2765 2839 2E4F4B   		.ascii ".OK"
 2766              		.p2align 2 	
 2767              	DOTOK:
 2768 283c 504700BF 		_NEST
 2769 2840 DD120000 		_DOLIT	INTER
 2769      C0270000 
 2770 2848 89180000 		_ADR	TEVAL
 2771 284c 65130000 		_ADR	AT
 2772 2850 C5160000 		_ADR	EQUAL
 2773 2854 1F130000 		_QBRAN	DOTO1
 2773      64280000 
 2774 285c 39210000 		_DOTQP	3," ok"
 2774      03206F6B 
 2775              	DOTO1:
 2776 2864 D1200000 		_ADR	CR
 2777 2868 73110000 		_UNNEST
 2778              	
 2779              	//    ?STACK	( -- )
 2780              	// 	Abort if the data stack underflows.
 2781              	
 2782 286c 38280000 		.word	_DOTOK
 2783 2870 06       	_QSTAC:	.byte  6
 2784 2871 3F535441 		.ascii "?STACK"
 2784      434B
 2785 2877 00       		.p2align 2 	
 2786              	QSTAC:
 2787 2878 504700BF 		_NEST
 2788 287c 211B0000 		_ADR	DEPTH
 2789 2880 45140000 		_ADR	ZLESS	// check only for underflow
 2790 2884 8D270000 		_ABORQ	9,"underflow"
 2790      09756E64 
 2790      6572666C 
 2790      6F7700BF 
 2791 2894 73110000 		_UNNEST
 2792              	
 2793              	//    EVAL	( -- )
 2794              	// 	Interpret the input stream.
 2795              	
 2796 2898 70280000 		.word	_QSTAC
 2797 289c 04       	_EVAL:	.byte  4
 2798 289d 4556414C 		.ascii "EVAL"
 2799 28a1 0000BF   		.p2align 2 	
 2800              	EVAL:
 2801 28a4 504700BF 		_NEST
 2802              	EVAL1:
 2803 28a8 49240000 	    _ADR	TOKEN
 2804 28ac 11140000 		_ADR	DUPP
 2805 28b0 85130000 		_ADR	CAT	// ?input stream empty
 2806 28b4 1F130000 		_QBRAN	EVAL2
 2806      D0280000 
 2807 28bc 89180000 		_ADR	TEVAL
ARM GAS  forth.s 			page 108


 2808 28c0 BD1B0000 		_ADR	ATEXE
 2809 28c4 79280000 		_ADR	QSTAC	// evaluate input, check stack
 2810 28c8 33130000 		_BRAN	EVAL1
 2810      A8280000 
 2811              	EVAL2:
 2812 28d0 01140000 		_ADR	DROP
 2813 28d4 3D280000 		_ADR	DOTOK
 2814 28d8 73110000 		_UNNEST	// prompt
 2815              	
 2816              	//    PRESET	( -- )
 2817              	// 	Reset data stack pointer and the terminal input buffer.
 2818              	
 2819 28dc 9C280000 		.word	_EVAL
 2820 28e0 06       	_PRESE:	.byte  6
 2821 28e1 50524553 		.ascii "PRESET"
 2821      4554
 2822 28e7 00       		.p2align 2 	
 2823              	PRESE:
 2824 28e8 504700BF 		_NEST 
 2825 28ec DD120000 		_DOLIT SPP 
 2825      00FF0120 
 2826 28f4 DD130000 		_ADR SPSTOR 
 2827 28f8 73110000 		_UNNEST 
 2828              	
 2829              	//    QUIT	( -- )
 2830              	// 	Reset return stack pointer and start text interpreter.
 2831              	
 2832 28fc E0280000 		.word	_PRESE
 2833 2900 04       	_QUIT:	.byte  4
 2834 2901 51554954 		.ascii "QUIT"
 2835 2905 0000BF   		.p2align 2 	
 2836              	QUIT:
 2837 2908 DD120000 		_DOLIT RPP 
 2837      80FF0120 
 2838 2910 CD130000 		_ADR RPSTOR 
 2839              	QUIT1:
 2840 2914 1D280000 		_ADR	LBRAC			// start interpretation
 2841              	QUIT2:
 2842 2918 21270000 		_ADR	QUERY			// get input
 2843 291c A5280000 		_ADR	EVAL
 2844 2920 33130000 		_BRAN	QUIT2	// continue till error
 2844      18290000 
 2845              	
 2846 2928 00290000 		.word _QUIT
 2847 292c 06       	_FORGET: .byte 6 
 2848 292d 464F5247 		.ascii "FORGET"
 2848      4554
 2849 2933 00       		.p2align 2
 2850              	FORGET:
 2851 2934 504700BF 		_NEST 
 2852 2938 49240000 		_ADR TOKEN 
 2853 293c 11140000 		_ADR DUPP 
 2854 2940 1F130000 		_QBRAN 9f 
 2854      7C290000 
 2855 2948 CD250000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2856 294c E5150000 		_ADR QDUP 
 2857 2950 1F130000 		_QBRAN 8f
ARM GAS  forth.s 			page 109


 2857      78290000 
 2858 2958 81150000 		_ADR CELLM // ( ca la )
 2859 295c 11140000 		_ADR DUPP 
 2860 2960 C9180000 		_ADR CPP   
 2861 2964 51130000 		_ADR STORE
 2862 2968 65130000 		_ADR AT 
 2863 296c F1180000 		_ADR LAST 
 2864 2970 51130000 		_ADR STORE
 2865 2974 E12D0000 		_ADR OVERT 
 2866 2978 01140000 	8:  _ADR DROP 
 2867 297c 73110000 	9:	_UNNEST 
 2868              	
 2869              		.p2align 2 
 2870              	
 2871              	// **************************************************************************
 2872              	//  The compiler
 2873              	
 2874              	//    '	   ( -- ca )
 2875              	// 	Search context vocabularies for the next word in input stream.
 2876              	
 2877 2980 2C290000 		.word	_FORGET
 2878 2984 01       	_TICK:	.byte  1
 2879 2985 27       		.ascii "'"
 2880 2986 00BF     		.p2align 2 	
 2881              	TICK:
 2882 2988 504700BF 		_NEST
 2883 298c 49240000 		_ADR	TOKEN
 2884 2990 CD250000 		_ADR	NAMEQ	// ?defined
 2885 2994 1F130000 		_QBRAN	TICK1
 2885      A0290000 
 2886 299c 73110000 		_UNNEST	// yes, push code address
 2887              	TICK1:	
 2888 29a0 61270000 		_ADR ABORT	// no, error
 2889              	
 2890              	//    ALLOT	( n -- )
 2891              	// 	Allocate n bytes to the ram area.
 2892              	
 2893 29a4 84290000 		.word	_TICK
 2894 29a8 05       	_ALLOT:	.byte  5
 2895 29a9 414C4C4F 		.ascii "ALLOT"
 2895      54
 2896 29ae 00BF     		.p2align 2 	
 2897              	ALLOT:
 2898 29b0 504700BF 		_NEST
 2899 29b4 C9180000 		_ADR	CPP
 2900 29b8 4D170000 		_ADR	PSTOR
 2901 29bc 73110000 		_UNNEST			// adjust code pointer
 2902              	
 2903              	//    ,	   ( w -- )
 2904              	// 	Compile an integer into the code dictionary.
 2905              	
 2906 29c0 A8290000 		.word	_ALLOT
 2907 29c4 012C     	_COMMA:	.byte  1,','
 2908 29c6 00BF     		.p2align 2 	
 2909              	COMMA:
 2910 29c8 504700BF 		_NEST
 2911 29cc 6D1B0000 		_ADR	HERE
ARM GAS  forth.s 			page 110


 2912 29d0 11140000 		_ADR	DUPP
 2913 29d4 71150000 		_ADR	CELLP	// cell boundary
 2914 29d8 C9180000 		_ADR	CPP
 2915 29dc 51130000 		_ADR	STORE
 2916 29e0 51130000 		_ADR	STORE
 2917 29e4 73110000 		_UNNEST	// adjust code pointer, compile
 2918              		.p2align 2 
 2919              	//    [COMPILE]   ( -- //  string> )
 2920              	// 	Compile the next immediate word into code dictionary.
 2921              	
 2922 29e8 C4290000 		.word	_COMMA
 2923 29ec 89       	_BCOMP:	.byte  IMEDD+9
 2924 29ed 5B434F4D 		.ascii "[COMPILE]"
 2924      50494C45 
 2924      5D
 2925 29f6 00BF     		.p2align 2 	
 2926              	BCOMP:
 2927 29f8 504700BF 		_NEST
 2928 29fc 89290000 		_ADR	TICK
 2929 2a00 C9290000 		_ADR	COMMA
 2930 2a04 73110000 		_UNNEST
 2931              	
 2932              	//    COMPILE	( -- )
 2933              	// 	Compile the next address in colon list to code dictionary.
 2934              	
 2935 2a08 EC290000 		.word	_BCOMP
 2936 2a0c 47       	_COMPI:	.byte  COMPO+7
 2937 2a0d 434F4D50 		.ascii "COMPILE"
 2937      494C45
 2938              		.p2align 2 	
 2939              	COMPI:
 2940 2a14 504700BF 		_NEST
 2941 2a18 91130000 		_ADR	RFROM
 2942 2a1c 11140000 		_ADR	DUPP 
 2943 2a20 65130000 		_ADR	AT
 2944 2a24 DD120000 		_DOLIT 1 
 2944      01000000 
 2945 2a2c 69140000 		_ADR	ORR 
 2946 2a30 C9290000 		_ADR	COMMA 
 2947 2a34 71150000 		_ADR	CELLP 
 2948 2a38 B9130000 		_ADR	TOR 
 2949 2a3c 73110000 		_UNNEST			// adjust return address
 2950              	
 2951              	//    LITERAL	( w -- )
 2952              	// 	Compile tos to code dictionary as an integer literal.
 2953              	
 2954 2a40 0C2A0000 		.word	_COMPI
 2955 2a44 87       	_LITER:	.byte  IMEDD+7
 2956 2a45 4C495445 		.ascii "LITERAL"
 2956      52414C
 2957              		.p2align 2 	
 2958              	LITER:
 2959 2a4c 504700BF 		_NEST
 2960 2a50 DD120000 		_COMPI	DOLIT
 2960      DC120000 
 2960      3D2E0000 
 2961 2a5c C9290000 		_ADR	COMMA
ARM GAS  forth.s 			page 111


 2962 2a60 73110000 		_UNNEST
 2963              	
 2964              	//    $,"	( -- )
 2965              	// 	Compile a literal string up to next " .
 2966              	
 2967              	// 	.word	_LITER
 2968              	// _STRCQ	.byte  3
 2969              	// 	.ascii "$,\""
 2970              	// 	.p2align 2 	
 2971              	STRCQ:
 2972 2a64 504700BF 		_NEST
 2973 2a68 DD120000 		_DOLIT -4
 2973      FCFFFFFF 
 2974 2a70 C9180000 		_ADR	CPP
 2975 2a74 4D170000 		_ADR	PSTOR
 2976 2a78 DD120000 		_DOLIT	'\"'
 2976      22000000 
 2977 2a80 25240000 		_ADR	WORDD			// move word to code dictionary
 2978 2a84 95170000 		_ADR	COUNT
 2979 2a88 D5140000 		_ADR	PLUS
 2980 2a8c B91A0000 		_ADR	ALGND			// calculate aligned end of string
 2981 2a90 C9180000 		_ADR	CPP
 2982 2a94 51130000 		_ADR	STORE
 2983 2a98 73110000 		_UNNEST 			// adjust the code pointer
 2984              	
 2985              	/*******************
 2986              	//  Structures
 2987              	*******************/
 2988              	//    FOR	 ( -- a )
 2989              	// 	Start a FOR-NEXT loop structure in a colon definition.
 2990              	
 2991 2a9c 442A0000 		.word	_LITER
 2992 2aa0 C3       	_FOR:	.byte  COMPO+IMEDD+3
 2993 2aa1 464F52   		.ascii "FOR"
 2994              		.p2align 2 	
 2995              	FOR:
 2996 2aa4 504700BF 		_NEST
 2997 2aa8 DD120000 		_COMPI	TOR
 2997      B8130000 
 2997      3D2E0000 
 2998 2ab4 6D1B0000 		_ADR	HERE
 2999 2ab8 73110000 		_UNNEST
 3000              	
 3001              	//    BEGIN	( -- a )
 3002              	// 	Start an infinite or indefinite loop structure.
 3003              	
 3004 2abc A02A0000 		.word	_FOR
 3005 2ac0 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3006 2ac1 42454749 		.ascii "BEGIN"
 3006      4E
 3007 2ac6 00BF     		.p2align 2 	
 3008              	BEGIN:
 3009 2ac8 504700BF 		_NEST
 3010 2acc 6D1B0000 		_ADR	HERE
 3011 2ad0 73110000 		_UNNEST
 3012              		.p2align 2 
 3013              	
ARM GAS  forth.s 			page 112


 3014              	//    NEXT	( a -- )
 3015              	// 	Terminate a FOR-NEXT loop structure.
 3016 2ad4 C02A0000 		.word	_BEGIN
 3017 2ad8 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3018 2ad9 4E455854 		.ascii "NEXT"
 3019 2add 0000BF   		.p2align 2 	
 3020              	FNEXT:
 3021 2ae0 504700BF 		_NEST
 3022 2ae4 DD120000 		_COMPI	DONXT
 3022      00130000 
 3022      3D2E0000 
 3023 2af0 C9290000 		_ADR	COMMA
 3024 2af4 73110000 		_UNNEST
 3025              	
 3026              	//    UNTIL	( a -- )
 3027              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3028              	
 3029 2af8 D82A0000 		.word	_FNEXT
 3030 2afc C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3031 2afd 554E5449 		.ascii "UNTIL"
 3031      4C
 3032 2b02 00BF     		.p2align 2 	
 3033              	UNTIL:
 3034 2b04 504700BF 		_NEST
 3035 2b08 DD120000 		_COMPI	QBRAN
 3035      1E130000 
 3035      3D2E0000 
 3036 2b14 C9290000 		_ADR	COMMA
 3037 2b18 73110000 		_UNNEST
 3038              	
 3039              	//    AGAIN	( a -- )
 3040              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3041              	
 3042 2b1c FC2A0000 		.word	_UNTIL
 3043 2b20 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3044 2b21 41474149 		.ascii "AGAIN"
 3044      4E
 3045 2b26 00BF     		.p2align 2 	
 3046              	AGAIN:
 3047 2b28 504700BF 		_NEST
 3048 2b2c DD120000 		_COMPI	BRAN
 3048      32130000 
 3048      3D2E0000 
 3049 2b38 C9290000 		_ADR	COMMA
 3050 2b3c 73110000 		_UNNEST
 3051              	
 3052              	//    IF	  ( -- A )
 3053              	// 	Begin a conditional branch structure.
 3054              	
 3055 2b40 202B0000 		.word	_AGAIN
 3056 2b44 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3057 2b45 4946     		.ascii "IF"
 3058 2b47 00       		.p2align 2 	
 3059              	IFF:
 3060 2b48 504700BF 		_NEST
 3061 2b4c DD120000 		_COMPI	QBRAN
 3061      1E130000 
ARM GAS  forth.s 			page 113


 3061      3D2E0000 
 3062 2b58 6D1B0000 		_ADR	HERE
 3063 2b5c DD120000 		_DOLIT	4
 3063      04000000 
 3064 2b64 C9180000 		_ADR	CPP
 3065 2b68 4D170000 		_ADR	PSTOR
 3066 2b6c 73110000 		_UNNEST
 3067              	
 3068              	//    AHEAD	( -- A )
 3069              	// 	Compile a forward branch instruction.
 3070              	
 3071 2b70 442B0000 		.word	_IFF
 3072 2b74 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3073 2b75 41484541 		.ascii "AHEAD"
 3073      44
 3074 2b7a 00BF     		.p2align 2 	
 3075              	AHEAD:
 3076 2b7c 504700BF 		_NEST
 3077 2b80 DD120000 		_COMPI	BRAN
 3077      32130000 
 3077      3D2E0000 
 3078 2b8c 6D1B0000 		_ADR	HERE
 3079 2b90 DD120000 		_DOLIT	4
 3079      04000000 
 3080 2b98 C9180000 		_ADR	CPP
 3081 2b9c 4D170000 		_ADR	PSTOR
 3082 2ba0 73110000 		_UNNEST
 3083              	
 3084              	//    REPEAT	( A a -- )
 3085              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3086              	
 3087 2ba4 742B0000 		.word	_AHEAD
 3088 2ba8 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3089 2ba9 52455045 		.ascii "REPEAT"
 3089      4154
 3090 2baf 00       		.p2align 2 	
 3091              	REPEA:
 3092 2bb0 504700BF 		_NEST
 3093 2bb4 292B0000 		_ADR	AGAIN
 3094 2bb8 6D1B0000 		_ADR	HERE
 3095 2bbc 21140000 		_ADR	SWAP
 3096 2bc0 51130000 		_ADR	STORE
 3097 2bc4 73110000 		_UNNEST
 3098              	
 3099              	//    THEN	( A -- )
 3100              	// 	Terminate a conditional branch structure.
 3101              	
 3102 2bc8 A82B0000 		.word	_REPEA
 3103 2bcc C4       	_THENN:	.byte  COMPO+IMEDD+4
 3104 2bcd 5448454E 		.ascii "THEN"
 3105 2bd1 0000BF   		.p2align 2 	
 3106              	THENN:
 3107 2bd4 504700BF 		_NEST
 3108 2bd8 6D1B0000 		_ADR	HERE
 3109 2bdc 21140000 		_ADR	SWAP
 3110 2be0 51130000 		_ADR	STORE
 3111 2be4 73110000 		_UNNEST
ARM GAS  forth.s 			page 114


 3112              	
 3113              	//    AFT	 ( a -- a A )
 3114              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3115              	
 3116 2be8 CC2B0000 		.word	_THENN
 3117 2bec C3       	_AFT:	.byte  COMPO+IMEDD+3
 3118 2bed 414654   		.ascii "AFT"
 3119              		.p2align 2 	
 3120              	AFT:
 3121 2bf0 504700BF 		_NEST
 3122 2bf4 01140000 		_ADR	DROP
 3123 2bf8 7D2B0000 		_ADR	AHEAD
 3124 2bfc C92A0000 		_ADR	BEGIN
 3125 2c00 21140000 		_ADR	SWAP
 3126 2c04 73110000 		_UNNEST
 3127              	
 3128              	//    ELSE	( A -- A )
 3129              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3130              	
 3131 2c08 EC2B0000 		.word	_AFT
 3132 2c0c C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3133 2c0d 454C5345 		.ascii "ELSE"
 3134 2c11 0000BF   		.p2align 2 	
 3135              	ELSEE:
 3136 2c14 504700BF 		_NEST
 3137 2c18 7D2B0000 		_ADR	AHEAD
 3138 2c1c 21140000 		_ADR	SWAP
 3139 2c20 D52B0000 		_ADR	THENN
 3140 2c24 73110000 		_UNNEST
 3141              	
 3142              	//    WHILE	( a -- A a )
 3143              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3144              	
 3145 2c28 0C2C0000 		.word	_ELSEE
 3146 2c2c C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3147 2c2d 5748494C 		.ascii "WHILE"
 3147      45
 3148 2c32 00BF     		.p2align 2 	
 3149              	WHILE:
 3150 2c34 504700BF 		_NEST
 3151 2c38 492B0000 		_ADR	IFF
 3152 2c3c 21140000 		_ADR	SWAP
 3153 2c40 73110000 		_UNNEST
 3154              	
 3155              	//    ABORT"	( -- //  string> )
 3156              	// 	Conditional abort with an error message.
 3157              	
 3158 2c44 2C2C0000 		.word	_WHILE
 3159 2c48 86       	_ABRTQ:	.byte  IMEDD+6
 3160 2c49 41424F52 		.ascii "ABORT\""
 3160      5422
 3161 2c4f 00       		.p2align 2 	
 3162              	ABRTQ:
 3163 2c50 504700BF 		_NEST
 3164 2c54 DD120000 		_COMPI	ABORQ
 3164      8C270000 
 3164      3D2E0000 
ARM GAS  forth.s 			page 115


 3165 2c60 652A0000 		_ADR	STRCQ
 3166 2c64 73110000 		_UNNEST
 3167              	
 3168              	//    $"	( -- //  string> )
 3169              	// 	Compile an inline word literal.
 3170              	
 3171 2c68 482C0000 		.word	_ABRTQ
 3172 2c6c C2       	_STRQ:	.byte  IMEDD+COMPO+2
 3173 2c6d 2422     		.ascii	"$\""
 3174 2c6f 00       		.p2align 2 	
 3175              	STRQ:
 3176 2c70 504700BF 		_NEST
 3177 2c74 DD120000 		_COMPI	STRQP
 3177      1C210000 
 3177      3D2E0000 
 3178 2c80 652A0000 		_ADR	STRCQ
 3179 2c84 73110000 		_UNNEST
 3180              	
 3181              	//    ."	( -- //  string> )
 3182              	// 	Compile an inline word  literal to be typed out at run time.
 3183              	
 3184 2c88 6C2C0000 		.word	_STRQ
 3185 2c8c C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3186 2c8d 2E22     		.ascii	".\""
 3187 2c8f 00       		.p2align 2 	
 3188              	DOTQ:
 3189 2c90 504700BF 		_NEST
 3190 2c94 DD120000 		_COMPI	DOTQP
 3190      38210000 
 3190      3D2E0000 
 3191 2ca0 652A0000 		_ADR	STRCQ
 3192 2ca4 73110000 		_UNNEST
 3193              	
 3194              	// **************************************************************************
 3195              	//  Name compiler
 3196              	
 3197              	//    ?UNIQUE	( a -- a )
 3198              	// 	Display a warning message if the word already exists.
 3199              	
 3200 2ca8 8C2C0000 		.word	_DOTQ
 3201 2cac 07       	_UNIQU:	.byte  7
 3202 2cad 3F554E49 		.ascii "?UNIQUE"
 3202      515545
 3203              		.p2align 2 	
 3204              	UNIQU:
 3205 2cb4 504700BF 		_NEST
 3206 2cb8 11140000 		_ADR	DUPP
 3207 2cbc CD250000 		_ADR	NAMEQ			// ?name exists
 3208 2cc0 1F130000 		_QBRAN	UNIQ1	// redefinitions are OK
 3208      E02C0000 
 3209 2cc8 39210000 		_DOTQP	7," reDef "		// but warn the user
 3209      07207265 
 3209      44656620 
 3210 2cd4 35140000 		_ADR	OVER
 3211 2cd8 95170000 		_ADR	COUNT
 3212 2cdc 9D200000 		_ADR	TYPEE			// just in case its not planned
 3213              	UNIQ1:
ARM GAS  forth.s 			page 116


 3214 2ce0 01140000 		_ADR	DROP
 3215 2ce4 73110000 		_UNNEST
 3216              	
 3217              	//    $,n	 ( na -- )
 3218              	// 	Build a new dictionary name using the data at na.
 3219              	
 3220              	// 	.word	_UNIQU
 3221              	// _SNAME	.byte  3
 3222              	// 	.ascii "$,n"
 3223              	// 	.p2align 2 	
 3224              	SNAME:
 3225 2ce8 504700BF 		_NEST
 3226 2cec 11140000 		_ADR	DUPP			//  na na
 3227 2cf0 85130000 		_ADR	CAT			//  ?null input
 3228 2cf4 1F130000 		_QBRAN	SNAM1
 3228      302D0000 
 3229 2cfc B52C0000 		_ADR	UNIQU			//  na
 3230 2d00 F1180000 		_ADR	LAST			//  na last
 3231 2d04 65130000 		_ADR	AT			//  na la
 3232 2d08 C9290000 		_ADR	COMMA			//  na
 3233 2d0c 11140000 		_ADR	DUPP			//  na na
 3234 2d10 F1180000 		_ADR	LAST			//  na na last
 3235 2d14 51130000 		_ADR	STORE			//  na , save na for vocabulary link
 3236 2d18 95170000 		_ADR	COUNT			//  na+1 count
 3237 2d1c D5140000 		_ADR	PLUS			//  na+1+count
 3238 2d20 B91A0000 		_ADR	ALGND			//  word boundary
 3239 2d24 C9180000 		_ADR	CPP
 3240 2d28 51130000 		_ADR	STORE			//  top of dictionary now
 3241 2d2c 73110000 		_UNNEST
 3242              	SNAM1:
 3243 2d30 1D210000 		_ADR	STRQP
 3244 2d34 07       		.byte	7
 3245 2d35 206E616D 		.ascii " name? "
 3245      653F20
 3246 2d3c 61270000 		_ADR	ABORT
 3247              	
 3248              	//    $COMPILE	( a -- )
 3249              	// 	Compile next word to code dictionary as a token or literal.
 3250              	
 3251 2d40 AC2C0000 		.word	_UNIQU
 3252 2d44 08       	_SCOMP:	.byte  8
 3253 2d45 24434F4D 		.ascii "$COMPILE"
 3253      50494C45 
 3254 2d4d 0000BF   		.p2align 2 	
 3255              	SCOMP:
 3256 2d50 504700BF 		_NEST
 3257 2d54 CD250000 		_ADR	NAMEQ
 3258 2d58 E5150000 		_ADR	QDUP	// defined?
 3259 2d5c 1F130000 		_QBRAN	SCOM2
 3259      8C2D0000 
 3260 2d64 65130000 		_ADR	AT
 3261 2d68 DD120000 		_DOLIT	IMEDD
 3261      80000000 
 3262 2d70 55140000 		_ADR	ANDD	// immediate?
 3263 2d74 1F130000 		_QBRAN	SCOM1
 3263      842D0000 
 3264 2d7c F5120000 		_ADR	EXECU
ARM GAS  forth.s 			page 117


 3265 2d80 73110000 		_UNNEST			// it's immediate, execute
 3266              	SCOM1:
 3267 2d84 3D2E0000 		_ADR	CALLC			// it's not immediate, compile
 3268 2d88 73110000 		_UNNEST	
 3269              	SCOM2:
 3270 2d8c F11E0000 		_ADR	NUMBQ
 3271 2d90 1F130000 		_QBRAN	SCOM3
 3271      A02D0000 
 3272 2d98 4D2A0000 		_ADR	LITER
 3273 2d9c 73110000 		_UNNEST			// compile number as integer
 3274              	SCOM3: // compilation abort 
 3275 2da0 A92D0000 		_ADR COLON_ABORT 
 3276 2da4 61270000 		_ADR	ABORT			// error
 3277              	
 3278              	// before aborting a compilation 
 3279              	// reset HERE and LAST
 3280              	// to previous values. 
 3281              	COLON_ABORT:
 3282 2da8 504700BF 		_NEST 
 3283 2dac F1180000 		_ADR LAST 
 3284 2db0 65130000 		_ADR AT 
 3285 2db4 81150000 		_ADR CELLM 
 3286 2db8 11140000 		_ADR DUPP 
 3287 2dbc C9180000 		_ADR CPP  
 3288 2dc0 51130000 		_ADR STORE 
 3289 2dc4 65130000 		_ADR AT 
 3290 2dc8 F1180000 		_ADR LAST 
 3291 2dcc 51130000 		_ADR STORE 
 3292 2dd0 73110000 		_UNNEST 
 3293              	
 3294              	//    OVERT	( -- )
 3295              	// 	Link a new word into the current vocabulary.
 3296              	
 3297 2dd4 442D0000 		.word	_SCOMP
 3298 2dd8 05       	_OVERT:	.byte  5
 3299 2dd9 4F564552 		.ascii "OVERT"
 3299      54
 3300 2dde 00BF     		.p2align 2 	
 3301              	OVERT:
 3302 2de0 504700BF 		_NEST
 3303 2de4 F1180000 		_ADR	LAST
 3304 2de8 65130000 		_ADR	AT
 3305 2dec B5180000 		_ADR	CNTXT
 3306 2df0 51130000 		_ADR	STORE
 3307 2df4 73110000 		_UNNEST
 3308              	
 3309              	//    ; 	   ( -- )
 3310              	// 	Terminate a colon definition.
 3311              	
 3312 2df8 D82D0000 		.word	_OVERT
 3313 2dfc C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3314 2dfd 3B       		.ascii ";"
 3315 2dfe 00BF     		.p2align 2 	
 3316              	SEMIS:
 3317 2e00 504700BF 		_NEST
 3318 2e04 DD120000 		_DOLIT	UNNEST
 3318      72110000 
ARM GAS  forth.s 			page 118


 3319 2e0c 3D2E0000 		_ADR	CALLC
 3320 2e10 1D280000 		_ADR	LBRAC
 3321 2e14 E12D0000 		_ADR	OVERT
 3322 2e18 73110000 		_UNNEST
 3323              	
 3324              	//    ]	   ( -- )
 3325              	// 	Start compiling the words in the input stream.
 3326              	
 3327 2e1c FC2D0000 		.word	_SEMIS
 3328 2e20 01       	_RBRAC:	.byte  1
 3329 2e21 5D       		.ascii "]"
 3330 2e22 00BF     		.p2align 2 	
 3331              	RBRAC:
 3332 2e24 504700BF 		_NEST
 3333 2e28 DD120000 		_DOLIT	SCOMP
 3333      502D0000 
 3334 2e30 89180000 		_ADR	TEVAL
 3335 2e34 51130000 		_ADR	STORE
 3336 2e38 73110000 		_UNNEST
 3337              	
 3338              	//    BL.W	( ca -- )
 3339              	// 	compile ca.
 3340              	
 3341              	// 	.word	_RBRAC
 3342              	// _CALLC	.byte  5
 3343              	// 	.ascii "call,"
 3344              	// 	.p2align 2 	
 3345              	CALLC:
 3346 2e3c 504700BF 		_NEST
 3347 2e40 DD120000 		_DOLIT 1 
 3347      01000000 
 3348 2e48 69140000 		_ADR ORR 
 3349 2e4c C9290000 		_ADR COMMA  
 3350 2e50 73110000 		_UNNEST 
 3351              	
 3352              	
 3353              	// 	:	( -- //  string> )
 3354              	// 	Start a new colon definition using next word as its name.
 3355              	
 3356 2e54 202E0000 		.word	_RBRAC
 3357 2e58 01       	_COLON:	.byte  1
 3358 2e59 3A       		.ascii ":"
 3359 2e5a 00BF     		.p2align 2 	
 3360              	COLON:
 3361 2e5c 504700BF 		_NEST
 3362 2e60 49240000 		_ADR	TOKEN
 3363 2e64 E92C0000 		_ADR	SNAME
 3364 2e68 7D110000 		_ADR	COMPI_NEST 
 3365 2e6c 252E0000 		_ADR	RBRAC
 3366 2e70 73110000 		_UNNEST
 3367              	
 3368              	//    IMMEDIATE   ( -- )
 3369              	// 	Make the last compiled word an immediate word.
 3370              	
 3371 2e74 582E0000 		.word	_COLON
 3372 2e78 09       	_IMMED:	.byte  9
 3373 2e79 494D4D45 		.ascii "IMMEDIATE"
ARM GAS  forth.s 			page 119


 3373      44494154 
 3373      45
 3374 2e82 00BF     		.p2align 2 	
 3375              	IMMED:
 3376 2e84 504700BF 		_NEST
 3377 2e88 DD120000 		_DOLIT	IMEDD
 3377      80000000 
 3378 2e90 F1180000 		_ADR	LAST
 3379 2e94 65130000 		_ADR	AT
 3380 2e98 65130000 		_ADR	AT
 3381 2e9c 69140000 		_ADR	ORR
 3382 2ea0 F1180000 		_ADR	LAST
 3383 2ea4 65130000 		_ADR	AT
 3384 2ea8 51130000 		_ADR	STORE
 3385 2eac 73110000 		_UNNEST
 3386              	
 3387              	// **************************************************************************
 3388              	//  Defining words
 3389              	
 3390              	//    CONSTANT	( u -- //  string> )
 3391              	// 	Compile a new constant.
 3392              	
 3393 2eb0 782E0000 		.word	_IMMED
 3394 2eb4 08       	_CONST:	.byte  8
 3395 2eb5 434F4E53 		.ascii "CONSTANT"
 3395      54414E54 
 3396 2ebd 0000BF   		.p2align 2 	
 3397              	CONST:
 3398 2ec0 504700BF 		_NEST 
 3399 2ec4 49240000 		_ADR	TOKEN
 3400 2ec8 E92C0000 		_ADR	SNAME
 3401 2ecc E12D0000 		_ADR	OVERT
 3402 2ed0 7D110000 		_ADR	COMPI_NEST
 3403 2ed4 DD120000 		_DOLIT	DOCON
 3403      C8170000 
 3404 2edc 3D2E0000 		_ADR	CALLC
 3405 2ee0 C9290000 		_ADR	COMMA
 3406 2ee4 DD120000 		_DOLIT	UNNEST 
 3406      72110000 
 3407 2eec 3D2E0000 		_ADR	CALLC  
 3408 2ef0 73110000 		_UNNEST
 3409              	
 3410              		.p2align 2 
 3411              	// doDOES> ( -- a )
 3412              	// runtime action of DOES> 
 3413              	// leave parameter field address on stack 
 3414              	DODOES:
 3415 2ef4 504700BF 		_NEST 
 3416 2ef8 91130000 		_ADR	RFROM
 3417 2efc 71150000 		_ADR	CELLP 
 3418 2f00 31150000 		_ADR	ONEP  
 3419 2f04 F1180000 		_ADR LAST 
 3420 2f08 65130000 		_ADR AT
 3421 2f0c 65240000 		_ADR NAMET 
 3422 2f10 71150000 		_ADR CELLP 
 3423 2f14 51130000 		_ADR STORE  
 3424 2f18 73110000 		_UNNEST 
ARM GAS  forth.s 			page 120


 3425              	
 3426              		.p2align 2
 3427              	//  DOES> ( -- )
 3428              	//  compile time action 
 3429 2f1c B42E0000 		.word _CONST   
 3430 2f20 C5       	_DOES: .byte IMEDD+COMPO+5 
 3431 2f21 444F4553 		.ascii "DOES>"
 3431      3E
 3432 2f26 00BF     		.p2align 2
 3433              	DOES: 
 3434 2f28 504700BF 		_NEST 
 3435 2f2c DD120000 		_DOLIT DODOES 
 3435      F42E0000 
 3436 2f34 3D2E0000 		_ADR CALLC 
 3437 2f38 DD120000 		_DOLIT	UNNEST
 3437      72110000 
 3438 2f40 3D2E0000 		_ADR	CALLC 
 3439 2f44 7D110000 		_ADR COMPI_NEST
 3440 2f48 DD120000 		_DOLIT RFROM 
 3440      90130000 
 3441 2f50 3D2E0000 		_ADR	CALLC
 3442 2f54 73110000 		_UNNEST 
 3443              	
 3444              	
 3445              	
 3446              	//  DEFER@ ( "name" -- a )
 3447              	//  return value of code field of defered function. 
 3448 2f58 202F0000 		.word _DOES 
 3449 2f5c 06       	_DEFERAT: .byte 6 
 3450 2f5d 44454645 		.ascii "DEFER@"
 3450      5240
 3451 2f63 00       		.p2align 2 
 3452              	DEFERAT: 
 3453 2f64 504700BF 		_NEST 
 3454 2f68 89290000 		_ADR TICK
 3455 2f6c 71150000 		_ADR CELLP 
 3456 2f70 65130000 		_ADR AT 
 3457 2f74 41150000 		_ADR ONEM 
 3458 2f78 73110000 		_UNNEST 
 3459              	
 3460              	// DEFER! ( "name1" "name2" -- )
 3461              	// assign an action to a defered word 
 3462 2f7c 5C2F0000 		.word _DEFERAT 
 3463 2f80 06       	_DEFERSTO: .byte 6 
 3464 2f81 44454645 		.ascii "DEFER!" 
 3464      5221
 3465 2f87 00       		.p2align 2 
 3466              	DEFERSTO:
 3467 2f88 504700BF 		_NEST 
 3468 2f8c 89290000 		_ADR TICK 
 3469 2f90 31150000 		_ADR ONEP 
 3470 2f94 89290000 		_ADR TICK 
 3471 2f98 71150000 		_ADR CELLP 
 3472 2f9c 51130000 		_ADR STORE 
 3473 2fa0 73110000 		_UNNEST
 3474              	
 3475              	//  DEFER ( "name" -- )
ARM GAS  forth.s 			page 121


 3476              	//  create a defered definition
 3477 2fa4 802F0000 		.word _DEFERSTO  
 3478 2fa8 05       	_DEFER: .byte 5 
 3479 2fa9 44454645 		.ascii "DEFER"
 3479      52
 3480 2fae 00BF     		.p2align 2
 3481              	DEFER:
 3482 2fb0 504700BF 		_NEST 
 3483 2fb4 01300000 		_ADR CREAT 
 3484 2fb8 DD120000 		_DOLIT UNNEST 
 3484      72110000 
 3485 2fc0 3D2E0000 		_ADR CALLC 
 3486 2fc4 DD120000 		_DOLIT DEFER_NOP
 3486      E82F0000 
 3487 2fcc 31150000 		_ADR ONEP 
 3488 2fd0 F1180000 		_ADR LAST 
 3489 2fd4 65130000 		_ADR AT 
 3490 2fd8 65240000 		_ADR NAMET 
 3491 2fdc 71150000 		_ADR CELLP 
 3492 2fe0 51130000 		_ADR STORE 
 3493 2fe4 73110000 		_UNNEST 
 3494              	DEFER_NOP:
 3495 2fe8 504700BF 		_NEST  
 3496 2fec D9120000 		_ADR NOP 
 3497 2ff0 73110000 		_UNNEST 
 3498              	
 3499              	//    CREATE	( -- //  string> )
 3500              	// 	Compile a new array entry without allocating code space.
 3501              	
 3502 2ff4 A82F0000 		.word	_DEFER 
 3503 2ff8 06       	_CREAT:	.byte  6
 3504 2ff9 43524541 		.ascii "CREATE"
 3504      5445
 3505 2fff 00       		.p2align 2 	
 3506              	CREAT:
 3507 3000 504700BF 		_NEST 
 3508 3004 49240000 		_ADR	TOKEN
 3509 3008 E92C0000 		_ADR	SNAME
 3510 300c E12D0000 		_ADR	OVERT
 3511 3010 7D110000 		_ADR	COMPI_NEST 
 3512 3014 DD120000 		_DOLIT	DOVAR
 3512      BC170000 
 3513 301c 3D2E0000 		_ADR	CALLC
 3514 3020 73110000 		_UNNEST
 3515              	
 3516              	//    VARIABLE	( -- //  string> )
 3517              	// 	Compile a new variable initialized to 0.
 3518              	
 3519 3024 F82F0000 		.word	_CREAT
 3520 3028 08       	_VARIA:	.byte  8
 3521 3029 56415249 		.ascii "VARIABLE"
 3521      41424C45 
 3522 3031 0000BF   		.p2align 2 	
 3523              	VARIA:
 3524 3034 504700BF 		_NEST
 3525 3038 01300000 		_ADR	CREAT
 3526 303c DD120000 		_DOLIT	0
ARM GAS  forth.s 			page 122


 3526      00000000 
 3527 3044 C9290000 		_ADR	COMMA
 3528 3048 DD120000 		_DOLIT UNNEST
 3528      72110000 
 3529 3050 3D2E0000 		_ADR	CALLC  
 3530 3054 73110000 		_UNNEST
 3531              	
 3532              	// **************************************************************************
 3533              	//  Tools
 3534              	
 3535              	//    dm+	 ( a u -- a )
 3536              	// 	Dump u bytes from , leaving a+u on the stack.
 3537              	
 3538              	// 	.word	_VARIA 
 3539              	// _DMP	.byte  3
 3540              	// 	.ascii "dm+"
 3541              	// 	.p2align 2 	
 3542              	DMP:
 3543 3058 504700BF 		_NEST
 3544 305c 35140000 		_ADR	OVER
 3545 3060 DD120000 		_DOLIT	4
 3545      04000000 
 3546 3068 7D210000 		_ADR	UDOTR			// display address
 3547 306c 49200000 		_ADR	SPACE
 3548 3070 B9130000 		_ADR	TOR			// start count down loop
 3549 3074 33130000 		_BRAN	PDUM2			// skip first pass
 3549      94300000 
 3550              	PDUM1:
 3551 307c 11140000 	  _ADR	DUPP
 3552 3080 85130000 		_ADR	CAT
 3553 3084 DD120000 		_DOLIT	3
 3553      03000000 
 3554 308c 7D210000 		_ADR	UDOTR			// display numeric data
 3555 3090 31150000 		_ADR	ONEP			// increment address
 3556              	PDUM2:
 3557 3094 01130000 	  _ADR	DONXT
 3558 3098 7C300000 		.word	PDUM1	// loop till done
 3559 309c 73110000 		_UNNEST
 3560              		.p2align 2 
 3561              	//    DUMP	( a u -- )
 3562              	// 	Dump u bytes from a, in a formatted manner.
 3563              	
 3564 30a0 28300000 		.word	_VARIA
 3565 30a4 04       	_DUMP:	.byte  4
 3566 30a5 44554D50 		.ascii "DUMP"
 3567 30a9 0000BF   		.p2align 2 	
 3568              	DUMP:
 3569 30ac 504700BF 		_NEST
 3570 30b0 2D180000 		_ADR	BASE
 3571 30b4 65130000 		_ADR	AT
 3572 30b8 B9130000 		_ADR	TOR
 3573 30bc 411E0000 		_ADR	HEX			// save radix,set hex
 3574 30c0 DD120000 		_DOLIT	16
 3574      10000000 
 3575 30c8 591A0000 		_ADR	SLASH			// change count to lines
 3576 30cc B9130000 		_ADR	TOR
 3577 30d0 33130000 		_BRAN	DUMP4			// start count down loop
ARM GAS  forth.s 			page 123


 3577      00310000 
 3578              	DUMP1:
 3579 30d8 D1200000 	  _ADR	CR
 3580 30dc DD120000 		_DOLIT	16
 3580      10000000 
 3581 30e4 49160000 		_ADR	DDUP
 3582 30e8 59300000 		_ADR	DMP			// display numeric
 3583 30ec F9150000 		_ADR	ROT
 3584 30f0 F9150000 		_ADR	ROT
 3585 30f4 49200000 		_ADR	SPACE
 3586 30f8 49200000 		_ADR	SPACE
 3587 30fc 9D200000 		_ADR	TYPEE			// display printable characters
 3588              	DUMP4:
 3589 3100 01130000 	  _DONXT	DUMP1	// loop till done
 3589      D8300000 
 3590              	DUMP3:
 3591 3108 01140000 		_ADR	DROP
 3592 310c 91130000 		_ADR	RFROM
 3593 3110 2D180000 		_ADR	BASE
 3594 3114 51130000 		_ADR	STORE			// restore radix
 3595 3118 73110000 		_UNNEST
 3596              	
 3597              	//    .S	  ( ... -- ... )
 3598              	// 	Display the contents of the data stack.
 3599              	
 3600 311c A4300000 		.word	_DUMP
 3601              	_DOTS:
 3602 3120 02       		.byte  2
 3603 3121 2E53     		.ascii ".S"
 3604 3123 00       		.p2align 2 	
 3605              	DOTS:
 3606 3124 504700BF 		_NEST
 3607 3128 49200000 		_ADR	SPACE
 3608 312c 211B0000 		_ADR	DEPTH			// stack depth
 3609 3130 B9130000 		_ADR	TOR			// start count down loop
 3610 3134 33130000 		_BRAN	DOTS2			// skip first pass
 3610      48310000 
 3611              	DOTS1:
 3612 313c A5130000 		_ADR	RAT
 3613 3140 451B0000 		_ADR	PICK
 3614 3144 D5210000 		_ADR	DOT			// index stack, display contents
 3615              	DOTS2:
 3616 3148 01130000 		_DONXT	DOTS1	// loop till done
 3616      3C310000 
 3617 3150 49200000 		_ADR	SPACE
 3618 3154 73110000 		_UNNEST
 3619              	
 3620              	//    >NAME	( ca -- na | F )
 3621              	// 	Convert code address to a name address.
 3622              	
 3623 3158 20310000 		.word	_DOTS
 3624 315c 05       	_TNAME:	.byte  5
 3625 315d 3E4E414D 		.ascii ">NAME"
 3625      45
 3626 3162 00BF     		.p2align 2 	
 3627              	TNAME:
 3628 3164 504700BF 		_NEST
ARM GAS  forth.s 			page 124


 3629 3168 B9130000 		_ADR	TOR			//  
 3630 316c B5180000 		_ADR	CNTXT			//  va
 3631 3170 65130000 		_ADR	AT			//  na
 3632              	TNAM1:
 3633 3174 11140000 		_ADR	DUPP			//  na na
 3634 3178 1F130000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3634      A8310000 
 3635 3180 11140000 		_ADR	DUPP			//  na na
 3636 3184 65240000 		_ADR	NAMET			//  na ca
 3637 3188 A5130000 		_ADR	RAT			//  na ca code
 3638 318c 7D140000 		_ADR	XORR			//  na f --
 3639 3190 1F130000 		_QBRAN	TNAM2
 3639      A8310000 
 3640 3198 81150000 		_ADR	CELLM			//  la 
 3641 319c 65130000 		_ADR	AT			//  next_na
 3642 31a0 33130000 		_BRAN	TNAM1
 3642      74310000 
 3643              	TNAM2:	
 3644 31a8 91130000 		_ADR	RFROM
 3645 31ac 01140000 		_ADR	DROP			//  0|na --
 3646 31b0 73110000 		_UNNEST			// 0
 3647              	
 3648              	//    .ID	 ( na -- )
 3649              	// 	Display the name at address.
 3650              	
 3651 31b4 5C310000 		.word	_TNAME
 3652 31b8 03       	_DOTID:	.byte  3
 3653 31b9 2E4944   		.ascii ".ID"
 3654              		.p2align 2 	
 3655              	DOTID:
 3656 31bc 504700BF 		_NEST
 3657 31c0 E5150000 		_ADR	QDUP			// if zero no name
 3658 31c4 1F130000 		_QBRAN	DOTI1
 3658      E4310000 
 3659 31cc 95170000 		_ADR	COUNT
 3660 31d0 DD120000 		_DOLIT	0x1F
 3660      1F000000 
 3661 31d8 55140000 		_ADR	ANDD			// mask lexicon bits
 3662 31dc 9D200000 		_ADR	TYPEE
 3663 31e0 73110000 		_UNNEST			// display name string
 3664              	DOTI1:
 3665 31e4 39210000 		_DOTQP	9," {noName}"
 3665      09207B6E 
 3665      6F4E616D 
 3665      657D00BF 
 3666 31f4 73110000 		_UNNEST
 3667              	
 3668              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3669              	.if WANT_SEE 
 3670              	//    SEE	 ( -- //  string> )
 3671              	// 	A simple decompiler.
 3672              	
 3673              		.word	_DOTID
 3674              	_SEE:	.byte  3
 3675              		.ascii "SEE"
 3676              		.p2align 2 	
 3677              	SEE:
ARM GAS  forth.s 			page 125


 3678              		_NEST
 3679              		_ADR	TICK	//  ca --, starting address
 3680              		_ADR	CR	
 3681              		_DOLIT	20
 3682              		_ADR	TOR
 3683              	SEE1:
 3684              		_ADR	CELLP			//  a
 3685              		_ADR	DUPP			//  a a
 3686              		_ADR	DECOMP		//  a
 3687              		_DONXT	SEE1
 3688              		_ADR	DROP
 3689              		_UNNEST
 3690              	
 3691              	// 	DECOMPILE ( a -- )
 3692              	// 	Convert code in a.  Display name of command or as data.
 3693              	
 3694              		.word	_SEE
 3695              	_DECOM:	.byte  9
 3696              		.ascii "DECOMPILE"
 3697              		.p2align 2 
 3698              		
 3699              	DECOMP:	
 3700              		_NEST
 3701              		_ADR	DUPP			//  a a
 3702              	// 	_ADR	TOR			//  a
 3703              		_ADR	AT			//  a code
 3704              		_ADR	DUPP			//  a code code
 3705              		_DOLIT	0xF800D000 //0xF800F800
 3706              		_ADR	ANDD
 3707              		_DOLIT	0xF000D000 //0xF800F000
 3708              		_ADR	EQUAL			//  a code ?
 3709              		_ADR	INVER 
 3710              		_QBRAN	DECOM2	//  not a command
 3711              		//  a valid_code --, extract address and display name
 3712              		MOVW	IP,#0xFFE
 3713              		MOV	WP,TOS
 3714              		LSL	TOS,TOS,#21		//  get bits 22-12
 3715              		ASR	TOS,TOS,#9		//  with sign extension
 3716              		LSR	WP,WP,#15		//  get bits 11-1
 3717              		AND	WP,WP,IP		//  retain only bits 11-1
 3718              		ORR	TOS,TOS,WP		//  get bits 22-1
 3719              		NOP
 3720              		_ADR	OVER			//  a offset a
 3721              		_ADR	PLUS			//  a target-4
 3722              		_ADR	CELLP			//  a target
 3723              		_ADR	TNAME			//  a na/0 --, is it a name?
 3724              		_ADR	QDUP			//  name address or zero
 3725              		_QBRAN	DECOM1
 3726              		_ADR	SPACE			//  a na
 3727              		_ADR	DOTID			//  a --, display name
 3728              	// 	_ADR	RFROM			//  a
 3729              		_ADR	DROP
 3730              		_UNNEST
 3731              	DECOM1:	// _ADR	RFROM		//  a
 3732              		_ADR	AT			//  data
 3733              		_ADR	UDOT			//  display data
 3734              		_UNNEST
ARM GAS  forth.s 			page 126


 3735              	DECOM2:
 3736              		_ADR	UDOT
 3737              	// 	_ADR	RFROM
 3738              		_ADR	DROP
 3739              		_UNNEST
 3740              	
 3741              	//    WORDS	( -- )
 3742              	// 	Display the names in the context vocabulary.
 3743              	
 3744              		.word	_DECOM
 3745              	.else 
 3746 31f8 B8310000 		.word _DOTID 
 3747              	.endif 
 3748 31fc 05       	_WORDS:	.byte  5
 3749 31fd 574F5244 		.ascii "WORDS"
 3749      53
 3750 3202 00BF     		.p2align 2 	
 3751              	WORDS:
 3752 3204 504700BF 		_NEST
 3753 3208 D1200000 		_ADR	CR
 3754 320c B5180000 		_ADR	CNTXT
 3755 3210 65130000 		_ADR	AT			// only in context
 3756              	WORS1:
 3757 3214 E5150000 		_ADR	QDUP			// ?at end of list
 3758 3218 1F130000 		_QBRAN	WORS2
 3758      3C320000 
 3759 3220 11140000 		_ADR	DUPP
 3760 3224 49200000 		_ADR	SPACE
 3761 3228 BD310000 		_ADR	DOTID			// display a name
 3762 322c 81150000 		_ADR	CELLM
 3763 3230 65130000 		_ADR	AT
 3764 3234 33130000 		_BRAN	WORS1
 3764      14320000 
 3765              	WORS2:
 3766 323c 73110000 		_UNNEST
 3767              	
 3768              	// **************************************************************************
 3769              	//  cold start
 3770              	
 3771              	//    VER	 ( -- n )
 3772              	// 	Return the version number of this implementation.
 3773              	
 3774              	// 	.word	_WORDS
 3775              	// _VERSN	.byte  3
 3776              	// 	.ascii "VER"
 3777              	// 	.p2align 2 	
 3778              	VERSN:
 3779 3240 504700BF 		_NEST
 3780 3244 DD120000 		_DOLIT	VER*256+EXT
 3780      00010000 
 3781 324c 73110000 		_UNNEST
 3782              	
 3783              	//    hi	  ( -- )
 3784              	// 	Display the sign-on message of eForth.
 3785              	
 3786 3250 FC310000 		.word	_WORDS
 3787 3254 02       	_HI:	.byte  2
ARM GAS  forth.s 			page 127


 3788 3255 4849     		.ascii "HI"
 3789 3257 00       		.p2align 2
 3790              	
 3791              	HI:
 3792 3258 504700BF 		_NEST
 3793 325c D1200000 		_ADR	CR	// initialize I/O
 3794 3260 39210000 		_DOTQP	17, "beyond Jupiter, v" 
 3794      11626579 
 3794      6F6E6420 
 3794      4A757069 
 3794      7465722C 
 3795 3278 2D180000 		_ADR	BASE
 3796 327c 65130000 		_ADR	AT
 3797 3280 411E0000 		_ADR	HEX	// save radix
 3798 3284 41320000 		_ADR	VERSN
 3799 3288 311D0000 		_ADR	BDIGS
 3800 328c 7D1D0000 		_ADR	DIG
 3801 3290 7D1D0000 		_ADR	DIG
 3802 3294 DD120000 		_DOLIT	'.'
 3802      2E000000 
 3803 329c 511D0000 		_ADR	HOLD
 3804 32a0 9D1D0000 		_ADR	DIGS
 3805 32a4 F11D0000 		_ADR	EDIGS
 3806 32a8 9D200000 		_ADR	TYPEE	// format version number
 3807 32ac 2D180000 		_ADR	BASE
 3808 32b0 51130000 		_ADR	STORE
 3809 32b4 D1200000 		_ADR	CR
 3810 32b8 73110000 		_UNNEST			// restore radix
 3811              	
 3812              	//    COLD	( -- )
 3813              	// 	The high level cold start sequence.
 3814              	
 3815 32bc 54320000 		.word	_HI
 3816 32c0 04       	_LASTN:	.byte  4
 3817 32c1 434F4C44 		.ascii "COLD"
 3818 32c5 0000BF   		.p2align 2	
 3819              	COLD:
 3820 32c8 00B5FCF7 		_CALL forth_init 
 3820      19FF5DF8 
 3820      04EB
 3821 32d2 DFF84CC0 		ldr IP,=COLD1 
 3822 32d6 FDF749BF 		_NEXT
 3823 32da 00BF     		.p2align 2 
 3824              	COLD1:
 3825 32dc DD120000 		_DOLIT  0 
 3825      00000000 
 3826 32e4 01000000 		_ADR ULED // turn off user LED 
 3827 32e8 DD120000 		_DOLIT	UZERO
 3827      D8030000 
 3828 32f0 DD120000 		_DOLIT	UPP
 3828      00000020 
 3829 32f8 DD120000 		_DOLIT	ULAST-UZERO
 3829      A0000000 
 3830 3300 0D1C0000 		_ADR	MOVE 			// initialize user area
 3831 3304 E9280000 		_ADR	PRESE			// initialize stack and TIB
 3832 3308 19180000 		_ADR	TBOOT
 3833 330c BD1B0000 		_ADR	ATEXE			// application boot
ARM GAS  forth.s 			page 128


 3834 3310 E12D0000 		_ADR	OVERT
 3835 3314 33130000 		_BRAN	QUIT			// start interpretation
 3835      08290000 
 3836              	COLD2:
 3837              		.p2align 2 	
 3838              	CTOP:
 3839 331c FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3840              	
 3841              	
 3842 3320 DC320000 	  .end 
ARM GAS  forth.s 			page 129


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 130


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
ARM GAS  forth.s 			page 131


     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:181    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:182    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:183    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:184    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:185    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:186    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:187    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:188    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:189    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:190    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:191    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:192    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:193    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:194    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:195    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:196    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:197    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:198    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:199    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:200    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:201    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:202    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:203    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:204    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:205    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:206    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:207    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:208    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:209    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:210    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:211    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:212    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:213    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:214    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:215    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:216    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:217    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:218    *ABS*:0000000000000314 NVIC_IABR5
ARM GAS  forth.s 			page 132


     stm32f411ce.inc:219    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:220    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:222    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:225    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:226    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:227    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:228    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:229    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:230    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:231    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:232    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:233    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:234    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:235    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:236    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:237    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:238    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:239    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:240    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:241    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:242    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:243    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:244    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:245    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:246    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:247    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:248    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:249    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000017 EXIT9_5_IRQ
     stm32f411ce.inc:254    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:255    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:260    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:261    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:266    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:267    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:268    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:269    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:270    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:272    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:278    *ABS*:000000000000003a DMAS2_IRQ
ARM GAS  forth.s 			page 133


     stm32f411ce.inc:279    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:280    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:281    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:282    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:288    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:289    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:290    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:294    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:295    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:296    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:297    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:299    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:300    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:301    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:302    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:306    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:309    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:310    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:311    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:312    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:313    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:314    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:315    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:316    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:317    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:318    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:319    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:320    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:321    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:322    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:323    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:324    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:325    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:326    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:327    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:328    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:331    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:333    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:334    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:335    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:336    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:337    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:338    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:339    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:342    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:344    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:345    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:346    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:347    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:348    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:349    *ABS*:0000000000000014 EXTI_PR
ARM GAS  forth.s 			page 134


          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 NBASE
          macros.inc:78     *ABS*:0000000000000018 TMP
          macros.inc:79     *ABS*:000000000000001c CSPAN
          macros.inc:80     *ABS*:0000000000000020 TOIN
          macros.inc:81     *ABS*:0000000000000024 NTIBB
          macros.inc:82     *ABS*:0000000000000028 TIBUF
             forth.s:2800   .text:00000000000028a4 EVAL
             forth.s:1753   .text:0000000000001d50 HOLD
          macros.inc:85     *ABS*:0000000000000034 CTXT
          macros.inc:86     *ABS*:0000000000000038 FORTH_CTOP
          macros.inc:87     *ABS*:000000000000003c USER_CTOP
          macros.inc:88     *ABS*:0000000000000040 LASTN
          macros.inc:89     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:90     *ABS*:0000000000000044 RX_QUEUE
          macros.inc:91     *ABS*:0000000000000054 RX_HEAD
          macros.inc:92     *ABS*:0000000000000058 RX_TAIL
          macros.inc:93     *ABS*:000000000000005c VID_CNTR
          macros.inc:94     *ABS*:0000000000000060 VID_STATE
          macros.inc:95     *ABS*:0000000000000064 VID_FIELD
          macros.inc:96     *ABS*:0000000000000068 VID_BUFFER
          macros.inc:97     *ABS*:000000000000006c KBD_STRUCT
          macros.inc:98     *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:99     *ABS*:0000000000000070 KBD_QUEUE
          macros.inc:100    *ABS*:0000000000000080 KBD_QHEAD
          macros.inc:101    *ABS*:0000000000000084 KBD_QTAIL
          macros.inc:102    *ABS*:0000000000000088 ROW
          macros.inc:103    *ABS*:000000000000008c COL
          macros.inc:104    *ABS*:0000000000000090 BK_COLOR
          macros.inc:105    *ABS*:0000000000000094 PEN_COLOR
ARM GAS  forth.s 			page 135


              init.s:39     .isr_vector:0000000000000000 isr_vectors
              init.s:271    .text:00000000000000d8 reset_handler
              init.s:157    .text:0000000000000000 default_handler
              init.s:174    .text:0000000000000020 systick_handler
              init.s:57     .isr_vector:0000000000000040 irq0
             tvout.s:118    .text:0000000000000530 tv_out_isr
              init.s:191    .text:000000000000003c uart_rx_handler
           ps2_kbd.s:77     .text:0000000000000c00 kbd_isr
              init.s:145    .isr_vector:0000000000000198 isr_end
              init.s:147    .isr_vector:0000000000000198 $d
              init.s:155    .text:0000000000000000 $t
              init.s:162    .text:0000000000000008 exception_msg
              init.s:250    .text:00000000000000ac uart_puts
              init.s:211    .text:0000000000000072 reset_mcu
              init.s:163    .text:0000000000000008 $d
              init.s:183    .text:000000000000003a systick_exit
              init.s:208    .text:0000000000000066 user_reboot
              init.s:219    .text:0000000000000088 user_reboot_msg
              init.s:220    .text:0000000000000088 $d
              init.s:223    .text:000000000000009a $t
              init.s:231    .text:000000000000009c uart_putc
              init.s:420    .text:0000000000000258 remap
              init.s:299    .text:0000000000000128 init_devices
              init.s:389    .text:0000000000000200 uart_init
             tvout.s:62     .text:0000000000000480 tv_init
           ps2_kbd.s:152    .text:0000000000000cd4 kbd_init
              init.s:286    .text:0000000000000100 forth_init
             forth.s:3819   .text:00000000000032c8 COLD
             forth.s:85     .text:0000000000001164 NEST
              init.s:312    .text:0000000000000146 wait_hserdy
              init.s:333    .text:0000000000000168 wait_pllrdy
              init.s:345    .text:0000000000000182 wait_sws
              init.s:506    .text:0000000000000316 gpio_config
              init.s:581    .text:00000000000003c2 gpio_out
              init.s:445    .text:0000000000000298 nvic_set_priority
              init.s:466    .text:00000000000002ca nvic_enable_irq
              init.s:596    .text:00000000000003d8 UZERO
              init.s:630    .text:0000000000000478 ULAST
              init.s:454    .text:00000000000002b0 negative_irq
              init.s:481    .text:00000000000002f0 nvic_disable_irq
              init.s:543    .text:000000000000037e input_pull
              init.s:536    .text:000000000000036c output_type
              init.s:559    .text:0000000000000394 gpio_speed
              init.s:597    .text:00000000000003d8 $d
             forth.s:3791   .text:0000000000003258 HI
             forth.s:2728   .text:00000000000027c0 INTER
             forth.s:3816   .text:00000000000032c0 _LASTN
             forth.s:3838   .text:000000000000331c CTOP
              init.s:631    .text:0000000000000478 $d
           tvout.inc:2      *ABS*:0000000000000140 HRES
           tvout.inc:3      *ABS*:00000000000000c8 VRES
           tvout.inc:4      *ABS*:0000000000000004 BPP
           tvout.inc:5      *ABS*:00000000000000a0 BPR
           tvout.inc:6      *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:8      *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:9      *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:29     *ABS*:0000000005b8d800 FCLK
ARM GAS  forth.s 			page 136


             tvout.s:30     *ABS*:0000000000003d76 FHORZ
             tvout.s:31     *ABS*:00000000000017d4 HPER
             tvout.s:32     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:33     *ABS*:00000000000001c2 HPULSE
             tvout.s:34     *ABS*:00000000000000db SERRATION
             tvout.s:35     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:36     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:37     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:38     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:39     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:40     *ABS*:000000000000173f VIDEO_END
             tvout.s:43     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:44     *ABS*:0000000000000001 ST_PREVID
             tvout.s:45     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:46     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:48     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:49     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:62     .text:0000000000000480 $t
             tvout.s:137    .text:000000000000055c state_vsync
             tvout.s:178    .text:00000000000005b0 state_pre_video
             tvout.s:189    .text:00000000000005c2 state_video_out
             tvout.s:219    .text:000000000000061a state_post_video
             tvout.s:236    .text:0000000000000640 tv_isr_exit
             tvout.s:167    .text:0000000000000596 sync_end
             tvout.s:228    .text:000000000000062c frame_end
           ps2_kbd.s:535    .text:00000000000010e0 LINK
             tvout.s:247    .text:0000000000000642 $d
             tvout.s:247    .text:0000000000000646 _BACKCOLOR
             tvout.s:247    .text:0000000000000654 BACKCOLOR
             forth.s:89     .text:000000000000116c INEXT
             tvout.s:254    .text:0000000000000660 $d
             tvout.s:254    .text:0000000000000664 _PENCOLOR
             tvout.s:254    .text:000000000000066e $t
             tvout.s:254    .text:0000000000000670 PENCOLOR
             tvout.s:261    .text:000000000000067c $d
             tvout.s:261    .text:0000000000000680 _COLUMN
             tvout.s:261    .text:0000000000000688 COLUMN
             tvout.s:268    .text:0000000000000694 $d
             tvout.s:268    .text:0000000000000698 _CURSOR_ROW
             tvout.s:268    .text:000000000000069c $t
             tvout.s:268    .text:000000000000069c CURSOR_ROW
             tvout.s:275    .text:00000000000006a8 $d
             tvout.s:275    .text:00000000000006ac _ROWY
             tvout.s:275    .text:00000000000006b2 $t
             tvout.s:275    .text:00000000000006b4 ROWY
             tvout.s:282    .text:00000000000006c0 $d
             tvout.s:282    .text:00000000000006c4 _COLX
             tvout.s:282    .text:00000000000006ca $t
             tvout.s:282    .text:00000000000006cc COLX
             tvout.s:289    .text:00000000000006d8 $d
             tvout.s:289    .text:00000000000006dc _FONT
             tvout.s:289    .text:00000000000006e4 FONT
             tvout.s:588    .rodata:0000000000000000 font_6x8
             tvout.s:296    .text:00000000000006ee $d
             tvout.s:296    .text:00000000000006f2 _VIDBUFF
             tvout.s:296    .text:00000000000006fa $t
             tvout.s:296    .text:00000000000006fc VIDBUFF
ARM GAS  forth.s 			page 137


             tvout.s:308    .text:0000000000000706 $d
             tvout.s:308    .text:000000000000070a _PLOT
             tvout.s:308    .text:0000000000000710 PLOT
             tvout.s:356    .text:0000000000000792 plot_op
             tvout.s:324    .text:000000000000073a op_back
             tvout.s:333    .text:0000000000000754 op_pen
             tvout.s:342    .text:000000000000076e op_invert
             tvout.s:346    .text:0000000000000776 op_xor
             tvout.s:356    .text:0000000000000792 $d
             tvout.s:361    .text:000000000000079a _VSYNC
             tvout.s:361    .text:00000000000007a0 $t
             tvout.s:361    .text:00000000000007a0 VSYNC
             tvout.s:369    .text:00000000000007aa $d
             tvout.s:369    .text:00000000000007ae _CLS
             tvout.s:369    .text:00000000000007b2 $t
             tvout.s:369    .text:00000000000007b4 CLS
             tvout.s:393    .text:00000000000007f6 $d
             tvout.s:393    .text:00000000000007fa _CLRLINE
             tvout.s:393    .text:0000000000000802 $t
             tvout.s:393    .text:0000000000000804 CLRLINE
             tvout.s:395    .text:0000000000000808 $d
             forth.s:253    .text:00000000000012dc DOLIT
             forth.s:469    .text:0000000000001410 DUPP
             forth.s:411    .text:00000000000013b8 TOR
             forth.s:617    .text:00000000000014f4 STAR
             forth.s:593    .text:00000000000014d4 PLUS
             forth.s:387    .text:0000000000001390 RFROM
             forth.s:1653   .text:0000000000001c40 FILL
             forth.s:92     .text:0000000000001172 UNNEST
             tvout.s:408    .text:000000000000083c _SCROLLUP
             tvout.s:408    .text:0000000000000848 SCROLLUP
             tvout.s:410    .text:000000000000084c $d
             forth.s:480    .text:0000000000001420 SWAP
             forth.s:605    .text:00000000000014e4 SUBB
             forth.s:1629   .text:0000000000001c0c MOVE
             tvout.s:427    .text:0000000000000894 _RIGHT
             tvout.s:427    .text:000000000000089a $t
             tvout.s:427    .text:000000000000089c RIGHT
             tvout.s:438    .text:00000000000008bc TVCR
             tvout.s:438    .text:00000000000008b0 $d
             tvout.s:438    .text:00000000000008b4 _TVCR
             tvout.s:438    .text:00000000000008ba $t
             tvout.s:453    .text:00000000000008e4 $d
             tvout.s:458    .text:00000000000008ec FONT_PIXEL
             tvout.s:459    .text:00000000000008ec $t
             tvout.s:465    .text:00000000000008fc INCR_X
             tvout.s:472    .text:0000000000000908 NEXT_PIXEL
             tvout.s:481    .text:0000000000000910 CHAR_ROW
             tvout.s:483    .text:0000000000000914 $d
             forth.s:840    .text:0000000000001648 DDUP
             forth.s:399    .text:00000000000013a4 RAT
             forth.s:280    .text:0000000000001300 DONXT
             forth.s:828    .text:0000000000001634 TDROP
             tvout.s:500    .text:0000000000000950 CHAR_FONT
             tvout.s:501    .text:0000000000000950 $t
             tvout.s:512    .text:0000000000000964 $d
             tvout.s:512    .text:0000000000000968 _TVPUTC
ARM GAS  forth.s 			page 138


             tvout.s:512    .text:0000000000000970 $t
             tvout.s:512    .text:0000000000000970 TVPUTC
             tvout.s:514    .text:0000000000000974 $d
             forth.s:352    .text:0000000000001364 AT
             forth.s:792    .text:00000000000015f8 ROT
             forth.s:376    .text:0000000000001384 CAT
             forth.s:657    .text:0000000000001530 ONEP
             tvout.s:539    .text:00000000000009d8 _PRINT
             tvout.s:539    .text:00000000000009de $t
             tvout.s:539    .text:00000000000009e0 PRINT
             tvout.s:541    .text:00000000000009e4 $d
             forth.s:1049   .text:0000000000001794 COUNT
             forth.s:668    .text:0000000000001540 ONEM
             forth.s:458    .text:0000000000001400 DROP
             tvout.s:554    .text:0000000000000a14 _CURPOS
             tvout.s:554    .text:0000000000000a1c CURPOS
             tvout.s:569    .text:0000000000000a3e $d
             tvout.s:569    .text:0000000000000a42 _INPUT
             tvout.s:569    .text:0000000000000a48 $t
             tvout.s:569    .text:0000000000000a48 INPUT
             tvout.s:571    .text:0000000000000a4c $d
             forth.s:1564   .text:0000000000001b84 PAD
             forth.s:2632   .text:00000000000026ac ACCEP
             forth.s:493    .text:0000000000001434 OVER
             forth.s:363    .text:0000000000001370 CSTOR
             tvout.s:584    .rodata:0000000000000000 $d
             tvout.s:689    .text:0000000000000a78 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:17     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:18     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:19     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:20     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:21     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:22     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:23     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:24     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:25     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:26     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:27     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:28     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:29     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:30     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:31     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:32     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:33     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:34     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:35     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:36     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:37     *ABS*:0000000000000078 SC_F11
ARM GAS  forth.s 			page 139


       ps2_codes.inc:38     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:39     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:40     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:41     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:42     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:43     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:44     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:45     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:46     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:47     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:48     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:49     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:50     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:51     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:52     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:55     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:56     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:57     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:58     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:59     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:60     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:61     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:62     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:63     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:64     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:65     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:66     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:67     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:68     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:69     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:70     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:71     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:72     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:73     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:74     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:78     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:79     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:80     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:81     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:82     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:83     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:84     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:85     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:86     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:87     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:88     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:89     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:90     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:91     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:92     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:93     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:94     *ABS*:000000000000008b VK_F11
       ps2_codes.inc:95     *ABS*:000000000000008c VK_F12
       ps2_codes.inc:96     *ABS*:000000000000008d VK_UP
       ps2_codes.inc:97     *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:98     *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:99     *ABS*:0000000000000090 VK_RIGHT
ARM GAS  forth.s 			page 140


       ps2_codes.inc:100    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:101    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:102    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:103    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:104    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:105    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:106    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:107    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:108    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:109    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:110    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:111    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:112    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:113    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:114    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:115    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:116    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:117    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:118    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:119    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:120    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:122    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:123    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:124    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:125    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:126    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:127    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:128    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:129    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:130    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:132    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:133    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:134    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:135    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:136    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:137    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:138    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:139    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:140    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:141    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:142    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:143    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:144    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:145    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000a84 sc_ascii
         mcSaite.inc:98     .text:0000000000000b34 shifted
         mcSaite.inc:149    .text:0000000000000b94 altchar
         mcSaite.inc:165    .text:0000000000000ba4 extended
         mcSaite.inc:189    .text:0000000000000bcc controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_PAR_ERR
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_FRAME_ERR
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_CAPSLK
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_ALTCHAR
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_REL
ARM GAS  forth.s 			page 141


           ps2_kbd.s:62     *ABS*:000000000000006e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000006d KBD_RXSHIFT
           ps2_kbd.s:64     *ABS*:000000000000006c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000006f KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000c KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000b KBD_CLOCK_PIN
           ps2_kbd.s:77     .text:0000000000000c00 $t
           ps2_kbd.s:103    .text:0000000000000c54 start_bit
           ps2_kbd.s:112    .text:0000000000000c70 parity_bit
           ps2_kbd.s:122    .text:0000000000000c90 stop_bit
           ps2_kbd.s:169    .text:0000000000000d00 $d
           ps2_kbd.s:169    .text:0000000000000d04 _ASYNC_KEY
           ps2_kbd.s:169    .text:0000000000000d0e $t
           ps2_kbd.s:169    .text:0000000000000d10 ASYNC_KEY
           ps2_kbd.s:177    .text:0000000000000d1e $d
           ps2_kbd.s:177    .text:0000000000000d22 _KEYERRQ
           ps2_kbd.s:177    .text:0000000000000d2c KEYERRQ
           ps2_kbd.s:185    .text:0000000000000d3a $d
           ps2_kbd.s:185    .text:0000000000000d3e _KEY_RST_ERR
           ps2_kbd.s:185    .text:0000000000000d4a $t
           ps2_kbd.s:185    .text:0000000000000d4c KEY_RST_ERR
           ps2_kbd.s:195    .text:0000000000000d5a keycode
           ps2_kbd.s:210    .text:0000000000000d82 wait_code
           ps2_kbd.s:222    .text:0000000000000d92 table_scan
           ps2_kbd.s:237    .text:0000000000000daa $d
           ps2_kbd.s:237    .text:0000000000000dae _INKEY
           ps2_kbd.s:237    .text:0000000000000db4 $t
           ps2_kbd.s:237    .text:0000000000000db4 INKEY
           ps2_kbd.s:257    .text:0000000000000dfe inkey_exit
           ps2_kbd.s:269    .text:0000000000000e24 xcode
           ps2_kbd.s:263    .text:0000000000000e10 pause_key
           ps2_kbd.s:274    .text:0000000000000e34 released
           ps2_kbd.s:294    .text:0000000000000e76 do_async_key
           ps2_kbd.s:327    .text:0000000000000ec2 do_modifiers
           ps2_kbd.s:284    .text:0000000000000e64 toggle_capslock
           ps2_kbd.s:372    .text:0000000000000f24 is_async_key
           ps2_kbd.s:299    .text:0000000000000e84 set_async_key
           ps2_kbd.s:386    .text:0000000000000f36 async_jump
           ps2_kbd.s:304    .text:0000000000000e92 shift_key
           ps2_kbd.s:315    .text:0000000000000ea8 set_reset
           ps2_kbd.s:307    .text:0000000000000e98 ctrl_key
           ps2_kbd.s:310    .text:0000000000000e9e alt_key
           ps2_kbd.s:313    .text:0000000000000ea4 altchar_key
           ps2_kbd.s:335    .text:0000000000000ed8 shift_down
           ps2_kbd.s:339    .text:0000000000000ede altchar_down
           ps2_kbd.s:343    .text:0000000000000ee4 ctrl_down
           ps2_kbd.s:351    .text:0000000000000f00 do_capslock
           ps2_kbd.s:377    .text:0000000000000f28 async_keys
           ps2_kbd.s:378    .text:0000000000000f28 $d
           ps2_kbd.s:397    .text:0000000000000f3a wait_kbd_clock
           ps2_kbd.s:398    .text:0000000000000f3a $t
           ps2_kbd.s:421    .text:0000000000000f50 kbd_send
           ps2_kbd.s:510    .text:0000000000001086 kbd_clear_queue
           ps2_kbd.s:518    .text:0000000000001094 $d
           ps2_kbd.s:518    .text:0000000000001098 _KBD_RST
           ps2_kbd.s:518    .text:00000000000010a0 $t
           ps2_kbd.s:518    .text:00000000000010a0 KBD_RST
ARM GAS  forth.s 			page 142


           ps2_kbd.s:535    .text:00000000000010dc $d
           ps2_kbd.s:535    .text:00000000000010e0 _KBD_LED
           ps2_kbd.s:535    .text:00000000000010e8 $t
           ps2_kbd.s:535    .text:00000000000010e8 KBD_LED
           ps2_kbd.s:554    .text:000000000000113a $d
           ps2_kbd.s:554    .text:000000000000113c $d
             forth.s:72     .text:0000000000001158 $t
             forth.s:75     .text:0000000000001158 TPUSH
             forth.s:80     .text:000000000000115e TPOP
             forth.s:105    .text:000000000000117c COMPI_NEST
             forth.s:121    .text:000000000000119a $d
             forth.s:122    .text:000000000000119e _RAND
             forth.s:125    .text:00000000000011a8 RAND
             forth.s:127    .text:00000000000011ac $d
             forth.s:891    .text:000000000000169c ABSS
             forth.s:1109   .text:00000000000017dc SEED
             forth.s:581    .text:00000000000014c4 LSHIFT
             forth.s:542    .text:000000000000147c XORR
             forth.s:569    .text:00000000000014ac RSHIFT
             forth.s:339    .text:0000000000001350 STORE
             forth.s:518    .text:0000000000001454 ANDD
             forth.s:1424   .text:0000000000001a40 MODD
             forth.s:155    .text:000000000000121c _PAUSE
             forth.s:157    .text:0000000000001222 $t
             forth.s:158    .text:0000000000001224 PAUSE
             forth.s:160    .text:0000000000001228 $d
             forth.s:1131   .text:0000000000001804 TIMER
             forth.s:162    .text:0000000000001230 PAUSE_LOOP
             forth.s:301    .text:000000000000131e QBRAN
             forth.s:167    .text:0000000000001248 PAUSE_EXIT
             forth.s:318    .text:0000000000001332 BRAN
             forth.s:173    .text:0000000000001250 _ULED
             forth.s:177    .text:0000000000001258 ULED
             forth.s:186    .text:0000000000001274 ULED_OFF
             forth.s:192    .text:0000000000001278 $d
             forth.s:193    .text:000000000000127c _QRX
             forth.s:196    .text:0000000000001284 QKEY
             forth.s:197    .text:0000000000001284 QRX
             forth.s:216    .text:00000000000012ae $d
             forth.s:217    .text:00000000000012b2 _TXSTO
             forth.s:220    .text:00000000000012b8 TXSTO
             forth.s:221    .text:00000000000012b8 EMIT
             forth.s:222    .text:00000000000012b8 TECHO
             forth.s:238    .text:00000000000012d0 $d
             forth.s:239    .text:00000000000012d4 _NOP
             forth.s:241    .text:00000000000012d8 $t
             forth.s:242    .text:00000000000012d8 NOP
             forth.s:261    .text:00000000000012e6 $d
             forth.s:262    .text:00000000000012ea _EXECU
             forth.s:264    .text:00000000000012f2 $t
             forth.s:265    .text:00000000000012f4 EXECU
             forth.s:287    .text:0000000000001310 NEXT1
             forth.s:307    .text:000000000000132c QBRAN1
             forth.s:325    .text:0000000000001338 $d
             forth.s:326    .text:000000000000133c _EXIT
             forth.s:329    .text:0000000000001344 EXIT
             forth.s:330    .text:0000000000001344 $d
ARM GAS  forth.s 			page 143


             forth.s:336    .text:000000000000134c _STORE
             forth.s:338    .text:000000000000134e $t
             forth.s:348    .text:000000000000135c $d
             forth.s:349    .text:0000000000001360 _AT
             forth.s:351    .text:0000000000001362 $t
             forth.s:359    .text:0000000000001368 $d
             forth.s:360    .text:000000000000136c _CSTOR
             forth.s:372    .text:000000000000137c $d
             forth.s:373    .text:0000000000001380 _CAT
             forth.s:383    .text:0000000000001388 $d
             forth.s:384    .text:000000000000138c _RFROM
             forth.s:395    .text:000000000000139a $d
             forth.s:396    .text:000000000000139e _RAT
             forth.s:407    .text:00000000000013ae $d
             forth.s:408    .text:00000000000013b2 _TOR
             forth.s:418    .text:00000000000013c2 $d
             forth.s:419    .text:00000000000013c6 _RPSTOR
             forth.s:421    .text:00000000000013ca $t
             forth.s:422    .text:00000000000013cc RPSTOR
             forth.s:430    .text:00000000000013d4 $d
             forth.s:431    .text:00000000000013d8 _SPSTOR
             forth.s:433    .text:00000000000013dc $t
             forth.s:434    .text:00000000000013dc SPSTOR
             forth.s:442    .text:00000000000013e4 $d
             forth.s:443    .text:00000000000013e8 _SPAT
             forth.s:445    .text:00000000000013ec $t
             forth.s:446    .text:00000000000013ec SPAT
             forth.s:454    .text:00000000000013f4 $d
             forth.s:455    .text:00000000000013f8 _DROP
             forth.s:465    .text:0000000000001406 $d
             forth.s:466    .text:000000000000140a _DUPP
             forth.s:468    .text:000000000000140e $t
             forth.s:476    .text:0000000000001416 $d
             forth.s:477    .text:000000000000141a _SWAP
             forth.s:489    .text:0000000000001428 $d
             forth.s:490    .text:000000000000142c _OVER
             forth.s:501    .text:000000000000143c $d
             forth.s:502    .text:0000000000001440 _ZLESS
             forth.s:505    .text:0000000000001444 ZLESS
             forth.s:514    .text:000000000000144a $d
             forth.s:515    .text:000000000000144e _ANDD
             forth.s:517    .text:0000000000001452 $t
             forth.s:526    .text:000000000000145e $d
             forth.s:527    .text:0000000000001462 _ORR
             forth.s:530    .text:0000000000001468 ORR
             forth.s:538    .text:0000000000001472 $d
             forth.s:539    .text:0000000000001476 _XORR
             forth.s:541    .text:000000000000147a $t
             forth.s:550    .text:0000000000001486 $d
             forth.s:551    .text:000000000000148a _UPLUS
             forth.s:553    .text:000000000000148e $t
             forth.s:554    .text:0000000000001490 UPLUS
             forth.s:565    .text:00000000000014a0 $d
             forth.s:566    .text:00000000000014a4 _RSHIFT
             forth.s:577    .text:00000000000014b6 $d
             forth.s:578    .text:00000000000014ba _LSHIFT
             forth.s:589    .text:00000000000014ce $d
ARM GAS  forth.s 			page 144


             forth.s:590    .text:00000000000014d2 _PLUS
             forth.s:592    .text:00000000000014d4 $t
             forth.s:601    .text:00000000000014dc $d
             forth.s:602    .text:00000000000014e0 _SUBB
             forth.s:604    .text:00000000000014e2 $t
             forth.s:613    .text:00000000000014ee $d
             forth.s:614    .text:00000000000014f2 _STAR
             forth.s:616    .text:00000000000014f4 $t
             forth.s:625    .text:00000000000014fe $d
             forth.s:626    .text:0000000000001502 _UMSTA
             forth.s:628    .text:0000000000001506 $t
             forth.s:629    .text:0000000000001508 UMSTA
             forth.s:639    .text:0000000000001514 $d
             forth.s:640    .text:0000000000001518 _MSTAR
             forth.s:643    .text:000000000000151c MSTAR
             forth.s:653    .text:0000000000001528 $d
             forth.s:654    .text:000000000000152c _ONEP
             forth.s:664    .text:0000000000001536 $d
             forth.s:665    .text:000000000000153a _ONEM
             forth.s:675    .text:0000000000001546 $d
             forth.s:676    .text:000000000000154a _TWOP
             forth.s:679    .text:0000000000001550 TWOP
             forth.s:686    .text:0000000000001556 $d
             forth.s:687    .text:000000000000155a _TWOM
             forth.s:690    .text:0000000000001560 TWOM
             forth.s:697    .text:0000000000001566 $d
             forth.s:698    .text:000000000000156a _CELLP
             forth.s:700    .text:0000000000001570 $t
             forth.s:701    .text:0000000000001570 CELLP
             forth.s:708    .text:0000000000001576 $d
             forth.s:709    .text:000000000000157a _CELLM
             forth.s:711    .text:0000000000001580 $t
             forth.s:712    .text:0000000000001580 CELLM
             forth.s:719    .text:0000000000001586 $d
             forth.s:720    .text:000000000000158a _BLANK
             forth.s:723    .text:0000000000001590 BLANK
             forth.s:731    .text:000000000000159a $d
             forth.s:732    .text:000000000000159e _CELLS
             forth.s:734    .text:00000000000015a4 $t
             forth.s:735    .text:00000000000015a4 CELLS
             forth.s:742    .text:00000000000015aa $d
             forth.s:743    .text:00000000000015ae _CELLSL
             forth.s:745    .text:00000000000015b4 $t
             forth.s:746    .text:00000000000015b4 CELLSL
             forth.s:753    .text:00000000000015ba $d
             forth.s:754    .text:00000000000015be _TWOST
             forth.s:757    .text:00000000000015c4 TWOST
             forth.s:764    .text:00000000000015ca $d
             forth.s:765    .text:00000000000015ce _TWOSL
             forth.s:768    .text:00000000000015d4 TWOSL
             forth.s:775    .text:00000000000015da $d
             forth.s:776    .text:00000000000015de _QDUP
             forth.s:779    .text:00000000000015e4 QDUP
             forth.s:788    .text:00000000000015ee $d
             forth.s:789    .text:00000000000015f2 _ROT
             forth.s:791    .text:00000000000015f6 $t
             forth.s:801    .text:0000000000001602 $d
ARM GAS  forth.s 			page 145


             forth.s:802    .text:0000000000001606 _NROT
             forth.s:805    .text:000000000000160c NROT
             forth.s:815    .text:0000000000001616 $d
             forth.s:816    .text:000000000000161a _DDROP
             forth.s:818    .text:0000000000001620 $t
             forth.s:819    .text:0000000000001620 DDROP
             forth.s:824    .text:000000000000162a $d
             forth.s:825    .text:000000000000162e _TDROP
             forth.s:827    .text:0000000000001634 $t
             forth.s:836    .text:000000000000163e $d
             forth.s:837    .text:0000000000001642 _DDUP
             forth.s:849    .text:0000000000001654 $d
             forth.s:850    .text:0000000000001658 _DPLUS
             forth.s:853    .text:000000000000165c DPLUS
             forth.s:865    .text:0000000000001670 $d
             forth.s:866    .text:0000000000001674 _INVER
             forth.s:868    .text:0000000000001678 $t
             forth.s:869    .text:0000000000001678 INVER
             forth.s:876    .text:000000000000167e $d
             forth.s:877    .text:0000000000001682 _NEGAT
             forth.s:880    .text:000000000000168c NEGAT
             forth.s:887    .text:0000000000001692 $d
             forth.s:888    .text:0000000000001696 _ABSS
             forth.s:890    .text:000000000000169a $t
             forth.s:900    .text:00000000000016a6 $d
             forth.s:901    .text:00000000000016aa _ZEQUAL
             forth.s:904    .text:00000000000016b0 ZEQUAL
             forth.s:914    .text:00000000000016be $d
             forth.s:915    .text:00000000000016c2 _EQUAL
             forth.s:917    .text:00000000000016c4 $t
             forth.s:918    .text:00000000000016c4 EQUAL
             forth.s:929    .text:00000000000016d4 $d
             forth.s:930    .text:00000000000016d8 _ULESS
             forth.s:933    .text:00000000000016dc ULESS
             forth.s:944    .text:00000000000016ec $d
             forth.s:945    .text:00000000000016f0 _LESS
             forth.s:947    .text:00000000000016f2 $t
             forth.s:948    .text:00000000000016f4 LESS
             forth.s:959    .text:0000000000001704 $d
             forth.s:960    .text:0000000000001708 _GREAT
             forth.s:962    .text:000000000000170a $t
             forth.s:963    .text:000000000000170c GREAT
             forth.s:974    .text:000000000000171c $d
             forth.s:975    .text:0000000000001720 _MAX
             forth.s:977    .text:0000000000001724 $t
             forth.s:978    .text:0000000000001724 MAX
             forth.s:988    .text:0000000000001730 $d
             forth.s:989    .text:0000000000001734 _MIN
             forth.s:991    .text:0000000000001738 $t
             forth.s:992    .text:0000000000001738 MIN
             forth.s:1002   .text:0000000000001744 $d
             forth.s:1003   .text:0000000000001748 _PSTOR
             forth.s:1006   .text:000000000000174c PSTOR
             forth.s:1017   .text:000000000000175c $d
             forth.s:1018   .text:0000000000001760 _DSTOR
             forth.s:1021   .text:0000000000001764 DSTOR
             forth.s:1032   .text:0000000000001778 $d
ARM GAS  forth.s 			page 146


             forth.s:1033   .text:000000000000177c _DAT
             forth.s:1036   .text:0000000000001780 DAT
             forth.s:1045   .text:000000000000178a $d
             forth.s:1046   .text:000000000000178e _COUNT
             forth.s:1048   .text:0000000000001794 $t
             forth.s:1058   .text:00000000000017a0 $d
             forth.s:1059   .text:00000000000017a4 _DNEGA
             forth.s:1061   .text:00000000000017ac $t
             forth.s:1062   .text:00000000000017ac DNEGA
             forth.s:1080   .text:00000000000017bc DOVAR
             forth.s:1093   .text:00000000000017c8 DOCON
             forth.s:1105   .text:00000000000017d2 $d
             forth.s:1106   .text:00000000000017d6 _SEED
             forth.s:1116   .text:00000000000017e6 $d
             forth.s:1117   .text:00000000000017ea _MSEC
             forth.s:1120   .text:00000000000017f0 MSEC
             forth.s:1127   .text:00000000000017fa $d
             forth.s:1128   .text:00000000000017fe _TIMER
             forth.s:1130   .text:0000000000001804 $t
             forth.s:1139   .text:000000000000180e $d
             forth.s:1140   .text:0000000000001812 _TBOOT
             forth.s:1142   .text:0000000000001818 $t
             forth.s:1143   .text:0000000000001818 TBOOT
             forth.s:1151   .text:0000000000001822 $d
             forth.s:1152   .text:0000000000001826 _BASE
             forth.s:1155   .text:000000000000182c BASE
             forth.s:1167   .text:0000000000001836 TEMP
             forth.s:1175   .text:0000000000001840 $d
             forth.s:1176   .text:0000000000001844 _SPAN
             forth.s:1179   .text:000000000000184c SPAN
             forth.s:1187   .text:0000000000001856 $d
             forth.s:1188   .text:000000000000185a _INN
             forth.s:1190   .text:000000000000185e $t
             forth.s:1191   .text:0000000000001860 INN
             forth.s:1199   .text:000000000000186a $d
             forth.s:1200   .text:000000000000186e _NTIB
             forth.s:1203   .text:0000000000001874 NTIB
             forth.s:1211   .text:000000000000187e $d
             forth.s:1212   .text:0000000000001882 _TEVAL
             forth.s:1214   .text:0000000000001888 $t
             forth.s:1215   .text:0000000000001888 TEVAL
             forth.s:1223   .text:0000000000001892 $d
             forth.s:1224   .text:0000000000001896 _HLD
             forth.s:1226   .text:000000000000189a $t
             forth.s:1227   .text:000000000000189c HLD
             forth.s:1235   .text:00000000000018a6 $d
             forth.s:1236   .text:00000000000018aa _CNTXT
             forth.s:1238   .text:00000000000018b2 $t
             forth.s:1239   .text:00000000000018b4 CNTXT
             forth.s:1240   .text:00000000000018b4 CRRNT
             forth.s:1248   .text:00000000000018be $d
             forth.s:1249   .text:00000000000018c2 _CP
             forth.s:1252   .text:00000000000018c8 CPP
             forth.s:1259   .text:00000000000018d2 $d
             forth.s:1260   .text:00000000000018d6 _FCP
             forth.s:1262   .text:00000000000018da $t
             forth.s:1263   .text:00000000000018dc FCP
ARM GAS  forth.s 			page 147


             forth.s:1271   .text:00000000000018e6 $d
             forth.s:1272   .text:00000000000018ea _LAST
             forth.s:1275   .text:00000000000018f0 LAST
             forth.s:1287   .text:00000000000018fa $d
             forth.s:1288   .text:00000000000018fe _USER_BGN
             forth.s:1291   .text:000000000000190c USER_BEGIN
             forth.s:1295   .text:0000000000001914 USR_BGN_ADR
             forth.s:1296   .text:0000000000001914 $d
             forth.s:1301   .text:000000000000191c _USER_END
             forth.s:1304   .text:0000000000001928 USER_END
             forth.s:1308   .text:0000000000001930 USER_END_ADR
             forth.s:1309   .text:0000000000001930 $d
             forth.s:1320   .text:0000000000001938 _WITHI
             forth.s:1323   .text:0000000000001940 WITHI
             forth.s:1325   .text:0000000000001944 $d
             forth.s:1339   .text:0000000000001964 _UMMOD
             forth.s:1342   .text:000000000000196c UMMOD
             forth.s:1346   .text:0000000000001976 UMMOD0
             forth.s:1353   .text:0000000000001986 UMMOD1
             forth.s:1359   .text:0000000000001990 UMMOD2
             forth.s:1369   .text:000000000000199c $d
             forth.s:1370   .text:00000000000019a0 _MSMOD
             forth.s:1372   .text:00000000000019a6 $t
             forth.s:1373   .text:00000000000019a8 MSMOD
             forth.s:1375   .text:00000000000019ac $d
             forth.s:1384   .text:00000000000019d4 MMOD1
             forth.s:1391   .text:00000000000019f0 MMOD2
             forth.s:1399   .text:0000000000001a10 MMOD3
             forth.s:1406   .text:0000000000001a18 _SLMOD
             forth.s:1409   .text:0000000000001a20 SLMOD
             forth.s:1411   .text:0000000000001a24 $d
             forth.s:1421   .text:0000000000001a3c _MODD
             forth.s:1423   .text:0000000000001a40 $t
             forth.s:1426   .text:0000000000001a44 $d
             forth.s:1434   .text:0000000000001a54 _SLASH
             forth.s:1436   .text:0000000000001a56 $t
             forth.s:1437   .text:0000000000001a58 SLASH
             forth.s:1439   .text:0000000000001a5c $d
             forth.s:1448   .text:0000000000001a70 _SSMOD
             forth.s:1450   .text:0000000000001a76 $t
             forth.s:1451   .text:0000000000001a78 SSMOD
             forth.s:1453   .text:0000000000001a7c $d
             forth.s:1463   .text:0000000000001a94 _STASL
             forth.s:1466   .text:0000000000001a98 STASL
             forth.s:1468   .text:0000000000001a9c $d
             forth.s:1480   .text:0000000000001ab0 _ALGND
             forth.s:1482   .text:0000000000001ab8 $t
             forth.s:1483   .text:0000000000001ab8 ALGND
             forth.s:1492   .text:0000000000001ac8 $d
             forth.s:1493   .text:0000000000001acc _TCHAR
             forth.s:1495   .text:0000000000001ad2 $t
             forth.s:1496   .text:0000000000001ad4 TCHAR
             forth.s:1498   .text:0000000000001ad8 $d
             forth.s:1508   .text:0000000000001b10 TCHA1
             forth.s:1515   .text:0000000000001b18 _DEPTH
             forth.s:1517   .text:0000000000001b1e $t
             forth.s:1518   .text:0000000000001b20 DEPTH
ARM GAS  forth.s 			page 148


             forth.s:1528   .text:0000000000001b38 $d
             forth.s:1529   .text:0000000000001b3c _PICK
             forth.s:1532   .text:0000000000001b44 PICK
             forth.s:1534   .text:0000000000001b48 $d
             forth.s:1548   .text:0000000000001b64 _HERE
             forth.s:1551   .text:0000000000001b6c HERE
             forth.s:1553   .text:0000000000001b70 $d
             forth.s:1561   .text:0000000000001b80 _PAD
             forth.s:1563   .text:0000000000001b84 $t
             forth.s:1566   .text:0000000000001b88 $d
             forth.s:1575   .text:0000000000001ba0 _TIB
             forth.s:1577   .text:0000000000001ba4 $t
             forth.s:1578   .text:0000000000001ba4 TIB
             forth.s:1586   .text:0000000000001bae $d
             forth.s:1587   .text:0000000000001bb2 _ATEXE
             forth.s:1590   .text:0000000000001bbc ATEXE
             forth.s:1602   .text:0000000000001bd0 $d
             forth.s:1603   .text:0000000000001bd4 _CMOVE
             forth.s:1605   .text:0000000000001bda $t
             forth.s:1606   .text:0000000000001bdc CMOVE
             forth.s:1613   .text:0000000000001bee CMOV1
             forth.s:1610   .text:0000000000001be6 CMOV0
             forth.s:1618   .text:0000000000001bf8 CMOV2
             forth.s:1625   .text:0000000000001c00 $d
             forth.s:1626   .text:0000000000001c04 _MOVE
             forth.s:1637   .text:0000000000001c22 MOVE1
             forth.s:1634   .text:0000000000001c1a MOVE0
             forth.s:1642   .text:0000000000001c2c MOVE2
             forth.s:1649   .text:0000000000001c34 $d
             forth.s:1650   .text:0000000000001c38 _FILL
             forth.s:1661   .text:0000000000001c4e FILL2
             forth.s:1657   .text:0000000000001c46 FILL1
             forth.s:1668   .text:0000000000001c56 $d
             forth.s:1669   .text:0000000000001c5a _PACKS
             forth.s:1672   .text:0000000000001c64 PACKS
             forth.s:1674   .text:0000000000001c68 $d
             forth.s:1701   .text:0000000000001cc0 _DIGIT
             forth.s:1703   .text:0000000000001cc6 $t
             forth.s:1704   .text:0000000000001cc8 DIGIT
             forth.s:1706   .text:0000000000001ccc $d
             forth.s:1720   .text:0000000000001d00 _EXTRC
             forth.s:1722   .text:0000000000001d08 $t
             forth.s:1723   .text:0000000000001d08 EXTRC
             forth.s:1725   .text:0000000000001d0c $d
             forth.s:1736   .text:0000000000001d2c _BDIGS
             forth.s:1739   .text:0000000000001d30 BDIGS
             forth.s:1741   .text:0000000000001d34 $d
             forth.s:1750   .text:0000000000001d48 _HOLD
             forth.s:1755   .text:0000000000001d54 $d
             forth.s:1768   .text:0000000000001d78 _DIG
             forth.s:1770   .text:0000000000001d7a $t
             forth.s:1771   .text:0000000000001d7c DIG
             forth.s:1773   .text:0000000000001d80 $d
             forth.s:1783   .text:0000000000001d98 _DIGS
             forth.s:1786   .text:0000000000001d9c DIGS
             forth.s:1788   .text:0000000000001da0 DIGS1
             forth.s:1789   .text:0000000000001da0 $d
ARM GAS  forth.s 			page 149


             forth.s:1793   .text:0000000000001db8 DIGS2
             forth.s:1800   .text:0000000000001dc0 _SIGN
             forth.s:1803   .text:0000000000001dc8 SIGN
             forth.s:1805   .text:0000000000001dcc $d
             forth.s:1809   .text:0000000000001de4 SIGN1
             forth.s:1816   .text:0000000000001dec _EDIGS
             forth.s:1819   .text:0000000000001df0 EDIGS
             forth.s:1821   .text:0000000000001df4 $d
             forth.s:1836   .text:0000000000001e10 STRR
             forth.s:1837   .text:0000000000001e10 $t
             forth.s:1838   .text:0000000000001e14 $d
             forth.s:1852   .text:0000000000001e3c _HEX
             forth.s:1854   .text:0000000000001e40 $t
             forth.s:1855   .text:0000000000001e40 HEX
             forth.s:1857   .text:0000000000001e44 $d
             forth.s:1866   .text:0000000000001e5c _DECIM
             forth.s:1868   .text:0000000000001e64 $t
             forth.s:1869   .text:0000000000001e64 DECIM
             forth.s:1871   .text:0000000000001e68 $d
             forth.s:1883   .text:0000000000001e80 _DIGTQ
             forth.s:1886   .text:0000000000001e88 DIGTQ
             forth.s:1888   .text:0000000000001e8c $d
             forth.s:1901   .text:0000000000001ed4 DGTQ1
             forth.s:1911   .text:0000000000001ee8 _NUMBQ
             forth.s:1913   .text:0000000000001ef0 $t
             forth.s:1914   .text:0000000000001ef0 NUMBQ
             forth.s:1916   .text:0000000000001ef4 $d
             forth.s:1932   .text:0000000000001f40 NUMQ1
             forth.s:1980   .text:0000000000002008 NUMQ6
             forth.s:1948   .text:0000000000001f84 NUMQ2
             forth.s:1972   .text:0000000000001fec NUMQ4
             forth.s:1969   .text:0000000000001fe0 NUMQ3
             forth.s:1978   .text:0000000000002004 NUMQ5
             forth.s:1995   .text:0000000000002024 _KEY
             forth.s:1997   .text:0000000000002028 $t
             forth.s:1998   .text:0000000000002028 KEY
             forth.s:2000   .text:000000000000202c KEY1
             forth.s:2001   .text:000000000000202c $d
             forth.s:2009   .text:0000000000002040 _SPACE
             forth.s:2011   .text:0000000000002046 $t
             forth.s:2012   .text:0000000000002048 SPACE
             forth.s:2014   .text:000000000000204c $d
             forth.s:2022   .text:000000000000205c _SPACS
             forth.s:2025   .text:0000000000002064 SPACS
             forth.s:2027   .text:0000000000002068 $d
             forth.s:2033   .text:0000000000002084 CHAR2
             forth.s:2031   .text:0000000000002080 CHAR1
             forth.s:2041   .text:0000000000002094 _TYPEE
             forth.s:2044   .text:000000000000209c TYPEE
             forth.s:2046   .text:00000000000020a0 $d
             forth.s:2052   .text:00000000000020b8 TYPE2
             forth.s:2048   .text:00000000000020ac TYPE1
             forth.s:2061   .text:00000000000020cc _CR
             forth.s:2064   .text:00000000000020d0 CR
             forth.s:2066   .text:00000000000020d4 $d
             forth.s:2080   .text:00000000000020f0 DOSTR
             forth.s:2081   .text:00000000000020f0 $t
ARM GAS  forth.s 			page 150


             forth.s:2083   .text:00000000000020f4 $d
             forth.s:2102   .text:000000000000211c STRQP
             forth.s:2103   .text:000000000000211c $t
             forth.s:2104   .text:0000000000002120 $d
             forth.s:2114   .text:0000000000002128 DOTST
             forth.s:2115   .text:0000000000002128 $t
             forth.s:2116   .text:000000000000212c $d
             forth.s:2127   .text:0000000000002138 DOTQP
             forth.s:2128   .text:0000000000002138 $t
             forth.s:2129   .text:000000000000213c $d
             forth.s:2137   .text:000000000000214c _DOTR
             forth.s:2140   .text:0000000000002150 DOTR
             forth.s:2142   .text:0000000000002154 $d
             forth.s:2155   .text:0000000000002178 _UDOTR
             forth.s:2157   .text:000000000000217c $t
             forth.s:2158   .text:000000000000217c UDOTR
             forth.s:2160   .text:0000000000002180 $d
             forth.s:2175   .text:00000000000021ac _UDOT
             forth.s:2178   .text:00000000000021b0 UDOT
             forth.s:2180   .text:00000000000021b4 $d
             forth.s:2191   .text:00000000000021d0 _DOT
             forth.s:2193   .text:00000000000021d2 $t
             forth.s:2194   .text:00000000000021d4 DOT
             forth.s:2196   .text:00000000000021d8 $d
             forth.s:2203   .text:00000000000021fc DOT1
             forth.s:2213   .text:0000000000002210 _QUEST
             forth.s:2215   .text:0000000000002212 $t
             forth.s:2216   .text:0000000000002214 QUEST
             forth.s:2218   .text:0000000000002218 $d
             forth.s:2232   .text:0000000000002224 PARS
             forth.s:2233   .text:0000000000002224 $t
             forth.s:2234   .text:0000000000002228 $d
             forth.s:2300   .text:0000000000002338 PARS8
             forth.s:2264   .text:00000000000022ac PARS3
             forth.s:2247   .text:0000000000002264 PARS1
             forth.s:2262   .text:00000000000022a8 PARS2
             forth.s:2268   .text:00000000000022b8 PARS4
             forth.s:2280   .text:00000000000022e8 PARS5
             forth.s:2287   .text:000000000000230c PARS6
             forth.s:2293   .text:0000000000002320 PARS7
             forth.s:2310   .text:000000000000234c _PARSE
             forth.s:2312   .text:0000000000002352 $t
             forth.s:2313   .text:0000000000002354 PARSE
             forth.s:2315   .text:0000000000002358 $d
             forth.s:2335   .text:0000000000002398 _DOTPR
             forth.s:2338   .text:000000000000239c DOTPR
             forth.s:2340   .text:00000000000023a0 $d
             forth.s:2349   .text:00000000000023b8 _PAREN
             forth.s:2351   .text:00000000000023ba $t
             forth.s:2352   .text:00000000000023bc PAREN
             forth.s:2354   .text:00000000000023c0 $d
             forth.s:2363   .text:00000000000023d8 _BKSLA
             forth.s:2365   .text:00000000000023da $t
             forth.s:2366   .text:00000000000023dc BKSLA
             forth.s:2368   .text:00000000000023e0 $d
             forth.s:2378   .text:00000000000023f8 _CHAR
             forth.s:2381   .text:0000000000002400 CHAR
ARM GAS  forth.s 			page 151


             forth.s:2383   .text:0000000000002404 $d
             forth.s:2393   .text:000000000000241c _WORDD
             forth.s:2396   .text:0000000000002424 WORDD
             forth.s:2398   .text:0000000000002428 $d
             forth.s:2408   .text:0000000000002440 _TOKEN
             forth.s:2410   .text:0000000000002446 $t
             forth.s:2411   .text:0000000000002448 TOKEN
             forth.s:2413   .text:000000000000244c $d
             forth.s:2424   .text:000000000000245c _NAMET
             forth.s:2426   .text:0000000000002462 $t
             forth.s:2427   .text:0000000000002464 NAMET
             forth.s:2429   .text:0000000000002468 $d
             forth.s:2445   .text:0000000000002488 _SAMEQ
             forth.s:2447   .text:000000000000248e $t
             forth.s:2448   .text:0000000000002490 SAMEQ
             forth.s:2450   .text:0000000000002494 $d
             forth.s:2467   .text:00000000000024dc SAME2
             forth.s:2452   .text:00000000000024a0 SAME1
             forth.s:2482   .text:00000000000024f0 FIND
             forth.s:2483   .text:00000000000024f0 $t
             forth.s:2484   .text:00000000000024f4 $d
             forth.s:2491   .text:0000000000002510 FIND1
             forth.s:2511   .text:0000000000002568 FIND6
             forth.s:2504   .text:0000000000002550 FIND2
             forth.s:2509   .text:0000000000002560 FIND3
             forth.s:2518   .text:0000000000002580 FIND4
             forth.s:2524   .text:000000000000259c FIND5
             forth.s:2539   .text:00000000000025c4 _NAMEQ
             forth.s:2541   .text:00000000000025ca $t
             forth.s:2542   .text:00000000000025cc NAMEQ
             forth.s:2544   .text:00000000000025d0 $d
             forth.s:2559   .text:00000000000025e0 BKSP
             forth.s:2560   .text:00000000000025e0 $t
             forth.s:2561   .text:00000000000025e4 $d
             forth.s:2575   .text:0000000000002628 BACK1
             forth.s:2585   .text:000000000000262c TAP
             forth.s:2586   .text:000000000000262c $t
             forth.s:2587   .text:0000000000002630 $d
             forth.s:2601   .text:0000000000002648 KTAP
             forth.s:2602   .text:0000000000002648 TTAP
             forth.s:2603   .text:0000000000002648 $t
             forth.s:2604   .text:000000000000264c $d
             forth.s:2618   .text:000000000000268c KTAP2
             forth.s:2615   .text:0000000000002684 KTAP1
             forth.s:2629   .text:00000000000026a4 _ACCEP
             forth.s:2634   .text:00000000000026b0 $d
             forth.s:2637   .text:00000000000026bc ACCP1
             forth.s:2653   .text:0000000000002704 ACCP4
             forth.s:2649   .text:00000000000026f8 ACCP2
             forth.s:2651   .text:00000000000026fc ACCP3
             forth.s:2663   .text:0000000000002718 _QUERY
             forth.s:2665   .text:000000000000271e $t
             forth.s:2666   .text:0000000000002720 QUERY
             forth.s:2668   .text:0000000000002724 $d
             forth.s:2686   .text:0000000000002758 _ABORT
             forth.s:2688   .text:000000000000275e $t
             forth.s:2689   .text:0000000000002760 ABORT
ARM GAS  forth.s 			page 152


             forth.s:2691   .text:0000000000002764 ABORT1
             forth.s:2692   .text:0000000000002764 $d
             forth.s:2823   .text:00000000000028e8 PRESE
             forth.s:2836   .text:0000000000002908 QUIT
             forth.s:2708   .text:000000000000278c ABORQ
             forth.s:2709   .text:000000000000278c $t
             forth.s:2710   .text:0000000000002790 $d
             forth.s:2725   .text:00000000000027b4 _INTER
             forth.s:2727   .text:00000000000027c0 $t
             forth.s:2730   .text:00000000000027c4 $d
             forth.s:2739   .text:0000000000002800 INTE1
             forth.s:2736   .text:00000000000027f6 $t
             forth.s:2737   .text:00000000000027f8 $d
             forth.s:2743   .text:0000000000002810 INTE2
             forth.s:2750   .text:0000000000002818 _LBRAC
             forth.s:2752   .text:000000000000281a $t
             forth.s:2753   .text:000000000000281c LBRAC
             forth.s:2755   .text:0000000000002820 $d
             forth.s:2764   .text:0000000000002838 _DOTOK
             forth.s:2766   .text:000000000000283c $t
             forth.s:2767   .text:000000000000283c DOTOK
             forth.s:2769   .text:0000000000002840 $d
             forth.s:2775   .text:0000000000002864 DOTO1
             forth.s:2776   .text:0000000000002864 $d
             forth.s:2783   .text:0000000000002870 _QSTAC
             forth.s:2786   .text:0000000000002878 QSTAC
             forth.s:2788   .text:000000000000287c $d
             forth.s:2790   .text:0000000000002892 $t
             forth.s:2791   .text:0000000000002894 $d
             forth.s:2797   .text:000000000000289c _EVAL
             forth.s:2802   .text:00000000000028a8 EVAL1
             forth.s:2803   .text:00000000000028a8 $d
             forth.s:2811   .text:00000000000028d0 EVAL2
             forth.s:2820   .text:00000000000028e0 _PRESE
             forth.s:2825   .text:00000000000028ec $d
             forth.s:2833   .text:0000000000002900 _QUIT
             forth.s:2837   .text:0000000000002908 $d
             forth.s:2839   .text:0000000000002914 QUIT1
             forth.s:2841   .text:0000000000002918 QUIT2
             forth.s:2847   .text:000000000000292c _FORGET
             forth.s:2850   .text:0000000000002934 FORGET
             forth.s:2852   .text:0000000000002938 $d
             forth.s:3301   .text:0000000000002de0 OVERT
             forth.s:2877   .text:0000000000002980 $d
             forth.s:2878   .text:0000000000002984 _TICK
             forth.s:2880   .text:0000000000002986 $t
             forth.s:2881   .text:0000000000002988 TICK
             forth.s:2883   .text:000000000000298c $d
             forth.s:2887   .text:00000000000029a0 TICK1
             forth.s:2894   .text:00000000000029a8 _ALLOT
             forth.s:2896   .text:00000000000029ae $t
             forth.s:2897   .text:00000000000029b0 ALLOT
             forth.s:2899   .text:00000000000029b4 $d
             forth.s:2907   .text:00000000000029c4 _COMMA
             forth.s:2908   .text:00000000000029c6 $t
             forth.s:2909   .text:00000000000029c8 COMMA
             forth.s:2911   .text:00000000000029cc $d
ARM GAS  forth.s 			page 153


             forth.s:2922   .text:00000000000029e8 $d
             forth.s:2923   .text:00000000000029ec _BCOMP
             forth.s:2925   .text:00000000000029f6 $t
             forth.s:2926   .text:00000000000029f8 BCOMP
             forth.s:2928   .text:00000000000029fc $d
             forth.s:2936   .text:0000000000002a0c _COMPI
             forth.s:2938   .text:0000000000002a14 $t
             forth.s:2939   .text:0000000000002a14 COMPI
             forth.s:2941   .text:0000000000002a18 $d
             forth.s:2955   .text:0000000000002a44 _LITER
             forth.s:2957   .text:0000000000002a4c $t
             forth.s:2958   .text:0000000000002a4c LITER
             forth.s:2960   .text:0000000000002a50 $d
             forth.s:3345   .text:0000000000002e3c CALLC
             forth.s:2971   .text:0000000000002a64 STRCQ
             forth.s:2972   .text:0000000000002a64 $t
             forth.s:2973   .text:0000000000002a68 $d
             forth.s:2992   .text:0000000000002aa0 _FOR
             forth.s:2994   .text:0000000000002aa4 $t
             forth.s:2995   .text:0000000000002aa4 FOR
             forth.s:2997   .text:0000000000002aa8 $d
             forth.s:3005   .text:0000000000002ac0 _BEGIN
             forth.s:3007   .text:0000000000002ac6 $t
             forth.s:3008   .text:0000000000002ac8 BEGIN
             forth.s:3010   .text:0000000000002acc $d
             forth.s:3016   .text:0000000000002ad4 $d
             forth.s:3017   .text:0000000000002ad8 _FNEXT
             forth.s:3020   .text:0000000000002ae0 FNEXT
             forth.s:3022   .text:0000000000002ae4 $d
             forth.s:3030   .text:0000000000002afc _UNTIL
             forth.s:3032   .text:0000000000002b02 $t
             forth.s:3033   .text:0000000000002b04 UNTIL
             forth.s:3035   .text:0000000000002b08 $d
             forth.s:3043   .text:0000000000002b20 _AGAIN
             forth.s:3045   .text:0000000000002b26 $t
             forth.s:3046   .text:0000000000002b28 AGAIN
             forth.s:3048   .text:0000000000002b2c $d
             forth.s:3056   .text:0000000000002b44 _IFF
             forth.s:3059   .text:0000000000002b48 IFF
             forth.s:3061   .text:0000000000002b4c $d
             forth.s:3072   .text:0000000000002b74 _AHEAD
             forth.s:3074   .text:0000000000002b7a $t
             forth.s:3075   .text:0000000000002b7c AHEAD
             forth.s:3077   .text:0000000000002b80 $d
             forth.s:3088   .text:0000000000002ba8 _REPEA
             forth.s:3091   .text:0000000000002bb0 REPEA
             forth.s:3093   .text:0000000000002bb4 $d
             forth.s:3103   .text:0000000000002bcc _THENN
             forth.s:3106   .text:0000000000002bd4 THENN
             forth.s:3108   .text:0000000000002bd8 $d
             forth.s:3117   .text:0000000000002bec _AFT
             forth.s:3119   .text:0000000000002bf0 $t
             forth.s:3120   .text:0000000000002bf0 AFT
             forth.s:3122   .text:0000000000002bf4 $d
             forth.s:3132   .text:0000000000002c0c _ELSEE
             forth.s:3135   .text:0000000000002c14 ELSEE
             forth.s:3137   .text:0000000000002c18 $d
ARM GAS  forth.s 			page 154


             forth.s:3146   .text:0000000000002c2c _WHILE
             forth.s:3148   .text:0000000000002c32 $t
             forth.s:3149   .text:0000000000002c34 WHILE
             forth.s:3151   .text:0000000000002c38 $d
             forth.s:3159   .text:0000000000002c48 _ABRTQ
             forth.s:3162   .text:0000000000002c50 ABRTQ
             forth.s:3164   .text:0000000000002c54 $d
             forth.s:3172   .text:0000000000002c6c _STRQ
             forth.s:3175   .text:0000000000002c70 STRQ
             forth.s:3177   .text:0000000000002c74 $d
             forth.s:3185   .text:0000000000002c8c _DOTQ
             forth.s:3188   .text:0000000000002c90 DOTQ
             forth.s:3190   .text:0000000000002c94 $d
             forth.s:3201   .text:0000000000002cac _UNIQU
             forth.s:3203   .text:0000000000002cb4 $t
             forth.s:3204   .text:0000000000002cb4 UNIQU
             forth.s:3206   .text:0000000000002cb8 $d
             forth.s:3213   .text:0000000000002ce0 UNIQ1
             forth.s:3210   .text:0000000000002cd4 $d
             forth.s:3224   .text:0000000000002ce8 SNAME
             forth.s:3225   .text:0000000000002ce8 $t
             forth.s:3226   .text:0000000000002cec $d
             forth.s:3242   .text:0000000000002d30 SNAM1
             forth.s:3252   .text:0000000000002d44 _SCOMP
             forth.s:3255   .text:0000000000002d50 SCOMP
             forth.s:3257   .text:0000000000002d54 $d
             forth.s:3269   .text:0000000000002d8c SCOM2
             forth.s:3266   .text:0000000000002d84 SCOM1
             forth.s:3274   .text:0000000000002da0 SCOM3
             forth.s:3281   .text:0000000000002da8 COLON_ABORT
             forth.s:3282   .text:0000000000002da8 $t
             forth.s:3283   .text:0000000000002dac $d
             forth.s:3298   .text:0000000000002dd8 _OVERT
             forth.s:3300   .text:0000000000002dde $t
             forth.s:3303   .text:0000000000002de4 $d
             forth.s:3313   .text:0000000000002dfc _SEMIS
             forth.s:3315   .text:0000000000002dfe $t
             forth.s:3316   .text:0000000000002e00 SEMIS
             forth.s:3318   .text:0000000000002e04 $d
             forth.s:3328   .text:0000000000002e20 _RBRAC
             forth.s:3330   .text:0000000000002e22 $t
             forth.s:3331   .text:0000000000002e24 RBRAC
             forth.s:3333   .text:0000000000002e28 $d
             forth.s:3346   .text:0000000000002e3c $t
             forth.s:3347   .text:0000000000002e40 $d
             forth.s:3357   .text:0000000000002e58 _COLON
             forth.s:3359   .text:0000000000002e5a $t
             forth.s:3360   .text:0000000000002e5c COLON
             forth.s:3362   .text:0000000000002e60 $d
             forth.s:3372   .text:0000000000002e78 _IMMED
             forth.s:3374   .text:0000000000002e82 $t
             forth.s:3375   .text:0000000000002e84 IMMED
             forth.s:3377   .text:0000000000002e88 $d
             forth.s:3394   .text:0000000000002eb4 _CONST
             forth.s:3397   .text:0000000000002ec0 CONST
             forth.s:3399   .text:0000000000002ec4 $d
             forth.s:3410   .text:0000000000002ef4 $t
ARM GAS  forth.s 			page 155


             forth.s:3414   .text:0000000000002ef4 DODOES
             forth.s:3416   .text:0000000000002ef8 $d
             forth.s:3429   .text:0000000000002f1c $d
             forth.s:3430   .text:0000000000002f20 _DOES
             forth.s:3432   .text:0000000000002f26 $t
             forth.s:3433   .text:0000000000002f28 DOES
             forth.s:3435   .text:0000000000002f2c $d
             forth.s:3449   .text:0000000000002f5c _DEFERAT
             forth.s:3452   .text:0000000000002f64 DEFERAT
             forth.s:3454   .text:0000000000002f68 $d
             forth.s:3463   .text:0000000000002f80 _DEFERSTO
             forth.s:3466   .text:0000000000002f88 DEFERSTO
             forth.s:3468   .text:0000000000002f8c $d
             forth.s:3478   .text:0000000000002fa8 _DEFER
             forth.s:3480   .text:0000000000002fae $t
             forth.s:3481   .text:0000000000002fb0 DEFER
             forth.s:3483   .text:0000000000002fb4 $d
             forth.s:3506   .text:0000000000003000 CREAT
             forth.s:3494   .text:0000000000002fe8 DEFER_NOP
             forth.s:3495   .text:0000000000002fe8 $t
             forth.s:3496   .text:0000000000002fec $d
             forth.s:3503   .text:0000000000002ff8 _CREAT
             forth.s:3508   .text:0000000000003004 $d
             forth.s:3520   .text:0000000000003028 _VARIA
             forth.s:3523   .text:0000000000003034 VARIA
             forth.s:3525   .text:0000000000003038 $d
             forth.s:3542   .text:0000000000003058 DMP
             forth.s:3543   .text:0000000000003058 $t
             forth.s:3544   .text:000000000000305c $d
             forth.s:3556   .text:0000000000003094 PDUM2
             forth.s:3550   .text:000000000000307c PDUM1
             forth.s:3564   .text:00000000000030a0 $d
             forth.s:3565   .text:00000000000030a4 _DUMP
             forth.s:3568   .text:00000000000030ac DUMP
             forth.s:3570   .text:00000000000030b0 $d
             forth.s:3588   .text:0000000000003100 DUMP4
             forth.s:3578   .text:00000000000030d8 DUMP1
             forth.s:3590   .text:0000000000003108 DUMP3
             forth.s:3601   .text:0000000000003120 _DOTS
             forth.s:3605   .text:0000000000003124 DOTS
             forth.s:3607   .text:0000000000003128 $d
             forth.s:3615   .text:0000000000003148 DOTS2
             forth.s:3611   .text:000000000000313c DOTS1
             forth.s:3624   .text:000000000000315c _TNAME
             forth.s:3626   .text:0000000000003162 $t
             forth.s:3627   .text:0000000000003164 TNAME
             forth.s:3629   .text:0000000000003168 $d
             forth.s:3632   .text:0000000000003174 TNAM1
             forth.s:3643   .text:00000000000031a8 TNAM2
             forth.s:3652   .text:00000000000031b8 _DOTID
             forth.s:3654   .text:00000000000031bc $t
             forth.s:3655   .text:00000000000031bc DOTID
             forth.s:3657   .text:00000000000031c0 $d
             forth.s:3664   .text:00000000000031e4 DOTI1
             forth.s:3665   .text:00000000000031f2 $t
             forth.s:3666   .text:00000000000031f4 $d
             forth.s:3668   *ABS*:0000000000000000 WANT_SEE
ARM GAS  forth.s 			page 156


             forth.s:3748   .text:00000000000031fc _WORDS
             forth.s:3750   .text:0000000000003202 $t
             forth.s:3751   .text:0000000000003204 WORDS
             forth.s:3753   .text:0000000000003208 $d
             forth.s:3756   .text:0000000000003214 WORS1
             forth.s:3765   .text:000000000000323c WORS2
             forth.s:3778   .text:0000000000003240 VERSN
             forth.s:3779   .text:0000000000003240 $t
             forth.s:3780   .text:0000000000003244 $d
             forth.s:3787   .text:0000000000003254 _HI
             forth.s:3793   .text:000000000000325c $d
             forth.s:3794   .text:0000000000003276 $t
             forth.s:3795   .text:0000000000003278 $d
             forth.s:3824   .text:00000000000032dc COLD1
             forth.s:3825   .text:00000000000032dc $d
             forth.s:3836   .text:000000000000331c COLD2
             forth.s:3839   .text:000000000000331c $d
             forth.s:3842   .text:0000000000003320 $d
              init.s:166    .text:000000000000001f $d
              init.s:166    .text:0000000000000020 $t
             tvout.s:247    .text:0000000000000651 $d
             tvout.s:247    .text:0000000000000652 $t
             tvout.s:261    .text:0000000000000687 $d
             tvout.s:261    .text:0000000000000688 $t
             tvout.s:289    .text:00000000000006e1 $d
             tvout.s:289    .text:00000000000006e2 $t
             tvout.s:308    .text:000000000000070f $d
             tvout.s:308    .text:0000000000000710 $t
             tvout.s:408    .text:0000000000000845 $d
             tvout.s:408    .text:0000000000000846 $t
             tvout.s:554    .text:0000000000000a1b $d
             tvout.s:554    .text:0000000000000a1c $t
           ps2_kbd.s:177    .text:0000000000000d2b $d
           ps2_kbd.s:177    .text:0000000000000d2c $t
             forth.s:124    .text:00000000000011a5 $d
             forth.s:124    .text:00000000000011a6 $t
             forth.s:175    .text:0000000000001255 $d
             forth.s:175    .text:0000000000001256 $t
             forth.s:195    .text:0000000000001281 $d
             forth.s:195    .text:0000000000001282 $t
             forth.s:219    .text:00000000000012b7 $d
             forth.s:219    .text:00000000000012b8 $t
             forth.s:328    .text:0000000000001341 $d
             forth.s:328    .text:0000000000001342 $t
             forth.s:362    .text:000000000000136f $d
             forth.s:362    .text:0000000000001370 $t
             forth.s:375    .text:0000000000001383 $d
             forth.s:375    .text:0000000000001384 $t
             forth.s:386    .text:000000000000138f $d
             forth.s:386    .text:0000000000001390 $t
             forth.s:398    .text:00000000000013a1 $d
             forth.s:398    .text:00000000000013a2 $t
             forth.s:410    .text:00000000000013b5 $d
             forth.s:410    .text:00000000000013b6 $t
             forth.s:457    .text:00000000000013fd $d
             forth.s:457    .text:00000000000013fe $t
             forth.s:479    .text:000000000000141f $d
ARM GAS  forth.s 			page 157


             forth.s:479    .text:0000000000001420 $t
             forth.s:492    .text:0000000000001431 $d
             forth.s:492    .text:0000000000001432 $t
             forth.s:504    .text:0000000000001443 $d
             forth.s:504    .text:0000000000001444 $t
             forth.s:529    .text:0000000000001465 $d
             forth.s:529    .text:0000000000001466 $t
             forth.s:568    .text:00000000000014ab $d
             forth.s:568    .text:00000000000014ac $t
             forth.s:580    .text:00000000000014c1 $d
             forth.s:580    .text:00000000000014c2 $t
             forth.s:642    .text:000000000000151b $d
             forth.s:642    .text:000000000000151c $t
             forth.s:656    .text:000000000000152f $d
             forth.s:656    .text:0000000000001530 $t
             forth.s:667    .text:000000000000153d $d
             forth.s:667    .text:000000000000153e $t
             forth.s:678    .text:000000000000154d $d
             forth.s:678    .text:000000000000154e $t
             forth.s:689    .text:000000000000155d $d
             forth.s:689    .text:000000000000155e $t
             forth.s:722    .text:000000000000158d $d
             forth.s:722    .text:000000000000158e $t
             forth.s:756    .text:00000000000015c1 $d
             forth.s:756    .text:00000000000015c2 $t
             forth.s:767    .text:00000000000015d1 $d
             forth.s:767    .text:00000000000015d2 $t
             forth.s:778    .text:00000000000015e3 $d
             forth.s:778    .text:00000000000015e4 $t
             forth.s:804    .text:000000000000160b $d
             forth.s:804    .text:000000000000160c $t
             forth.s:839    .text:0000000000001647 $d
             forth.s:839    .text:0000000000001648 $t
             forth.s:852    .text:000000000000165b $d
             forth.s:852    .text:000000000000165c $t
             forth.s:879    .text:0000000000001689 $d
             forth.s:879    .text:000000000000168a $t
             forth.s:903    .text:00000000000016ad $d
             forth.s:903    .text:00000000000016ae $t
             forth.s:932    .text:00000000000016db $d
             forth.s:932    .text:00000000000016dc $t
             forth.s:1005   .text:000000000000174b $d
             forth.s:1005   .text:000000000000174c $t
             forth.s:1020   .text:0000000000001763 $d
             forth.s:1020   .text:0000000000001764 $t
             forth.s:1035   .text:000000000000177f $d
             forth.s:1035   .text:0000000000001780 $t
             forth.s:1108   .text:00000000000017db $d
             forth.s:1108   .text:00000000000017dc $t
             forth.s:1119   .text:00000000000017ef $d
             forth.s:1119   .text:00000000000017f0 $t
             forth.s:1154   .text:000000000000182b $d
             forth.s:1154   .text:000000000000182c $t
             forth.s:1178   .text:0000000000001849 $d
             forth.s:1178   .text:000000000000184a $t
             forth.s:1202   .text:0000000000001873 $d
             forth.s:1202   .text:0000000000001874 $t
ARM GAS  forth.s 			page 158


             forth.s:1251   .text:00000000000018c5 $d
             forth.s:1251   .text:00000000000018c6 $t
             forth.s:1274   .text:00000000000018ef $d
             forth.s:1274   .text:00000000000018f0 $t
             forth.s:1290   .text:0000000000001909 $d
             forth.s:1290   .text:000000000000190a $t
             forth.s:1303   .text:0000000000001925 $d
             forth.s:1303   .text:0000000000001926 $t
             forth.s:1322   .text:000000000000193f $d
             forth.s:1322   .text:0000000000001940 $t
             forth.s:1341   .text:000000000000196b $d
             forth.s:1341   .text:000000000000196c $t
             forth.s:1408   .text:0000000000001a1d $d
             forth.s:1408   .text:0000000000001a1e $t
             forth.s:1465   .text:0000000000001a97 $d
             forth.s:1465   .text:0000000000001a98 $t
             forth.s:1531   .text:0000000000001b41 $d
             forth.s:1531   .text:0000000000001b42 $t
             forth.s:1550   .text:0000000000001b69 $d
             forth.s:1550   .text:0000000000001b6a $t
             forth.s:1589   .text:0000000000001bbb $d
             forth.s:1589   .text:0000000000001bbc $t
             forth.s:1628   .text:0000000000001c09 $d
             forth.s:1628   .text:0000000000001c0a $t
             forth.s:1652   .text:0000000000001c3d $d
             forth.s:1652   .text:0000000000001c3e $t
             forth.s:1671   .text:0000000000001c61 $d
             forth.s:1671   .text:0000000000001c62 $t
             forth.s:1738   .text:0000000000001d2f $d
             forth.s:1738   .text:0000000000001d30 $t
             forth.s:1752   .text:0000000000001d4d $d
             forth.s:1752   .text:0000000000001d4e $t
             forth.s:1785   .text:0000000000001d9b $d
             forth.s:1785   .text:0000000000001d9c $t
             forth.s:1802   .text:0000000000001dc5 $d
             forth.s:1802   .text:0000000000001dc6 $t
             forth.s:1818   .text:0000000000001def $d
             forth.s:1818   .text:0000000000001df0 $t
             forth.s:1885   .text:0000000000001e87 $d
             forth.s:1885   .text:0000000000001e88 $t
             forth.s:2024   .text:0000000000002063 $d
             forth.s:2024   .text:0000000000002064 $t
             forth.s:2043   .text:0000000000002099 $d
             forth.s:2043   .text:000000000000209a $t
             forth.s:2063   .text:00000000000020cf $d
             forth.s:2063   .text:00000000000020d0 $t
             forth.s:2139   .text:000000000000214f $d
             forth.s:2139   .text:0000000000002150 $t
             forth.s:2177   .text:00000000000021af $d
             forth.s:2177   .text:00000000000021b0 $t
             forth.s:2337   .text:000000000000239b $d
             forth.s:2337   .text:000000000000239c $t
             forth.s:2380   .text:00000000000023fd $d
             forth.s:2380   .text:00000000000023fe $t
             forth.s:2395   .text:0000000000002421 $d
             forth.s:2395   .text:0000000000002422 $t
             forth.s:2631   .text:00000000000026ab $d
ARM GAS  forth.s 			page 159


             forth.s:2631   .text:00000000000026ac $t
             forth.s:2785   .text:0000000000002877 $d
             forth.s:2785   .text:0000000000002878 $t
             forth.s:2799   .text:00000000000028a1 $d
             forth.s:2799   .text:00000000000028a2 $t
             forth.s:2822   .text:00000000000028e7 $d
             forth.s:2822   .text:00000000000028e8 $t
             forth.s:2835   .text:0000000000002905 $d
             forth.s:2835   .text:0000000000002906 $t
             forth.s:2849   .text:0000000000002933 $d
             forth.s:2849   .text:0000000000002934 $t
             forth.s:3019   .text:0000000000002add $d
             forth.s:3019   .text:0000000000002ade $t
             forth.s:3058   .text:0000000000002b47 $d
             forth.s:3058   .text:0000000000002b48 $t
             forth.s:3090   .text:0000000000002baf $d
             forth.s:3090   .text:0000000000002bb0 $t
             forth.s:3105   .text:0000000000002bd1 $d
             forth.s:3105   .text:0000000000002bd2 $t
             forth.s:3134   .text:0000000000002c11 $d
             forth.s:3134   .text:0000000000002c12 $t
             forth.s:3161   .text:0000000000002c4f $d
             forth.s:3161   .text:0000000000002c50 $t
             forth.s:3174   .text:0000000000002c6f $d
             forth.s:3174   .text:0000000000002c70 $t
             forth.s:3187   .text:0000000000002c8f $d
             forth.s:3187   .text:0000000000002c90 $t
             forth.s:3254   .text:0000000000002d4d $d
             forth.s:3254   .text:0000000000002d4e $t
             forth.s:3396   .text:0000000000002ebd $d
             forth.s:3396   .text:0000000000002ebe $t
             forth.s:3451   .text:0000000000002f63 $d
             forth.s:3451   .text:0000000000002f64 $t
             forth.s:3465   .text:0000000000002f87 $d
             forth.s:3465   .text:0000000000002f88 $t
             forth.s:3505   .text:0000000000002fff $d
             forth.s:3505   .text:0000000000003000 $t
             forth.s:3522   .text:0000000000003031 $d
             forth.s:3522   .text:0000000000003032 $t
             forth.s:3567   .text:00000000000030a9 $d
             forth.s:3567   .text:00000000000030aa $t
             forth.s:3604   .text:0000000000003123 $d
             forth.s:3604   .text:0000000000003124 $t
             forth.s:3789   .text:0000000000003257 $d
             forth.s:3789   .text:0000000000003258 $t
             forth.s:3818   .text:00000000000032c5 $d
             forth.s:3818   .text:00000000000032c6 $t

UNDEFINED SYMBOLS
_mstack
