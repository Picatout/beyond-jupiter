ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              	// exception stack is at RAM_END and reserve 128 bytes 
  48              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) reserve 128 bytes growing down */
  49              		.equ TIBB ,	RPP-208	/*terminal input buffer (TIB) reserve 80 bytes */
  50              		.equ TIB_SIZE, 80  // 80 bytes,  input transaction buffer size. 
ARM GAS  forth.s 			page 9


  51              		.equ SPP ,	RPP-208	/*top of data stack (SP0) groing down */
  52              		.equ VID_BUFF, SPP-128-32000 /* video buffer */
  53              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  54              		.equ DTOP,  RAM_ADR+0x512 
  55              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  56              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  57              	
  58              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  59              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  60              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  61              	
  62              		.equ CELLL ,	4	/*size of a cell */
  63              		.equ BASEE ,	10	/*default radix */
  64              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  65              	
  66              		.equ BKSPP ,	8	/*backspace */
  67              		.equ LF ,	10	  /*line feed */
  68              		.equ CRR ,	13	/*carriage return */
  69              		.equ ERR ,	27	/*error escape */
  70              		.equ TIC ,	39	/*tick */
  71              	
  72              	/*************************************
  73              	   system variables offset from UPP
  74              	*************************************/
  75              	  .equ RNDSEED, 4    // prng seed 
  76              	  .equ TICKS, RNDSEED+4  // millseconds counter
  77              	  .equ CD_TIMER, TICKS+4  // count down timer
  78              	  .equ BOOT, CD_TIMER+4  // boot program address
  79              	  .equ STDIN, BOOT+4   //character ouput device 
  80              	  .equ STDOUT, STDIN+4 // character input device 
  81              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  82              	  .equ BCHAR, NBASE+4   // display base character flag 
  83              	  .equ TMP, BCHAR+4   // temporary variable
  84              	  .equ CSPAN, TMP+4  // character count received by expect  
  85              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  86              	  .equ SRC, TOIN+4    // SOURCE 
  87              	  .equ NTIBB, SRC  // #TIB  characters in TIB 
  88              	  .equ TIBUF, SRC+4   // TIB buffer address 
  89              	  .equ SRCID, TIBUF+4  // evaluation source string or user interface
  90              	  .equ EVAL, SRCID+4  // eval|compile vector 
  91              	  .equ VHOLD, EVAL+4   // hold pointer 
  92              	  .equ CTXT, VHOLD+4  // context pointer 
  93              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  94              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  95              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  96              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  97              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  98              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  99              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
 100              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
 101              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
 102              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
 103              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 104              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 105              	  .equ KBD_QUEUE_SIZE, 16 
 106              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 107              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
ARM GAS  forth.s 			page 10


 108              	  .equ KBD_QTAIL,KBD_QHEAD+4
 109              	  .equ ROW,KBD_QTAIL+4 
 110              	  .equ COL,ROW+4 
 111              	  .equ BK_COLOR,COL+4 
 112              	  .equ PEN_COLOR,BK_COLOR+4
 113              	  .equ VFPSW, PEN_COLOR+4 
 114              	  .equ VFBASE, VFPSW+4 
 115              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 116              	  .equ CSTATE, BEEP_DTMR+4 // compilation state 
 117              	
 118              	/***********************************************
 119              	* MACROS
 120              	*	Assemble inline direct threaded code ending.
 121              	***********************************************/
 122              		.macro _CALL fn /* low level routine call */ 
 123              	 	PUSH {LR}
 124              		BL \fn  
 125              		POP {LR}
 126              		.endm
 127              		
 128              		.macro _RET /* exit sub-routine */ 
 129              		BX LR 
 130              		.endm 
 131              	
 132              		// dictionary header  
 133              		.macro _HEADER  label, nlen, name
 134              			.word LINK 
 135              			.equ LINK , . 
 136              		_\label: .byte \nlen    // name field
 137              			.ascii "\name"
 138              			.p2align 2 
 139              		\label:   // code field 
 140              		.endm 
 141              		
 142              	
 143              	// local function header 
 144              		.macro _FUNC label 
 145              		.section .text, "ax", %progbits 
 146              		.p2align 2 
 147              		.type \label, %function  
 148              		\label:
 149              		.endm 
 150              	
 151              	// global function header 
 152              		.macro _GBL_FUNC label 
 153              		.global \label 
 154              		_FUNC \label 
 155              		.endm 
 156              	
 157              	
 158              	// load large constant to register 
 159              		.macro _MOV32 r, value 
 160              		mov \r,#(\value&0xffff)
 161              		movt \r,#(\value>>16)
 162              		.endm 
 163              	
 164              		.macro _NEXT /* direct jump INEXT */ 
ARM GAS  forth.s 			page 11


 165              		B INEXT   
 166              		.endm 
 167              	
 168              	 	.macro	_NEST /*start high level word */
 169              		BX INX  
 170              		NOP.N 
 171              		.endm
 172              	
 173              		.macro _ADR label 
 174              		.word 1+\label  
 175              		.endm 
 176              	
 177              	 	.macro	_UNNEST	/*end high level word */
 178              		_ADR UNNEST 
 179              		.endm
 180              	
 181              	 	.macro	_DOLIT u /*long literals */
 182              		_ADR	DOLIT
 183              		.word	\u 
 184              		.endm
 185              	
 186              		.macro _DOTQP len, text 
 187              		_ADR DOTQP 
 188              		.byte \len 
 189              		.ascii "\text" 
 190              		.p2align 2 
 191              		.endm
 192              	
 193              		.macro _COMPI name 
 194              		_DOLIT \name 
 195              		_ADR CALLC 
 196              		.endm 
 197              	
 198              		.macro _ABORQ len,name 
 199              		_ADR ABORQ 
 200              		.byte \len 
 201              		.ascii "\name"
 202              		.p2align 2 
 203              		.endm
 204              	
 205              		.macro _BRAN label 
 206              		_ADR BRAN 
 207              		.word \label 
 208              		.endm 
 209              	
 210              		.macro _QBRAN label 
 211              		_ADR QBRAN 
 212              		.word \label
 213              		.endm 
 214              	
 215              		.macro _TBRAN label 
 216              		_ADR TBRAN 
 217              		.word \label 
 218              		.endm 
 219              	
 220              		.macro _DONXT label 
 221              		_ADR DONXT
ARM GAS  forth.s 			page 12


 222              		.word \label 
 223              		.endm 
 224              	
 225              	 	.macro	_PUSH	/*push TOS on data stack*/
 226              		STR	TOS,[DSP,#-4]!
 227              		.endm
 228              	
 229              	 	.macro	_POP /*pop data stack to TOS */
 230              		LDR	TOS,[DSP],#4
 231              		.endm
 232              	
 233              		// calling a colon word 
 234              		// from a code word   
 235              		.macro _CALL_COLWORD target 
 236              	    ldr WP,=\target 
 237              		orr WP,#1
 238              		b \target  
 239              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
ARM GAS  forth.s 			page 13


  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
ARM GAS  forth.s 			page 14


 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF818C9 	  ldr IP,=dh
 159 000e 02F073BE 	  b INEXT  
 160              	dh:
 161 0012 594D0000 	  _ADR PRESE
 162 0016 85420000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 452D0000 	  _ADR CFSR 
 164 0038 AD300000 	  _ADR DUPP
 165 003c 29300000 	  _ADR TOR 
 166 0040 232F0000 	  _DOLIT 16 
 166      10000000 
 167 0048 19360000 	  _ADR BASE 
 168 004c A52F0000 	  _ADR STORE 
 169 0050 81430000 	  _ADR UDOT 
 170 0054 85420000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
ARM GAS  forth.s 			page 15


 170      200000BF 
 171 0064 E52F0000 	  _ADR RFROM
 172 0068 232F0000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 2D310000 	  _ADR ANDD
 174 0074 632F0000 	  _QBRAN 1f
 174      94000000 
 175 007c 652D0000 	  _ADR BFAR
 176 0080 232F0000 	  _DOLIT ','
 176      2C000000 
 177 0088 C12D0000 	  _ADR EMIT 
 178 008c A1410000 	  _ADR SPACE 
 179 0090 81430000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 85420000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 51200000 	  _ADR FPSCR
 184 00a8 81430000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF864C8 	  ldr IP,=fpu_except
 202 00c4 02F018BE 	  b INEXT 
 203              	fpu_except:  
 204 00c8 29420000 	  _ADR CR 
 205 00cc 19360000 	  _ADR BASE 
 206 00d0 B92F0000 	  _ADR AT 
 207 00d4 29300000 	  _ADR TOR  
 208 00d8 232F0000 	  _DOLIT 16 
 208      10000000 
 209 00e0 19360000 	  _ADR BASE 
 210 00e4 A52F0000 	  _ADR STORE
 211 00e8 232F0000 	  _DOLIT 4 
 211      04000000 
 212 00f0 BD310000 	  _ADR SUBB  
 213 00f4 85420000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 0100 B5430000 	  _ADR DOT 
 215 0104 85420000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
ARM GAS  forth.s 			page 16


 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 51200000 	  _ADR FPSCR 
 217 0124 AD300000 	  _ADR DUPP 
 218 0128 B5430000 	  _ADR DOT
 219 012c BD320000 	  _ADR QDUP 
 220 0130 632F0000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 232F0000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 C12D0000 	  _ADR EMIT 
 223 0144 232F0000 	  _DOLIT ' ' 
 223      20000000 
 224 014c C12D0000 	  _ADR EMIT
 225 0150 AD300000 	  _ADR DUPP 
 226 0154 232F0000 	  _DOLIT 0x10 
 226      10000000 
 227 015c 2D310000 	  _ADR ANDD
 228 0160 BD320000 	  _ADR QDUP  
 229 0164 632F0000 	  _QBRAN 1f 
 229      84010000 
 230 016c 232F0000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 AD310000 	  _ADR PLUS 
 232 0178 B92F0000 	  _ADR AT 
 233 017c 4D350000 	  _ADR COUNT 
 234 0180 F5410000 	  _ADR TYPEE
 235 0184 232F0000 	1: _DOLIT 15 
 235      0F000000 
 236 018c 2D310000 	  _ADR ANDD
 237 0190 F5330000 	  _ADR CLZ 
 238 0194 232F0000 	  _DOLIT 31 
 238      1F000000 
 239 019c BD300000 	  _ADR SWAP 
 240 01a0 BD310000 	  _ADR SUBB 
 241 01a4 232F0000 	  _DOLIT 2 
 241      02000000 
 242 01ac 9D310000 	  _ADR LSHIFT 
 243 01b0 232F0000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 AD310000 	  _ADR PLUS 
 245 01bc B92F0000 	  _ADR AT 
 246 01c0 4D350000 	  _ADR COUNT 
 247 01c4 F5410000 	  _ADR TYPEE 
 248 01c8 29420000 	2: _ADR CR 
 249 01cc 232F0000 	  _DOLIT 0
 249      00000000 
 250 01d4 71200000 	  _ADR CLR_FPSCR 
 251 01d8 E52F0000 	  _ADR RFROM  
 252 01dc 19360000 	  _ADR BASE 
 253 01e0 A52F0000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF840C7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
ARM GAS  forth.s 			page 17


 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
 297              	/*********************************
ARM GAS  forth.s 			page 18


 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8C8C6 	  ldr IP,=nmi_hl 
 306 0268 02F046BD 	  b  INEXT
 307              	nmi_hl:
 308 026c 594D0000 	  _ADR PRESE 
 309 0270 29420000 	  _ADR CR 
 310 0274 85420000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 29420000 	  _ADR CR 
 312 0298 F94A0000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF88CC6 	  ldr IP,=hardfault_hl 
 326 02aa 02F025BD 	  b INEXT
 327              	hardfault_hl:
 328 02ae 594D0000 	  _ADR PRESE
 329 02b2 29420000 	  _ADR CR  
 330 02b6 85420000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 29420000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF854C6 	  ldr IP,=memfault_hl 
ARM GAS  forth.s 			page 19


 345 02e6 02F007BD 	  b INEXT 
 346              	memfault_hl: 
 347 02ea 594D0000 	  _ADR PRESE
 348 02ee 29420000 	  _ADR CR  
 349 02f2 85420000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 232F0000 	  _DOLIT 16 
 350      10000000 
 351 0320 19360000 	  _ADR BASE 
 352 0324 A52F0000 	  _ADR STORE   
 353 0328 452D0000 	  _ADR CFSR
 354 032c 232F0000 	  _DOLIT 255 
 354      FF000000 
 355 0334 2D310000 	  _ADR ANDD 
 356 0338 81430000 	  _ADR UDOT 
 357 033c 29420000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8ECC5 	  ldr IP,=busfault_hl 
 372 0352 02F0D1BC 	  b INEXT 
 373              	busfault_hl:
 374 0356 594D0000 	  _ADR PRESE
 375 035a 232F0000 	  _DOLIT 1 
 375      01000000 
 376 0362 8D2E0000 	  _ADR ULED 
 377 0366 232F0000 	  _DOLIT  100 
 377      64000000 
 378 036e D1350000 	  _ADR MSEC 
 379 0372 652D0000 	  _ADR BFAR 
 380 0376 452D0000 	  _ADR CFSR 
 381 037a 29420000 	  _ADR CR  
 382 037e 85420000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 232F0000 	  _DOLIT 16 
 383      10000000 
 384 03a8 19360000 	  _ADR BASE 
 385 03ac A52F0000 	  _ADR STORE   
 386 03b0 232F0000 	  _DOLIT 0XFF00 
 386      00FF0000 
ARM GAS  forth.s 			page 20


 387 03b8 2D310000 	  _ADR ANDD   
 388 03bc 81430000 	  _ADR UDOT 
 389 03c0 85420000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 03cc 81430000 	  _ADR UDOT 
 391 03d0 29420000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF85CC5 	  ldr IP,=usagefault_hl
 405 03e6 02F087BC 	  b INEXT 
 406              	usagefault_hl:
 407 03ea 594D0000 	  _ADR PRESE
 408 03ee 29420000 	  _ADR CR  
 409 03f2 85420000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 232F0000 	  _DOLIT 16 
 410      10000000 
 411 0418 19360000 	  _ADR BASE 
 412 041c A52F0000 	  _ADR STORE   
 413 0420 452D0000 	  _ADR CFSR
 414 0424 232F0000 	  _DOLIT 16 
 414      10000000 
 415 042c 85310000 	  _ADR RSHIFT 
 416 0430 81430000 	  _ADR UDOT 
 417 0434 29420000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8B000 	    ldr r0,[r3,#BEEP_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
ARM GAS  forth.s 			page 21


 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8B000 	  ldr r0,[r3,#BEEP_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8B000 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF8A0C4 	  ldr IP,=ur
 474 04a4 02F028BC 	  b INEXT  
 475              	ur:
 476 04a8 594D0000 	  _ADR PRESE
 477 04ac 29420000 	  _ADR CR   
 478 04b0 232F0000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 4D350000 		_ADR COUNT 
 480 04bc F5410000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
ARM GAS  forth.s 			page 22


 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F067FD 	  bl  fpu_init 
 518 0524 00F02BFA 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F024FB 	  bl  flash_spi_init   
 522 0534 05F0D6BB 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF6B067 		_MOV32 DSP,SPP
 530      C2F20107 
 531 0548 4FF68078 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF8F4A3 	  ldr INX,=NEST
ARM GAS  forth.s 			page 23


 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
ARM GAS  forth.s 			page 24


 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
ARM GAS  forth.s 			page 25


 632 063c 41EA0001 	  orr r1,r0 
 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A649     		ldr r1,=UZERO 
 674 06b2 4FF0C002 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
 676 06ba 22F00302 		and r2,r2,#~3 
 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
 679 06c6 043A     		subs R2,#4 
ARM GAS  forth.s 			page 26


 680 06c8 F9D1     		bne 1b
 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
 728 0740 0EBC     	    pop {r1,r2,r3}
 729 0742 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
ARM GAS  forth.s 			page 27


 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
ARM GAS  forth.s 			page 28


 787 07b8 4FF00305 	    mov r5,#3 
 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
 840 083c 02FA0BF2 	    lsl r2,r11  
 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 0846 BDE82808 	    pop {r3,r5,r11}
ARM GAS  forth.s 			page 29


 844 084a 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 F45B0000 		.word HI_BOTH  /*'BOOT */
 874 0878 64180000 		.word PS2_QKEY /* query for character */
 875 087c 2C110000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 B0FE0120 		.word TIBB	/*TIBU */
 883 089c 00000000 	  .word 0     // SRCID 
 884 08a0 7C4B0000 		.word INTER	/*'EVAL */
 885 08a4 00000000 		.word 0			/*HLD */
 886 08a8 DC5C0000 		.word _LASTN	/*CONTEXT */
 887 08ac 485D0000 		.word CTOP  	/* FCP end of system dictionnary */
 888 08b0 E4540020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 889 08b4 DC5C0000 		.word _LASTN	/*LAST word in dictionary */
 890 08b8 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 890      00000000 
 890      00000000 
 890      00000000 
 891 08c8 00000000 		.word 0  /* RX_HEAD */
 892 08cc 00000000 		.word 0  /* RX_TAIL */ 
 893 08d0 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 894 08d4 00000000 		.word 0  /* VID_STATE, video state */  
 895 08d8 00000000 	    .word 0  /* VID_FIELD, field */
 896 08dc 30810120 		.word VID_BUFF /* video_buffer address */ 
 897 08e0 00000000 	    .word 0 /* kbd struct */
ARM GAS  forth.s 			page 30


 898 08e4 00000000 		.space KBD_QUEUE_SIZE,0  
 898      00000000 
 898      00000000 
 898      00000000 
 899 08f4 00000000 		.word 0  /* kbd queue head */
 900 08f8 00000000 		.word 0 /* kbd queue tail */ 
 901 08fc 00000000 	    .word 0 /* tv cursor row */
 902 0900 00000000 	    .word 0 /* tv cursor column */ 
 903 0904 00000000 	    .word 0 /* tv back color */
 904 0908 07000000 	    .word 7 /* tv font color */
 905 090c 00000000 	    .word 0 /* FPSW */
 906 0910 00000000 	    .word 0 /* FBASE */ 
 907 0914 00000000 	    .word 0 /* BEEP_DTMR */
 908 0918 00000000 	    .word 0 /* CSTATE */ 
 909 091c 00000000 	    .word 0,0 
 909      00000000 
 910              	ULAST:
 911              	
 912              	// used by _HEADER macro 
 913              	// to link names field
 914              	// in dictionary  
 915 0924 12000000 	    .equ LINK, 0 
 915      C8000000 
 915      944D0000 
 915      6C020000 
 915      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
ARM GAS  forth.s 			page 31


  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0950 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0958 1868     		ldr r0,[r3,#USART_SR]
  38 095a 5968     		ldr r1,[r3,#USART_DR]
  39 095c 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0960 0CD0     		beq 2f // no char received 
  41 0962 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0966 3FF496AD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 096a 04F15400 		add r0,UP,#RX_QUEUE
  44 096e A26E     		ldr r2,[UP,#RX_TAIL]
  45 0970 8154     		strb r1,[r0,r2]
  46 0972 02F10102 		add r2,#1 
  47 0976 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 097a A266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 097c 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 097e 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0986 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0988 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 098c 01EA0201 	  and r1,r1,r2
  62 0990 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0994 41EA0201 	  orr r1,r1,r2 
  64 0998 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 099a 4FF4EE61 	  mov r1,#0x77<<4 
  67 099e 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 09a0 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 09a8 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 09ac 8160     	  str r1,[r0,#USART_BRR]
  73 09ae 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 09b2 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 09b4 4FF02500 	  mov r0,#USART1_IRQ 
  77 09b8 4FF00701 	  mov r1,#7
  78 09bc 00B5FFF7 	  _CALL nvic_set_priority
  78      93FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 09c6 4FF02500 	  mov r0,#USART1_IRQ 
  81 09ca 00B5FFF7 	  _CALL nvic_enable_irq  
  81      A5FE5DF8 
  81      04EB
ARM GAS  forth.s 			page 32


  82 09d4 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 09d6 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 09e4 47F8046D 		_PUSH
  92 09e8 A06E     		ldr T0,[UP,#RX_TAIL] 
  93 09ea 616E     		ldr T1,[UP,#RX_HEAD]
  94 09ec 90EA0106 		eors TOS,T0,T1 
  95 09f0 0CD0     		beq 1f
  96 09f2 04F15400 		add T0,UP,#RX_QUEUE 
  97 09f6 0844     		add T0,T1 
  98 09f8 0678     		ldrb TOS,[T0]
  99 09fa 01F10101 		add T1,#1 
 100 09fe 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0a02 6166     		str T1,[UP,#RX_HEAD]
 102 0a04 47F8046D 		_PUSH 
 103 0a08 4FF0FF36 		mov TOS,#-1
 104 0a0c 02F074B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0a10 DA090000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0a20 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0a28 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0a2a 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0a2e FBD0     		beq 1b 
 115 0a30 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0a32 57F8046B 		_POP
 117 0a36 02F05FB9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0a3a 140A0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0a44 47F8046D 	        _PUSH 
 126 0a48 4FF00006 	        mov TOS,#0
 127 0a4c 02F054B9 	        _NEXT 
 128              	
 129              	/****************************************
ARM GAS  forth.s 			page 33


 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0a50 3E0A0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0a5c 47F8046D 	        _PUSH 
 135 0a60 4FF00106 	        mov TOS,#1
 136 0a64 02F048B9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0a68 540A0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0a74 3046     	        mov T0,TOS
 144 0a76 57F8046B 	        _POP 
 145 0a7a 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0a7c 4B48     	        ldr T0,=SER_QKEY 
 148 0a7e 6061     	        str T0,[UP,#STDIN]
 149 0a80 4B48     	        ldr T0,=SER_EMIT
 150 0a82 A061     	        str T0,[UP,#STDOUT]
 151 0a84 02F038B9 	        _NEXT 
 152              	4: // local console 
 153 0a88 4A48     	        ldr T0,=PS2_QKEY
 154 0a8a 6061     	        str T0,[UP,#STDIN]
 155 0a8c 4A48     	        ldr T0,=TV_EMIT
 156 0a8e A061     	        str T0,[UP,#STDOUT]
 157 0a90 02F032B9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0a94 6C0A0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0aa4 504700BF 	      _NEST 
 166 0aa8 232F0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0ab0 09320000 	1:    _ADR ONEP  // c+1
 168 0ab4 29300000 	      _ADR TOR   
 169 0ab8 232F0000 	      _DOLIT 10 
 169      0A000000 
 170 0ac0 4D3A0000 	      _ADR SLMOD // r q  
 171 0ac4 BD320000 	      _ADR QDUP  // r q q | r 0  
 172 0ac8 632F0000 	      _QBRAN 2f  // r 0 
 172      DC0A0000 
 173 0ad0 E52F0000 	      _ADR RFROM // r q c 
 174 0ad4 8B2F0000 	      _BRAN 1b
 174      B00A0000 
 175 0adc 232F0000 	2:    _DOLIT '0'  
ARM GAS  forth.s 			page 34


 175      30000000 
 176 0ae4 AD310000 	      _ADR PLUS 
 177 0ae8 C12D0000 	      _ADR EMIT 
 178 0aec E52F0000 	      _ADR RFROM 
 179 0af0 BD320000 	      _ADR QDUP 
 180 0af4 632F0000 	      _QBRAN 3f
 180      0C0B0000 
 181 0afc 19320000 	      _ADR ONEM 
 182 0b00 29300000 	      _ADR TOR 
 183 0b04 8B2F0000 	      _BRAN 2b 
 183      DC0A0000 
 184              	3:    
 185 0b0c FF2C0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0b10 980A0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0b1c 504700BF 	      _NEST 
 193 0b20 232F0000 	      _DOLIT 27 
 193      1B000000 
 194 0b28 C12D0000 	      _ADR EMIT 
 195 0b2c 232F0000 	      _DOLIT '['
 195      5B000000 
 196 0b34 C12D0000 	      _ADR EMIT 
 197 0b38 FF2C0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0b3c 140B0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0b48 504700BF 	      _NEST
 205 0b4c 1D0B0000 	      _ADR ANSI_ESC
 206 0b50 BD300000 	      _ADR SWAP 
 207 0b54 A50A0000 	      _ADR ANSI_PARAM 
 208 0b58 232F0000 	      _DOLIT ';'
 208      3B000000 
 209 0b60 C12D0000 	      _ADR EMIT
 210 0b64 A50A0000 	      _ADR ANSI_PARAM
 211 0b68 232F0000 	      _DOLIT 'H'
 211      48000000 
 212 0b70 C12D0000 	      _ADR EMIT 
 213 0b74 FF2C0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0b78 400B0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
ARM GAS  forth.s 			page 35


 220 0b84 504700BF 	    _NEST
 221 0b88 232F0000 	    _DOLIT 1 
 221      01000000 
 222 0b90 AD300000 	    _ADR DUPP 
 223 0b94 490B0000 	    _ADR SER_AT  
 224 0b98 1D0B0000 	    _ADR ANSI_ESC
 225 0b9c 232F0000 	    _DOLIT 'J'
 225      4A000000 
 226 0ba4 C12D0000 	    _ADR EMIT 
 227 0ba8 FF2C0000 	    _UNNEST 
 228 0bac E4090000 	
 228      200A0000 
 228      64180000 
 228      2C110000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  forth.s 			page 36


  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
ARM GAS  forth.s 			page 37


  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0bbc 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0bc4 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0bc6 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0bce 41EA0201 	  orr r1,r2
  82 0bd2 0160     	  str r1,[r0,#GPIO_MODER]
  83 0bd4 81EA0101 	  eor r1,r1 
  84 0bd8 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0bda 4FF00101 	  mov r1,#1 // pin 1 
  88 0bde 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0be2 00B5FFF7 	  _CALL gpio_config 
  89      DCFD5DF8 
  89      04EB
  90 0bec 4FF00101 	  mov r1,#1 
  91 0bf0 4FF00202 	  mov r2,#2
  92 0bf4 00B5FFF7 	  _CALL gpio_speed 
  92      12FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0bfe 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0c00 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0c04 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0c06 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0c0e 4FF00200 	  mov r0,#2 
 100 0c12 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0c14 41EA0001 	  orr r1,r0 
 102 0c18 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0c1a 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0c22 41F2D470 	  mov r0,#HPER
 106 0c26 D062     	  str r0,[r2,#TIM_ARR]
 107 0c28 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0c2c D063     	  str r0,[r2,#TIM_CCR3]
 109 0c2e 4FF4E170 	  mov r0,#HPULSE 
 110 0c32 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0c34 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0c38 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0c3a 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0c3e 1062     	  str r0,[r2,#TIM_CCER]
 115 0c40 4FF00100 	  mov r0,#1 
 116 0c44 D060     	  str r0,[r2,#TIM_DIER]
 117 0c46 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0c48 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0c4c 4FF00201 	  mov r1,#2
 121 0c50 00B5FFF7 	  _CALL nvic_set_priority
ARM GAS  forth.s 			page 38


 121      49FD5DF8 
 121      04EB
 122 0c5a 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0c5e 00B5FFF7 	  _CALL nvic_enable_irq
 123      5BFD5DF8 
 123      04EB
 124 0c68 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0c6a 00BF     	  _GBL_FUNC tv_out_isr
 132 0c6c 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0c74 81EA0101 	  eor T1,T1
 134 0c78 0161     	  str T1,[T0,#TIM_SR]
 135 0c7a E16E     	  ldr T1,[UP,#VID_CNTR]
 136 0c7c 01F10101 	  add T1,#1 
 137 0c80 E166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0c82 226F     	  ldr T2,[UP,#VID_STATE]
 140 0c84 002A     	  cmp T2,#ST_VSYNC 
 141 0c86 07D0     	  beq state_vsync
 142 0c88 012A     	  cmp T2,#ST_PREVID 
 143 0c8a 2FD0     	  beq state_pre_video 
 144 0c8c 022A     	  cmp T2,#ST_VIDEO 
 145 0c8e 36D0     	  beq state_video_out 
 146 0c90 032A     	  cmp T2,#ST_POSTVID 
 147 0c92 63D0     	  beq state_post_video
 148 0c94 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0c98 0129     	  cmp T1,#1
 152 0c9a 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0c9c 4FF0DB01 	  mov T1,#SERRATION
 155 0ca0 0164     	  str T1,[T0,#TIM_CCR4]
 156 0ca2 40F6E931 	  mov T1,#SYNC_LINE 
 157 0ca6 C162     	  str T1,[T0,#TIM_ARR]
 158 0ca8 6BE0     	  b tv_isr_exit 
 159 0caa 0729     	1: cmp T1,#7
 160 0cac 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0cae 40F62821 	  mov T1,#VSYNC_PULSE
 163 0cb2 0164     	  str T1,[T0,#TIM_CCR4]
 164 0cb4 65E0     	  b tv_isr_exit
 165 0cb6 0D29     	2: cmp T1,#13
 166 0cb8 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0cba 4FF0DB01 	   mov T1,#SERRATION 
 169 0cbe 0164     	   str T1,[T0,#TIM_CCR4]
 170 0cc0 5FE0     	   b tv_isr_exit   
 171 0cc2 1229     	3: cmp T1,#18
 172 0cc4 03D1     	   bne 4f 
 173              	// if even field full line  
ARM GAS  forth.s 			page 39


 174 0cc6 616F     	   ldr T1,[UP,#VID_FIELD]
 175 0cc8 0029     	   cmp T1,#ODD_FIELD  
 176 0cca 5AD0     	   beq tv_isr_exit 
 177 0ccc 01E0     	   b sync_end 
 178 0cce 1329     	4: cmp T1,#19 
 179 0cd0 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0cd2 4FF00901 	   mov T1,#9
 182 0cd6 E166     	   str T1,[UP,#VID_CNTR]
 183 0cd8 4FF4E171 	   mov T1,#HPULSE 
 184 0cdc 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0cde 41F2D471 	   mov T1,#HPER 
 186 0ce2 C162     	   str T1,[T0,#TIM_ARR] 
 187 0ce4 4FF00101 	   mov T1,#ST_PREVID 
 188 0ce8 2167     	   str T1,[UP,#VID_STATE]
 189 0cea 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0cec 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0cee 48D4     	   bmi tv_isr_exit 
 194 0cf0 4FF00201 	   mov T1,#ST_VIDEO 
 195 0cf4 2167     	   str T1,[UP,#VID_STATE]
 196 0cf6 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0cfa C160     	   str T1,[T0,#TIM_DIER]
 198 0cfc 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0cfe F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0d00 06D9     	   bls 1f 
 205 0d02 4FF00301 	   mov T1,#ST_POSTVID 
 206 0d06 2167     	   str T1,[UP,#VID_STATE]
 207 0d08 4FF00101 	   mov T1,#1 
 208 0d0c C160     	   str T1,[T0,#TIM_DIER]
 209 0d0e 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0d10 A06F     	   ldr T0,[UP,#VID_BUFFER]
 212 0d12 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0d16 4FF0A003 	   mov T3,#160
 214 0d1a 03FB01F1 	   mul T1,T3 
 215 0d1e 0844     	   add T0,T1  
 216 0d20 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0d28 10F8012B 	2: ldrb T2,[T0],#1 
 222 0d2c 4FEA0222 	   lsl T2,#8 
 223 0d30 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0d32 AFF30080 	   nop.w 
 225 0d36 AFF30080 	   nop.w
 226 0d3a AFF30080 	   nop.w 
 227 0d3e AFF30080 	   nop.w 
 228 0d42 4FEA0212 	   lsl T2,#4  
 229 0d46 8A82     	   strh T2,[T1,#GPIO_ODR]
ARM GAS  forth.s 			page 40


 230 0d48 AFF30080 	   nop.w
 231 0d4c AFF30080 	   nop.w  
 232 0d50 013B     	   subs T3,#1
 233 0d52 E9D1     	   bne 2b  
 234 0d54 4FF47022 	   mov T2,#(15<<16) 
 235 0d58 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0d5a 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0d5c 4FF48372 	   mov T2,#262
 239 0d60 9142     	   cmp T1,T2
 240 0d62 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0d64 616F     	   ldr T1,[UP,VID_FIELD]
 243 0d66 11B9     	   cbnz T1, frame_end 
 244 0d68 40F6E931 	   mov T1,#SYNC_LINE
 245 0d6c C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0d6e 4FF00001 	   mov T1,#ST_VSYNC 
 248 0d72 2167     	   str T1,[UP,#VID_STATE]
 249 0d74 81EA0101 	   eor T1,T1 
 250 0d78 E166     	   str T1,[UP,#VID_CNTR]
 251 0d7a 616F     	   ldr T1,[UP,#VID_FIELD]
 252 0d7c 6FEA0101 	   mvn T1,T1  
 253 0d80 6167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0d82 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0d84 7C0B0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0d94 47F8046D 		_PUSH 
 266 0d98 04F1A006 		ADD TOS,UP,#BK_COLOR
 267 0d9c 01F0ACBF 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0da0 880D0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0db0 47F8046D 		_PUSH 
 273 0db4 04F1A406 		ADD TOS,UP,#PEN_COLOR
 274 0db8 01F09EBF 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0dbc A40D0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
ARM GAS  forth.s 			page 41


 279 0dc8 47F8046D 	  _PUSH 
 280 0dcc 04F19C06 	  ADD TOS,UP,#COL 
 281 0dd0 01F092BF 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0dd4 C00D0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0ddc 47F8046D 	  _PUSH 
 287 0de0 04F19806 	  ADD TOS,UP,#ROW 
 288 0de4 01F088BF 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0de8 D80D0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0df4 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0df8 00FB06F6 	  mul TOS,T0 
 295 0dfc 01F07CBF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0e00 EC0D0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0e0c 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0e10 00FB06F6 	  mul TOS,T0 
 302 0e14 01F070BF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0e18 040E0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0e24 47F8046D 	  _PUSH 
 308 0e28 DFF88C65 	  ldr TOS,=font_6x8 
 309 0e2c 01F064BF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0e30 1C0E0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0e3c 47F8046D 	  _PUSH 
 315 0e40 A66F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0e42 01F059BF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0e46 340E0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
ARM GAS  forth.s 			page 42


 325      5400
 326              	// compute video buffer byte address from coords
 327 0e50 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0e52 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0e56 02FB00F0 	    mul T0,T2 
 330 0e5a 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0e5e 1044     	    add T0,T2 
 332 0e60 A36F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0e62 0344     	    add T3,T0 // T3 -> byte address 
 334 0e64 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0e66 4FF00F02 	    mov T2,#15 // AND mask 
 336 0e6a 11F0010F 	    tst T1,#1 
 337 0e6e 01D0     	    beq 1f 
 338 0e70 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0e74 DFF84405 	1:  ldr T0,=plot_op 
 340 0e78 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0e7c 05EA0205 	    and WP,T2 // mask out nibble 
 343 0e80 94F8A000 	    ldrb T0,[UP,#BK_COLOR]
 344 0e84 11F0010F 	    tst T1,#1 
 345 0e88 01D1     	    bne 1f 
 346 0e8a 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0e8e 45EA0005 	1:  orr WP,T0  
 348 0e92 1D70     	    strb WP,[T3]
 349 0e94 1AE0     	    b 9f 
 350              	op_pen: 
 351 0e96 05EA0205 	    and WP,T2 
 352 0e9a 94F8A400 	    ldrb T0,[UP,#PEN_COLOR]
 353 0e9e 11F0010F 	    tst T1,#1
 354 0ea2 01D1     	    bne 1f 
 355 0ea4 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0ea8 45EA0005 	1:	orr WP,T0 
 357 0eac 1D70     	    strb WP,[T3]
 358 0eae 0DE0     	    b 9f 
 359              	op_invert:
 360 0eb0 85EA0205 	    eor WP,T2 
 361 0eb4 1D70     	    strb WP,[T3]
 362 0eb6 09E0     	    b 9f 
 363              	op_xor:
 364 0eb8 D4F8A400 	    ldr T0,[UP,#PEN_COLOR]
 365 0ebc 11F0010F 	    tst T1,#1 
 366 0ec0 01D1     	    bne 1f 
 367 0ec2 4FEA0010 	    lsl T0,#4 
 368 0ec6 85EA0005 	1:  eor WP,T0 
 369 0eca 1D70     	    strb WP,[T3]
 370 0ecc 57F8046B 	9:  _POP 
 371 0ed0 01F012BF 	    _NEXT 
 372              	
 373 0ed4 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ed8 4A0E0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0ee4 E06E     	1:  ldr T0,[UP,#VID_CNTR]
ARM GAS  forth.s 			page 43


 380 0ee6 0028     	    cmp T0,#0
 381 0ee8 FCD1     	    bne 1b
 382 0eea 01F005BF 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0eee DC0E0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0ef8 80EA0000 	    eor T0,T0 
 388 0efc 94F8A010 	    ldrb T1,[UP,#BK_COLOR]
 389 0f00 40EA0100 	    orr T0,T1 
 390 0f04 4FEA0111 	    lsl T1,#4 
 391 0f08 40EA0100 	    orr T0,T1 
 392 0f0c 4FEA0021 	    lsl T1,T0,#8 
 393 0f10 40EA0100 	    orr T0,T1 
 394 0f14 4FEA0041 	    lsl T1,T0,#16
 395 0f18 40EA0100 	    orr T0,T1 
 396 0f1c 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0f20 A26F     	    ldr T2,[UP,#VID_BUFFER]
 398 0f22 5050     	1:	str T0,[T2,T1]
 399 0f24 0439     	    subs T1,#4
 400 0f26 FCD1     	    bne 1b
 401 0f28 1060     	    str T0,[T2]
 402 0f2a 80EA0000 	    eor T0,T0 
 403 0f2e C4F89800 	    str T0,[UP,#ROW]
 404 0f32 C4F89C00 	    str T0,[UP,#COL]
 405 0f36 01F0DFBE 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0f3a F20E0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0f48 504700BF 	  _NEST
 412 0f4c 232F0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0f54 AD300000 	  _ADR DUPP  
 414 0f58 29300000 	  _ADR TOR 
 415 0f5c CD310000 	  _ADR STAR
 416 0f60 3D0E0000 	  _ADR VIDBUFF
 417 0f64 AD310000 	  _ADR PLUS
 418 0f68 E52F0000 	  _ADR RFROM   
 419 0f6c 232F0000 	  _DOLIT 0 
 419      00000000 
 420 0f74 093D0000 	  _ADR FILL 
 421 0f78 FF2C0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0f7c 3E0F0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
ARM GAS  forth.s 			page 44


 427      500000BF 
 428 0f8c 504700BF 	    _NEST 
 429 0f90 3D0E0000 	    _ADR VIDBUFF 
 430 0f94 AD300000 	    _ADR DUPP 
 431 0f98 232F0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0fa0 AD300000 	    _ADR DUPP 
 433 0fa4 29300000 	    _ADR TOR 
 434 0fa8 AD310000 	    _ADR PLUS 
 435 0fac BD300000 	    _ADR SWAP 
 436 0fb0 232F0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0fb8 E52F0000 	    _ADR RFROM  
 438 0fbc BD310000 	    _ADR SUBB 
 439 0fc0 C13C0000 	    _ADR MOVE
 440 0fc4 232F0000 	    _DOLIT 24 
 440      18000000 
 441 0fcc 490F0000 	    _ADR CLRLINE 
 442 0fd0 FF2C0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0fd4 800F0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0fe4 504700BF 	    _NEST 
 450 0fe8 3D0E0000 	    _ADR VIDBUFF
 451 0fec AD300000 	    _ADR DUPP 
 452 0ff0 232F0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0ff8 AD310000 	    _ADR PLUS 
 454 0ffc 232F0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 1004 232F0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 100c BD310000 	    _ADR SUBB  
 457 1010 C13C0000 	    _ADR MOVE
 458 1014 232F0000 	    _DOLIT 0 
 458      00000000 
 459 101c 490F0000 	    _ADR CLRLINE
 460 1020 FF2C0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 1024 D80F0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 1030 E34D     	    ldr WP,=SCROLLUP 
 469 1032 45F00105 	    orr WP,#1
 470 1036 80EA0000 	    eor T0,T0 
 471 103a C4F89C00 	    str T0,[UP,#COL]
ARM GAS  forth.s 			page 45


 472 103e D4F89800 	    ldr T0,[UP,#ROW]
 473 1042 1828     	    cmp T0,#24 
 474 1044 A2D0     	    beq SCROLLUP  
 475 1046 00F10100 	    add T0,#1 
 476 104a C4F89800 	    str T0,[UP,#ROW]
 477 104e 01F053BE 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 1052 28100000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 105c D4F89C00 	  ldr T0,[UP,#COL]
 484 1060 00F10100 	  add T0,#1
 485 1064 3528     	  cmp T0,#53
 486 1066 E3D5     	  bpl TV_CRLF  
 487 1068 C4F89C00 	  str T0,[UP,#COL]
 488 106c 01F044BE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 1070 56100000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 107c D4F89C00 	    ldr T0,[UP,#COL]
 497 1080 28B1     	    cbz T0,1f 
 498 1082 A0F10100 	    sub T0,#1 
 499 1086 C4F89C00 	    str T0,[UP,#COL]
 500 108a 01F035BE 	    _NEXT 
 501 108e D4F89800 	1:  ldr T0,[UP,#ROW]
 502 1092 38B1     	    cbz T0,9f
 503 1094 A0F10100 	    sub T0,#1
 504 1098 C4F89800 	    str T0,[UP,#ROW]
 505 109c 4FF03400 	    mov T0,#52 
 506 10a0 C4F89C00 	    str T0,[UP,#COL]
 507 10a4 01F028BE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 10a8 4FF08000 	    mov T0,#128 
 513 10ac 06EA0006 	    and TOS,T0 
 514 10b0 4FEAD616 	    lsr TOS,#7
 515 10b4 01F020BE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 10b8 3868     	  ldr T0,[DSP]
 520 10ba 00F10100 	  add T0,#1 
 521 10be 3860     	  str T0,[DSP]
 522 10c0 01F01ABE 	  _NEXT 
 523              	
 524              	// shift font row data
ARM GAS  forth.s 			page 46


 525              	NEXT_PIXEL:
 526 10c4 4FEA4606 	    lsl TOS,#1
 527 10c8 01F016BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 10cc 504700BF 	    _NEST 
 536 10d0 232F0000 	    _DOLIT 5 
 536      05000000 
 537 10d8 29300000 	    _ADR TOR 
 538 10dc 29300000 	1:  _ADR TOR 
 539 10e0 21330000 	    _ADR DDUP 
 540 10e4 15300000 	    _ADR RAT
 541 10e8 A9100000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 10ec 510E0000 	    _ADR PLOT 
 543 10f0 B9100000 	    _ADR INCR_X 
 544 10f4 E52F0000 	    _ADR RFROM 
 545 10f8 C5100000 	    _ADR NEXT_PIXEL
 546 10fc 452F0000 	    _DONXT 1b
 546      DC100000 
 547 1104 0D330000 	    _ADR TDROP 
 548 1108 FF2C0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 110c A6F12006 	   sub TOS,#32
 553 1110 4FF00800 	   mov T0,#8 
 554 1114 00FB06F6 	   mul TOS,T0 
 555 1118 A748     	   ldr T0,=font_6x8
 556 111a 0644     	   add TOS,T0 
 557 111c 01F0ECBD 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 1120 74100000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 112c 504700BF 	    _NEST
 565 1130 AD300000 	    _ADR DUPP 
 566 1134 232F0000 	    _DOLIT 32 
 566      20000000 
 567 113c 71340000 	    _ADR ULESS
 568 1140 632F0000 	    _QBRAN 1f
 568      50110000 
 569 1148 8B2F0000 	    _BRAN CTRL_KEY
 569      B4110000 
 570 1150 0D110000 	1:  _ADR CHAR_FONT 
 571 1154 C90D0000 	    _ADR CURSOR_COL 
 572 1158 B92F0000 	    _ADR AT
 573 115c 0D0E0000 	    _ADR COLX  // x coord 
 574 1160 DD0D0000 	    _ADR CURSOR_ROW 
ARM GAS  forth.s 			page 47


 575 1164 B92F0000 	    _ADR AT    
 576 1168 F50D0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 116c D1320000 	    _ADR ROT  // TEST 
 578 1170 232F0000 	    _DOLIT 7   
 578      07000000 
 579 1178 29300000 	    _ADR TOR  
 580 117c 29300000 	1:  _ADR TOR  // { x y }
 581 1180 21330000 	    _ADR DDUP  // { x y x y }
 582 1184 15300000 	    _ADR RAT 
 583 1188 D92F0000 	    _ADR CAT   // { x y x y r }
 584 118c CD100000 	    _ADR CHAR_ROW 
 585 1190 09320000 	    _ADR ONEP // {x y' }
 586 1194 E52F0000 	    _ADR RFROM 
 587 1198 09320000 	    _ADR ONEP // {x y' c-adr' }
 588 119c 452F0000 	    _DONXT 1b
 588      7C110000 
 589 11a4 0D330000 	    _ADR TDROP  
 590 11a8 5D100000 	    _ADR RIGHT
 591 11ac 9D120000 	9:  _ADR SHOW_CURSOR 
 592 11b0 FF2C0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 11b4 25130000 	    _ADR HIDE_CURSOR
 595 11b8 AD300000 	    _ADR DUPP 
 596 11bc 232F0000 	    _DOLIT BKSPP  
 596      08000000 
 597 11c4 39340000 	    _ADR EQUAL 
 598 11c8 632F0000 	    _QBRAN 1f 
 598      E0110000 
 599 11d0 7D120000 	    _ADR BACK_SPACE 
 600 11d4 9D300000 	8:  _ADR DROP 
 601 11d8 8B2F0000 	    _BRAN 9b 
 601      AC110000 
 602 11e0 AD300000 	1:  _ADR DUPP 
 603 11e4 232F0000 	    _DOLIT CRR 
 603      0D000000 
 604 11ec 39340000 	    _ADR EQUAL 
 605 11f0 632F0000 	    _QBRAN 1f 
 605      04120000 
 606 11f8 25120000 	    _ADR CAR_RET
 607 11fc 8B2F0000 	    _BRAN 8b
 607      D4110000 
 608 1204 232F0000 	1:  _DOLIT LF 
 608      0A000000 
 609 120c 39340000 	    _ADR EQUAL 
 610 1210 632F0000 	    _QBRAN 9b 
 610      AC110000 
 611 1218 3D120000 	    _ADR LN_FEED
 612 121c 8B2F0000 	    _BRAN 9b  
 612      AC110000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 1224 504700BF 	   _NEST
 620 1228 232F0000 	   _DOLIT 0 
ARM GAS  forth.s 			page 48


 620      00000000 
 621 1230 C90D0000 	   _ADR CURSOR_COL 
 622 1234 A52F0000 	   _ADR STORE 
 623 1238 FF2C0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 123c 504700BF 	    _NEST 
 631 1240 DD0D0000 	    _ADR CURSOR_ROW 
 632 1244 B92F0000 	    _ADR AT 
 633 1248 AD300000 	    _ADR DUPP 
 634 124c 232F0000 	    _DOLIT 24 
 634      18000000 
 635 1254 55310000 	    _ADR XORR 
 636 1258 632F0000 	    _QBRAN 1f
 636      70120000 
 637 1260 09320000 	    _ADR ONEP 
 638 1264 DD0D0000 	    _ADR CURSOR_ROW 
 639 1268 A52F0000 	    _ADR STORE 
 640 126c FF2C0000 	    _UNNEST    
 641 1270 9D300000 	1:  _ADR DROP 
 642 1274 8D0F0000 	    _ADR SCROLLUP 
 643 1278 FF2C0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 127c 504700BF 	  _NEST 
 652 1280 7D100000 	  _ADR LEFT 
 653 1284 9D120000 	  _ADR SHOW_CURSOR
 654 1288 FF2C0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 128c 24110000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 129c 504700BF 	    _NEST 
 663 12a0 232F0000 	    _DOLIT 0xFF
 663      FF000000 
 664 12a8 DD0D0000 	0:  _ADR CURSOR_ROW
 665 12ac B92F0000 	    _ADR AT  
 666 12b0 09320000 	    _ADR ONEP 
 667 12b4 F50D0000 	    _ADR ROWY 
 668 12b8 232F0000 	    _DOLIT BPR
 668      A0000000 
 669 12c0 CD310000 	    _ADR STAR
ARM GAS  forth.s 			page 49


 670 12c4 232F0000 	    _DOLIT BPR  
 670      A0000000 
 671 12cc BD310000 	    _ADR SUBB 
 672 12d0 C90D0000 	    _ADR CURSOR_COL
 673 12d4 B92F0000 	    _ADR AT 
 674 12d8 0D0E0000 	    _ADR COLX 
 675 12dc AD320000 	    _ADR TWOSL  
 676 12e0 AD310000 	    _ADR PLUS
 677 12e4 3D0E0000 	    _ADR VIDBUFF
 678 12e8 AD310000 	    _ADR PLUS
 679 12ec 232F0000 	    _DOLIT 2
 679      02000000 
 680 12f4 29300000 	    _ADR TOR  
 681 12f8 21330000 	1:  _ADR DDUP 
 682 12fc C52F0000 	    _ADR CSTOR 
 683 1300 09320000 	    _ADR ONEP 
 684 1304 452F0000 	    _DONXT 1b
 684      F8120000 
 685 130c F9320000 	2:  _ADR DDROP // drop 3 elements 
 686 1310 FF2C0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 1314 90120000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 1324 504700BF 	    _NEST 
 694 1328 950D0000 	    _ADR BACKCOLOR 
 695 132c B92F0000 	    _ADR AT 
 696 1330 AD300000 	    _ADR DUPP  
 697 1334 232F0000 	    _DOLIT 4 
 697      04000000 
 698 133c 9D310000 	    _ADR LSHIFT 
 699 1340 41310000 	    _ADR ORR 
 700 1344 8B2F0000 	    _BRAN 0b
 700      A8120000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 134c 18130000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1358 352E     	    cmp TOS,#53
 706 135a 01D4     	    bmi 1f 
 707 135c 4FF03406 	    mov TOS,#52
 708 1360 C4F89C60 	1:  str TOS,[UP,#COL]
 709 1364 57F8046B 	    _POP
 710 1368 192E     	    cmp TOS,#25
 711 136a 01D4     	    bmi 1f 
 712 136c 4FF01806 	    mov TOS,#24 
 713 1370 C4F89860 	1:  str TOS,[UP,#ROW]
 714 1374 57F8046B 	    _POP 
 715 1378 01F0BEBC 	    _NEXT 
 716              	
ARM GAS  forth.s 			page 50


 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 137c 50130000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1388 504700BF 	    _NEST 
 721 138c FD3B0000 	    _ADR PAD 
 722 1390 AD300000 	    _ADR DUPP 
 723 1394 09320000 	    _ADR ONEP 
 724 1398 232F0000 	    _DOLIT 53
 724      35000000 
 725 13a0 454A0000 	    _ADR ACCEP
 726 13a4 BD300000 	    _ADR SWAP 
 727 13a8 9D300000 	    _ADR DROP 
 728 13ac ED300000 	    _ADR OVER 
 729 13b0 C52F0000 	    _ADR CSTOR  
 730 13b4 FF2C0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
ARM GAS  forth.s 			page 51


 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
ARM GAS  forth.s 			page 52


 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
ARM GAS  forth.s 			page 53


 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
ARM GAS  forth.s 			page 54


   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
ARM GAS  forth.s 			page 55


  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
ARM GAS  forth.s 			page 56


  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
ARM GAS  forth.s 			page 57


 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 13c4 1C61     	   .byte 0x1c,'a' 
   9 13c6 3262     	   .byte 0x32,'b'
  10 13c8 2163     	   .byte 0x21,'c'
  11 13ca 2364     	   .byte 0x23,'d'
  12 13cc 2465     	   .byte 0x24,'e'
  13 13ce 2B66     	   .byte 0x2b,'f'
  14 13d0 3467     	   .byte 0x34,'g'
  15 13d2 3368     	   .byte 0x33,'h'
  16 13d4 4369     	   .byte 0x43,'i'
  17 13d6 3B6A     	   .byte 0x3B,'j'
  18 13d8 426B     	   .byte 0x42,'k'
  19 13da 4B6C     	   .byte 0x4b,'l'
  20 13dc 3A6D     	   .byte 0x3a,'m'
  21 13de 316E     	   .byte 0x31,'n'
  22 13e0 446F     	   .byte 0x44,'o'
  23 13e2 4D70     	   .byte 0x4d,'p'
  24 13e4 1571     	   .byte 0x15,'q'
  25 13e6 2D72     	   .byte 0x2d,'r'
  26 13e8 1B73     	   .byte 0x1b,'s'
  27 13ea 2C74     	   .byte 0x2c,'t'
  28 13ec 3C75     	   .byte 0x3c,'u'
  29 13ee 2A76     	   .byte 0x2a,'v'
  30 13f0 1D77     	   .byte 0x1d,'w'
  31 13f2 2278     	   .byte 0x22,'x'
  32 13f4 3579     	   .byte 0x35,'y'
  33 13f6 1A7A     	   .byte 0x1a,'z'
  34 13f8 4530     	   .byte 0x45,'0'
  35 13fa 1631     	   .byte 0x16,'1'
  36 13fc 1E32     	   .byte 0x1e,'2'
  37 13fe 2633     	   .byte 0x26,'3'
  38 1400 2534     	   .byte 0x25,'4'
  39 1402 2E35     	   .byte 0x2e,'5'
  40 1404 3636     	   .byte 0x36,'6'
ARM GAS  forth.s 			page 58


  41 1406 3D37     	   .byte 0x3d,'7'
  42 1408 3E38     	   .byte 0x3e,'8'
  43 140a 4639     	   .byte 0x46,'9'
  44 140c 0E60     	   .byte 0x0e,'`'
  45 140e 4E2D     	   .byte 0x4e,'-'
  46 1410 553D     	   .byte 0x55,'='
  47 1412 5D5C     	   .byte 0x5d,'\\'
  48 1414 545B     	   .byte 0x54,'['
  49 1416 5B5D     	   .byte 0x5b,']'
  50 1418 4C3B     	   .byte 0x4c,';'
  51 141a 5227     	   .byte 0x52,'\''
  52 141c 412C     	   .byte 0x41,','
  53 141e 492E     	   .byte 0x49,'.'
  54 1420 7C2A     	   .byte 0x7c,'*'
  55 1422 792B     	   .byte 0x79,'+'
  56 1424 2920     	   .byte 0x29,' '
  57 1426 5A0D     	   .byte SC_ENTER,CRR 
  58 1428 6608     	   .byte SC_BKSP,BKSPP 
  59 142a 0D09     	   .byte SC_TAB,9
  60 142c 761B     	   .byte SC_ESC,27
  61 142e 119E     	   .byte SC_LALT,VK_LALT 
  62 1430 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 1432 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 1434 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 1436 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1438 5800     	   .byte SC_CAPS,0
  67 143a 0580     	   .byte SC_F1,VK_F1
  68 143c 0681     	   .byte SC_F2,VK_F2
  69 143e 0482     	   .byte SC_F3,VK_F3
  70 1440 0C83     	   .byte SC_F4,VK_F4
  71 1442 0384     	   .byte SC_F5,VK_F5
  72 1444 0B85     	   .byte SC_F6,VK_F6
  73 1446 8386     	   .byte SC_F7,VK_F7
  74 1448 0A87     	   .byte SC_F8,VK_F8
  75 144a 0188     	   .byte SC_F9,VK_F9
  76 144c 098A     	   .byte SC_F10,VK_F10
  77 144e 788B     	   .byte SC_F11,VK_F11
  78 1450 078C     	   .byte SC_F12,VK_F12
  79 1452 7030     	   .byte SC_KP0,'0'
  80 1454 6931     	   .byte SC_KP1,'1'
  81 1456 7232     	   .byte SC_KP2,'2'
  82 1458 7A33     	   .byte SC_KP3,'3'
  83 145a 6B34     	   .byte SC_KP4,'4'
  84 145c 7335     	   .byte SC_KP5,'5'
  85 145e 7436     	   .byte SC_KP6,'6'
  86 1460 6C37     	   .byte SC_KP7,'7'
  87 1462 7538     	   .byte SC_KP8,'8'
  88 1464 7D39     	   .byte SC_KP9,'9'
  89 1466 7C2A     	   .byte SC_KPMUL,'*'
  90 1468 4A2F     	   .byte SC_KPDIV,'/'
  91 146a 792B     	   .byte SC_KPPLUS,'+'
  92 146c 7B2D     	   .byte SC_KPMINUS,'-'
  93 146e 712E     	   .byte SC_KPDOT,'.'
  94 1470 5A0D     	   .byte SC_KPENTER,'\r'
  95 1472 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 1474 AAAA     	   .byte BAT_OK,BAT_OK  
  97 1476 0000     	   .byte 0,0
ARM GAS  forth.s 			page 59


  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1478 6141     	   .byte 'a','A'
 102 147a 6242     	   .byte 'b','B'
 103 147c 6343     	   .byte 'c','C'
 104 147e 6444     	   .byte 'd','D'
 105 1480 6545     	   .byte 'e','E'
 106 1482 6646     	   .byte 'f','F'
 107 1484 6747     	   .byte 'g','G'
 108 1486 6848     	   .byte 'h','H'
 109 1488 6949     	   .byte 'i','I'
 110 148a 6A4A     	   .byte 'j','J'
 111 148c 6B4B     	   .byte 'k','K'
 112 148e 6C4C     	   .byte 'l','L'
 113 1490 6D4D     	   .byte 'm','M'
 114 1492 6E4E     	   .byte 'n','N'
 115 1494 6F4F     	   .byte 'o','O'
 116 1496 7050     	   .byte 'p','P'
 117 1498 7151     	   .byte 'q','Q'
 118 149a 7252     	   .byte 'r','R'
 119 149c 7353     	   .byte 's','S'
 120 149e 7454     	   .byte 't','T'
 121 14a0 7555     	   .byte 'u','U'
 122 14a2 7656     	   .byte 'v','V'
 123 14a4 7757     	   .byte 'w','W'
 124 14a6 7858     	   .byte 'x','X'
 125 14a8 7959     	   .byte 'y','Y'
 126 14aa 7A5A     	   .byte 'z','Z'
 127 14ac 3121     	   .byte '1','!'
 128 14ae 3240     	   .byte '2','@'
 129 14b0 3323     	   .byte '3','#'
 130 14b2 3424     	   .byte '4','$'
 131 14b4 3525     	   .byte '5','%'
 132 14b6 365E     	   .byte '6','^'
 133 14b8 3726     	   .byte '7','&'
 134 14ba 382A     	   .byte '8','*'
 135 14bc 3928     	   .byte '9','('
 136 14be 3029     	   .byte '0',')'
 137 14c0 2D5F     	   .byte '-','_'
 138 14c2 3D2B     	   .byte '=','+'
 139 14c4 607E     	   .byte '`','~'
 140 14c6 2722     	   .byte '\'','"'
 141 14c8 2C3C     	   .byte ',','<'
 142 14ca 2E3E     	   .byte '.','>'
 143 14cc 2F3F     	   .byte '/','?'
 144 14ce 5C7C     	   .byte '\\','|'
 145 14d0 3B3A     	   .byte ';',':'
 146 14d2 5B7B     	   .byte '[','{'
 147 14d4 5D7D     	   .byte ']','}'
 148 14d6 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 14d8 315C     	   .byte '1','\\'
 153 14da 3240     	   .byte '2','@'
 154 14dc 332F     	   .byte '3','/'
ARM GAS  forth.s 			page 60


 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 14de 363F     	   .byte '6','?'
 158 14e0 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 14e2 397B     	   .byte '9','{'
 161 14e4 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 14e6 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 14e8 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 14ea 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 14ec 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 14ee 11A3     	    .byte SC_RALT,VK_RALT
 172 14f0 2F97     	    .byte SC_APPS,VK_APPS
 173 14f2 758D     	    .byte SC_UP,VK_UP
 174 14f4 728E     	    .byte SC_DOWN,VK_DOWN
 175 14f6 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 14f8 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 14fa 7095     	    .byte SC_INSERT,VK_INSERT
 178 14fc 6C91     	    .byte SC_HOME,VK_HOME
 179 14fe 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1500 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1502 717F     	    .byte SC_DEL,VK_DELETE
 182 1504 6992     	    .byte SC_END,VK_END
 183 1506 4A2F     	    .byte SC_KPDIV,'/'
 184 1508 5A0D     	    .byte SC_KPENTER,'\r'
 185 150a 1200     	    .byte 0x12,0
 186 150c 7C00     	    .byte 0x7c,0
 187 150e 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1510 6303     	   .byte 'c', VK_CTRL_C 
 193 1512 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1514 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 1516 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1518 11A3     	   .byte SC_RALT,VK_RALT
 197 151a 2F97     	   .byte SC_APPS,VK_APPS
 198 151c 7095     	   .byte SC_INSERT,VK_INSERT
 199 151e 6C91     	   .byte SC_HOME,VK_HOME
 200 1520 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1522 717F     	   .byte SC_DEL,VK_DELETE
 202 1524 6992     	   .byte SC_END,VK_END
 203 1526 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1528 758D     	   .byte SC_UP,VK_UP
 205 152a 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 152c 728E     	   .byte SC_DOWN,VK_DOWN
 207 152e 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1530 4A2F     	   .byte SC_KPDIV,'/'
 209 1532 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1534 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 1536 149D     	   .byte SC_LCTRL,VK_LCTRL
ARM GAS  forth.s 			page 61


 212 1538 119E     	   .byte SC_LALT,VK_LALT
 213 153a 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 153c 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 153e 761B     	   .byte SC_ESC,VK_ESC
 216 1540 779A     	   .byte SC_NUM,VK_NLOCK
 217 1542 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1544 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 1546 00BF     	    _GBL_FUNC kbd_isr 
  79 1548 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 1550 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 1554 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 1556 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 155e D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 62


  84 1562 10F0020F 	    tst r0,#KBD_TX 
  85 1566 40F08480 	    bne send_bit  
  86 156a 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 156c 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1570 01F10102 	    add r2,r1,#1
  89 1574 84F87C20 	    strb r2,[UP,#KBD_BITCNTR]
  90 1578 0029     	    cmp r1,#0
  91 157a 15D0     	    beq start_bit 
  92 157c 0929     	    cmp r1,#9 
  93 157e 25D0     	    beq parity_bit 
  94 1580 0A29     	    cmp r1,#10 
  95 1582 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 1584 94F87D20 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1588 4FEA5202 	    lsr r2,#1 
  99 158c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1590 07D0     	    beq 1f 
 101 1592 42F08002 	    orr r2,#(1<<7)
 102 1596 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 103 159a 00F10100 	    add r0,#1 
 104 159e 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 105 15a2 84F87D20 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 15a6 63E0     	    b 9f         
 107              	start_bit:
 108 15a8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 15ac 60D1     	    bne 9f // not a start bit 
 110 15ae 80EA0000 	    eor r0,r0 
 111 15b2 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 112 15b6 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 113 15ba 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 15be 6FF00101 	    mvn r1,#1
 115 15c2 00EA0100 	    and r0,r1 // clear error flag 
 116 15c6 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 117 15ca 51E0     	    b 9f 
 118              	parity_bit:
 119 15cc 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 120 15d0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 15d4 4CD0     	    beq 9f  
 122 15d6 01F10101 	    add r1,#1 
 123 15da 84F87F10 	    strb r1,[UP,#KBD_PARITY]  
 124 15de 47E0     	    b 9f      
 125              	stop_bit:
 126 15e0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 15e4 40D0     	    beq 8f // error stop bit expected 
 128 15e6 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 129 15ea 11F0010F 	    tst r1,#1 
 130 15ee 3BD0     	    beq 8f // error parity
 131 15f0 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 15f4 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 15f8 E028     	    cmp r0,#XT_KEY
 134 15fa 04D1     	    bne 1f
 135 15fc 41F04001 	    orr r1,#KBD_F_XT
 136 1600 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 137 1604 30E0     	    b 8f  
 138 1606 11F0800F 	1:  tst r1,#KBD_F_REL
 139 160a 14D0     	    beq store_code
 140 160c 5828     	    cmp r0,#SC_CAPS
ARM GAS  forth.s 			page 63


 141 160e 04D1     	    bne 1f
 142 1610 81F00401 	    eor r1,#KBD_F_CAPS
 143 1614 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1618 06E0     	    b 2f 
 145 161a 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 1624 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1628 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 162c 01EA0201 	    and r1,r2
 149 1630 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 150 1634 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 1636 F028     	    cmp r0,#KEY_REL
 154 1638 04D1     	    bne 1f
 155              	// set release flags 
 156 163a 41F08001 	    orr r1,#KBD_F_REL 
 157 163e 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 158 1642 11E0     	    b 8f     
 159 1644 0146     	1:  mov r1,r0 
 160 1646 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1650 0AD1     	    bne 8f // was async key 
 162 1652 D4F89400 	    ldr r0,[UP,#KBD_QTAIL]
 163 1656 04F18002 	    add r2,UP,#KBD_QUEUE
 164 165a 1154     	    strb r1,[r2,r0]
 165 165c 00F10100 	    add r0,#1
 166 1660 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 1664 84F89400 	    strb r0,[UP,#KBD_QTAIL]
 168 1668 80EA0000 	8:  eor r0,r0 
 169 166c A4F87C00 	    strh r0,[UP,#KBD_BITCNTR]
 170 1670 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 1672 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 1676 01F10100 	    add r0,r1,#1
 182 167a 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 183 167e 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 1682 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 1686 0829     	1:  cmp r1,#8 
 187 1688 15D0     	    beq send_parity 
 188 168a 0929     	    cmp r1,#9 
 189 168c 1CD0     	    beq send_stop
 190 168e 0A29     	    cmp r1,#10
 191 1690 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 1692 10F0010F 	    tst r0,#1
ARM GAS  forth.s 			page 64


 194 1696 4FEA5000 	    lsr r0,#1
 195 169a 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 196 169e 02D1     	    bne 1f 
 197 16a0 4FEA0242 	    lsl r2,#16
 198 16a4 05E0     	    b 2f  
 199 16a6 94F87F00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 16aa 00F10100 	    add r0,#1 
 201 16ae 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 202 16b2 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 16b4 1CE0     	    b 9f 
 204              	send_parity:
 205 16b6 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 206 16ba 10F0010F 	    tst r0,#1
 207 16be 01D0     	    beq 1f 
 208 16c0 4FEA0242 	    lsl r2,#16
 209 16c4 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 16c6 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 16c8 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 16ca 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 16ce 1960     	    str r1,[r3,#GPIO_MODER]
 217 16d0 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 16d2 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 16d6 6FF00201 	    mvn r1,#KBD_TX 
 221 16da 00EA0100 	    and r0,r1 
 222 16de 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 16e0 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 16e4 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 225 16e8 80EA0000 	    eor r0,r0 
 226 16ec 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 227 16f0 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 16f2 02B4     	    push {r1}
 238 16f4 DFF86414 	    ldr r1,=async_keys
 239 16f8 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 1702 02BC     	    pop {r1}
 241 1704 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
ARM GAS  forth.s 			page 65


 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 1706 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1710 FF28     	    cmp r0,#255
 256 1712 01D1     	    bne set_async_key 
 257 1714 0020     	    movs r0,#0 
 258 1716 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1718 06B4     	    push {r1,r2}
 262 171a 94F87E20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 171e DFF84014 	    ldr r1,=async_jump 
 264 1722 D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 1726 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 172a 04E0     	    b set_reset
 268              	ctrl_key:
 269 172c 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1730 01E0     	    b set_reset 
 271              	alt_key:
 272 1732 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 1736 12F0800F 	    tst r2,#KBD_F_REL 
 275 173a 04D0     	    beq 1f 
 276 173c 6FEA0000 	    mvn r0,r0
 277 1740 02EA0002 	    and r2,r0
 278 1744 01E0     	    b 2f
 279 1746 42EA0002 	1:  orr r2,r0 
 280 174a 84F87E20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 174e 5FF0FF30 	    movs r0,#-1
 282 1752 06BC     	9:  pop {r1,r2}
 283 1754 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 1756 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1758 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 175a 1401     	    .byte SC_LCTRL,1  // left control 
 290 175c 1401     	    .byte SC_RCTRL,1  // right control 
 291 175e 1102     	    .byte SC_LALT,2  // left alt 
 292 1760 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 1762 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 1764 00       	    .byte 0 // shift  key 
 297 1765 03       	    .byte (ctrl_key-shift_key)/2
 298 1766 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
ARM GAS  forth.s 			page 66


 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 1767 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1768 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 1770 1846     	    mov r0,r3 
 311 1772 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 1776 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 177a 00B5FFF7 	    _CALL gpio_config
 313      10F85DF8 
 313      04EB
 314 1784 1846     	    mov r0,r3 
 315 1786 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 178a 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 178e 00B5FFF7 	    _CALL gpio_config
 317      06F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1798 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 17a0 4FF40050 	    mov r0,#(2<<12)
 321 17a4 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 17a6 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 17ae 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 17b2 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 17b4 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 17b6 80EA0000 	   eor r0,r0 
 328 17ba C4F89000 	   str r0,[UP,#KBD_QHEAD]
 329 17be C4F89400 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 17c2 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 17c6 4FF00101 	   mov r1,#1 
 333 17ca 00B5FEF7 	   _CALL nvic_set_priority
 333      8CFF5DF8 
 333      04EB
 334 17d4 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 17d8 00B5FEF7 	   _CALL nvic_enable_irq 
 335      9EFF5DF8 
 335      04EB
 336 17e2 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 17e4 80130000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 17f4 47F8046D 	    _PUSH 
 342 17f8 94F87E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 17fc 06F0FC06 	    and TOS,#0xFC  
 344 1800 01F07ABA 	    _NEXT 
 345              	
 346              	// KEYCODE 
ARM GAS  forth.s 			page 67


 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 1804 0EB4     	    push {T1,T2,T3}
 352 1806 80EA0000 	    eor T0,T0  
 353 180a 04F18003 	    add T3,UP,#KBD_QUEUE
 354 180e D4F89010 	    ldr T1,[UP,#KBD_QHEAD]
 355 1812 D4F89420 	    ldr T2,[UP,#KBD_QTAIL]
 356 1816 9142     	    cmp T1,T2 
 357 1818 06D0     	    beq 2f  
 358 181a 585C     	    ldrb T0,[T3,T1]
 359 181c 01F10101 	    add T1,#1 
 360 1820 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 1824 C4F89010 	    str T1,[UP,#KBD_QHEAD]
 362 1828 0EBC     	2:  pop {T1,T2,T3}
 363 182a 7047     	    _RET 
 364              	
 365              	wait_code:
 366 182c 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 1836 0000     	    movs T0,T0
 368 1838 F8D0     	    beq wait_code  
 369 183a 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 183c 04B4     	    push {T2}
 380 183e 11F8012B 	1:  ldrb T2,[T1],#1
 381 1842 22B1     	    cbz T2,2f 
 382 1844 8242     	    cmp T2,T0
 383 1846 02D0     	    beq 2f 
 384 1848 01F10101 	    add T1,#1 
 385 184c F7E7     	    b 1b 
 386 184e 0878     	2:  ldrb T0,[T1]
 387 1850 0000     	    movs T0,T0 // set/reset zero flag 
 388 1852 04BC     	9:  pop {T2}
 389 1854 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 1856 E8170000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 1864 47F8046D 	    _PUSH 
 398 1868 86EA0606 	    eor TOS,TOS 
ARM GAS  forth.s 			page 68


 399 186c BD49     	    ldr T1,=sc_ascii // translation table
 400 186e 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 1872 4FF04002 	    mov T2,#KBD_F_XT 
 402 1876 1042     	    tst T0,T2
 403 1878 00D0     	    beq 1f
 404 187a BB49     	    ldr T1,=extended // extended code translation
 405 187c 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 1886 98B1     	    cbz T0,inkey_exit
 407 1888 E128     	    cmp T0,#XT2_KEY // pause 
 408 188a 13D0     	    beq pause_key
 409 188c 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 1896 0646     	    mov TOS,T0
 411 1898 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 18a2 032E     	    cmp TOS,#VK_CTRL_C 
 413 18a4 3EF4F7AD 	    beq user_reboot 
 414 18a8 47F8046D 	    _PUSH 
 415 18ac 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 18b0 01F022BA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 18b4 4FF00701 	    mov T1,#7 
 420 18b8 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 18c2 0139     	    subs T1,#1
 422 18c4 F8D1     	    bne 1b 
 423 18c6 01F017BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 18ca 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 18ce 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 18d2 06D1     	    bne shift_down 
 431 18d4 10F0200F 	    tst T0,#KBD_F_ALT  
 432 18d8 06D1     	    bne altchar_down 
 433 18da 10F0100F 	    tst T0,#KBD_F_CTRL
 434 18de 06D1     	    bne ctrl_down 
 435 18e0 0DE0     	    b 9f 
 436              	shift_down:
 437 18e2 3046     	    mov T0,TOS 
 438 18e4 A149     	    ldr T1,=shifted 
 439 18e6 04E0     	    b 8f 
 440              	altchar_down:
 441 18e8 3046     	    mov T0,TOS 
 442 18ea A149     	    ldr T1,=altchar
 443 18ec 01E0     	    b 8f
 444              	ctrl_down:
 445 18ee 3046     	    mov T0,TOS 
 446 18f0 A049     	    ldr T1,=controls 
 447 18f2 00B5FFF7 	8:  _CALL table_scan
ARM GAS  forth.s 			page 69


 447      A2FF5DF8 
 447      04EB
 448 18fc 0646     	    mov TOS,T0
 449 18fe 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1908 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 190a 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 190e 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1912 0BD0     	    beq 9f 
 456 1914 412E     	    cmp TOS,#'A'
 457 1916 09D4     	    bmi 9f 
 458 1918 5B2E     	    cmp TOS,#'Z'+1 
 459 191a 03D4     	    bmi 3f 
 460 191c 612E     	    cmp TOS,#'a'
 461 191e 05D4     	    bmi 9f 
 462 1920 7B2E     	    cmp TOS,#'z'+1
 463 1922 03D5     	    bpl 9f 
 464 1924 4FF02000 	3:  mov T0,#(1<<5)
 465 1928 86EA0006 	    eor TOS,T0 
 466 192c 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 192e 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1930 206F     	1:  ldr r0,[UP,#VID_STATE]
 483 1932 0128     	    cmp r0,ST_PREVID 
 484 1934 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 1936 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 193a 00B5FEF7 	    _CALL nvic_disable_irq
 487      02FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 1944 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 194c 1846     	    mov r0,r3 
 491 194e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 1952 4FF01102 	    mov r2,#OUTPUT_OD
 493 1956 00B5FEF7 	    _CALL gpio_config 
 493      22FF5DF8 
 493      04EB
 494 1960 1846     	    mov r0,r3 
 495 1962 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
ARM GAS  forth.s 			page 70


 496 1966 82EA0202 	    eor r2,r2 
 497 196a 00B5FEF7 	    _CALL gpio_out 
 497      6EFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 1974 4FF4E150 	    mov r0,#150*48
 500 1978 0138     	1:  subs r0,#1 
 501 197a FDD1     	    bne 1b
 502 197c 01BC     	    pop {r0}
 503 197e 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 504 1982 D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
 505 1986 40F00200 	    orr r0,#KBD_TX 
 506 198a 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 507 198e 80EA0000 	    eor r0,r0 
 508 1992 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 509 1996 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 199a 1846     	    mov r0,r3 
 513 199c 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 19a0 4FF01102 	    mov r2,#OUTPUT_OD 
 515 19a4 00B5FEF7 	    _CALL gpio_config 
 515      FBFE5DF8 
 515      04EB
 516 19ae 1846     	    mov r0,r3 
 517 19b0 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 19b4 82EA0202 	    eor r2,r2 
 519 19b8 00B5FEF7 	    _CALL gpio_out
 519      47FF5DF8 
 519      04EB
 520              	// release clock line 
 521 19c2 1846     	    mov r0,r3 
 522 19c4 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 19c8 4FF00002 	    mov r2,#INPUT_FLOAT
 524 19cc 00B5FEF7 	    _CALL gpio_config
 524      E7FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 19d6 4FF00A00 	    mov r0,#10
 528 19da E060     	    str r0,[UP,#CD_TIMER]
 529 19dc E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 19de 20B1     	    cbz r0, 4f 
 531 19e0 94F87E00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 19e4 10F0020F 	    tst r0,#KBD_TX
 533 19e8 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 19ea 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 19ee 00B5FEF7 	    _CALL nvic_enable_irq
 536      93FE5DF8 
 536      04EB
 537 19f8 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 19fc 20F00201 	    bic r1,r0,#KBD_TX
 539 1a00 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 540 1a04 00F00200 	    and r0,#KBD_TX
 541 1a08 48B1     	    cbz r0, 5f
 542 1a0a 1968     	    ldr r1,[r3,#GPIO_MODER]
ARM GAS  forth.s 			page 71


 543 1a0c 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1a10 1960     	    str r1,[r3,#GPIO_MODER]
 545 1a12 80EA0000 	    eor r0,r0 
 546 1a16 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1a1a 6FEA0000 	    mvn r0,r0   
 548 1a1e 0EBC     	5:  pop {r1,r2,r3}
 549 1a20 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1a22 80EA0000 	    eor T0,T0 
 555 1a26 C4F89000 	    str T0,[UP,#KBD_QHEAD]
 556 1a2a C4F89400 	    str T0,[UP,#KBD_QTAIL]
 557 1a2e 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1a32 6FF00301 	    mvn T1,#3
 559 1a36 00EA0100 	    and T0,T1 
 560 1a3a 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 561 1a3e 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1a40 5A180000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1a4c 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1a50 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1a5a B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1a5c 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1a66 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1a70 FE28     	    cmp r0,KBD_CMD_RESEND
 574 1a72 EBD0     	    beq 1b 
 575 1a74 4FF4FA70 	    mov T0,#500 
 576 1a78 E060     	    str T0,[UP,#CD_TIMER]
 577 1a7a 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1a84 10B9     	    cbnz T0,3f
 579 1a86 E068     	    ldr T0,[UP,#CD_TIMER]
 580 1a88 0028     	    cmp T0,#0 
 581 1a8a F6D1     	    bne 2b 
 582 1a8c 47F8046D 	3:  _PUSH 
 583 1a90 0646     	    mov TOS,T0  
 584 1a92 01F031B9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
ARM GAS  forth.s 			page 72


 590              	*****************************/
 591 1a96 441A0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1aa4 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1aae 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1ab2 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1abc 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1ac6 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1ac8 ECD0     	    beq 1b
 598 1aca FA28     	    cmp T0,#KBD_ACK  
 599 1acc F6D1     	    bne 2b 
 600 1ace 3046     	2:  mov T0,TOS 
 601 1ad0 00F00700 	    and T0,#7 
 602 1ad4 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1ade 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ae8 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1aea F0D0     	    beq 2b
 606 1aec FA28     	    cmp T0,#KBD_ACK 
 607 1aee F6D1     	    bne 3b  
 608 1af0 57F8046B 	    _POP 
 609 1af4 01F000B9 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1af8 9A1A0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1b08 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1b0c 10F0010F 	    tst T0,#1
 619 1b10 01D1     	    bne 1f 
 620 1b12 01F0F1B8 	    _NEXT 
 621 1b16 47F8046D 	1: _PUSH 
 622 1b1a 6FF00101 	    mvn T1,#1 
 623 1b1e 00EA0100 	    and T0,T1 
 624 1b22 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 625 1b26 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1b2a 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
ARM GAS  forth.s 			page 73


 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1b32 FC1A0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1b40 504700BF 	    _NEST
 635 1b44 091B0000 	1:  _ADR CAPS_LED  
 636 1b48 65180000 	    _ADR PS2_QKEY 
 637 1b4c BD320000 	    _ADR QDUP 
 638 1b50 632F0000 	    _QBRAN 1b  
 638      441B0000 
 639 1b58 FF2C0000 	    _UNNEST 
 640 1b5c 56170000 	
 640      64170000 
 640      C4130000 
 640      E8140000 
 640      78140000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
ARM GAS  forth.s 			page 74


  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1b7c 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1b84 0346     	    mov r3,r0 
  44 1b86 4FF00401 	    mov r1,#PIN_F_SC 
  45 1b8a 4FF00102 	    mov r2,#OUTPUT_PP
  46 1b8e 00B5FEF7 	    _CALL gpio_config 
  46      06FE5DF8 
  46      04EB
  47 1b98 1846     	    mov r0,r3 
  48 1b9a 4FF00401 	    mov r1,#PIN_F_SC  
  49 1b9e 4FF00102 	    MOV r2,#1
  50 1ba2 00B5FEF7 	    _CALL gpio_out 
  50      52FE5DF8 
  50      04EB
  51 1bac 1846     	    mov r0,r3 
  52 1bae 4FF00501 	    mov r1,#PIN_SCK  
  53 1bb2 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1bb6 00B5FEF7 	    _CALL gpio_config 
  54      F2FD5DF8 
  54      04EB
  55 1bc0 1846     	    mov r0,r3 
  56 1bc2 4FF00701 	    mov r1,#PIN_MOSI 
  57 1bc6 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1bca 00B5FEF7 	    _CALL gpio_config 
  58      E8FD5DF8 
  58      04EB
  59 1bd4 1846     	    mov r0,r3
  60 1bd6 4FF00601 	    mov r1,#PIN_MISO
  61 1bda 4FF00202 	    mov r2,#INPUT_AFO  
  62 1bde 00B5FEF7 	    _CALL gpio_config
  62      DEFD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1be8 4CF6AA40 	    mov r0,#0xCCAA
  65 1bec 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1bee 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1bf6 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1bf8 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1bfc 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1bfe 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1c06 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1c0a 0180     	    strh r1,[r0,#SPI_CR1]
  73 1c0c 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1c0e 80EA0000 	    eor r0,r0 
  75 1c12 C5F25050 	    movt r0,#0x5550 
  76 1c16 40EA0100 	    orr r0,r1 
  77 1c1a 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1c1c 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
ARM GAS  forth.s 			page 75


  83              	    drive F_SC low 
  84              	*********************/
  85 1c1e 361B0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1c2c 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1c34 4FF00401 	    mov r1,#PIN_F_SC 
  88 1c38 4FF00002 	    mov r2,#0 
  89 1c3c 00B5FEF7 	    _CALL gpio_out 
  89      05FE5DF8 
  89      04EB
  90 1c46 01F057B8 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1c4a 221C0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1c58 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1c60 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1c62 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1c66 FBD1     	    bne 1b 
 102 1c68 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1c70 4FF00401 	    mov r1,#PIN_F_SC 
 104 1c74 4FF00102 	    mov r2,#1 
 105 1c78 00B5FEF7 	    _CALL gpio_out 
 105      E7FD5DF8 
 105      04EB
 106 1c82 01F039B8 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1c86 4E1C0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1c94 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1c9c 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1c9e 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1ca2 FBD0     	    beq 0b 
 118 1ca4 6FF00001 	    mvn T1,#0 
 119 1ca8 0173     	    strb T1,[T0,#SPI_DR]
 120 1caa 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1cac 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1cb0 FBD0     	    beq 1b     
ARM GAS  forth.s 			page 76


 123              	2:  
 124 1cb2 47F8046D 	    _PUSH 
 125 1cb6 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1cb8 01F01EB8 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1cbc 8A1C0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1cc8 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1cd0 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1cd2 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1cd6 FBD0     	    beq 0b 
 138 1cd8 0673     	    strb TOS,[T0,#SPI_DR]
 139 1cda 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1cdc 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1ce0 FBD0     	    beq 1b 
 142 1ce2 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1ce4 57F8046B 	    _POP 
 144 1ce8 01F006B8 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1cec C01C0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1cf8 504700BF 	    _NEST 
 153 1cfc 2D1C0000 	    _ADR CHIP_SEL 
 154 1d00 232F0000 	    _DOLIT 4
 154      04000000 
 155 1d08 C91C0000 	    _ADR WR_BYTE
 156 1d0c 591C0000 	    _ADR CHIP_DSEL
 157 1d10 FF2C0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1d14 F01C0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1d20 504700BF 	    _NEST 
 165 1d24 2D1C0000 	    _ADR CHIP_SEL 
 166 1d28 232F0000 	    _DOLIT 6 
 166      06000000 
 167 1d30 C91C0000 	    _ADR WR_BYTE 
 168 1d34 591C0000 	    _ADR CHIP_DSEL 
 169 1d38 FF2C0000 	    _UNNEST 
 170              	
ARM GAS  forth.s 			page 77


 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1d3c 181D0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1d48 504700BF 	    _NEST
 177 1d4c 2D1C0000 	    _ADR CHIP_SEL  
 178 1d50 232F0000 	    _DOLIT sr_cmd 
 178      701D0000 
 179 1d58 AD310000 	    _ADR PLUS 
 180 1d5c D92F0000 	    _ADR CAT
 181 1d60 C91C0000 	    _ADR WR_BYTE
 182 1d64 951C0000 	    _ADR RD_BYTE
 183 1d68 591C0000 	    _ADR CHIP_DSEL  
 184 1d6c FF2C0000 	    _UNNEST 
 185 1d70 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1d73 401D0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1d80 504700BF 	    _NEST 
 193 1d84 AD300000 	    _ADR DUPP 
 194 1d88 232F0000 	    _DOLIT 16
 194      10000000 
 195 1d90 85310000 	    _ADR RSHIFT 
 196 1d94 C91C0000 	    _ADR WR_BYTE 
 197 1d98 AD300000 	    _ADR DUPP
 198 1d9c 232F0000 	    _DOLIT 8 
 198      08000000 
 199 1da4 85310000 	    _ADR RSHIFT 
 200 1da8 C91C0000 	    _ADR WR_BYTE 
 201 1dac C91C0000 	    _ADR WR_BYTE 
 202 1db0 FF2C0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1db4 771D0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1dc4 504700BF 	    _NEST 
 210 1dc8 232F0000 	1:  _DOLIT 0 
 210      00000000 
 211 1dd0 491D0000 	    _ADR RD_SR 
 212 1dd4 232F0000 	    _DOLIT 3 
 212      03000000 
 213 1ddc 2D310000 	    _ADR ANDD 
 214 1de0 632F0000 	    _QBRAN 2f
ARM GAS  forth.s 			page 78


 214      F01D0000 
 215 1de8 8B2F0000 	    _BRAN 1b
 215      C81D0000 
 216 1df0 FF2C0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1df4 B81D0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1e04 504700BF 	    _NEST 
 225 1e08 211D0000 	    _ADR WR_ENBL
 226 1e0c 2D1C0000 	    _ADR CHIP_SEL 
 227 1e10 232F0000 	    _DOLIT 0x20 
 227      20000000 
 228 1e18 C91C0000 	    _ADR WR_BYTE 
 229 1e1c 811D0000 	    _ADR SEND_ADR
 230 1e20 591C0000 	    _ADR CHIP_DSEL 
 231 1e24 C51D0000 	    _ADR WAIT_DONE 
 232 1e28 FF2C0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1e2c F81D0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1e3c 504700BF 	    _NEST 
 240 1e40 211D0000 	    _ADR WR_ENBL 
 241 1e44 2D1C0000 	    _ADR CHIP_SEL
 242 1e48 232F0000 	    _DOLIT 0x60
 242      60000000 
 243 1e50 232F0000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1e58 C91C0000 	    _ADR WR_BYTE 
 245 1e5c C91C0000 	    _ADR WR_BYTE 
 246 1e60 591C0000 	    _ADR CHIP_DSEL 
 247 1e64 C51D0000 	    _ADR WAIT_DONE
 248 1e68 FF2C0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 1e6c 301E0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1e78 504700BF 	    _NEST
 258 1e7c 2D1C0000 	    _ADR CHIP_SEL 
ARM GAS  forth.s 			page 79


 259 1e80 232F0000 	    _DOLIT 3 
 259      03000000 
 260 1e88 C91C0000 	    _ADR WR_BYTE 
 261 1e8c 811D0000 	    _ADR SEND_ADR
 262 1e90 29300000 	    _ADR TOR   
 263 1e94 8B2F0000 	    _BRAN 2f
 263      AC1E0000 
 264 1e9c 951C0000 	1:  _ADR RD_BYTE
 265 1ea0 ED300000 	    _ADR OVER 
 266 1ea4 C52F0000 	    _ADR CSTOR
 267 1ea8 09320000 	    _ADR ONEP 
 268 1eac 452F0000 	2:  _DONXT 1b
 268      9C1E0000 
 269 1eb4 9D300000 	    _ADR DROP 
 270 1eb8 591C0000 	    _ADR CHIP_DSEL 
 271 1ebc FF2C0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1ec0 701E0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1ecc 504700BF 	    _NEST 
 280 1ed0 211D0000 	    _ADR WR_ENBL
 281 1ed4 2D1C0000 	    _ADR CHIP_SEL
 282 1ed8 232F0000 	    _DOLIT 2 
 282      02000000 
 283 1ee0 C91C0000 	    _ADR WR_BYTE 
 284 1ee4 811D0000 	    _ADR SEND_ADR
 285 1ee8 29300000 	    _ADR TOR
 286 1eec 8B2F0000 	    _BRAN 2f 
 286      0C1F0000 
 287 1ef4 AD300000 	1:  _ADR DUPP 
 288 1ef8 D92F0000 	    _ADR CAT 
 289 1efc AD300000 	    _ADR DUPP 
 290 1f00 5D440000 	    _ADR HDOT
 291 1f04 C91C0000 	    _ADR WR_BYTE 
 292 1f08 09320000 	    _ADR ONEP
 293 1f0c 452F0000 	2:  _DONXT 1b 
 293      F41E0000 
 294 1f14 9D300000 	    _ADR DROP
 295 1f18 591C0000 	    _ADR CHIP_DSEL
 296 1f1c C51D0000 	    _ADR WAIT_DONE 
 297 1f20 FF2C0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
ARM GAS  forth.s 			page 80


 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1f24 C41E0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1f34 504700BF 	    _NEST 
 318              	    
 319 1f38 FF2C0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1f3c 281F0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1f4c 504700BF 	    _NEST 
 327              	
 328 1f50 FF2C0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1f54 401F0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1f5c 504700BF 	    _NEST 
 336              	
 337 1f60 FF2C0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1f64 581F0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1f70 504700BF 	    _NEST 
 345              	
 346 1f74 FF2C0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1f78 681F0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1f84 504700BF 	    _NEST 
ARM GAS  forth.s 			page 81


 354              	
 355 1f88 FF2C0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 1f8c 5F708930 	     .word  0x3089705F // 1e-9
  34 1f90 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 1f94 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 1f98 BD378635 	     .word  0x358637BD // 1e-6 
  37 1f9c ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 1fa0 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 1fa4 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 1fa8 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 1fac CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 1fb0 0000803F 	     .word  0x3F800000 // 1.0 
  44 1fb4 00002041 	     .word  0x41200000 // 1e1 
  45 1fb8 0000C842 	     .word  0x42C80000 // 1e2 
  46 1fbc 00007A44 	     .word  0x447A0000 // 1e3 
  47 1fc0 00401C46 	     .word  0x461C4000 // 1e4 
  48 1fc4 0050C347 	     .word  0x47C35000 // 1e5 
  49 1fc8 00247449 	     .word  0x49742400 // 1e6 
  50 1fcc 8096184B 	     .word  0x4B189680 // 1e7
  51 1fd0 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 1fd4 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
ARM GAS  forth.s 			page 82


  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 1fd8 7C1F0000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 1fe4 4FEA8606 	    lsl TOS,#2  
  61 1fe8 FF48     	    ldr t0, =p10 
  62 1fea 0644     	    add TOS,TOS,T0
  63 1fec 3668     	    ldr TOS,[TOS]  
  64 1fee 00F083BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 1ff2 DFF8F803 	   ldr.w r0,=CPACR 
  73 1ff6 0168     	   ldr R1,[R0]
  74 1ff8 41F47001 	   orr r1,r1,#(0xf<<20)
  75 1ffc 0160     	   str r1,[r0]
  76 1ffe BFF34F8F 	   dsb 
  77 2002 FB48     	   ldr r0,=FPC_BASE_ADR
  78 2004 81EA0101 	   eor r1,r1 
  79 2008 0160     	   str r1,[r0,FPCCR]
  80 200a BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 200e 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 2010 DC1F0000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 2018 4FF05100 	    mov r0,#FPU_IRQ 
  92 201c 00B5FEF7 	    _CALL nvic_disable_irq
  92      91FB5DF8 
  92      04EB
  93 2026 00F067BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 202a 14200000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 2034 4FF05100 	    mov r0,#FPU_IRQ
 102 2038 00B5FEF7 	    _CALL nvic_enable_irq
ARM GAS  forth.s 			page 83


 102      6EFB5DF8 
 102      04EB
 103 2042 00F059BE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
 108              	   stack fpu SCR register 
 109              	***************************/
 110 2046 2E200000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
 111 2050 47F8046D 	   _PUSH 
 112 2054 F1EE106A 	   vmrs TOS,FPSCR
 113 2058 BFF34F8F 	   dsb  
 114 205c 00F04CBE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 2060 4A200000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 2070 F1EE100A 	   vmrs T0,FPSCR 
 125 2074 BFF34F8F 	   dsb 
 126 2078 06EA0006 	   and TOS,T0  
 127 207c E1EE106A 	   vmsr FPSCR,TOS 
 128 2080 BFF34F8F 	   dsb 
 129 2084 00F038BE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 2088 64200000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 2090 00EE106A 	    vmov.f32 S0,TOS 
 138 2094 57F8046B 	    _POP 
 139 2098 00F02EBE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 209c 8C200000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 20a4 00EE906A 	    vmov.f32 S1,TOS 
 147 20a8 57F8046B 	    _POP 
 148 20ac 00F024BE 	    _NEXT  
 149              	
 150              	/*******************************
ARM GAS  forth.s 			page 84


 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 20b0 A0200000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 20b8 01EE106A 	    vmov.f32 S2,TOS 
 156 20bc 57F8046B 	    _POP 
 157 20c0 00F01ABE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
 162              	*******************************/
 163 20c4 B4200000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 20cc 47F8046D 	    _PUSH 
 165 20d0 10EE106A 	    vmov.f32 TOS,S0 
 166 20d4 00F010BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 20d8 C8200000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 20e0 47F8046D 	    _PUSH 
 174 20e4 10EE906A 	    vmov.f32 TOS,S1 
 175 20e8 00F006BE 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 20ec DC200000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 20f4 47F8046D 	    _PUSH 
 183 20f8 11EE106A 	    vmov.f32 TOS,S2 
 184 20fc 00F0FCBD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 2100 F0200000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 2108 00EE106A 	    vmov.f32 S0,TOS
 194 210c BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 2110 10EE106A 	    vmov.f32 TOS,s0 
 196 2114 00F0F0BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 2118 04210000 	    _HEADER TRUNC,5,"TRUNC"
ARM GAS  forth.s 			page 85


 202      05545255 
 202      4E4300BF 
 203 2124 00EE106A 	    vmov.f32 S0,TOS 
 204 2128 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 212c 10EE106A 	    vmov.f32 TOS,S0 
 206 2130 00F0E2BD 	    _NEXT 
 207              	
 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 2134 1C210000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
 213 213c 00EE106A 	    vmov.f32 S0,TOS
 214 2140 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 2144 10EE106A 	    vmov.f32 TOS,s0 
 216 2148 00F0D6BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 214c 38210000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 2154 00EE106A 	   vmov.f32 s0,TOS 
 224 2158 57F8046B 	   _POP 
 225 215c 00EE906A 	   vmov.f32 s1,TOS 
 226 2160 30EE200A 	   vadd.f32 s0,s0,s1 
 227 2164 10EE106A 	   vmov.f32 TOS,s0
 228 2168 00F0C6BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 216c 50210000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 2174 00EE106A 	   vmov.f32 s0,TOS 
 237 2178 57F8046B 	   _POP 
 238 217c 00EE906A 	   vmov.f32 s1,TOS 
 239 2180 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 2184 10EE106A 	   vmov.f32 TOS,s0
 241 2188 00F0B6BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 218c 70210000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 2194 00EE106A 	   vmov.f32 s0,TOS 
 251 2198 57F8046B 	   _POP 
 252 219c 00EE906A 	   vmov.f32 s1,TOS 
 253 21a0 20EE800A 	   vmul.f32 s0,s1,s0 
ARM GAS  forth.s 			page 86


 254 21a4 10EE106A 	   vmov.f32 TOS,s0
 255 21a8 00F0A6BD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
 261              	*******************************/
 262 21ac 90210000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 21b4 00EE106A 	   vmov.f32 s0,TOS 
 264 21b8 57F8046B 	   _POP 
 265 21bc 00EE906A 	   vmov.f32 s1,TOS 
 266 21c0 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 21c4 10EE106A 	   vmov.f32 TOS,s0
 268 21c8 00F096BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 21cc B0210000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 21d8 00EE106A 	    vmov.f32 s0,TOS 
 277 21dc B1EE400A 	    vneg.f32 S0,S0 
 278 21e0 10EE106A 	    vmov.f32 TOS,S0    
 279 21e4 00F088BD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 21e8 D0210000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 21f4 80EA0000 	    eor T0,T0 
 287 21f8 6FEA0000 	    mvn T0,T0 
 288 21fc 4FEA5000 	    lsr T0,#1 
 289 2200 06EA0006 	    and TOS,T0 
 290 2204 00F078BD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 2208 EC210000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 2214 00EE106A 	     vmov.f32 s0,TOS 
 299 2218 B1EEC00A 	     vsqrt.f32 s0,s0 
 300 221c 10EE106A 	     vmov.f32 TOS,s0 
 301 2220 00F06ABD 	     _NEXT 
 302              	
 303              	
ARM GAS  forth.s 			page 87


 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 2224 0C220000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 222c 00EE106A 	    vmov.f32 s0,TOS 
 309 2230 B5EE400A 	    vcmp.f32 s0, #0.0 
 310 2234 F1EE106A 	    vmrs TOS,FPSCR
 311 2238 BFF34F8F 	    dsb  
 312 223c 4FEAE676 	    asr TOS,#31   
 313 2240 00F05ABD 	    _NEXT 
 314              	
 315              	/*****************************
 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 2244 28220000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 224c 504700BF 	    _NEST 
 321 2250 75210000 	    _ADR FSUBB
 322 2254 2D220000 	    _ADR FZLESS
 323 2258 BD330000 	    _ADR INVER     
 324 225c FF2C0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 2260 48220000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 2268 504700BF 	    _NEST 
 332 226c 75210000 	    _ADR FSUBB 
 333 2270 2D220000 	    _ADR FZLESS
 334 2274 FF2C0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 2278 64220000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 2284 504700BF 	    _NEST 
 342 2288 ED300000 	   _ADR OVER 
 343 228c ED300000 	   _ADR OVER 
 344 2290 4D220000 	   _ADR FGREAT 
 345 2294 632F0000 	   _QBRAN 1f 
 345      A0220000 
 346 229c BD300000 	   _ADR SWAP  
 347 22a0 9D300000 	1: _ADR DROP 
 348 22a4 FF2C0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 22a8 7C220000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
ARM GAS  forth.s 			page 88


 353      580000BF 
 354 22b4 504700BF 	    _NEST 
 355 22b8 ED300000 	    _ADR OVER 
 356 22bc ED300000 	    _ADR OVER 
 357 22c0 69220000 	    _ADR FLESS 
 358 22c4 632F0000 	    _QBRAN 1f
 358      D0220000 
 359 22cc BD300000 	    _ADR SWAP   
 360 22d0 9D300000 	1:  _ADR DROP 
 361 22d4 FF2C0000 	    _UNNEST 
 362              	
 363              	
 364              	/*******************************
 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 22d8 AC220000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 22e4 80EA0000 	    eor T0,T0 
 370 22e8 C8F20000 	    movt T0,#0X8000
 371 22ec 06EA0006 	    and TOS,T0
 372 22f0 4FEAE676 	    asr TOS,#31  
 373 22f4 00F000BD 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 22f8 DC220000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 2304 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 230c 06EA0006 	    and TOS,T0 
 382 2310 4FEAD656 	    lsr TOS,#23
 383 2314 A6F17F06 	    sub TOS,#127 
 384 2318 00F0EEBC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 231c FC220000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 2328 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 2330 06EA0006 	    AND TOS,T0 
 393 2334 80EA0000 	    EOR T0,T0 
 394 2338 C0F28000 	    MOVT T0,0x80
 395 233c 46EA0006 	    ORR TOS,T0 
 396 2340 00F0DABC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
ARM GAS  forth.s 			page 89


 401              	    return 3.14159265
 402              	*******************************/
 403 2344 20230000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 234c 47F8046D 	    _PUSH 
 405 2350 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
 406 2358 00F0CEBC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
 411              	********************************/
 412 235c 48230000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 2364 47F8046D 	    _PUSH 
 414 2368 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 2370 00F0C2BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 2374 60230000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 2380 47F8046D 	    _PUSH 
 423 2384 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 238c 00F0B4BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 2390 78230000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 239c 47F8046D 	    _PUSH 
 433 23a0 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 23a8 00F0A6BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 23ac 94230000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 23b8 504700BF 	    _NEST
 443 23bc 05230000 	    _ADR FEXP 
 444 23c0 3D210000 	    _ADR STOF 
 445 23c4 9D230000 	    _ADR LOG2
ARM GAS  forth.s 			page 90


 446 23c8 95210000 	    _ADR FSTAR 
 447 23cc 25210000 	    _ADR TRUNC  
 448 23d0 AD300000 	    _ADR DUPP 
 449 23d4 1D310000 	    _ADR ZLESS 
 450 23d8 632F0000 	    _QBRAN 1f 
 450      E4230000 
 451 23e0 19320000 	    _ADR ONEM
 452 23e4 FF2C0000 	1:  _UNNEST 
 453 23e8 B01F0000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 23f4 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 23f8 0000C842 	            .word  0x42C80000  // 100.0
  31 23fc 00401C46 	            .word  0x461C4000  // 10000.0 
  32 2400 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 2404 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 2408 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 240c 504700BF 	    _NEST 
  45 2410 232F0000 	    _DOLIT 2 
  45      02000000 
ARM GAS  forth.s 			page 91


  46 2418 9D310000 	    _ADR LSHIFT 
  47 241c 232F0000 	    _DOLIT p10p2n 
  47      F4230000 
  48 2424 AD310000 	    _ADR PLUS 
  49 2428 B92F0000 	    _ADR AT 
  50 242c FF2C0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 2430 504700BF 	    _NEST 
  59 2434 232F0000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 243c 232F0000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 2444 B13B0000 	    _ADR PICK  // idx f e 1 idx 
  62 2448 9D310000 	    _ADR LSHIFT // idx f e bit_mask 
  63 244c 2D310000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 2450 FF2C0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 2454 504700BF 	    _NEST 
  78 2458 29300000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 245c 15300000 	    _ADR RAT   // idx f e R: e 
  81 2460 31240000 	    _ADR bit_state // idx f state 
  82 2464 632F0000 	    _QBRAN 1f   // bit reset 
  82      78240000 
  83 246c ED300000 	    _ADR OVER 
  84 2470 0D240000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2474 B5210000 	    _ADR FSLH  // idx f R: e 
  86 2478 BD300000 	1:  _ADR SWAP  // f idx R: e 
  87 247c 09320000 	    _ADR ONEP   // F idx++ R: e 
  88 2480 BD300000 	    _ADR SWAP   // idx f  
  89 2484 ED300000 	    _ADR OVER   // idx f idx 
  90 2488 232F0000 	    _DOLIT 5 
  90      05000000 
  91 2490 B9340000 	    _ADR GREAT  // idx > 5
  92 2494 632F0000 	    _QBRAN div_loop 
  92      5C240000 
  93 249c E52F0000 	    _ADR RFROM 
  94 24a0 9D300000 	    _ADR DROP 
  95 24a4 FF2C0000 	    _UNNEST 
  96              	
ARM GAS  forth.s 			page 92


  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 24a8 504700BF 	    _NEST 
 109 24ac 29300000 	    _ADR TOR 
 110              	mult_loop:
 111 24b0 15300000 	    _ADR RAT   // idx f e R: e 
 112 24b4 31240000 	    _ADR bit_state // idx f state 
 113 24b8 632F0000 	    _QBRAN 1f   // bit reset 
 113      CC240000 
 114 24c0 ED300000 	    _ADR OVER  
 115 24c4 0D240000 	    _ADR p10p2at // idx f pwr10 R: e
 116 24c8 95210000 	    _ADR FSTAR  // idx f R: e 
 117 24cc BD300000 	1:  _ADR SWAP  // f idx R: e 
 118 24d0 09320000 	    _ADR ONEP   // F idx++ R: e 
 119 24d4 BD300000 	    _ADR SWAP   // idx f  
 120 24d8 ED300000 	    _ADR OVER   // idx f idx 
 121 24dc 232F0000 	    _DOLIT 5 
 121      05000000 
 122 24e4 B9340000 	    _ADR GREAT  // idx > 5
 123 24e8 632F0000 	    _QBRAN mult_loop 
 123      B0240000 
 124 24f0 E52F0000 	    _ADR RFROM 
 125 24f4 9D300000 	    _ADR DROP 
 126 24f8 FF2C0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 24fc 504700BF 	    _NEST 
 136 2500 ED300000 	    _ADR OVER  // e f e 
 137 2504 632F0000 	    _QBRAN 3f // exp==0,  done 
 137      40250000 
 138 250c 232F0000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 2514 E5320000 	    _ADR NROT // idx e f
 140 2518 BD300000 	    _ADR SWAP // idx f e   
 141 251c AD300000 	    _ADR DUPP  // idx f e e 
 142 2520 1D310000 	    _ADR ZLESS
 143 2524 632F0000 	    _QBRAN pos_exp 
 143      3C250000 
 144              	// negative exponent 
 145 252c E1330000 	    _ADR ABSS 
 146 2530 55240000 	    _ADR mant_div 
 147 2534 8B2F0000 	    _BRAN 3f 
ARM GAS  forth.s 			page 93


 147      40250000 
 148              	pos_exp: // positive exponent 
 149 253c A9240000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 2540 BD300000 	3:  _ADR SWAP 
 152 2544 9D300000 	    _ADR DROP 
 153 2548 FF2C0000 	    _UNNEST 
 154              	
 155              	
 156              	/********************************
 157              	    integer ( a cnt -- a+ cnt- f# )
 158              	*********************************/
 159              	integer:
 160 254c 504700BF 	    _NEST 
 161 2550 232F0000 	    _DOLIT 0 
 161      00000000 
 162 2558 AD300000 	    _ADR DUPP 
 163 255c D1300000 	    _ADR DSWAP // 0 0 a cnt 
 164 2560 D53F0000 	    _ADR TONBR // d a+ cnt- 
 165 2564 3D300000 	    _ADR DTOR 
 166 2568 9D300000 	    _ADR DROP // drop hi word 
 167 256c F92F0000 	    _ADR DRFROM // i a+ cnt-  
 168 2570 D1320000 	    _ADR ROT  // a+ cnt- i
 169 2574 3D210000 	    _ADR STOF 
 170 2578 FF2C0000 	    _UNNEST 
 171              	
 172              	
 173              	/*****************************
 174              	   decimals ( a cnt -- a+ cnt- fdec )
 175              	   parse digits after '.' 
 176              	   convert to float 
 177              	*****************************/
 178              	decimals:
 179 257c 504700BF 	    _NEST 
 180 2580 AD300000 	    _ADR DUPP 
 181 2584 29300000 	    _ADR TOR 
 182 2588 232F0000 	    _DOLIT 0
 182      00000000 
 183 2590 AD300000 	    _ADR DUPP
 184 2594 D1300000 	    _ADR DSWAP 
 185 2598 D53F0000 	    _ADR TONBR // -- d a+ cnt-  
 186 259c D1300000 	    _ADR DSWAP  // a+ cnt- d
 187 25a0 9D300000 	    _ADR DROP   // a+ cnt- i 
 188 25a4 3D210000 	    _ADR STOF  // convert integer to float 
 189 25a8 E52F0000 	    _ADR RFROM  // a+ cnt- f# cnt 
 190 25ac 232F0000 	    _DOLIT 2 
 190      02000000 
 191 25b4 B13B0000 	    _ADR  PICK  
 192 25b8 BD310000 	    _ADR SUBB 
 193 25bc 232F0000 	    _DOLIT 9 
 193      09000000 
 194 25c4 E5340000 	    _ADR MIN 
 195 25c8 E51F0000 	    _ADR PWR10
 196 25cc B5210000 	    _ADR FSLH  // a+ cnt- fdec 
 197 25d0 FF2C0000 	    _UNNEST 
 198              	
 199              	
ARM GAS  forth.s 			page 94


 200              	/************************************
 201              	   exponent ( a cnt -- a+ cnt- exp )
 202              	   parse float exponent 
 203              	************************************/
 204              	exponent: 
 205 25d4 504700BF 	    _NEST 
 206 25d8 6B400000 	    _ADR NEGQ 
 207 25dc 29300000 	    _ADR TOR 
 208 25e0 232F0000 	    _DOLIT 0 
 208      00000000 
 209 25e8 AD300000 	    _ADR DUPP 
 210 25ec D1300000 	    _ADR DSWAP // 0 0 a cnt  
 211 25f0 D53F0000 	    _ADR TONBR // d a cnt   
 212 25f4 D1300000 	    _ADR DSWAP
 213 25f8 9D300000 	    _ADR DROP  // hi word 
 214 25fc E52F0000 	    _ADR RFROM 
 215 2600 632F0000 	    _QBRAN 1f 
 215      0C260000 
 216 2608 D1330000 	    _ADR NEGAT 
 217              	1:  
 218 260c FF2C0000 	    _UNNEST  // -- a+ cnt- exp   
 219              	
 220              	
 221              	/**********************************
 222              	    FLOAT? ( a -- f# -2 | a 0 )
 223              	    parse float number 
 224              	    return a 0 if not float 
 225              	**********************************/
 226 2610 B0230000 	    _HEADER FLOATQ,6,"FLOAT?"
 226      06464C4F 
 226      41543F00 
 227 261c 504700BF 	    _NEST
 228              	    // always use base 10 
 229              	    // hexadecimal float not accepted 
 230 2620 19360000 	    _ADR BASE 
 231 2624 B92F0000 	    _ADR AT 
 232 2628 29300000 	    _ADR TOR 
 233              	    // use decimal base  
 234 262c 493F0000 	    _ADR DECIM 
 235 2630 232F0000 		_DOLIT	0      // failed flag   
 235      00000000 
 236 2638 ED300000 		_ADR	OVER   // a 0 a     R: base
 237 263c 4D350000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 238              	// check for '-'|'+' save sign on R: 
 239 2640 6B400000 	    _ADR   NEGQ
 240 2644 29300000 	    _ADR   TOR // -- a 0 a+ cnt-  R: base sign 
 241 2648 AD300000 	    _ADR   DUPP 
 242 264c 29300000 	    _ADR   TOR  // a 0 a+ cnt r: base sign cnt 
 243 2650 4D250000 	    _ADR  integer // a 0 a+ cnt- fint 
 244 2654 ED300000 	    _ADR  OVER  
 245 2658 E52F0000 	    _ADR  RFROM  
 246 265c 39340000 	    _ADR  EQUAL
 247 2660 BD300000 	    _ADR  SWAP
 248 2664 29300000 	    _ADR  TOR  //  a 0 a+ cnt- flag r: base sign fint  
 249 2668 772F0000 	    _TBRAN expect_dot  
 249      A0260000 
 250              	// must be '.' or 'E'     
ARM GAS  forth.s 			page 95


 251 2670 232F0000 	    _DOLIT '.' 
 251      2E000000 
 252 2678 49400000 	    _ADR CHARQ
 253 267c 772F0000 	    _TBRAN get_fraction  
 253      B4260000 
 254 2684 232F0000 	    _DOLIT 'E'
 254      45000000 
 255 268c 49400000 	    _ADR  CHARQ 
 256 2690 772F0000 	    _TBRAN get_exponent 
 256      08270000 
 257 2698 8B2F0000 	    _BRAN error2
 257      5C270000 
 258              	expect_dot:
 259 26a0 232F0000 	    _DOLIT '.' 
 259      2E000000 
 260 26a8 49400000 	    _ADR CHARQ 
 261 26ac 632F0000 	    _QBRAN error2
 261      5C270000 
 262              	get_fraction:
 263 26b4 ED300000 	    _ADR OVER 
 264 26b8 D92F0000 	    _ADR CAT 
 265 26bc 232F0000 	    _DOLIT 10
 265      0A000000 
 266 26c4 6D3F0000 	    _ADR DIGTQ 
 267 26c8 BD300000 	    _ADR SWAP 
 268 26cc 9D300000 	    _ADR DROP 
 269 26d0 632F0000 	    _QBRAN error2       
 269      5C270000 
 270 26d8 7D250000 	    _ADR decimals 
 271 26dc 29300000 	    _ADR  TOR    // a 0 a+ cnt- r: base sign fint ffrac 
 272              	// if next char is 'E' get exponent 
 273 26e0 232F0000 	    _DOLIT 'E' 
 273      45000000 
 274 26e8 49400000 	    _ADR CHARQ
 275 26ec 772F0000 	    _TBRAN get_exponent 
 275      08270000 
 276 26f4 232F0000 	    _DOLIT fzero 
 276      00000000 
 277 26fc 29300000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac fexp 
 278 2700 8B2F0000 	    _BRAN build_float
 278      1C270000 
 279              	get_exponent: 
 280 2708 D5250000 	    _ADR exponent // -- a 0 a+ cnt- exp
 281 270c 29300000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac exp 
 282 2710 AD300000 	    _ADR DUPP 
 283 2714 772F0000 	    _TBRAN error4   // count must be 0 
 283      7C270000 
 284              	build_float: // a 0 a+ cnt- R: base sign fint fdec exp 
 285 271c F9320000 	    _ADR DDROP 
 286 2720 F9320000 	    _ADR DDROP 
 287 2724 E52F0000 	    _ADR RFROM 
 288 2728 F92F0000 	    _ADR DRFROM 
 289 272c 55210000 	    _ADR FPLUS 
 290 2730 FD240000 	    _ADR exp_adjust
 291 2734 E52F0000 	    _ADR RFROM 
 292 2738 632F0000 	    _QBRAN 1f 
 292      4C270000 
ARM GAS  forth.s 			page 96


 293 2740 232F0000 	    _DOLIT fminus1
 293      000080BF 
 294 2748 95210000 	    _ADR FSTAR 
 295 274c 232F0000 	1:  _DOLIT -2 
 295      FEFFFFFF 
 296 2754 8B2F0000 	    _BRAN restore_base  
 296      90270000 
 297              	error2: // a 0 a cnt R: base sign fint 
 298 275c F9320000 	    _ADR DDROP  
 299 2760 8B2F0000 	    _BRAN e4  
 299      88270000 
 300              	error3: // a 0 a cnt R: base sign fint fdec  
 301 2768 F9320000 	    _ADR DDROP  // a 0 a R: base sign
 302 276c E52F0000 	    _ADR RFROM 
 303 2770 9D300000 	    _ADR DROP 
 304 2774 8B2F0000 	    _BRAN e4  
 304      88270000 
 305              	error4: // a 0 a+ cnt- r: base sign fint ffrac fexp  
 306 277c F9320000 	    _ADR DDROP 
 307 2780 F92F0000 	    _ADR DRFROM 
 308 2784 F9320000 	    _ADR DDROP 
 309 2788 F92F0000 	e4: _ADR DRFROM 
 310 278c F9320000 	    _ADR DDROP 
 311              	restore_base: 
 312 2790 E52F0000 	    _ADR RFROM 
 313 2794 19360000 	    _ADR BASE 
 314 2798 A52F0000 	    _ADR STORE 
 315 279c FF2C0000 	    _UNNEST 
 316              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
ARM GAS  forth.s 			page 97


  29 27a0 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 27a4 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 27a8 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 27ac 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 27b0 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 27b4 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 27b8 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 27bc 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 27c0 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 27c4 14260000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 27d0 504700BF 	    _NEST
  50 27d4 232F0000 	    _DOLIT 1  
  50      01000000 
  51 27dc D1340000 	    _ADR MAX  
  52 27e0 232F0000 	    _DOLIT 8
  52      08000000 
  53 27e8 E5340000 	    _ADR MIN 
  54 27ec 232F0000 	    _DOLIT 2 
  54      02000000 
  55 27f4 9D310000 	    _ADR LSHIFT 
  56 27f8 232F0000 	    _DOLIT rounding 
  56      A0270000 
  57 2800 AD310000 	    _ADR PLUS 
  58 2804 B92F0000 	    _ADR AT   
  59 2808 55210000 	    _ADR FPLUS 
  60 280c FF2C0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 2810 C8270000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 2818 57F8040B 	    ldr T0,[DSP],#4
  69 281c 3070     	    strb T0,[TOS]  
  70 281e 06F10106 	    add TOS,#1
  71 2822 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
ARM GAS  forth.s 			page 98


  79              	ITOA:
  80 2824 504700BF 	    _NEST 
  81 2828 29300000 	    _ADR TOR  // >R ( i r: b )
  82 282c 25390000 	    _ADR STOD // ( dbl r: b )
  83 2830 AD300000 	    _ADR DUPP // ( dbl i r: b )
  84 2834 29300000 	    _ADR TOR  // ( dbl r: b sign )
  85 2838 55330000 	    _ADR DABS 
  86 283c E93D0000 	    _ADR BDIGS 
  87 2840 553E0000 	    _ADR DIGS 
  88 2844 E52F0000 	    _ADR RFROM 
  89 2848 893E0000 	    _ADR SIGN 
  90 284c B13E0000 	    _ADR EDIGS // ( -- p u )
  91 2850 AD300000 	    _ADR DUPP  
  92 2854 E5320000 	    _ADR NROT // -rot ( -- u p u )
  93 2858 15300000 	    _ADR RAT  // r@ ( -- u p u b )
  94 285c BD300000 	    _ADR SWAP // ( -- u p b u )
  95 2860 913C0000 	    _ADR CMOVE // ( -- u ) 
  96 2864 AD300000 	    _ADR DUPP  // ( -- u u )
  97 2868 E52F0000 	    _ADR RFROM // ( -- u u b )
  98 286c AD310000 	    _ADR PLUS  // ( -- u b+ )
  99 2870 BD300000 	    _ADR SWAP  // ( -- b+ u )
 100 2874 FF2C0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 2878 14280000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2884 504700BF 	    _NEST 
 116 2888 E51F0000 	    _ADR PWR10 
 117 288c 29300000 	    _ADR TOR  // f2 r: f1 
 118 2890 232F0000 	    _DOLIT 0   // m 
 118      00000000 
 119 2898 BD300000 	    _ADR SWAP  // m f2 
 120 289c AD300000 	1:  _ADR DUPP 
 121 28a0 15300000 	    _ADR RAT 
 122 28a4 69220000 	    _ADR FLESS
 123 28a8 632F0000 	    _QBRAN 2f
 123      D0280000 
 124 28b0 232F0000 	    _DOLIT ten 
 124      00002041 
 125 28b8 95210000 	    _ADR FSTAR
 126              	    // decrement m   
 127 28bc BD300000 	    _ADR SWAP
 128 28c0 19320000 	    _ADR ONEM 
 129 28c4 BD300000 	    _ADR SWAP 
 130 28c8 8B2F0000 	    _BRAN 1b
ARM GAS  forth.s 			page 99


 130      9C280000 
 131 28d0 E52F0000 	2:  _ADR RFROM 
 132 28d4 9D300000 	    _ADR DROP 
 133 28d8 BD300000 	    _ADR SWAP 
 134 28dc FF2C0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
 142              	    f1   float to scale 
 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
 146              	    m    log10 reduction factor
 147              	******************************/
 148 28e0 7C280000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 28f0 504700BF 	    _NEST 
 150 28f4 E51F0000 	    _ADR PWR10
 151 28f8 29300000 	    _ADR TOR
 152 28fc 232F0000 	    _DOLIT 0 
 152      00000000 
 153 2904 BD300000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 2908 15300000 	1:  _ADR RAT   
 155 290c ED300000 	    _ADR OVER 
 156 2910 4D220000 	    _ADR FGREAT 
 157 2914 772F0000 	    _TBRAN 2f 
 157      3C290000 
 158 291c 232F0000 	    _DOLIT ten 
 158      00002041 
 159 2924 B5210000 	    _ADR FSLH 
 160              	    // increment m 
 161 2928 BD300000 	    _ADR SWAP 
 162 292c 09320000 	    _ADR ONEP 
 163 2930 BD300000 	    _ADR SWAP 
 164 2934 8B2F0000 	    _BRAN 1b   
 164      08290000 
 165 293c E52F0000 	2:  _ADR RFROM 
 166 2940 9D300000 	    _ADR DROP
 167 2944 BD300000 	    _ADR SWAP 
 168 2948 FF2C0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
ARM GAS  forth.s 			page 100


 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 294c 504700BF 	    _NEST
 183 2950 BD300000 	    _ADR SWAP
 184 2954 BD320000 	    _ADR QDUP    
 185 2958 632F0000 	    _QBRAN 2f 
 185      7C290000 
 186 2960 BD300000 	    _ADR SWAP 
 187 2964 232F0000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 296c BD300000 	    _ADR SWAP  
 189 2970 19280000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 2974 25280000 	    _ADR ITOA // ( i b -- b u )
 191 2978 9D300000 	    _ADR DROP // ( -- b+ )     
 192 297c FF2C0000 	2:  _UNNEST 
 193              	
 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 2980 504700BF 	    _NEST
 208 2984 232F0000 	    _DOLIT 2 
 208      02000000 
 209 298c B13B0000 	    _ADR PICK 
 210 2990 1D310000 	    _ADR ZLESS 
 211 2994 632F0000 	    _QBRAN 1f 
 211      AC290000 
 212 299c 29300000 	    _ADR TOR 
 213 29a0 9D300000 	    _ADR DROP 
 214 29a4 8B2F0000 	    _BRAN 2f 
 214      182A0000 
 215 29ac 232F0000 	1:   _DOLIT '.' 
 215      2E000000 
 216 29b4 BD300000 	    _ADR SWAP 
 217 29b8 19280000 	    _ADR CSTOP 
 218 29bc 29300000 	    _ADR TOR // >r ( d f r: b ) 
 219 29c0 BD300000 	1:  _ADR SWAP  
 220 29c4 BD320000 	    _ADR QDUP 
 221 29c8 632F0000 	    _QBRAN 2f
 221      182A0000 
 222 29d0 19320000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 29d4 BD300000 	    _ADR SWAP // swap ( -- d f r: b )
 224 29d8 232F0000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 29e0 95210000 	    _ADR FSTAR // f*
 226 29e4 AD300000 	    _ADR DUPP  
 227 29e8 25210000 	    _ADR TRUNC // d f i
 228 29ec AD300000 	    _ADR DUPP  // d f i i  
ARM GAS  forth.s 			page 101


 229 29f0 232F0000 	    _DOLIT '0' 
 229      30000000 
 230 29f8 AD310000 	    _ADR PLUS 
 231 29fc E52F0000 	    _ADR RFROM // R> ( d f c b )
 232 2a00 19280000 	    _ADR CSTOP // ( d f i b+ )
 233 2a04 29300000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 2a08 3D210000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 2a0c 75210000 	    _ADR FSUBB 
 236 2a10 8B2F0000 	    _BRAN 1b 
 236      C0290000 
 237 2a18 9D300000 	2:  _ADR DROP 
 238 2a1c E52F0000 	    _ADR RFROM 
 239 2a20 FF2C0000 	    _UNNEST 
 240              	
 241              	/***************************
 242              	 convert integer part of float 
 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
 256 2a24 504700BF 	    _NEST 
 257 2a28 29300000 	    _ADR TOR // ( -- d f r: b )
 258 2a2c AD300000 	    _ADR DUPP 
 259 2a30 232F0000 	    _DOLIT fone 
 259      0000803F 
 260 2a38 69220000 	    _ADR FLESS 
 261 2a3c 632F0000 	    _QBRAN 1f
 261      9C2A0000 
 262 2a44 232F0000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 2a4c 85280000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 2a50 E5320000 	    _ADR NROT
 265 2a54 ED300000 	    _ADR OVER 
 266 2a58 D1270000 	    _ADR ROUND
 267 2a5c AD300000 	    _ADR DUPP 
 268 2a60 232F0000 	    _DOLIT fone 
 268      0000803F 
 269 2a68 69220000 	    _ADR FLESS 
 270 2a6c 632F0000 	    _QBRAN 2f 
 270      A82A0000 
 271              	    // first digit '0' 
 272 2a74 232F0000 	    _DOLIT '0' 
 272      30000000 
 273 2a7c E52F0000 	    _ADR RFROM 
 274 2a80 19280000 	    _ADR CSTOP 
 275 2a84 29300000 	    _ADR TOR 
 276              	    // decrement d 
 277 2a88 BD300000 	    _ADR SWAP 
ARM GAS  forth.s 			page 102


 278 2a8c 19320000 	    _ADR ONEM 
 279 2a90 BD300000 	    _ADR SWAP 
 280 2a94 E52F0000 	    _ADR RFROM // r> ( -- m d f b )  
 281 2a98 FF2C0000 	    _UNNEST 
 282 2a9c ED300000 	1:  _ADR OVER 
 283 2aa0 F1280000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 2aa4 E5320000 	    _ADR NROT   // m d f r: b 
 285 2aa8 AD300000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 2aac 25210000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 2ab0 AD300000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 2ab4 29300000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 289 2ab8 3D210000 	    _ADR STOF  // ( -- m d f f )
 290 2abc 75210000 	    _ADR FSUBB // ( -- m d f r: b i )
 291 2ac0 E52F0000 	    _ADR RFROM // ( -- m d f i r: b )
 292 2ac4 E52F0000 	    _ADR RFROM  // ( -- m d f i b )  
 293 2ac8 25280000 	    _ADR ITOA // -- m d f b u )
 294 2acc 29300000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 2ad0 D1320000 	    _ADR ROT
 296 2ad4 E52F0000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 2ad8 BD310000 	    _ADR SUBB // ( -- m f b d- )
 298 2adc E5320000 	    _ADR NROT // ( -- m d f b )
 299 2ae0 FF2C0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 2ae4 E4280000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 2aec 504700BF 	    _NEST 
 315 2af0 ED300000 	    _ADR OVER  
 316 2af4 05230000 	    _ADR FEXP 
 317 2af8 232F0000 	    _DOLIT 128 
 317      80000000 
 318 2b00 39340000 	    _ADR EQUAL 
 319 2b04 632F0000 	    _QBRAN 1f
 319      142B0000 
 320 2b0c 8B2F0000 	    _BRAN nan 
 320      D02B0000 
 321 2b14 AD300000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 2b18 29300000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 2b1c 69320000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 2b20 BD300000 	    _ADR SWAP 
 326 2b24 19280000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 2b28 ED300000 	    _ADR OVER 
 328 2b2c 632F0000 	    _QBRAN zdz // 0.0 
 328      802B0000 
 329              	    // check float sign 
ARM GAS  forth.s 			page 103


 330 2b34 ED300000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 2b38 E5220000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 332 2b3c 632F0000 	    _QBRAN 1f  // 0branch 1f 
 332      602B0000 
 333              	    // negative number add '-' to buffer 
 334 2b44 BD300000 	    _ADR SWAP 
 335 2b48 F5210000 	    _ADR FABS 
 336 2b4c BD300000 	    _ADR SWAP 
 337 2b50 232F0000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 2b58 BD300000 	    _ADR SWAP 
 339 2b5c 19280000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 340 2b60 252A0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 341 2b64 81290000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 2b68 4D290000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 2b6c 15300000 	    _ADR RAT 
 344 2b70 BD310000 	    _ADR SUBB 
 345 2b74 E52F0000 	    _ADR RFROM 
 346 2b78 BD300000 	    _ADR SWAP 
 347 2b7c FF2C0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 2b80 29300000 	     _ADR TOR 
 350 2b84 F9320000 	     _ADR DDROP
 351 2b88 E52F0000 	     _ADR RFROM
 352 2b8c 232F0000 	     _DOLIT '0'
 352      30000000 
 353 2b94 BD300000 	     _ADR SWAP 
 354 2b98 19280000 	     _ADR CSTOP 
 355 2b9c 232F0000 	     _DOLIT '.'
 355      2E000000 
 356 2ba4 BD300000 	     _ADR SWAP 
 357 2ba8 19280000 	     _ADR CSTOP 
 358 2bac 232F0000 	     _DOLIT '0'
 358      30000000 
 359 2bb4 BD300000 	     _ADR SWAP 
 360 2bb8 19280000 	     _ADR CSTOP 
 361 2bbc 9D300000 	     _ADR DROP  
 362 2bc0 E52F0000 	     _ADR RFROM 
 363 2bc4 232F0000 	     _DOLIT 4 
 363      04000000 
 364 2bcc FF2C0000 	     _UNNEST  
 365              	nan: // not a number or infinity
 366 2bd0 29300000 	    _ADR TOR   // ( d f r: b )
 367 2bd4 BD300000 	    _ADR SWAP  // f d  
 368 2bd8 9D300000 	    _ADR DROP  // f 
 369 2bdc 69320000 	    _ADR BLANK  // f c 
 370 2be0 15300000 	    _ADR RAT    // f c b 
 371 2be4 19280000 	    _ADR CSTOP  // f b+ 
 372 2be8 BD300000 	    _ADR SWAP   // b+ f 
 373 2bec 29230000 	    _ADR FMANT  // b+ mant
 374 2bf0 232F0000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 2bf8 2D310000 	    _ADR ANDD   
 376 2bfc 632F0000 	    _QBRAN infinity 
 376      3C2C0000 
 377 2c04 232F0000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
ARM GAS  forth.s 			page 104


 378 2c0c BD300000 	    _ADR SWAP   // c b+
 379 2c10 19280000 	    _ADR CSTOP  // b+
 380 2c14 232F0000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 2c1c BD300000 	    _ADR SWAP   // c b+ 
 382 2c20 19280000 	    _ADR CSTOP  // b+
 383 2c24 232F0000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 2c2c BD300000 	    _ADR SWAP   // c b+ 
 385 2c30 19280000 	    _ADR CSTOP  // b+
 386 2c34 8B2F0000 	    _BRAN 1f 
 386      6C2C0000 
 387              	infinity:
 388 2c3c 232F0000 	    _DOLIT 'I'
 388      49000000 
 389 2c44 BD300000 	    _ADR SWAP 
 390 2c48 19280000 	    _ADR CSTOP 
 391 2c4c 232F0000 	    _DOLIT 'N'
 391      4E000000 
 392 2c54 BD300000 	    _ADR SWAP 
 393 2c58 19280000 	    _ADR CSTOP 
 394 2c5c 232F0000 	    _DOLIT 'F'
 394      46000000 
 395 2c64 BD300000 	    _ADR SWAP 
 396 2c68 19280000 	    _ADR CSTOP 
 397              	1:
 398 2c6c 9D300000 	    _ADR DROP 
 399 2c70 E52F0000 	    _ADR RFROM 
 400 2c74 232F0000 	    _DOLIT 4 
 400      04000000 
 401 2c7c FF2C0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
 412 2c80 E82A0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 2c88 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 2c8c 232F0000 	    _DOLIT 1 
 415      01000000 
 416 2c94 D1340000 	    _ADR MAX 
 417 2c98 232F0000 	    _DOLIT 7 
 417      07000000 
 418 2ca0 E5340000 	    _ADR MIN
 419 2ca4 BD300000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 2ca8 E53B0000 	    _ADR HERE
 422 2cac 29300000 	    _ADR TOR  
 423 2cb0 232F0000 	    _DOLIT 16 
 423      10000000 
ARM GAS  forth.s 			page 105


 424 2cb8 C14E0000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
 426 2cbc 15300000 	    _ADR RAT 
 427 2cc0 232F0000 	    _DOLIT 16 
 427      10000000 
 428 2cc8 232F0000 	    _DOLIT 0 
 428      00000000 
 429 2cd0 093D0000 	    _ADR FILL 
 430 2cd4 E52F0000 	    _ADR RFROM // ( d f b )
 431 2cd8 ED2A0000 	    _ADR FTOA 
 432 2cdc F5410000 	    _ADR TYPEE 
 433              	    // free buffer 
 434 2ce0 232F0000 	    _DOLIT -16 
 434      F0FFFFFF 
 435 2ce8 C14E0000 	    _ADR ALLOT
 436 2cec FF2C0000 	    _UNNEST
 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
ARM GAS  forth.s 			page 106


  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2cf0 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 2cf4 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2cf8 5CF8045B 		LDR WP,[IP],#4 
  89 2cfc 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2cfe 58F804CB 		LDMFD RSP!,{IP}
  92 2d02 5CF8045B 		LDR WP,[IP],#4 
  93 2d06 2847     		BX WP  
  94              	
ARM GAS  forth.s 			page 107


  95              		.p2align 2 
  96              	
  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 2d08 04F14C01 		add T1,UP,#USER_CTOP // pointer HERE 
 106 2d0c 0968     		ldr T1,[T1]     // address in here   
 107 2d0e 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
 108 2d12 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 2d16 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 2d1a 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
 111 2d1e 04F14C02 		add T2,UP,#USER_CTOP 
 112 2d22 1160     		str T1,[T2]  // save update HERE value 
 113 2d24 E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 2d26 47F8046D 		_PUSH 
 119 2d2a 04F11406 		ADD TOS,UP,#STDIN 
 120 2d2e E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
 124              	TSTDOUT:
 125 2d30 47F8046D 		_PUSH 
 126 2d34 04F11806 		ADD TOS,UP,#STDOUT
 127 2d38 DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 2d3a 842C0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
 134 2d44 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 2d4c 47F8046D 	    _PUSH 
 136 2d50 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 2d52 81EA0101 	    eor T1,T1 
 138 2d56 8162     	    str T1,[T0,#SCB_CFSR]
 139 2d58 CEE7     	    _NEXT 
 140              	
 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 2d5a 3E2D0000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 2d64 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
ARM GAS  forth.s 			page 108


 146      CEF20000 
 147 2d6c 47F8046D 		_PUSH 
 148 2d70 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 2d72 81EA0101 	    eor T1,T1 
 150 2d76 8163     	    str T1,[T0,#SCB_BFAR]
 151 2d78 BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
 157 2d7a 5E2D0000 		_HEADER QKEY,4,"KEY?" 
 157      044B4559 
 157      3F00
 158 2d84 504700BF 		_NEST 
 159 2d88 272D0000 		_ADR TSTDIN // ' STDIN 
 160 2d8c 713C0000 		_ADR ATEXE
 161 2d90 FF2C0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 2d94 7E2D0000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 2d9c 504700BF 		_NEST
 169              	KEY1:
 170 2da0 091B0000 		_ADR CAPS_LED 
 171 2da4 852D0000 		_ADR	QKEY 
 172 2da8 632F0000 		_QBRAN	KEY1
 172      A02D0000 
 173 2db0 FF2C0000 		_UNNEST
 174              	
 175              	/**********************************************
 176              		EMIT ( c -- )
 177              		transmit a character to console 
 178              	**********************************************/
 179 2db4 982D0000 		_HEADER EMIT,4,"EMIT"
 179      04454D49 
 179      540000BF 
 180 2dc0 504700BF 		_NEST 
 181 2dc4 312D0000 		_ADR TSTDOUT 
 182 2dc8 713C0000 		_ADR ATEXE 
 183 2dcc FF2C0000 		_UNNEST 
 184              	
 185              	
 186              	/************************************************
 187              	 GET-IP ( n - c )
 188              	 return interrupt priority of IRQn 
 189              	************************************************/
 190              	/*
 191              		_HEADER GETIP,6,"GET-IP" 
 192              		_NEST 
 193              		_ADR DUPP 
 194              		_ADR ZLESS
 195              		_QBRAN 1f 
 196              		_DOLIT 15
ARM GAS  forth.s 			page 109


 197              		_ADR ANDD
 198              		_DOLIT 4
 199              		_ADR SUBB  
 200              		_DOLIT 0xE000ED18 
 201              		_BRAN 2f 
 202              	1:	_DOLIT 0xE000E400 
 203              	2:	_ADR PLUS 
 204              		_ADR CAT
 205              		_DOLIT 4 
 206              		_ADR RSHIFT 
 207              		_UNNEST 
 208              	*/
 209              	
 210              	/***********************************************
 211              	 RANDOM ( n+ -- {0..n+ - 1} )
 212              	 return pseudo random number 
 213              	 REF: https://en.wikipedia.org/wiki/Xorshift
 214              	************************************************/
 215 2dd0 B82D0000 		_HEADER RAND,6,"RANDOM"
 215      0652414E 
 215      444F4D00 
 216 2ddc 504700BF 		_NEST
 217 2de0 E1330000 		_ADR ABSS   
 218 2de4 B9350000 		_ADR SEED 
 219 2de8 B92F0000 		_ADR AT 
 220 2dec AD300000 		_ADR DUPP 
 221 2df0 232F0000 		_DOLIT 13
 221      0D000000 
 222 2df8 9D310000 		_ADR LSHIFT 
 223 2dfc 55310000 		_ADR XORR  
 224 2e00 AD300000 		_ADR DUPP 
 225 2e04 232F0000 		_DOLIT 17 
 225      11000000 
 226 2e0c 85310000 		_ADR RSHIFT 
 227 2e10 55310000 		_ADR XORR 
 228 2e14 AD300000 		_ADR DUPP
 229 2e18 232F0000 		_DOLIT 5 
 229      05000000 
 230 2e20 9D310000 		_ADR LSHIFT 
 231 2e24 55310000 		_ADR XORR  
 232 2e28 AD300000 		_ADR DUPP 
 233 2e2c B9350000 		_ADR SEED 
 234 2e30 A52F0000 		_ADR STORE 
 235 2e34 232F0000 		_DOLIT 0x7FFFFFFF
 235      FFFFFF7F 
 236 2e3c 2D310000 		_ADR ANDD 
 237 2e40 BD300000 		_ADR SWAP 
 238 2e44 6D3A0000 		_ADR MODD 
 239 2e48 FF2C0000 		_UNNEST 
 240              	
 241              	
 242              	/****************************************
 243              	 PAUSE ( u -- ) 
 244              	 suspend execution for u milliseconds
 245              	****************************************/
 246 2e4c D42D0000 		_HEADER PAUSE,5,"PAUSE"
 246      05504155 
ARM GAS  forth.s 			page 110


 246      534500BF 
 247 2e58 504700BF 		_NEST 
 248 2e5c E9350000 		_ADR TIMER 
 249 2e60 A52F0000 		_ADR STORE 
 250              	PAUSE_LOOP:
 251 2e64 E9350000 		_ADR TIMER 
 252 2e68 B92F0000 		_ADR AT 
 253 2e6c 632F0000 		_QBRAN PAUSE_EXIT 
 253      7C2E0000 
 254 2e74 8B2F0000 		_BRAN PAUSE_LOOP 
 254      642E0000 
 255              	PAUSE_EXIT: 		
 256 2e7c FF2C0000 		_UNNEST 
 257              	
 258              	/******************************************
 259              	  ULED ( T|F -- )
 260              	  control user LED, -1 ON, 0 OFF 
 261              	*******************************************/
 262 2e80 502E0000 		_HEADER ULED,4,"ULED"
 262      04554C45 
 262      440000BF 
 263 2e8c 4FF40050 		mov T0,#(1<<LED_PIN)
 264 2e90 4FF40061 		_MOV32 T1,LED_GPIO 
 264      C4F20201 
 265 2e98 3600     		movs TOS,TOS 
 266 2e9a 57F8046B 		_POP
 267 2e9e 03D0     		beq ULED_OFF
 268 2ea0 4FEA0040 		lsl T0,#16 
 269 2ea4 8861     		str T0,[T1,#GPIO_BSRR]
 270 2ea6 27E7     		_NEXT 
 271              	ULED_OFF:
 272 2ea8 8861     		str T0,[T1,#GPIO_BSRR]
 273 2eaa 25E7     		_NEXT    
 274              	
 275              	/**************************
 276              	   JOYSTK  ( -- u )
 277              	   read joystick port 
 278              	**************************/
 279 2eac 842E0000 		_HEADER JOYSTK,6,"JOYSTK"
 279      064A4F59 
 279      53544B00 
 280 2eb8 504700BF 		_NEST 
 281 2ebc 232F0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 281      10000240 
 282 2ec4 B92F0000 		_ADR AT 
 283 2ec8 232F0000 		_DOLIT 0x100f 
 283      0F100000 
 284 2ed0 2D310000 		_ADR ANDD 
 285 2ed4 FF2C0000 		_UNNEST 
 286              	
 287              	/****************************
 288              		BEEP ( msec freq -- )
 289              	input:
 290              		freq  frequence hertz 
 291              		msec  durration in msec 
 292              	*****************************/
 293 2ed8 B02E0000 		_HEADER BEEP,4,"BEEP"
ARM GAS  forth.s 			page 111


 293      04424545 
 293      500000BF 
 294 2ee4 48F68050 		_MOV32 r0,6000000 // Fclk 
 294      C0F25B00 
 295 2eec B0FBF6F0 		udiv r0,r0,TOS
 296 2ef0 57F8046B 		_POP  
 297 2ef4 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 297      C4F20001 
 298 2efc C862     		str r0,[r1,#TIM_ARR]
 299 2efe 4FEA5000 		lsr r0,#1
 300 2f02 4863     		str r0,[r1,#TIM_CCR1]
 301 2f04 4FF00100 		mov r0,#1 
 302 2f08 0862     		str r0,[r1,#TIM_CCER]
 303 2f0a 0860     		str r0,[r1,#TIM_CR1]
 304 2f0c C868     		ldr r0,[r1,#TIM_DIER]
 305 2f0e C4F8B060 		str TOS,[UP,#BEEP_DTMR]
 306 2f12 57F8046B 		_POP
 307 2f16 EFE6     		_NEXT 
 308              	
 309              	
 310              	/***************
 311              	//  The kernel
 312              	***************/
 313              	
 314              	/********************
 315              	    NOP	( -- )
 316              	 	do nothing.
 317              	*********************/
 318 2f18 DC2E0000 		_HEADER NOP,3,"NOP"
 318      034E4F50 
 319 2f20 EAE6     		_NEXT 
 320              	 
 321              	/********************
 322              	    doLIT	( -- w )
 323              	 	Push an inline literal.
 324              	hidden word used by compiler 
 325              	*********************/
 326              	DOLIT:
 327 2f22 47F8046D 		_PUSH				//  store TOS on data stack
 328 2f26 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 329 2f2a E5E6     		_NEXT 
 330              	
 331              	/*******************************
 332              	    EXECUTE	( ca -- )
 333              	 	Execute the word at ca.
 334              	*******************************/
 335 2f2c 1C2F0000 		_HEADER EXECU,7,"EXECUTE"
 335      07455845 
 335      43555445 
 336 2f38 46F00105 		ORR	WP,TOS,#1 
 337 2f3c 57F8046B 		_POP
 338 2f40 2847     		BX WP 
 339 2f42 D9E6     		_NEXT 
 340              	
 341              	/**********************************************************
 342              	    donext	( -- ) counter on R:
 343              	 	Run time code for the single index loop.
ARM GAS  forth.s 			page 112


 344              	 	: next ( -- ) \ hilevel model
 345              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 346              	hidden word used by compiler 	  
 347              	*********************************************************/
 348              	DONXT:
 349 2f44 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 350 2f48 22B9     		CBNZ T2,NEXT1 
 351              		/* loop done */
 352 2f4a 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 353 2f4e 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 354 2f52 D1E6     		_NEXT
 355              	NEXT1:
 356              		/* decrement loop counter */
 357 2f54 A2F10102 		SUB	T2,T2,#1
 358 2f58 C8F80020 		STR	T2,[RSP]
 359 2f5c DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 360 2f60 CAE6     		_NEXT 
 361              	
 362              	/**************************************
 363              	    ?branch	( f -- )
 364              	 	Branch if flag is zero.
 365              	hiddend word used by compiler
 366              	**************************************/
 367              	QBRAN:
 368 2f62 3600     		MOVS	TOS,TOS
 369 2f64 57F8046B 		_POP
 370 2f68 02D1     		BNE	QBRAN1
 371 2f6a DCF800C0 		LDR	IP,[IP]
 372 2f6e C3E6     		_NEXT
 373              	QBRAN1:
 374 2f70 0CF1040C 	 	ADD	IP,IP,#4
 375 2f74 C0E6     		_NEXT
 376              	
 377              	/***********************************
 378              		tbranch ( f -- )
 379              	    branch if flag is true 
 380              	***********************************/
 381              	TBRAN:
 382 2f76 3600     		MOVS TOS,TOS 
 383 2f78 57F8046B 		_POP 
 384 2f7c 02D0     		BEQ 1f 
 385 2f7e DCF800C0 		LDR IP,[IP]
 386 2f82 B9E6     		_NEXT 
 387 2f84 0CF1040C 	1:  ADD IP,IP,#4
 388 2f88 B6E6     		_NEXT 
 389              	
 390              	
 391              	/***********************************
 392              	    branch	( -- )
 393              	 	Branch to an inline address.
 394              	hidden word used by compiler 
 395              	***********************************/
 396              	BRAN:
 397 2f8a DCF800C0 		LDR	IP,[IP]
 398 2f8e B3E6     		_NEXT
 399              	
 400              	/******************************************
ARM GAS  forth.s 			page 113


 401              	    EXIT	(  -- )
 402              	 	Exit the currently executing command.
 403              	******************************************/
 404 2f90 302F0000 		_HEADER EXIT,4,"EXIT"
 404      04455849 
 404      540000BF 
 405 2f9c AFE6     		b UNNEST 
 406              	
 407              	
 408              	/***********************************
 409              	    !	   ( w a -- )
 410              	 	Pop the data stack to memory.
 411              	************************************/
 412 2f9e 942F0000 		_HEADER STORE,1,"!"
 412      0121
 413 2fa4 57F8045B 		LDR	WP,[DSP],#4
 414 2fa8 3560     		STR	WP,[TOS]
 415 2faa 57F8046B 		_POP
 416 2fae A3E6     		_NEXT 
 417              	
 418              	/********************************************
 419              	    @	   ( a -- w )
 420              	 	Push memory location to the data stack.
 421              	*********************************************/
 422 2fb0 A22F0000 		_HEADER AT,1,"@"
 422      014000BF 
 423 2fb8 3668     		LDR	TOS,[TOS]
 424 2fba 9DE6     		_NEXT 
 425              	
 426              	/*******************************************
 427              	    C!	  ( c b -- )
 428              	 	Pop the data stack to byte memory.
 429              	*******************************************/
 430 2fbc B42F0000 		_HEADER CSTOR,2,"C!"
 430      02432100 
 431 2fc4 57F8045B 		LDR	WP,[DSP],#4
 432 2fc8 3570     		STRB WP,[TOS]
 433 2fca 57F8046B 		_POP
 434 2fce 93E6     		_NEXT
 435              	
 436              	/*********************************************
 437              	    C@	  ( b -- c )
 438              	 	Push byte memory location to the data stack.
 439              	**********************************************/
 440 2fd0 C02F0000 		_HEADER CAT,2,"C@"
 440      02434000 
 441 2fd8 3678     		LDRB	TOS,[TOS]
 442 2fda 8DE6     		_NEXT 
 443              	
 444              	
 445              	/*********************************************
 446              	    R>	  ( -- w  R: w -- ) 
 447              	 	push from rstack.
 448              	**********************************************/
 449 2fdc D42F0000 		_HEADER RFROM,2,"R>"
 449      02523E00 
 450 2fe4 47F8046D 		_PUSH
ARM GAS  forth.s 			page 114


 451 2fe8 58F8046B 		LDR	TOS,[RSP],#4
 452 2fec 84E6     		_NEXT 
 453              	
 454              	/***********************************************
 455              		2R> (  -- D ) R: D --  
 456              	    push a double from rstack 
 457              	***********************************************/
 458 2fee E02F0000 		_HEADER DRFROM,3,"2R>"
 458      0332523E 
 458      00BF
 459 2ff8 47F8046D 		_PUSH 
 460 2ffc 58F8046B 		LDR TOS,[RSP],#4 
 461 3000 47F8046D 		_PUSH 
 462 3004 58F8046B 		LDR TOS,[RSP],#4
 463 3008 76E6     		_NEXT 
 464              	
 465              	/************************************************
 466              	    R@	  ( -- w )
 467              	 	Copy top of return stack to the data stack.
 468              	************************************************/
 469 300a F22F0000 		_HEADER RAT,2,"R@"
 469      02524000 
 469      00BF
 470 3014 47F8046D 		_PUSH
 471 3018 D8F80060 		LDR	TOS,[RSP]
 472 301c 6CE6     		_NEXT 
 473              	
 474              	/***********************************************
 475              	    >R	  ( w -- ) R: -- w 
 476              	 	pop to rstack.
 477              	************************************************/
 478 301e 0E300000 		_HEADER TOR,2,">R"
 478      023E5200 
 478      00BF
 479 3028 48F8046D 		STR	TOS,[RSP,#-4]!
 480 302c 57F8046B 		_POP
 481 3030 62E6     		_NEXT
 482              	
 483              	/*********************************************
 484              		2>R ( d -- ) R: -- d 
 485              		pop a double to rstack 
 486              	*********************************************/
 487 3032 22300000 		_HEADER DTOR,3,"2>R"
 487      03323E52 
 487      00BF
 488 303c 48F8046D 		STR TOS,[RSP,#-4]!
 489 3040 57F8046B 	    _POP 
 490 3044 48F8046D 		STR TOS,[RSP,#-4]!
 491 3048 57F8046B 		_POP  
 492 304c 54E6     		_NEXT 	
 493              	
 494              	
 495              	/*******************************
 496              	//	RP! ( u -- )
 497              	// initialize RPP with u 
 498              	*******************************/
 499 304e 36300000 		_HEADER RPSTOR,3,"RP!"
ARM GAS  forth.s 			page 115


 499      03525021 
 499      00BF
 500 3058 B046     		MOV RSP,TOS 
 501 305a 57F8046B 		_POP  
 502 305e 4BE6     		_NEXT 
 503              	
 504              	/********************************
 505              		SP! ( u -- )
 506              	 initialize SPP with u 
 507              	********************************/
 508 3060 52300000 		_HEADER SPSTOR,3,"SP!"
 508      03535021 
 509 3068 3746     		MOV DSP,TOS 
 510 306a 86EA0606 		EOR TOS,TOS,TOS 
 511 306e 43E6     		_NEXT 
 512              	
 513              	/**************************************
 514              	    SP@	 ( -- a )
 515              	 	Push the current data stack pointer.
 516              	***************************************/
 517 3070 64300000 		_HEADER SPAT,3,"SP@"
 517      03535040 
 518 3078 47F8046D 		_PUSH
 519 307c 3E46     		MOV	TOS,DSP
 520 307e 3BE6     		_NEXT
 521              	
 522              	/**************************************
 523              	   RP@ ( -- a )
 524              	   push current rstack pointer 
 525              	**************************************/
 526 3080 74300000 		_HEADER RPAT,3,"RP@"
 526      03525040 
 527 3088 47F8046D 		_PUSH 
 528 308c 4646     		MOV TOS,RSP 
 529 308e 33E6     		_NEXT 
 530              	
 531              	/********************************
 532              	    DROP	( w -- )
 533              	 	Discard top stack item.
 534              	********************************/
 535 3090 84300000 		_HEADER DROP,4,"DROP"
 535      0444524F 
 535      500000BF 
 536 309c 57F8046B 		_POP
 537 30a0 2AE6     		_NEXT 
 538              	
 539              	/*********************************
 540              	    DUP	 ( w -- w w )
 541              	 	Duplicate the top stack item.
 542              	*********************************/
 543 30a2 94300000 		_HEADER DUPP,3,"DUP"
 543      03445550 
 543      00BF
 544 30ac 47F8046D 		_PUSH
 545 30b0 22E6     		_NEXT 
 546              	
 547              	/**********************************
ARM GAS  forth.s 			page 116


 548              	    SWAP	( w1 w2 -- w2 w1 )
 549              	 	Exchange top two stack items.
 550              	**********************************/
 551 30b2 A6300000 		_HEADER SWAP,4,"SWAP"
 551      04535741 
 551      5000
 552 30bc 3D68     		LDR	WP,[DSP]
 553 30be 3E60     		STR	TOS,[DSP]
 554 30c0 2E46     		MOV	TOS,WP
 555 30c2 19E6     		_NEXT 
 556              	
 557              	/***********************************
 558              		2SWAP ( d2 d1 -- d1 d2 )
 559              		swap double integer 
 560              	***************************************/
 561 30c4 B6300000 		_HEADER DSWAP,5,"2SWAP"
 561      05325357 
 561      415000BF 
 562 30d0 3046     		mov T0,TOS 
 563 30d2 3968     		ldr T1,[DSP]
 564 30d4 7E68     		ldr TOS,[DSP,#4]
 565 30d6 BD68     		ldr WP,[DSP,#8]
 566 30d8 3D60     		str WP,[DSP]
 567 30da 7860     		str T0,[DSP,#4]
 568 30dc B960     		str T1,[DSP,#8]
 569 30de 0BE6     		_NEXT 
 570              	
 571              	
 572              	/***********************************
 573              	    OVER	( w1 w2 -- w1 w2 w1 )
 574              	 	Copy second stack item to top.
 575              	***********************************/
 576 30e0 C8300000 		_HEADER OVER,4,"OVER"
 576      044F5645 
 576      520000BF 
 577 30ec 47F8046D 		_PUSH
 578 30f0 7E68     		LDR	TOS,[DSP,#4]
 579 30f2 01E6     		_NEXT 
 580              	
 581              	/***********************************
 582              		2OVER ( d2 d1 -- d2 d1 d2 )
 583              		copy a double integer to TOS 
 584              	**********************************************/
 585 30f4 E4300000 		_HEADER DOVER,5,"2OVER"
 585      05324F56 
 585      455200BF 
 586 3100 7868     		ldr T0,[DSP,#4]
 587 3102 BD68     		ldr WP,[DSP,#8]
 588 3104 47F8046D 		_PUSH 
 589 3108 2E46     		mov TOS,WP 
 590 310a 47F8046D 		_PUSH
 591 310e 0646     		mov TOS,T0 
 592 3110 F2E5     		_NEXT 
 593              	
 594              	
 595              	/***********************************
 596              	    0<	  ( n -- t )
ARM GAS  forth.s 			page 117


 597              	 	Return true if n is negative.
 598              	***********************************/
 599 3112 F8300000 		_HEADER ZLESS,2,"0<"
 599      02303C00 
 599      00BF
 600 311c 4FEAE676 		ASR TOS,#31
 601 3120 EAE5     		_NEXT 
 602              	
 603              	/********************************
 604              	    AND	 ( w w -- w )
 605              	 	Bitwise AND.
 606              	********************************/
 607 3122 16310000 		_HEADER ANDD,3,"AND"
 607      03414E44 
 607      00BF
 608 312c 57F8045B 		LDR	WP,[DSP],#4
 609 3130 06EA0506 		AND	TOS,TOS,WP
 610 3134 E0E5     		_NEXT 
 611              	
 612              	/******************************
 613              	    OR	  ( w w -- w )
 614              	 	Bitwise inclusive OR.
 615              	******************************/
 616 3136 26310000 		_HEADER ORR,2,"OR"
 616      024F5200 
 616      00BF
 617 3140 57F8045B 		LDR	WP,[DSP],#4
 618 3144 46EA0506 		ORR	TOS,TOS,WP
 619 3148 D6E5     		_NEXT 
 620              	
 621              	/*****************************
 622              	    XOR	 ( w w -- w )
 623              	 	Bitwise exclusive OR.
 624              	*****************************/
 625 314a 3A310000 		_HEADER XORR,3,"XOR"
 625      03584F52 
 625      00BF
 626 3154 57F8045B 		LDR	WP,[DSP],#4
 627 3158 86EA0506 		EOR	TOS,TOS,WP
 628 315c CCE5     		_NEXT 
 629              	
 630              	/**************************************************
 631              	    UM+	 ( w w -- w cy )
 632              	 	Add two numbers, return the sum and carry flag.
 633              	***************************************************/
 634 315e 4E310000 		_HEADER UPLUS,3,"UM+"
 634      03554D2B 
 634      00BF
 635 3168 3D68     		LDR	WP,[DSP]
 636 316a AD19     		ADDS	WP,WP,TOS
 637 316c 4FF00006 		MOV	TOS,#0
 638 3170 46F10006 		ADC	TOS,TOS,#0
 639 3174 3D60     		STR	WP,[DSP]
 640 3176 BFE5     		_NEXT 
 641              	
 642              	/*********************************
 643              	    RSHIFT	 ( w # -- w )
ARM GAS  forth.s 			page 118


 644              	 	logical Right shift # bits.
 645              	**********************************/
 646 3178 62310000 		_HEADER RSHIFT,6,"RSHIFT"
 646      06525348 
 646      49465400 
 647 3184 57F8045B 		LDR	WP,[DSP],#4
 648 3188 25FA06F6 		MOV	TOS,WP,LSR TOS
 649 318c B4E5     		_NEXT 
 650              	
 651              	/****************************
 652              	    LSHIFT	 ( w # -- w )
 653              	 	left shift # bits.
 654              	****************************/
 655 318e 7C310000 		_HEADER LSHIFT,6,"LSHIFT"
 655      064C5348 
 655      49465400 
 655      00BF
 656 319c 57F8045B 		LDR	WP,[DSP],#4
 657 31a0 05FA06F6 		MOV	TOS,WP,LSL TOS
 658 31a4 A8E5     		_NEXT
 659              	
 660              	/*************************
 661              	    +	 ( w w -- w )
 662              	 	Add.
 663              	*************************/
 664 31a6 92310000 		_HEADER PLUS,1,"+"
 664      012B
 665 31ac 57F8045B 		LDR	WP,[DSP],#4
 666 31b0 2E44     		ADD	TOS,TOS,WP
 667 31b2 A1E5     		_NEXT 
 668              	
 669              	/************************
 670              	    -	 ( w w -- w )
 671              	 	Subtract.
 672              	************************/
 673 31b4 AA310000 		_HEADER SUBB,1,"-"
 673      012D00BF 
 674 31bc 57F8045B 		LDR	WP,[DSP],#4
 675 31c0 C6EB0506 		RSB	TOS,TOS,WP
 676 31c4 98E5     		_NEXT 
 677              	
 678              	/************************
 679              	    *	 ( w w -- w )
 680              	 	Multiply.
 681              	***********************/
 682 31c6 B8310000 		_HEADER STAR,1,"*"
 682      012A
 683 31cc 57F8045B 		LDR	WP,[DSP],#4
 684 31d0 05FB06F6 		MUL	TOS,WP,TOS
 685 31d4 90E5     		_NEXT 
 686              	
 687              	/***************************
 688              	    UM*	 ( w w -- ud )
 689              	 	Unsigned multiply.
 690              	****************************/
 691 31d6 CA310000 		_HEADER UMSTA,3,"UM*"
 691      03554D2A 
ARM GAS  forth.s 			page 119


 691      00BF
 692 31e0 3D68     		LDR	WP,[DSP]
 693 31e2 A6FB0523 		UMULL	T2,T3,TOS,WP
 694 31e6 3A60     		STR	T2,[DSP]
 695 31e8 1E46     		MOV	TOS,T3
 696 31ea 85E5     		_NEXT 
 697              	
 698              	/***************************
 699              	    M*	 ( w w -- d )
 700              	 	signed multiply.
 701              		hold double result
 702              	***************************/
 703 31ec DA310000 		_HEADER MSTAR,2,"M*"
 703      024D2A00 
 704 31f4 3D68     		LDR	WP,[DSP]
 705 31f6 86FB0523 		SMULL	T2,T3,TOS,WP
 706 31fa 3A60     		STR	T2,[DSP]
 707 31fc 1E46     		MOV	TOS,T3
 708 31fe 7BE5     		_NEXT 
 709              	
 710              	/***************************
 711              	    1+	 ( w -- w+1 )
 712              	 	Add 1.
 713              	***************************/
 714 3200 F0310000 		_HEADER ONEP,2,"1+"
 714      02312B00 
 715 3208 06F10106 		ADD	TOS,TOS,#1
 716 320c 74E5     		_NEXT 
 717              	
 718              	/***************************
 719              	    1-	 ( w -- w-1 )
 720              	 	Subtract 1.
 721              	***************************/
 722 320e 04320000 		_HEADER ONEM,2,"1-"
 722      02312D00 
 722      00BF
 723 3218 A6F10106 		SUB	TOS,TOS,#1
 724 321c 6CE5     		_NEXT 
 725              	
 726              	/***************************
 727              	    2+	 ( w -- w+2 )
 728              	 	Add 2.
 729              	**************************/
 730 321e 12320000 		_HEADER TWOP,2,"2+"
 730      02322B00 
 730      00BF
 731 3228 06F10206 		ADD	TOS,TOS,#2
 732 322c 64E5     		_NEXT
 733              	
 734              	/**************************
 735              	    2-	 ( w -- w-2 )
 736              	 	Subtract 2.
 737              	**************************/
 738 322e 22320000 		_HEADER TWOM,2,"2-"
 738      02322D00 
 738      00BF
 739 3238 A6F10206 		SUB	TOS,TOS,#2
ARM GAS  forth.s 			page 120


 740 323c 5CE5     		_NEXT
 741              	
 742              	/***************************
 743              	    CELL+	( w -- w+4 )
 744              	 	Add CELLL.
 745              	***************************/
 746 323e 32320000 		_HEADER CELLP,5,"CELL+"
 746      0543454C 
 746      4C2B
 747 3248 06F10406 		ADD	TOS,TOS,#CELLL
 748 324c 54E5     		_NEXT
 749              	
 750              	/***************************
 751              	    CELL-	( w -- w-4 )
 752              	 	Subtract CELLL.
 753              	**************************/
 754 324e 42320000 		_HEADER CELLM,5,"CELL-"
 754      0543454C 
 754      4C2D
 755 3258 A6F10406 		SUB	TOS,TOS,#CELLL
 756 325c 4CE5     		_NEXT
 757              	
 758              	/**************************** 
 759              	    BL	( -- 32 )
 760              	 	Blank (ASCII space).
 761              	*****************************/
 762 325e 52320000 		_HEADER BLANK,2,"BL"
 762      02424C00 
 762      00BF
 763 3268 47F8046D 		_PUSH
 764 326c 4FF02006 		MOV	TOS,#32
 765 3270 42E5     		_NEXT 
 766              	
 767              	/**************************
 768              	    CELLS	( w -- w*4 )
 769              	 	Multiply CELLL 
 770              	***************************/
 771 3272 62320000 		_HEADER CELLS,5,"CELLS"
 771      0543454C 
 771      4C53
 772 327c 4FEA8606 		LSL TOS,#2
 773 3280 3AE5     		_NEXT
 774              	
 775              	/***************************
 776              	    CELL/	( w -- w/4 )
 777              	 	Divide by CELLL.
 778              	***************************/
 779 3282 76320000 		_HEADER CELLSL,5,"CELL/"
 779      0543454C 
 779      4C2F
 780 328c 4FEAA606 		ASR TOS,#2
 781 3290 32E5     		_NEXT
 782              	
 783              	/*************************
 784              	    2*	( w -- w*2 )
 785              	 	Multiply 2.
 786              	*************************/
ARM GAS  forth.s 			page 121


 787 3292 86320000 		_HEADER TWOST,2,"2*"
 787      02322A00 
 787      00BF
 788 329c 4FEA4606 		MOV	TOS,TOS,LSL#1
 789 32a0 2AE5     		_NEXT
 790              	
 791              	/*************************
 792              	    2/	( w -- w/2 )
 793              	 	Divide by 2.
 794              	***********************/
 795 32a2 96320000 		_HEADER TWOSL,2,"2/"
 795      02322F00 
 795      00BF
 796 32ac 4FEA6606 		MOV	TOS,TOS,ASR#1
 797 32b0 22E5     		_NEXT
 798              	
 799              	/****************************
 800              	    ?DUP	( w -- w w | 0 )
 801              	 	Conditional duplicate.
 802              	*****************************/
 803 32b2 A6320000 		_HEADER QDUP,4,"?DUP"
 803      043F4455 
 803      5000
 804 32bc 3500     		MOVS	WP,TOS
 805 32be 18BF     		IT NE 
 806 32c0 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 807 32c4 18E5     		_NEXT
 808              	
 809              	/***********************************
 810              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 811              	 	Rotate top 3 items.
 812              	*************************************/
 813 32c6 B6320000 		_HEADER ROT,3,"ROT"
 813      03524F54 
 813      00BF
 814 32d0 3868     		LDR	T0,[DSP]  // w2 
 815 32d2 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 816 32d4 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 817 32d6 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 818 32d8 0EE5     		_NEXT
 819              	
 820              	/*********************************
 821              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 822              	 left rotate top 3 elements 
 823              	********************************/
 824 32da CA320000 		_HEADER NROT,4,"-ROT"
 824      042D524F 
 824      5400
 825 32e4 7868     		LDR T0,[DSP,#4]
 826 32e6 7E60     		STR TOS,[DSP,#4]	
 827 32e8 3E68     		LDR TOS,[DSP]
 828 32ea 3860     		STR T0,[DSP]
 829 32ec 04E5     		_NEXT 
 830              	
 831              	/*********************************
 832              	    2DROP	( w1 w2 -- )
 833              	 	Drop top 2 items.
ARM GAS  forth.s 			page 122


 834              	*********************************/
 835 32ee DE320000 		_HEADER DDROP,5,"2DROP"
 835      05324452 
 835      4F50
 836 32f8 57F8046B 		_POP
 837 32fc 57F8046B 		_POP
 838 3300 FAE4     		_NEXT 
 839              	
 840              	/********************************
 841              		3DROP ( w1 w2 w3 -- )
 842              		drop top 3 items 
 843              	********************************/
 844 3302 F2320000 		_HEADER TDROP,5,"3DROP"
 844      05334452 
 844      4F50
 845 330c 07F10807 	    add DSP,#8 
 846 3310 57F8046B 	    _POP 
 847 3314 F0E4     	    _NEXT 
 848              	
 849              	/***********************************
 850              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 851              	 	Duplicate top 2 items.
 852              	************************************/
 853 3316 06330000 		_HEADER DDUP,4,"2DUP"
 853      04324455 
 853      5000
 854 3320 3868     		LDR	T0,[DSP] // w1
 855 3322 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 856 3326 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 857 332a E5E4     		_NEXT
 858              	
 859              	/******************************
 860              	    D+	( d1 d2 -- d3 )
 861              	 	Add top 2 double numbers.
 862              	******************************/
 863 332c 1A330000 		_HEADER DPLUS,2,"D+"
 863      02442B00 
 864 3334 57F8045B 		LDR	WP,[DSP],#4
 865 3338 57F8042B 		LDR	T2,[DSP],#4
 866 333c 3B68     		LDR	T3,[DSP]
 867 333e ED18     		ADDS	WP,WP,T3
 868 3340 3D60     		STR	WP,[DSP]
 869 3342 46EB0206 		ADC	TOS,TOS,T2
 870 3346 D7E4     		_NEXT
 871              	
 872              	/******************************
 873              		DABS ( d -- ud )
 874              		absolute value double 
 875              	*****************************/
 876 3348 30330000 		_HEADER DABS,4,"DABS"
 876      04444142 
 876      530000BF 
 877 3354 16F0004F 		tst TOS,#(1<<31)
 878 3358 09D0     		beq 9f 
 879 335a 6FEA0606 		mvn TOS,TOS 
 880 335e 3D68     		ldr WP,[DSP]
 881 3360 6FEA0505 		mvn WP,WP 
ARM GAS  forth.s 			page 123


 882 3364 0135     		adds WP,#1
 883 3366 3D60     		str WP,[DSP]
 884 3368 01D3     		bcc 9f 
 885 336a 06F10106 		add TOS,#1 
 886 336e C3E4     	9:	_NEXT 
 887              	
 888              	/*****************************
 889              	  UD> ( d1 d2 -- f )
 890              	  unsigned compare double d1 > d2 
 891              	******************************/
 892 3370 4C330000 		_HEADER UDGREAT,3,"UD>"
 892      0355443E 
 893 3378 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 894 337c 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 895 337e B042     		cmp T0,TOS 
 896 3380 02D8     		bhi 1f
 897 3382 04D4     		bmi 2f  
 898 3384 A942     		cmp T1,WP 
 899 3386 02D9     		bls 2f 
 900 3388 4FF0FF36 	1:	mov TOS,#-1 
 901 338c B4E4     		_NEXT 
 902 338e 4FF00006 	2:  mov TOS,#0 
 903 3392 B1E4     		_NEXT 
 904              	
 905              	/******************************
 906              		D0= ( d -- f )
 907              		double 0= 
 908              	*****************************/
 909 3394 74330000 		_HEADER DZEQUAL,3,"D0="
 909      0344303D 
 910 339c 3046     		mov T0,TOS
 911 339e 57F8046B 		_POP 
 912 33a2 46EA0006 		orr TOS,T0 
 913 33a6 01D0     		beq 9f
 914 33a8 6FF00006 		mvn TOS,#0 
 915 33ac A4E4     	9:	_NEXT 
 916              	
 917              	/*****************************
 918              	    INVERT	 ( w -- !w )
 919              	 	1"s complement.
 920              	*****************************/
 921 33ae 98330000 		_HEADER INVER,6,"INVERT"
 921      06494E56 
 921      45525400 
 921      00BF
 922 33bc 6FEA0606 		MVN	TOS,TOS
 923 33c0 9AE4     		_NEXT
 924              	
 925              	/*****************************
 926              	    NEGATE	( w -- -w )
 927              	 	2's complement.
 928              	***************************/
 929 33c2 B2330000 		_HEADER NEGAT,6,"NEGATE"
 929      064E4547 
 929      41544500 
 929      00BF
 930 33d0 C6F10006 		RSB	TOS,TOS,#0
ARM GAS  forth.s 			page 124


 931 33d4 90E4     		_NEXT
 932              	
 933              	/***************************
 934              	    ABS	 ( w -- |w| )
 935              	 	Absolute.
 936              	**************************/
 937 33d6 C6330000 		_HEADER ABSS,3,"ABS"
 937      03414253 
 937      00BF
 938 33e0 16F0004F 		TST	TOS,#0x80000000
 939 33e4 18BF     		IT NE
 940 33e6 7642     	    RSBNE   TOS,TOS,#0
 941 33e8 86E4     		_NEXT
 942              	
 943              	/**************************
 944              		CLZ ( n - n )
 945              		count leading zeros 
 946              	**************************/
 947 33ea DA330000 		_HEADER CLZ,3,"CLZ"
 947      03434C5A 
 947      00BF
 948 33f4 B6FA86F6 		clz TOS,TOS 
 949 33f8 7EE4     		_NEXT 
 950              	
 951              	/*************************
 952              		CTZ ( n -- n )
 953              		count trailing zeros 
 954              	************************/
 955 33fa EE330000 		_HEADER CTZ,3,"CTZ"
 955      0343545A 
 955      00BF
 956 3404 80EA0000 		eor T0,T0 
 957 3408 16F0010F 	1:  tst TOS,#1 
 958 340c 04D1     		bne 2f 
 959 340e 4FEA5606 		lsr TOS,#1 
 960 3412 00F10100 		add T0,#1 
 961 3416 F7E7     		b 1b 
 962 3418 0646     	2:  mov TOS,T0 
 963 341a 6DE4     		_NEXT 
 964              	
 965              	
 966              	/*******************
 967              	  0= ( w -- f )
 968              	 TOS==0?
 969              	*******************/
 970 341c FE330000 		_HEADER ZEQUAL,2,"0="
 970      02303D00 
 971 3424 16B9     		cbnz TOS,1f
 972 3426 4FF0FF36 		mov TOS,#-1
 973 342a 65E4     		_NEXT 
 974 342c 86EA0606 	1:  eor TOS,TOS,TOS  
 975 3430 62E4     		_NEXT 	
 976              	
 977              	/*********************
 978              	    =	 ( w w -- t )
 979              	 	Equal?
 980              	*********************/
ARM GAS  forth.s 			page 125


 981 3432 20340000 		_HEADER EQUAL,1,"="
 981      013D
 982 3438 57F8045B 		LDR	WP,[DSP],#4
 983 343c AE42     		CMP	TOS,WP
 984 343e 0CBF     		ITE EQ 
 985 3440 6FF00006 	    MVNEQ	TOS,#0
 986 3444 0026     		MOVNE	TOS,#0
 987 3446 57E4     		_NEXT
 988              	
 989              	/************************
 990              		<> ( w w -- f )
 991              		different?
 992              	************************/
 993 3448 36340000 		_HEADER DIFF,2,"<>"
 993      023C3E00 
 994 3450 3046     		mov T0,TOS 
 995 3452 57F8046B 		_POP 
 996 3456 86EA0006 		eor TOS,T0
 997 345a B6FA86F0 		clz T0,TOS 
 998 345e 06FA00F6 		lsl TOS,T0 
 999 3462 4FEAE676 		asr TOS,#31 
 1000 3466 47E4     		_NEXT 
 1001              	
 1002              	/************************
 1003              	    U<	 ( w w -- t )
 1004              	 	Unsigned less?
 1005              	*************************/
 1006 3468 4C340000 		_HEADER ULESS,2,"U<"
 1006      02553C00 
 1007 3470 57F8045B 		LDR	WP,[DSP],#4
 1008 3474 B542     		CMP	WP,TOS
 1009 3476 34BF     		ITE CC 
 1010 3478 6FF00006 		MVNCC	TOS,#0
 1011 347c 0026     		MOVCS	TOS,#0
 1012 347e 3BE4     		_NEXT
 1013              	
 1014              	/**********************
 1015              	    <	( w w -- t )
 1016              	 	Less?
 1017              	**********************/
 1018 3480 6C340000 		_HEADER LESS,1,"<"
 1018      013C00BF 
 1019 3488 57F8045B 		LDR	WP,[DSP],#4
 1020 348c B542     		CMP	WP,TOS
 1021 348e B4BF     	    ITE LT
 1022 3490 6FF00006 		MVNLT	TOS,#0
 1023 3494 0026     		MOVGE	TOS,#0
 1024 3496 2FE4     		_NEXT 
 1025              	
 1026              	/**********************
 1027              		U> ( u u -- t|f )
 1028              	    unsigned greater 
 1029              	**********************/
 1030 3498 84340000 		_HEADER UGREAT,2,"U>"
 1030      02553E00 
 1031 34a0 57F8045B 		LDR WP,[DSP],#4 
 1032 34a4 AE42     		CMP TOS,WP 
ARM GAS  forth.s 			page 126


 1033 34a6 34BF     		ITE CC  
 1034 34a8 6FF00006 		MVNCC TOS,#0 
 1035 34ac 0026     		MOVCS TOS,#0
 1036 34ae 23E4     		_NEXT 
 1037              	
 1038              	/***********************
 1039              	    >	( w w -- t )
 1040              	 	greater?
 1041              	***********************/
 1042 34b0 9C340000 		_HEADER GREAT,1,">"
 1042      013E00BF 
 1043 34b8 57F8045B 		LDR	WP,[DSP],#4
 1044 34bc B542     		CMP	WP,TOS
 1045 34be CCBF     		ITE GT
 1046 34c0 6FF00006 	    MVNGT	TOS,#0
 1047 34c4 0026     		MOVLE	TOS,#0
 1048 34c6 17E4     		_NEXT
 1049              	
 1050              	/***************************
 1051              	    MAX	 ( w w -- max )
 1052              	 	Leave maximum.
 1053              	***************************/
 1054 34c8 B4340000 		_HEADER MAX,3,"MAX"
 1054      034D4158 
 1055 34d0 57F8045B 		LDR	WP,[DSP],#4
 1056 34d4 B542     		CMP	WP,TOS
 1057 34d6 C8BF     		IT GT 
 1058 34d8 2E46     		MOVGT	TOS,WP
 1059 34da 0DE4     		_NEXT 
 1060              	
 1061              	/**************************
 1062              	    MIN	 ( w w -- min )
 1063              	 	Leave minimum.
 1064              	**************************/
 1065 34dc CC340000 		_HEADER MIN,3,"MIN"
 1065      034D494E 
 1066 34e4 57F8045B 		LDR	WP,[DSP],#4
 1067 34e8 B542     		CMP	WP,TOS
 1068 34ea B8BF     		IT LT
 1069 34ec 2E46     		MOVLT	TOS,WP
 1070 34ee 03E4     		_NEXT
 1071              	
 1072              	/***********************
 1073              	    +!	 ( w a -- )
 1074              	 	Add to memory.
 1075              	***********************/
 1076 34f0 E0340000 		_HEADER PSTOR,2,"+!"
 1076      022B2100 
 1077 34f8 57F8045B 		LDR	WP,[DSP],#4
 1078 34fc 3268     		LDR	T2,[TOS]
 1079 34fe 2A44     		ADD	T2,T2,WP
 1080 3500 3260     		STR	T2,[TOS]
 1081 3502 57F8046B 		_POP
 1082 3506 FFF7F7BB 		_NEXT
 1083              	
 1084              	/************************
 1085              	    2!	 ( d a -- )
ARM GAS  forth.s 			page 127


 1086              	 	Store double number.
 1087              	*************************/
 1088 350a F4340000 		_HEADER DSTOR,2,"2!"
 1088      02322100 
 1088      00BF
 1089 3514 57F8045B 		LDR	WP,[DSP],#4
 1090 3518 57F8042B 		LDR	T2,[DSP],#4
 1091 351c 46F8045B 		STR	WP,[TOS],#4
 1092 3520 3260     		STR	T2,[TOS]
 1093 3522 57F8046B 		_POP
 1094 3526 FFF7E7BB 		_NEXT
 1095              	
 1096              	/************************
 1097              	    2@	 ( a -- d )
 1098              	 	Fetch double number.
 1099              	************************/
 1100 352a 0E350000 		_HEADER DAT,2,"2@"
 1100      02324000 
 1100      00BF
 1101 3534 7568     		LDR	WP,[TOS,#4]
 1102 3536 47F8045D 		STR	WP,[DSP,#-4]!
 1103 353a 3668     		LDR	TOS,[TOS]
 1104 353c FFF7DCBB 		_NEXT
 1105              	
 1106              	/***************************
 1107              	    COUNT	( b -- b+1 c )
 1108              	 	Fetch length of string.
 1109              	****************************/
 1110 3540 2E350000 		_HEADER COUNT,5,"COUNT"
 1110      05434F55 
 1110      4E5400BF 
 1111 354c 16F8015B 		LDRB	WP,[TOS],#1
 1112 3550 47F8046D 		_PUSH
 1113 3554 2E46     		MOV	TOS,WP
 1114 3556 FFF7CFBB 		_NEXT
 1115              	
 1116              	/******************************
 1117              	    DNEGATE	( d -- -d )
 1118              	 	Negate double number.
 1119              	**************************/
 1120 355a 44350000 		_HEADER DNEGA,7,"DNEGATE"
 1120      07444E45 
 1120      47415445 
 1120      00BF
 1121 3568 3D68     		LDR	WP,[DSP]
 1122 356a A2EB0202 		SUB	T2,T2,T2
 1123 356e 551B     		SUBS WP,T2,WP
 1124 3570 62EB0606 		SBC	TOS,T2,TOS
 1125 3574 3D60     		STR	WP,[DSP]
 1126 3576 FFF7BFBB 		_NEXT
 1127              	
 1128              	/******************************
 1129              	  System and user variables
 1130              	******************************/
 1131              	
 1132              	/*******************************
 1133              	  doVAR	( -- a )
ARM GAS  forth.s 			page 128


 1134              	  Run time routine for VARIABLE and CREATE.
 1135              	hidden word used by compiler
 1136              	********************************/
 1137              	DOVAR:
 1138 357a 47F8046D 		_PUSH
 1139 357e 6646     		MOV TOS,IP
 1140 3580 0CF1040C 		ADD IP,IP,#4 
 1141 3584 FFF7BBBB 		B UNNEST 
 1142              	
 1143              	/**********************************
 1144              	    doCON	( -- a ) 
 1145              	 	Run time routine for CONSTANT.
 1146              	hidden word used by compiler 
 1147              	***********************************/
 1148              	DOCON:
 1149 3588 47F8046D 		_PUSH
 1150 358c 5CF8046B 		LDR.W TOS,[IP],#4 
 1151 3590 FFF7B5BB 		B UNNEST 
 1152              	
 1153              	/***********************
 1154              	  system variables 
 1155              	***********************/
 1156              	
 1157              	/***********************
 1158              		STATE ( -- a )
 1159              		compilation state 
 1160              		0 -> interpret
 1161              		-1 -> compile 
 1162              	************************/
 1163 3594 5E350000 		_HEADER STATE,5,"STATE"
 1163      05535441 
 1163      544500BF 
 1164 35a0 47F8046D 		_PUSH 
 1165 35a4 04F1B406 		ADD TOS,UP,#CSTATE 
 1166 35a8 FFF7A6BB 		_NEXT 
 1167              	
 1168              	/**************************
 1169              	 SEED ( -- a)
 1170              	 return PRNG seed address 
 1171              	**************************/
 1172 35ac 98350000 		_HEADER SEED,4,"SEED"
 1172      04534545 
 1172      440000BF 
 1173 35b8 47F8046D 		_PUSH 
 1174 35bc 04F10406 		ADD TOS,UP,#RNDSEED
 1175 35c0 FFF79ABB 		_NEXT 	
 1176              	
 1177              	/****************************************
 1178              	  MSEC ( -- a)
 1179              	 return address of milliseconds counter
 1180              	****************************************/
 1181 35c4 B0350000 		_HEADER MSEC,4,"MSEC"
 1181      044D5345 
 1181      430000BF 
 1182 35d0 47F8046D 	    _PUSH
 1183 35d4 04F10806 	    ADD TOS,UP,#TICKS
 1184 35d8 FFF78EBB 	    _NEXT 
ARM GAS  forth.s 			page 129


 1185              	
 1186              	/*************************
 1187              	 TIMER ( -- a )
 1188              	 count down timer 
 1189              	**********************/
 1190 35dc C8350000 		_HEADER TIMER,5,"TIMER"
 1190      0554494D 
 1190      455200BF 
 1191 35e8 47F8046D 		 _PUSH 
 1192 35ec 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1193 35f0 FFF782BB 	    _NEXT
 1194              	
 1195              	/*****************************
 1196              	    'BOOT	 ( -- a )
 1197              	 	boot up application vector 
 1198              	*****************************/
 1199 35f4 E0350000 		_HEADER TBOOT,5,"'BOOT"
 1199      0527424F 
 1199      4F5400BF 
 1200 3600 47F8046D 		_PUSH
 1201 3604 04F11006 		ADD	TOS,UP,#BOOT 
 1202 3608 FFF776BB 		_NEXT
 1203              		
 1204              	/********************************************	
 1205              	    BASE	( -- a )
 1206              	 	Storage of the radix base for numeric I/O.
 1207              	**********************************************/
 1208 360c F8350000 		_HEADER BASE,4,"BASE"
 1208      04424153 
 1208      450000BF 
 1209 3618 47F8046D 		_PUSH
 1210 361c 04F11C06 		ADD	TOS,UP,#NBASE
 1211 3620 FFF76ABB 		_NEXT
 1212              	
 1213              	/***********************************************
 1214              		BCHAR ( -- flag )
 1215              		boolean variable
 1216              		if set base char include in convertion 
 1217              		of integer to string.  
 1218              	************************************************/
 1219 3624 10360000 			_HEADER BCHR,5,"BCHAR"
 1219      05424348 
 1219      415200BF 
 1220 3630 47F8046D 			_PUSH 
 1221 3634 04F12006 			ADD TOS,UP,#BCHAR 
 1222 3638 FFF75EBB 			_NEXT 
 1223              	
 1224              	/*****************************************************
 1225              	    temp	 ( -- a )
 1226              	 	A temporary storage location used in parse and find.
 1227              	hidden word for internal use
 1228              	********************************************************/
 1229              	TEMP:
 1230 363c 47F8046D 		_PUSH
 1231 3640 04F12406 		ADD	TOS,UP,#TMP
 1232 3644 FFF758BB 		_NEXT
 1233              	
ARM GAS  forth.s 			page 130


 1234              	/*******************************************
 1235              	    SPAN	( -- a )
 1236              	 	Hold character count received by EXPECT.
 1237              	********************************************/
 1238 3648 28360000 		_HEADER SPAN,4,"SPAN"
 1238      04535041 
 1238      4E0000BF 
 1239 3654 47F8046D 		_PUSH
 1240 3658 04F12806 		ADD	TOS,UP,#CSPAN
 1241 365c FFF74CBB 		_NEXT
 1242              	
 1243              	/***********************************************************
 1244              	    >IN	 ( -- a )
 1245              	 	Hold the character pointer while parsing input stream.
 1246              	***********************************************************/
 1247 3660 4C360000 		_HEADER INN,3,">IN"
 1247      033E494E 
 1248 3668 47F8046D 		_PUSH
 1249 366c 04F12C06 		ADD	TOS,UP,#TOIN
 1250 3670 FFF742BB 		_NEXT
 1251              	
 1252              	/**************************************
 1253              	    #TIB	( -- a )
 1254              	 	Hold the current count and address 
 1255              		of the terminal input buffer.
 1256              	**************************************/
 1257 3674 64360000 		_HEADER NTIB,4,"#TIB"
 1257      04235449 
 1257      420000BF 
 1258 3680 47F8046D 		_PUSH
 1259 3684 04F13006 		ADD	TOS,UP,#NTIBB
 1260 3688 FFF736BB 		_NEXT
 1261              	
 1262              	/******************************
 1263              	    'EVAL	( -- a )
 1264              	 	Execution vector of EVAL.
 1265              	*******************************/
 1266 368c 78360000 		_HEADER TEVAL,5,"'EVAL"
 1266      05274556 
 1266      414C00BF 
 1267 3698 47F8046D 		_PUSH
 1268 369c 04F13C06 		ADD	TOS,UP,#EVAL
 1269 36a0 FFF72ABB 		_NEXT
 1270              	
 1271              	/*********************************
 1272              	    HLD	 ( -- a )
 1273              	 	Hold a pointer in building a 
 1274              		numeric output string.
 1275              	*********************************/
 1276 36a4 90360000 		_HEADER HLD,3,"HLD"
 1276      03484C44 
 1277 36ac 47F8046D 		_PUSH
 1278 36b0 04F14006 		ADD	TOS,UP,#VHOLD
 1279 36b4 FFF720BB 		_NEXT
 1280              	
 1281              	/**********************************
 1282              	    CONTEXT	( -- a )
ARM GAS  forth.s 			page 131


 1283              	 	A area to specify vocabulary 
 1284              		search order.
 1285              	**********************************/
 1286 36b8 A8360000 		_HEADER CNTXT,7,"CONTEXT"
 1286      07434F4E 
 1286      54455854 
 1287              	CRRNT:
 1288 36c4 47F8046D 		_PUSH
 1289 36c8 04F14406 		ADD	TOS,UP,#CTXT
 1290 36cc FFF714BB 		_NEXT
 1291              	
 1292              	/******************************
 1293              	    CP	( -- a )
 1294              	 	Point to top free area  
 1295              		in user RAM. 
 1296              	******************************/
 1297 36d0 BC360000 		_HEADER CPP,2,"CP"
 1297      02435000 
 1298 36d8 47F8046D 		_PUSH
 1299 36dc 04F14C06 		ADD	TOS,UP,#USER_CTOP
 1300 36e0 FFF70ABB 		_NEXT
 1301              	
 1302              	/****************************
 1303              	   FCP ( -- a )
 1304              	  Point ot top of Forth 
 1305              	  system dictionary
 1306              	****************************/
 1307 36e4 D4360000 		_HEADER FCP,3,"FCP"
 1307      03464350 
 1308 36ec 47F8046D 		_PUSH 
 1309 36f0 04F14806 		ADD TOS,UP,#FORTH_CTOP 
 1310 36f4 FFF700BB 		_NEXT 
 1311              	
 1312              	/***************************
 1313              	    LAST	( -- a )
 1314              	 	Point to the last name 
 1315              		in the dictionary.
 1316              	***************************/
 1317 36f8 E8360000 		_HEADER LAST,4,"LAST"
 1317      044C4153 
 1317      540000BF 
 1318 3704 47F8046D 		_PUSH
 1319 3708 04F15006 		ADD	TOS,UP,#LASTN
 1320 370c FFF7F4BA 		_NEXT
 1321              	
 1322              	
 1323              	/***********************
 1324              		system constants 
 1325              	***********************/
 1326              	
 1327              	/********************************
 1328              		USER-BEGIN ( -- a )
 1329              	  where user area begin in RAM
 1330              	********************************/
 1331 3710 FC360000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1331      0A555345 
 1331      522D4245 
ARM GAS  forth.s 			page 132


 1331      47494E00 
 1332 3720 47F8046D 		_PUSH 
 1333 3724 DFF80460 		ldr TOS,USR_BGN_ADR 
 1334 3728 FFF7E6BA 		_NEXT 
 1335              	USR_BGN_ADR:
 1336 372c 12050020 	.word  DTOP 
 1337              	
 1338              	/*********************************
 1339              	  USER_END ( -- a )
 1340              	  where user area end in RAM 
 1341              	******************************/
 1342 3730 14370000 		_HEADER USER_END,8,"USER-END"
 1342      08555345 
 1342      522D454E 
 1342      440000BF 
 1343 3740 47F8046D 		_PUSH 
 1344 3744 DFF80460 		ldr TOS,USER_END_ADR 
 1345 3748 FFF7D6BA 		_NEXT 
 1346              	USER_END_ADR:
 1347 374c 2C810120 		.word DEND 
 1348              	
 1349              	/********************************
 1350              		MAX-INT ( -- n+ )
 1351              		maximum integer 
 1352              	*******************************/
 1353 3750 34370000 		_HEADER MAXINT,7,"MAX-INT"
 1353      074D4158 
 1353      2D494E54 
 1354 375c 47F8046D 		_PUSH 
 1355 3760 4FF6FF76 		_MOV32 TOS, 0x7FFFFFFF
 1355      C7F6FF76 
 1356 3768 FFF7C6BA 		_NEXT 
 1357              	
 1358              	/******************************
 1359              		MIN-INT ( -- n- )
 1360              		minimum integer 
 1361              	******************************/
 1362 376c 54370000 		_HEADER MININT,7,"MIN-INT"
 1362      074D494E 
 1362      2D494E54 
 1363 3778 47F8046D 		_PUSH 
 1364 377c 4FF00006 		_MOV32 TOS, 0x80000000
 1364      C8F20006 
 1365 3784 FFF7B8BA 		_NEXT 
 1366              	
 1367              	/******************************
 1368              		MAX-UINT ( -- u )
 1369              		maximum unsigned integer 
 1370              	******************************/
 1371 3788 70370000 		_HEADER MAXUINT,8,"MAX-UINT"
 1371      084D4158 
 1371      2D55494E 
 1371      540000BF 
 1372 3798 47F8046D 		_PUSH
 1373 379c 4FF6FF76 		_MOV32 TOS, 0xFFFFFFFF 
 1373      CFF6FF76 
 1374 37a4 FFF7A8BA 		_NEXT 
ARM GAS  forth.s 			page 133


 1375              	
 1376              	
 1377              	/* *********************
 1378              	  Common functions
 1379              	***********************/
 1380              	
 1381              	/********************************
 1382              	    WITHIN	( u ul uh -- t )
 1383              	 	Return true if u is within 
 1384              		the range of ul and uh.
 1385              	********************************/
 1386 37a8 8C370000 		_HEADER WITHI,6,"WITHIN"
 1386      06574954 
 1386      48494E00 
 1387 37b4 504700BF 		_NEST
 1388 37b8 ED300000 		_ADR	OVER
 1389 37bc BD310000 		_ADR	SUBB
 1390 37c0 29300000 		_ADR	TOR
 1391 37c4 BD310000 		_ADR	SUBB
 1392 37c8 E52F0000 		_ADR	RFROM
 1393 37cc 71340000 		_ADR	ULESS
 1394 37d0 FF2C0000 		_UNNEST
 1395              	
 1396              	//  Divide
 1397              	
 1398              	/*************************************
 1399              	    UM/MOD	( udl udh u -- ur uq )
 1400              	 	Unsigned divide of a double by a 
 1401              		single. Return mod and quotient.
 1402              	**************************************/
 1403 37d4 AC370000 		_HEADER UMMOD,6,"UM/MOD"
 1403      06554D2F 
 1403      4D4F4400 
 1404 37e0 4FF00103 		MOV	T3,#1
 1405 37e4 57F8045B 		LDR	WP,[DSP],#4
 1406 37e8 3A68     		LDR	T2,[DSP]
 1407              	UMMOD0:
 1408 37ea 9218     		ADDS	T2,T2,T2
 1409 37ec 6D41     		ADCS	WP,WP,WP
 1410 37ee 04D3     		BCC	UMMOD1
 1411 37f0 A5EB0605 		SUB	WP,WP,TOS
 1412 37f4 02F10102 		ADD	T2,T2,#1
 1413 37f8 04E0     		B UMMOD2
 1414              	UMMOD1:
 1415 37fa AD1B     		SUBS	WP,WP,TOS 
 1416 37fc 28BF     		IT CS 
 1417 37fe 0132     		ADDCS	T2,T2,#1
 1418 3800 00D2     		BCS	UMMOD2
 1419 3802 3544     		ADD	WP,WP,TOS
 1420              	UMMOD2:
 1421 3804 DB18     		ADDS	T3,T3,T3
 1422 3806 F0D3     		BCC	UMMOD0
 1423 3808 1646     		MOV	TOS,T2
 1424 380a 3D60     		STR	WP,[DSP]
 1425 380c FFF774BA 		_NEXT
 1426              	
 1427              	/****************************
ARM GAS  forth.s 			page 134


 1428              	    FM/MOD	( d n -- r q )
 1429              	 	Signed floored divide 
 1430              		of double by single. 
 1431              		Return mod and quotient.
 1432              	****************************/
 1433 3810 D8370000 		_HEADER MSMOD,6,"FM/MOD"
 1433      06464D2F 
 1433      4D4F4400 
 1434 381c 504700BF 		_NEST
 1435 3820 AD300000 		_ADR	DUPP
 1436 3824 1D310000 		_ADR	ZLESS
 1437 3828 AD300000 		_ADR	DUPP
 1438 382c 29300000 		_ADR	TOR
 1439 3830 632F0000 		_QBRAN MMOD1
 1439      48380000 
 1440 3838 D1330000 		_ADR	NEGAT
 1441 383c 29300000 		_ADR	TOR
 1442 3840 69350000 		_ADR	DNEGA
 1443 3844 E52F0000 		_ADR	RFROM
 1444              	MMOD1:
 1445 3848 29300000 		_ADR	TOR
 1446 384c AD300000 		_ADR	DUPP
 1447 3850 1D310000 		_ADR	ZLESS
 1448 3854 632F0000 		_QBRAN MMOD2
 1448      64380000 
 1449 385c 15300000 		_ADR	RAT
 1450 3860 AD310000 		_ADR	PLUS
 1451              	MMOD2:
 1452 3864 E52F0000 		_ADR	RFROM
 1453 3868 E1370000 		_ADR	UMMOD
 1454 386c E52F0000 		_ADR	RFROM
 1455 3870 632F0000 		_QBRAN	MMOD3
 1455      84380000 
 1456 3878 BD300000 		_ADR	SWAP
 1457 387c D1330000 		_ADR	NEGAT
 1458 3880 BD300000 		_ADR	SWAP
 1459              	MMOD3:   
 1460 3884 FF2C0000 		_UNNEST
 1461              	
 1462              	/****************************
 1463              		SM/REM (d n1 -- n2 n3 )
 1464              	    symetric signed division 
 1465              		double by single 
 1466              	input:
 1467              		d   signed double 
 1468              		n1  signed single 
 1469              	output: 
 1470              		n2  signed remainder 
 1471              		n3  signed quotient 
 1472              	****************************/
 1473 3888 14380000 		_HEADER SMSLSHREM,6,"SM/REM"
 1473      06534D2F 
 1473      52454D00 
 1474 3894 504700BF 		_NEST 
 1475 3898 AD300000 		_ADR DUPP 
 1476 389c 1D310000 		_ADR ZLESS 
 1477 38a0 AD300000 		_ADR DUPP 
ARM GAS  forth.s 			page 135


 1478 38a4 29300000 		_ADR TOR   // divisor sign 
 1479 38a8 632F0000 		_QBRAN 1f 
 1479      B4380000 
 1480 38b0 D1330000 		_ADR NEGAT 
 1481 38b4 ED300000 	1:  _ADR OVER 
 1482 38b8 1D310000 		_ADR ZLESS 
 1483 38bc AD300000 		_ADR DUPP 
 1484 38c0 29300000 		_ADR TOR  // divident sign 
 1485 38c4 632F0000 		_QBRAN  1f 
 1485      D8380000 
 1486 38cc 29300000 		_ADR TOR 
 1487 38d0 69350000 		_ADR DNEGA
 1488 38d4 E52F0000 		_ADR RFROM 
 1489 38d8 E1370000 	1:  _ADR UMMOD  // rem quot  
 1490 38dc E52F0000 		_ADR RFROM 
 1491 38e0 15300000 		_ADR RAT 
 1492 38e4 55310000 		_ADR XORR
 1493 38e8 632F0000 		_QBRAN 1f
 1493      F4380000 
 1494 38f0 D1330000 		_ADR NEGAT 
 1495 38f4 AD300000 	1:  _ADR DUPP 
 1496 38f8 1D310000 		_ADR ZLESS 
 1497 38fc E52F0000 		_ADR RFROM 
 1498 3900 55310000 		_ADR XORR 
 1499 3904 632F0000 		_QBRAN 1f 
 1499      18390000 
 1500 390c BD300000 		_ADR SWAP 
 1501 3910 D1330000 		_ADR NEGAT 
 1502 3914 BD300000 	    _ADR SWAP 
 1503 3918 FF2C0000 	1:  _UNNEST 
 1504              	
 1505              	
 1506              	/****************************
 1507              		S>D ( n -- d )
 1508              		convert single to double 
 1509              	*****************************/
 1510 391c 8C380000 		_HEADER STOD,3,"S>D"
 1510      03533E44 
 1511 3924 47F8046D 		_PUSH 
 1512 3928 4FEAE676 		ASR TOS,#31
 1513 392c FFF7E4B9 		_NEXT 
 1514              	
 1515              	/****************************
 1516              		D2* ( d -- d<<1 )
 1517              		double * 2 
 1518              	***************************/
 1519 3930 20390000 		_HEADER D2STAR,3,"D2*"
 1519      0344322A 
 1520 3938 3868     		ldr T0,[DSP]
 1521 393a 4000     		lsls T0,#1
 1522 393c 3860     		str T0,[DSP]
 1523 393e 4FEA4606 		lsl TOS,#1
 1524 3942 46F10006 		adc TOS,#0
 1525 3946 FFF7D7B9 		_NEXT 
 1526              	
 1527              	/****************************
 1528              		D2/  ( d -- d>>1 )
ARM GAS  forth.s 			page 136


 1529              		double signed divide by 2 
 1530              	*****************************/
 1531 394a 34390000 		_HEADER D2SL,3,"D2/"
 1531      0344322F 
 1531      00BF
 1532 3954 3868     		ldr T0,[DSP]
 1533 3956 7610     		asrs TOS,#1
 1534 3958 4FEA3000 		rrx T0,T0 
 1535 395c 3860     		str T0,[DSP]
 1536 395e FFF7CBB9 		_NEXT 
 1537              	
 1538              	/***************************
 1539              		D/MOD  ( d+ n+ - r+ qd+ )
 1540              		unsigned double division
 1541              		and modulo 
 1542              		output:
 1543              			qd+ = d+ / n+
 1544              			r+ = qd+ - (d+ * n+ )
 1545              	***************************/
 1546 3962 4E390000 		_HEADER DSLMOD,5,"D/MOD"
 1546      05442F4D 
 1546      4F44
 1547 396c 3D68     		ldr WP,[DSP]  // d+ high 
 1548 396e 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1549 3970 4FF02002 		mov T2,#32 // shift counter  
 1550 3974 81EA0101 		eor T1,T1 // quotient T0:T1  
 1551 3978 25B9     		cbnz WP,1f    
 1552 397a 82EA0202 		eor T2,T2 // nos shifting required 
 1553 397e 0546     		mov WP,T0 
 1554 3980 80EA0000 		eor T0,T0 
 1555 3984 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1556 3986 15F0004F 	    tst WP,#(1<<31) 
 1557 398a 06D1     		bne 2f
 1558 398c 4918     		adds T1,T1,T1 
 1559 398e 4041     		adcs T0,T0,T0 
 1560 3990 45EB0505 		adc WP,WP,WP 
 1561 3994 A2F10102 		sub T2,#1 
 1562 3998 F4E7     		b 1b 
 1563 399a B5FBF6F3 	2:  udiv T3,WP,TOS
 1564 399e 41EA0301 		orr T1,T3   // append partial quotient 
 1565 39a2 06FB03F3 		mul T3,TOS
 1566 39a6 A5EB0305 		sub WP,T3 //remainder 
 1567 39aa 02B1     		cbz T2,8f 
 1568 39ac EAE7     		b 1b 
 1569 39ae 7D60     	8:	str WP,[DSP,#4] // remainder 
 1570 39b0 3960     		str T1,[DSP]  // q lo 
 1571 39b2 0646     		mov TOS,T0  // q hi 		
 1572 39b4 FFF7A0B9 		_NEXT 
 1573              	
 1574              	
 1575              	/****************************
 1576              		D/  ( ud u -- udq )
 1577              		divide unsigned double 
 1578              		by unsigned single 
 1579              		return double quotient
 1580              		rounded to nearest integer 
 1581              	****************************/
ARM GAS  forth.s 			page 137


 1582 39b8 66390000 		_HEADER DSLASH,2,"D/"
 1582      02442F00 
 1583 39c0 504700BF 		_NEST 
 1584 39c4 AD300000 		_ADR DUPP 
 1585 39c8 232F0000 		_DOLIT 1 
 1585      01000000 
 1586 39d0 85310000 		_ADR RSHIFT 
 1587 39d4 29300000 		_ADR TOR 
 1588 39d8 6D390000 		_ADR DSLMOD 
 1589 39dc D1320000 		_ADR ROT 
 1590 39e0 E52F0000 		_ADR RFROM 
 1591 39e4 B9340000 		_ADR GREAT 
 1592 39e8 632F0000 		_QBRAN 9f
 1592      003A0000 
 1593 39f0 232F0000 		_DOLIT 1 
 1593      01000000 
 1594 39f8 25390000 		_ADR STOD 
 1595 39fc 35330000 		_ADR DPLUS 
 1596 3a00 FF2C0000 	9:	_UNNEST 
 1597              	
 1598              	
 1599              	/****************************
 1600              		D* ( d s -- d )
 1601              	    multiply a double 
 1602              		by a single 
 1603              	****************************/
 1604 3a04 BC390000 		_HEADER DSTAR,2,"D*"
 1604      02442A00 
 1605              	/*
 1606              		_NEST 
 1607              		_ADR NROT 
 1608              		_ADR DUPP 
 1609              		_ADR TOR 
 1610              		_ADR DABS
 1611              		_ADR SWAP  
 1612              		_ADR ROT   
 1613              		_ADR DUPP
 1614              		_ADR TOR
 1615              		_ADR MSTAR
 1616              		_ADR ROT
 1617              		_ADR RFROM 
 1618              		_ADR STAR 
 1619              		_ADR PLUS
 1620              		_ADR RFROM 
 1621              		_ADR ZLESS 
 1622              		_QBRAN 9f
 1623              		_ADR DNEGA   
 1624              	9:	_UNNEST 
 1625              	*/
 1626 3a0c 57F8040B 		ldr T0,[DSP],#4
 1627 3a10 3968     		ldr T1,[DSP]
 1628 3a12 3860     		str T0,[DSP] 
 1629 3a14 83EA0303 		eor T3,T3 
 1630 3a18 10F0004F 		tst T0,#(1<<31)
 1631 3a1c 02D0     		beq 1f 
 1632              		// DNEGATE 
 1633 3a1e 591A     		subs T1,T3,T1  
ARM GAS  forth.s 			page 138


 1634 3a20 63EB0000 		sbc T0,T3,T0 
 1635 3a24 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1636 3a28 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1637 3a2c 0E44     		add TOS,T1  // TOS:T2 product  
 1638 3a2e 3868     		ldr r0,[DSP]
 1639 3a30 10F0004F 		tst T0,#(1<<31)
 1640 3a34 02D0     		beq 2f 
 1641              		// DNEGATE product 
 1642 3a36 9A1A     		subs T2,T3,T2  
 1643 3a38 63EB0606 		sbc TOS,T3,TOS 
 1644 3a3c 3A60     	2:  str T2,[DSP]
 1645 3a3e FFF75BB9 		_NEXT 
 1646              	
 1647              	
 1648              	/****************************
 1649              	   /MOD	( n n -- r q )
 1650              		Signed divide. Return
 1651              		mod and quotient.
 1652              	****************************/
 1653 3a42 083A0000 		_HEADER SLMOD,4,"/MOD"
 1653      042F4D4F 
 1653      4400
 1654 3a4c 504700BF 		_NEST
 1655 3a50 ED300000 		_ADR	OVER
 1656 3a54 1D310000 		_ADR	ZLESS
 1657 3a58 BD300000 		_ADR	SWAP
 1658 3a5c 1D380000 		_ADR	MSMOD
 1659 3a60 FF2C0000 		_UNNEST
 1660              	
 1661              	/**************************
 1662              	    MOD	 ( n n -- r )
 1663              	 	Signed divide. Return
 1664              		mod only.
 1665              	**************************/
 1666 3a64 463A0000 		_HEADER MODD,3,"MOD"
 1666      034D4F44 
 1667 3a6c 504700BF 		_NEST
 1668 3a70 4D3A0000 		_ADR	SLMOD
 1669 3a74 9D300000 		_ADR	DROP
 1670 3a78 FF2C0000 		_UNNEST
 1671              	
 1672              	/*************************
 1673              	    /	   ( n n -- q )
 1674              	 	Signed divide. Return
 1675              		quotient only.
 1676              	**************************/
 1677 3a7c 683A0000 		_HEADER SLASH,1,"/"
 1677      012F00BF 
 1678 3a84 504700BF 		_NEST
 1679 3a88 4D3A0000 		_ADR	SLMOD
 1680 3a8c BD300000 		_ADR	SWAP
 1681 3a90 9D300000 		_ADR	DROP
 1682 3a94 FF2C0000 		_UNNEST
 1683              	
 1684              	//******************************
 1685              	//   */MOD	( n1 n2 n3 -- r q )
 1686              	/*   Multiply n1 and n2, then 
ARM GAS  forth.s 			page 139


 1687              	   divide by n3. Return 
 1688              	   mod and quotient.
 1689              	******************************/
 1690 3a98 803A0000 		_HEADER SSMOD,5,"*/MOD"
 1690      052A2F4D 
 1690      4F4400BF 
 1691 3aa4 504700BF 		_NEST
 1692 3aa8 29300000 		_ADR	TOR
 1693 3aac F5310000 		_ADR	MSTAR
 1694 3ab0 E52F0000 		_ADR	RFROM
 1695 3ab4 1D380000 		_ADR	MSMOD
 1696 3ab8 FF2C0000 		_UNNEST
 1697              	
 1698              	//*******************************
 1699              	//  */ ( n1 n2 n3 -- q )
 1700              	/* 	Multiply n1 by n2, then 
 1701              		divide by n3. Return quotient
 1702              		only.
 1703              	*******************************/
 1704 3abc 9C3A0000 		_HEADER STASL,2,"*/"
 1704      022A2F00 
 1705 3ac4 504700BF 		_NEST
 1706 3ac8 A53A0000 		_ADR	SSMOD
 1707 3acc BD300000 		_ADR	SWAP
 1708 3ad0 9D300000 		_ADR	DROP
 1709 3ad4 FF2C0000 		_UNNEST
 1710              	
 1711              	/*******************
 1712              	  Miscellaneous
 1713              	*******************/
 1714              	
 1715              	/*************************
 1716              		CHAR+ ( a -- a+ )
 1717              		increment a by one 
 1718              		char size unit. 
 1719              	*************************/
 1720 3ad8 C03A0000 		_HEADER CHARP,5,"CHAR+"
 1720      05434841 
 1720      522B00BF 
 1721 3ae4 06F10106 		add TOS,#1
 1722 3ae8 FFF706B9 		_NEXT 
 1723              	
 1724              	/*************************
 1725              		CHARS ( n1 -- n1 )
 1726              		address size of 
 1727              		n1 character
 1728              		same on this system 
 1729              	*************************/
 1730 3aec DC3A0000 		_HEADER CHARS,5,"CHARS"
 1730      05434841 
 1730      525300BF 
 1731 3af8 FFF7FEB8 		_NEXT 
 1732              	
 1733              	
 1734              	
 1735              	/*************************
 1736              		ALIGN ( -- )
ARM GAS  forth.s 			page 140


 1737              		align data pointer 
 1738              		to cell boundary 
 1739              	************************/
 1740 3afc F03A0000 		_HEADER ALIGN,5,"ALIGN"
 1740      05414C49 
 1740      474E00BF 
 1741 3b08 E06C     		ldr T0,[UP,#USER_CTOP]
 1742 3b0a 00F10300 		add T0,#(CELLL-1)
 1743 3b0e 20F00300 		and T0,#0xFFFFFFFC 
 1744 3b12 E064     		str T0,[UP,#USER_CTOP]
 1745 3b14 FFF7F0B8 		_NEXT 
 1746              	
 1747              	
 1748              	/*************************
 1749              	    ALIGNED	( b -- a )
 1750              	 	Align address to the 
 1751              		cell boundary.
 1752              	**************************/
 1753 3b18 003B0000 		_HEADER ALGND,7,"ALIGNED"
 1753      07414C49 
 1753      474E4544 
 1754 3b24 06F10306 		ADD	TOS,TOS,#3
 1755 3b28 6FF00305 		MVN	WP,#3
 1756 3b2c 06EA0506 		AND	TOS,TOS,WP
 1757 3b30 FFF7E2B8 		_NEXT
 1758              	
 1759              	/****************************
 1760              	    >CHAR	( c -- c )
 1761              	 	Filter non-printing 
 1762              		characters.
 1763              	****************************/
 1764 3b34 1C3B0000 		_HEADER TCHAR,5,">CHAR"
 1764      053E4348 
 1764      415200BF 
 1765 3b40 504700BF 		_NEST
 1766 3b44 232F0000 		_DOLIT  0x7F
 1766      7F000000 
 1767 3b4c 2D310000 		_ADR	ANDD
 1768 3b50 AD300000 		_ADR	DUPP	// mask msb
 1769 3b54 69320000 		_ADR	BLANK
 1770 3b58 232F0000 		_DOLIT 	127
 1770      7F000000 
 1771 3b60 B5370000 		_ADR	WITHI	// check for printable
 1772 3b64 BD330000 		_ADR	INVER
 1773 3b68 632F0000 		_QBRAN	TCHA1
 1773      7C3B0000 
 1774 3b70 9D300000 		_ADR	DROP
 1775 3b74 232F0000 		_DOLIT 	'_'	// replace non-printables
 1775      5F000000 
 1776              	TCHA1:
 1777 3b7c FF2C0000 		  _UNNEST
 1778              	
 1779              	/************************
 1780              	    DEPTH	( -- n )
 1781              	 	Return the depth of
 1782              		the data stack.
 1783              	***********************/
ARM GAS  forth.s 			page 141


 1784 3b80 383B0000 		_HEADER DEPTH,5,"DEPTH"
 1784      05444550 
 1784      544800BF 
 1785 3b8c 4FF6B062 		_MOV32 T2,SPP 
 1785      C2F20102 
 1786 3b94 A2EB0702 		SUB	T2,T2,DSP
 1787 3b98 47F8046D 		_PUSH
 1788 3b9c 4FEAA206 		ASR	TOS,T2,#2
 1789 3ba0 FFF7AAB8 		_NEXT
 1790              	
 1791              	/*****************************
 1792              	    PICK	( ... +n -- ... w )
 1793              	 	Copy the nth stack item 
 1794              		to tos.
 1795              	******************************/
 1796 3ba4 843B0000 		_HEADER PICK,4,"PICK"
 1796      04504943 
 1796      4B0000BF 
 1797 3bb0 4FEA8606 		lsl TOS,#2 
 1798 3bb4 BE59     		ldr TOS,[DSP,TOS]
 1799 3bb6 FFF79FB8 		_NEXT 
 1800              	
 1801              	/*****************************
 1802              		PUT ( xn..x0 w i -- xi...x0 )
 1803              		put value w at position 
 1804              		xi on stack 
 1805              		i in range [0..n] 
 1806              	*****************************/
 1807 3bba A83B0000 		_HEADER PUT,3,"PUT"
 1807      03505554 
 1807      00BF
 1808 3bc4 3546     		mov WP,TOS 
 1809 3bc6 57F8046B 		_POP 
 1810 3bca 4FEA8505 		lsl WP,#2 
 1811 3bce 7E51     		str TOS,[DSP,WP]
 1812 3bd0 57F8046B 		_POP 
 1813 3bd4 FFF790B8 		_NEXT 
 1814              	
 1815              	/*********************
 1816              	  Memory access
 1817              	*********************/
 1818              	
 1819              	/*************************
 1820              	    HERE	( -- a )
 1821              	 	Return the top of
 1822              		the code dictionary.
 1823              	*************************/
 1824 3bd8 BE3B0000 		_HEADER HERE,4,"HERE"
 1824      04484552 
 1824      450000BF 
 1825 3be4 504700BF 		_NEST
 1826 3be8 D9360000 		_ADR	CPP
 1827 3bec B92F0000 		_ADR	AT
 1828 3bf0 FF2C0000 		_UNNEST
 1829              	
 1830              	/***************************	
 1831              	    PAD	 ( -- a )
ARM GAS  forth.s 			page 142


 1832              	 	Return the address of 
 1833              		a temporary buffer.
 1834              	***************************/
 1835 3bf4 DC3B0000 		_HEADER PAD,3,"PAD"
 1835      03504144 
 1836 3bfc 504700BF 		_NEST
 1837 3c00 E53B0000 		_ADR	HERE
 1838 3c04 232F0000 		_DOLIT 80
 1838      50000000 
 1839 3c0c AD310000 		_ADR PLUS 
 1840 3c10 FF2C0000 		_UNNEST
 1841              	
 1842              	/***********************
 1843              	    TIB	 ( -- a )
 1844              	 	Return the address 
 1845              		of the terminal 
 1846              		input buffer.
 1847              	************************/
 1848 3c14 F83B0000 		_HEADER TIB,3,"TIB"
 1848      03544942 
 1849 3c1c 47F8046D 		_PUSH
 1850 3c20 666B     		ldr TOS,[UP,#TIBUF]
 1851 3c22 FFF769B8 		_NEXT
 1852              	
 1853              	/*************************
 1854              		SOURCE-ID, ( -- 0 | -1 )
 1855              	output:
 1856              		-1 	String (via EVALUATE)	
 1857              		0 	User input device
 1858              	*****************************/
 1859 3c26 183C0000 		_HEADER SOURCID,9,"SOURCE-ID"
 1859      09534F55 
 1859      5243452D 
 1859      4944
 1860 3c34 47F8046D 		_PUSH 
 1861 3c38 A66B     		ldr TOS,[UP,#SRCID]
 1862 3c3a FFF75DB8 		_NEXT 
 1863              	
 1864              	
 1865              	/***********************************
 1866              		SOURCE ( -- a u )
 1867              	output:
 1868              		a  address of transaction buffer 
 1869              		u  # char in buffer 
 1870              	***********************************/
 1871 3c3e 2A3C0000 		_HEADER SOURCE,6,"SOURCE"
 1871      06534F55 
 1871      52434500 
 1871      00BF
 1872 3c4c 504700BF 		_NEST 
 1873 3c50 232F0000 		_DOLIT  UPP+SRC 
 1873      30000020 
 1874 3c58 35350000 		_ADR   DAT 
 1875 3c5c FF2C0000 		_UNNEST 
 1876              	
 1877              	/*************************
 1878              	    @EXECUTE	( a -- )
ARM GAS  forth.s 			page 143


 1879              	 	Execute vector stored
 1880              		in address a.
 1881              	*************************/
 1882 3c60 423C0000 		_HEADER ATEXE,8,"@EXECUTE"
 1882      08404558 
 1882      45435554 
 1882      450000BF 
 1883 3c70 3500     		MOVS	WP,TOS
 1884 3c72 57F8046B 		_POP
 1885 3c76 2D68     		LDR	WP,[WP]
 1886 3c78 45F00105 		ORR	WP,WP,#1
 1887 3c7c 18BF     	    IT NE 
 1888 3c7e 2847     		BXNE	WP
 1889 3c80 FFF73AB8 		_NEXT
 1890              	
 1891              	/*******************************
 1892              	    CMOVE	( b1 b2 u -- )
 1893              	 	Copy u bytes from b1 to b2.
 1894              	********************************/
 1895 3c84 643C0000 		_HEADER CMOVE,5,"CMOVE"
 1895      05434D4F 
 1895      564500BF 
 1896 3c90 57F8042B 		LDR	T2,[DSP],#4
 1897 3c94 57F8043B 		LDR	T3,[DSP],#4
 1898 3c98 03E0     		B CMOV1
 1899              	CMOV0:
 1900 3c9a 13F8015B 		LDRB	WP,[T3],#1
 1901 3c9e 02F8015B 		STRB	WP,[T2],#1
 1902              	CMOV1:
 1903 3ca2 3600     		MOVS	TOS,TOS
 1904 3ca4 02D0     		BEQ	CMOV2
 1905 3ca6 A6F10106 		SUB	TOS,TOS,#1
 1906 3caa F6E7     		B CMOV0
 1907              	CMOV2:
 1908 3cac 57F8046B 		_POP
 1909 3cb0 FFF722B8 		_NEXT
 1910              	
 1911              	/***************************
 1912              	    MOVE	( a1 a2 u -- )
 1913              	 	Copy u words from a1 to a2.
 1914              	*******************************/
 1915 3cb4 883C0000 		_HEADER MOVE,4,"MOVE"
 1915      044D4F56 
 1915      450000BF 
 1916 3cc0 4FF00400 		MOV T0,#4 
 1917 3cc4 06F10306 		ADD TOS,#3 
 1918 3cc8 26F00306 		BIC TOS,#3
 1919 3ccc 57F8041B 		LDR	T1,[DSP],#4 // dest
 1920 3cd0 57F8042B 		LDR	T2,[DSP],#4 // src 
 1921 3cd4 8A42     		CMP T2,T1 
 1922 3cd6 08D5     		BPL MOVE1
 1923 3cd8 6FF00300 		MOV T0,#-4 
 1924 3cdc 3144     		ADD T1,TOS
 1925 3cde 3244     		ADD T2,TOS 
 1926 3ce0 01E0     		B MOVE3
 1927              	MOVE0:
 1928 3ce2 1568     		LDR	WP,[T2]
ARM GAS  forth.s 			page 144


 1929 3ce4 0D60     		STR	WP,[T1]
 1930              	MOVE3: 
 1931 3ce6 0144     		ADD T1,T0 
 1932 3ce8 0244     		ADD T2,T0 
 1933              	MOVE1:
 1934 3cea 3600     		MOVS TOS,TOS
 1935 3cec 02D0     		BEQ	MOVE2
 1936 3cee A6F10406 		SUB	TOS,TOS,#4
 1937 3cf2 F6E7     		B MOVE0
 1938              	MOVE2:
 1939 3cf4 57F8046B 		_POP
 1940 3cf8 FEF7FEBF 		_NEXT
 1941              	
 1942              	/**************************
 1943              	    FILL	( b u c -- )
 1944              	 	Fill u bytes of character
 1945              		c to area beginning at b.
 1946              	******************************/
 1947 3cfc B83C0000 		_HEADER FILL,4,"FILL"
 1947      0446494C 
 1947      4C0000BF 
 1948 3d08 03CF     		LDMFD DSP!,{T0,T1} 
 1949 3d0a 0000     		MOVS T0,T0 
 1950 3d0c 03D0     		BEQ FILL2
 1951              	FILL1:
 1952 3d0e 01F8016B 		STRB	TOS,[T1],#1
 1953 3d12 0138     		SUBS	T0,T0,#1
 1954 3d14 FBD1     		BNE FILL1
 1955              	FILL2:
 1956 3d16 57F8046B 		_POP
 1957 3d1a FEF7EDBF 		_NEXT
 1958              	
 1959              	/*****************************
 1960              	    PACK$	( b u a -- a )
 1961              	 	Build a counted word with
 1962              		u characters from b. 
 1963              		Null fill.
 1964              	*****************************/
 1965 3d1e 003D0000 		_HEADER PACKS,5,"PACK$"
 1965      05504143 
 1965      4B24
 1966 3d28 504700BF 		_NEST
 1967 3d2c 253B0000 		_ADR	ALGND
 1968 3d30 AD300000 		_ADR	DUPP
 1969 3d34 29300000 		_ADR	TOR		// strings only on cell boundary
 1970 3d38 ED300000 		_ADR	OVER
 1971 3d3c AD310000 		_ADR	PLUS
 1972 3d40 09320000 		_ADR	ONEP 
 1973 3d44 232F0000 		_DOLIT 	0xFFFFFFFC
 1973      FCFFFFFF 
 1974 3d4c 2D310000 		_ADR	ANDD			// count mod cell
 1975 3d50 232F0000 		_DOLIT 	0
 1975      00000000 
 1976 3d58 BD300000 		_ADR	SWAP
 1977 3d5c A52F0000 		_ADR	STORE			// null fill cell
 1978 3d60 15300000 		_ADR	RAT
 1979 3d64 21330000 		_ADR	DDUP
ARM GAS  forth.s 			page 145


 1980 3d68 C52F0000 		_ADR	CSTOR
 1981 3d6c 09320000 		_ADR	ONEP			// save count
 1982 3d70 BD300000 		_ADR	SWAP
 1983 3d74 913C0000 		_ADR	CMOVE
 1984 3d78 E52F0000 		_ADR	RFROM
 1985 3d7c FF2C0000 		_UNNEST   			// move string
 1986              	
 1987              	/***********************************
 1988              	  Numeric output, single precision
 1989              	***********************************/
 1990              	
 1991              	/**************************
 1992              	    DIGIT	( u -- c )
 1993              	 	Convert digit u to 
 1994              		a character.
 1995              	***************************/
 1996 3d80 223D0000 		_HEADER DIGIT,5,"DIGIT"
 1996      05444947 
 1996      495400BF 
 1997 3d8c 504700BF 		_NEST
 1998 3d90 232F0000 		_DOLIT 9
 1998      09000000 
 1999 3d98 ED300000 		_ADR	OVER
 2000 3d9c 89340000 		_ADR	LESS
 2001 3da0 232F0000 		_DOLIT	7
 2001      07000000 
 2002 3da8 2D310000 		_ADR	ANDD
 2003 3dac AD310000 		_ADR	PLUS
 2004 3db0 232F0000 		_DOLIT	'0'
 2004      30000000 
 2005 3db8 AD310000 		_ADR	PLUS 
 2006 3dbc FF2C0000 		_UNNEST
 2007              	
 2008              	/*********************************
 2009              	    EXTRACT	( ud base -- ud c )
 2010              	 	Extract the least significant
 2011              		digit from positive double.
 2012              	**********************************/
 2013 3dc0 843D0000 		_HEADER EXTRC,7,"EXTRACT"
 2013      07455854 
 2013      52414354 
 2014 3dcc 504700BF 		_NEST
 2015 3dd0 6D390000 		_ADR	DSLMOD
 2016 3dd4 D1320000 		_ADR	ROT
 2017 3dd8 8D3D0000 		_ADR	DIGIT
 2018 3ddc FF2C0000 		_UNNEST
 2019              	
 2020              	/***************************
 2021              	    <#	  ( -- )
 2022              	 	Initiate the numeric
 2023              		output process.
 2024              	****************************/
 2025 3de0 C43D0000 		_HEADER BDIGS,2,"<#"
 2025      023C2300 
 2026 3de8 504700BF 		_NEST
 2027 3dec FD3B0000 		_ADR	PAD
 2028 3df0 AD360000 		_ADR	HLD
ARM GAS  forth.s 			page 146


 2029 3df4 A52F0000 		_ADR	STORE
 2030 3df8 FF2C0000 		_UNNEST
 2031              	
 2032              	/*********************************
 2033              	    HOLD	( c -- )
 2034              	 	Insert a character into the 
 2035              		numeric output string.
 2036              	**********************************/
 2037 3dfc E43D0000 		_HEADER HOLD,4,"HOLD"
 2037      04484F4C 
 2037      440000BF 
 2038 3e08 504700BF 		_NEST
 2039 3e0c AD360000 		_ADR	HLD
 2040 3e10 B92F0000 		_ADR	AT
 2041 3e14 19320000 		_ADR	ONEM
 2042 3e18 AD300000 		_ADR	DUPP
 2043 3e1c AD360000 		_ADR	HLD
 2044 3e20 A52F0000 		_ADR	STORE
 2045 3e24 C52F0000 		_ADR	CSTOR
 2046 3e28 FF2C0000 		_UNNEST
 2047              	
 2048              	/***********************
 2049              	    #	   ( ud -- ud )
 2050              	 	Extract one digit 
 2051              		from ud and append 
 2052              		the digit to output 
 2053              		string.
 2054              	*************************/
 2055 3e2c 003E0000 		_HEADER DIG,1,"#"
 2055      012300BF 
 2056 3e34 504700BF 		_NEST
 2057 3e38 19360000 		_ADR	BASE
 2058 3e3c B92F0000 		_ADR	AT
 2059 3e40 CD3D0000 		_ADR	EXTRC
 2060 3e44 093E0000 		_ADR	HOLD
 2061 3e48 FF2C0000 		_UNNEST
 2062              	
 2063              	/***************************
 2064              	    #S	  ( ud -- 0 )
 2065              	 	Convert ud until all 
 2066              		digits are added to 
 2067              		the output string.
 2068              	***************************/
 2069 3e4c 303E0000 		_HEADER DIGS,2,"#S"
 2069      02235300 
 2070 3e54 504700BF 		_NEST
 2071              	DIGS1:
 2072 3e58 353E0000 	    _ADR	DIG
 2073 3e5c 21330000 		_ADR	DDUP
 2074 3e60 41310000 		_ADR    ORR 
 2075 3e64 632F0000 		_QBRAN 	DIGS2
 2075      743E0000 
 2076 3e6c 8B2F0000 		_BRAN	DIGS1
 2076      583E0000 
 2077              	DIGS2:
 2078 3e74 9D300000 		 _ADR DROP 
 2079 3e78 FF2C0000 		 _UNNEST
ARM GAS  forth.s 			page 147


 2080              	
 2081              	/*********************
 2082              	    SIGN	( n -- )
 2083              	 	Add a minus sign
 2084              		to the numeric
 2085              		output string.
 2086              	*********************/
 2087 3e7c 503E0000 		_HEADER SIGN,4,"SIGN"
 2087      04534947 
 2087      4E0000BF 
 2088 3e88 504700BF 		_NEST
 2089 3e8c 1D310000 		_ADR	ZLESS
 2090 3e90 632F0000 		_QBRAN	SIGN1
 2090      A43E0000 
 2091 3e98 232F0000 		_DOLIT '-'
 2091      2D000000 
 2092 3ea0 093E0000 		_ADR	HOLD
 2093              	SIGN1:
 2094 3ea4 FF2C0000 		  _UNNEST
 2095              	
 2096              	/*************************
 2097              	    #>  ( w -- b u )
 2098              	 	Prepare the output 
 2099              		word to be TYPE'd.
 2100              	************************/
 2101 3ea8 803E0000 		_HEADER EDIGS,2,"#>"
 2101      02233E00 
 2102 3eb0 504700BF 		_NEST
 2103 3eb4 9D300000 		_ADR	DROP
 2104 3eb8 AD360000 		_ADR	HLD
 2105 3ebc B92F0000 		_ADR	AT
 2106 3ec0 FD3B0000 		_ADR	PAD
 2107 3ec4 ED300000 		_ADR	OVER
 2108 3ec8 BD310000 		_ADR	SUBB
 2109 3ecc FF2C0000 		_UNNEST
 2110              	
 2111              	/**************************
 2112              	    str	 ( n -- b u )
 2113              	 	Convert a signed 
 2114              		integer to a numeric 
 2115              		string.
 2116              	hidden word used by compiler
 2117              	***************************/
 2118              	STRR:
 2119 3ed0 504700BF 		_NEST
 2120 3ed4 25390000 		_ADR 	STOD 
 2121 3ed8 AD300000 		_ADR	DUPP
 2122 3edc 29300000 		_ADR	TOR
 2123 3ee0 55330000 		_ADR	DABS
 2124 3ee4 E93D0000 		_ADR	BDIGS
 2125 3ee8 553E0000 		_ADR	DIGS
 2126 3eec E52F0000 		_ADR	RFROM
 2127 3ef0 893E0000 		_ADR	SIGN
 2128 3ef4 B13E0000 		_ADR	EDIGS
 2129 3ef8 FF2C0000 		_UNNEST
 2130              	
 2131              	/*************************
ARM GAS  forth.s 			page 148


 2132              	    HEX	 ( -- )
 2133              	 	Use radix 16 as 
 2134              		base for numeric 
 2135              		conversions.
 2136              	*************************/
 2137 3efc AC3E0000 		_HEADER HEX,3,"HEX"
 2137      03484558 
 2138 3f04 504700BF 		_NEST
 2139 3f08 232F0000 		_DOLIT 16
 2139      10000000 
 2140 3f10 19360000 		_ADR	BASE
 2141 3f14 A52F0000 		_ADR	STORE
 2142 3f18 FF2C0000 		_UNNEST
 2143              	
 2144              	/**************************
 2145              		BIN ( -- )
 2146              		Use radix 2 as 
 2147              		base for numeric 
 2148              		conversion 
 2149              	**************************/
 2150 3f1c 003F0000 		_HEADER BIN,3,"BIN"
 2150      0342494E 
 2151 3f24 504700BF 		_NEST 
 2152 3f28 232F0000 		_DOLIT 2 
 2152      02000000 
 2153 3f30 19360000 		_ADR BASE 
 2154 3f34 A52F0000 		_ADR STORE
 2155 3f38 FF2C0000 		_UNNEST 
 2156              	
 2157              	/************************
 2158              	    DECIMAL	( -- )
 2159              	 	Use radix 10 as base
 2160              		for numeric conversions.
 2161              	*************************/
 2162 3f3c 203F0000 		_HEADER DECIM,7,"DECIMAL"
 2162      07444543 
 2162      494D414C 
 2163 3f48 504700BF 		_NEST
 2164 3f4c 232F0000 		_DOLIT 10
 2164      0A000000 
 2165 3f54 19360000 		_ADR	BASE
 2166 3f58 A52F0000 		_ADR	STORE
 2167 3f5c FF2C0000 		_UNNEST
 2168              	
 2169              	/************************************
 2170              	  Numeric input
 2171              	***********************************/
 2172              	
 2173              	/***********************************
 2174              	    DIGIT?	( c base -- u t )
 2175              	 	Convert a character to its 
 2176              		numeric value. A flag 
 2177              		indicates success.
 2178              	**********************************/
 2179 3f60 403F0000 		_HEADER DIGTQ,6,"DIGIT?"
 2179      06444947 
 2179      49543F00 
ARM GAS  forth.s 			page 149


 2180 3f6c 504700BF 		_NEST
 2181 3f70 29300000 		_ADR	TOR
 2182 3f74 232F0000 		_DOLIT 	'0'
 2182      30000000 
 2183 3f7c BD310000 		_ADR	SUBB
 2184 3f80 232F0000 		_DOLIT 9
 2184      09000000 
 2185 3f88 ED300000 		_ADR	OVER
 2186 3f8c 89340000 		_ADR	LESS
 2187 3f90 632F0000 		_QBRAN	DGTQ1
 2187      B83F0000 
 2188 3f98 232F0000 		_DOLIT 7
 2188      07000000 
 2189 3fa0 BD310000 		_ADR	SUBB
 2190 3fa4 AD300000 		_ADR	DUPP
 2191 3fa8 232F0000 		_DOLIT	10
 2191      0A000000 
 2192 3fb0 89340000 		_ADR	LESS
 2193 3fb4 41310000 		_ADR	ORR
 2194              	DGTQ1:
 2195 3fb8 AD300000 		_ADR	DUPP
 2196 3fbc E52F0000 		_ADR	RFROM
 2197 3fc0 71340000 		_ADR	ULESS
 2198 3fc4 FF2C0000 		_UNNEST
 2199              	
 2200              	
 2201              	/*****************************************
 2202              		>NUMBER ( ud1 adr1 u1 -- ud2 adr2 u2 )
 2203              	  convert unsigned double string 
 2204              	  to double integer adding to ud1 
 2205              	input:
 2206              		ud1  unsiged double 
 2207              		adr1  string address 
 2208              		u1    string length 
 2209              	outpout:
 2210              		ud2   modifield ud1 
 2211              		adr2  point to char not converted 
 2212              		u2    char left in string 
 2213              	**************************************/
 2214 3fc8 643F0000 		_HEADER TONBR,7,">NUMBER"
 2214      073E4E55 
 2214      4D424552 
 2215 3fd4 504700BF 		_NEST 
 2216 3fd8 AD300000 		_ADR DUPP 
 2217 3fdc 632F0000 		_QBRAN 9f 
 2217      44400000 
 2218 3fe4 ED300000 	1: 	_ADR OVER  // d a u a 
 2219 3fe8 D92F0000 		_ADR CAT   // d  a u c 
 2220 3fec 19360000 		_ADR BASE   
 2221 3ff0 B92F0000 		_ADR AT      // d a u c base
 2222 3ff4 6D3F0000 		_ADR DIGTQ   // d a u n flag 
 2223 3ff8 632F0000 		_QBRAN 8f
 2223      40400000 
 2224 4000 29300000 		_ADR TOR   	 
 2225 4004 19320000 		_ADR ONEM 
 2226 4008 D1300000 		_ADR DSWAP // a u d 
 2227 400c 19360000 		_ADR BASE 
ARM GAS  forth.s 			page 150


 2228 4010 B92F0000 		_ADR AT 
 2229 4014 0D3A0000 		_ADR DSTAR 
 2230 4018 E52F0000 		_ADR RFROM 
 2231 401c 232F0000 		_DOLIT 0    
 2231      00000000 
 2232 4024 35330000 		_ADR DPLUS 
 2233 4028 D1300000 		_ADR DSWAP 
 2234 402c BD300000 		_ADR SWAP 
 2235 4030 09320000 		_ADR ONEP
 2236 4034 BD300000 		_ADR SWAP  
 2237 4038 8B2F0000 		_BRAN 1b 
 2237      E43F0000 
 2238 4040 9D300000 	8:  _ADR DROP
 2239 4044 FF2C0000 	9:	_UNNEST 
 2240              	
 2241              	
 2242              	/**************************
 2243              	 CHAR? ( a cnt c -- a+ cnt- t | a cnt f )
 2244              	 check for charcter c 
 2245              	 move pointer if *a==c  
 2246              	**************************/
 2247              	CHARQ:
 2248 4048 7868     	    ldr T0,[DSP,#4]
 2249 404a 10F8011B 	    ldrb T1,[T0],#1 
 2250 404e 3246     	    mov T2,TOS 
 2251 4050 86EA0606 	    eor TOS,TOS
 2252 4054 9142     	    cmp T1,T2
 2253 4056 06D1     	    bne 1f 
 2254 4058 7860     	    str T0,[DSP,#4]
 2255 405a 3868     		ldr T0,[DSP]
 2256 405c A0F10100 		sub T0,#1 
 2257 4060 3860     		str T0,[DSP]
 2258 4062 6FEA0606 	    mvn TOS,TOS  
 2259 4066 FEF747BE 	1:  _NEXT
 2260              	
 2261              	
 2262              	/*********************************
 2263              	   NEG? ( a cnt -- a cnt f |a+ cnt- t )
 2264              	   skip '-'|'+' return -1 if '-' 
 2265              	   else return 0 
 2266              	*********************************/
 2267              	NEGQ: 
 2268 406a 47F8046D 		_PUSH 
 2269 406e 86EA0606 		eor TOS,TOS // false flag 
 2270 4072 7868     		ldr T0,[DSP,#4]
 2271 4074 10F8011B 		ldrb T1,[T0],#1
 2272 4078 2D29     		cmp T1,#'-' 
 2273 407a 02D0     		beq 1f
 2274 407c 2B29     		cmp T1,#'+'
 2275 407e 07D1     		bne 3f 
 2276 4080 01E0     		b 2f 
 2277 4082 6FEA0606 	1:  mvn TOS,TOS  // true flag 
 2278 4086 7860     	2:	str T0,[DSP,#4]
 2279 4088 3868     		ldr T0,[DSP]
 2280 408a A0F10100 		sub T0,#1 
 2281 408e 3860     		str T0,[DSP]
 2282 4090 FEF732BE 	3:	_NEXT 
ARM GAS  forth.s 			page 151


 2283              	
 2284              	
 2285              	
 2286              	/**********************************
 2287              	    INT?	( a -- n T | a F )
 2288              	 	parse string  at 'a' for 
 2289              		integer. Push a flag on TOS.
 2290              		integer form:
 2291              			[-]hex_digit+  | 
 2292              			$[-]hex_digit+ |
 2293              			%[-]bin_digit+ | 
 2294              			[-]dec_digit+ 
 2295              	**********************************/
 2296 4094 CC3F0000 		_HEADER INTQ,4,"INT?"
 2296      04494E54 
 2296      3F0000BF 
 2297 40a0 504700BF 		_NEST
 2298              	// save BASE 	
 2299 40a4 19360000 		_ADR	BASE
 2300 40a8 B92F0000 		_ADR	AT
 2301 40ac 29300000 		_ADR	TOR
 2302 40b0 232F0000 		_DOLIT	0      // a 0 
 2302      00000000 
 2303 40b8 ED300000 		_ADR	OVER   // a 0 a 
 2304 40bc 4D350000 		_ADR	COUNT  // a 0 a+ cnt 
 2305 40c0 232F0000 		_DOLIT  '$' 
 2305      24000000 
 2306 40c8 49400000 		_ADR    CHARQ 
 2307 40cc 632F0000 		_QBRAN  0f 
 2307      E0400000 
 2308              	// hexadecimal number 
 2309 40d4 053F0000 		_ADR    HEX
 2310 40d8 8B2F0000 		_BRAN   2f 
 2310      F8400000 
 2311 40e0 232F0000 	0:  _DOLIT  '%'   // -- a 0 a cnt '%'
 2311      25000000 
 2312 40e8 49400000 		_ADR	CHARQ  // -- a 0 a cnt f 
 2313 40ec 632F0000 		_QBRAN  2f
 2313      F8400000 
 2314 40f4 253F0000 		_ADR	BIN 
 2315              	2: // check if negative number 
 2316 40f8 6B400000 		_ADR    NEGQ 
 2317 40fc 29300000 		_ADR	TOR  // -- a 0 a+ cnt- R: sign 
 2318 4100 232F0000 		_DOLIT  0
 2318      00000000 
 2319 4108 AD300000 		_ADR	DUPP 
 2320 410c D1300000 		_ADR	DSWAP // a 0 0 0 a+ cnt- R: sign 
 2321 4110 D53F0000 		_ADR    TONBR // a 0 d a+ cnt 
 2322 4114 632F0000 		_QBRAN  2f
 2322      30410000 
 2323              	    // not an integer 
 2324 411c E52F0000 		_ADR RFROM // a 0 d a sign  
 2325 4120 F9320000 		_ADR DDROP 
 2326 4124 F9320000 		_ADR DDROP 
 2327 4128 8B2F0000 		_BRAN 7f 
 2327      58410000 
 2328              	2: // valid integer 
ARM GAS  forth.s 			page 152


 2329 4130 9D300000 		_ADR	DROP // a 0 d
 2330 4134 D1300000 		_ADR    DSWAP 
 2331 4138 F9320000 		_ADR    DDROP 
 2332 413c 9D300000 		_ADR    DROP  // d>s 
 2333 4140 E52F0000 		_ADR    RFROM // n sign 
 2334 4144 632F0000 		_QBRAN  2f
 2334      50410000 
 2335 414c D1330000 		_ADR    NEGAT   
 2336 4150 232F0000 	2:	_DOLIT  -1 
 2336      FFFFFFFF 
 2337              	7: // restore BASE 
 2338 4158 E52F0000 		_ADR	RFROM
 2339 415c 19360000 		_ADR	BASE
 2340 4160 A52F0000 		_ADR	STORE
 2341 4164 FF2C0000 		_UNNEST
 2342              	
 2343              	
 2344              	/********************************
 2345              	    NUMBER? ( a -- int -1 | float -2 | a 0 )
 2346              	    parse number, integer or float 
 2347              	    if not a number return ( a 0 ) 
 2348              	    if integer return ( int -1 ) 
 2349              	    if float return ( float -2 )
 2350              	**********************************/
 2351 4168 98400000 	    _HEADER NUMBERQ,7,"NUMBER?"
 2351      074E554D 
 2351      4245523F 
 2352 4174 504700BF 	    _NEST 
 2353 4178 A1400000 	    _ADR INTQ
 2354 417c BD320000 	    _ADR QDUP 
 2355 4180 632F0000 	    _QBRAN 2f 
 2355      8C410000 
 2356 4188 FF2C0000 	    _UNNEST 
 2357 418c 1D260000 	2:  _ADR FLOATQ
 2358 4190 FF2C0000 	    _UNNEST 
 2359              	
 2360              	
 2361              	/********************
 2362              	  console I/O
 2363              	********************/
 2364              	
 2365              	/**********************
 2366              	    SPACE	( -- )
 2367              	 	Send the blank 
 2368              		character to 
 2369              		the output device.
 2370              	************************/
 2371 4194 6C410000 		_HEADER SPACE,5,"SPACE"
 2371      05535041 
 2371      434500BF 
 2372 41a0 504700BF 		_NEST
 2373 41a4 69320000 		_ADR	BLANK
 2374 41a8 C12D0000 		_ADR	EMIT
 2375 41ac FF2C0000 		_UNNEST
 2376              	
 2377              	/***************************
 2378              	    SPACES	( +n -- )
ARM GAS  forth.s 			page 153


 2379              	 	Send n spaces to the 
 2380              		output device.
 2381              	****************************/
 2382 41b0 98410000 		_HEADER SPACS,6,"SPACES"
 2382      06535041 
 2382      43455300 
 2383 41bc 504700BF 		_NEST
 2384 41c0 232F0000 		_DOLIT	0
 2384      00000000 
 2385 41c8 D1340000 		_ADR	MAX
 2386 41cc 29300000 		_ADR	TOR
 2387 41d0 8B2F0000 		_BRAN	CHAR2
 2387      DC410000 
 2388              	CHAR1:
 2389 41d8 A1410000 		_ADR	SPACE
 2390              	CHAR2:
 2391 41dc 452F0000 		_DONXT	CHAR1
 2391      D8410000 
 2392 41e4 FF2C0000 		_UNNEST
 2393              	
 2394              	/***********************
 2395              	    TYPE	( b u -- )
 2396              	 	Output u characters 
 2397              		from b.
 2398              	************************/
 2399 41e8 B4410000 		_HEADER TYPEE,4,"TYPE"
 2399      04545950 
 2399      450000BF 
 2400 41f4 504700BF 		_NEST
 2401 41f8 29300000 		_ADR  TOR   // ( a+1 -- R: u )
 2402 41fc 8B2F0000 		_BRAN	TYPE2
 2402      10420000 
 2403              	TYPE1:  
 2404 4204 4D350000 		_ADR  COUNT
 2405 4208 413B0000 		_ADR TCHAR
 2406 420c C12D0000 		_ADR EMIT
 2407              	TYPE2:  
 2408 4210 452F0000 		_DONXT	TYPE1
 2408      04420000 
 2409 4218 9D300000 		_ADR	DROP
 2410 421c FF2C0000 		_UNNEST
 2411              	
 2412              	/***************************
 2413              	    CR	  ( -- )
 2414              	 	Output a carriage return
 2415              		and a line feed.
 2416              	****************************/
 2417 4220 EC410000 		_HEADER CR,2,"CR"
 2417      02435200 
 2418 4228 504700BF 		_NEST
 2419 422c 232F0000 		_DOLIT	CRR
 2419      0D000000 
 2420 4234 C12D0000 		_ADR	EMIT
 2421 4238 232F0000 		_DOLIT	LF
 2421      0A000000 
 2422 4240 C12D0000 		_ADR	EMIT
 2423 4244 FF2C0000 		_UNNEST
ARM GAS  forth.s 			page 154


 2424              	
 2425              	/******************************************
 2426              	  do_$	( -- a u )
 2427              	  Return the address of a compiled string.
 2428              	  adjust return address to skip over it.
 2429              	hidden word used by compiler. 
 2430              	******************************************/
 2431              	DOSTR:
 2432 4248 504700BF 		_NEST     
 2433              	/* compiled string address is 2 levels deep */
 2434 424c E52F0000 		_ADR	RFROM	// { -- a1 }
 2435 4250 E52F0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2436 4254 AD300000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2437 4258 4D350000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2438 425c AD310000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2439 4260 253B0000 		_ADR	ALGND	//  end of string
 2440              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2441 4264 29300000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2442 4268 BD300000 		_ADR	SWAP	//  count tugged
 2443 426c 29300000 		_ADR	TOR     //  ( -- a2) is string address
 2444 4270 4D350000 		_ADR    COUNT  //   ( a2 -- a2+1 cnt )
 2445 4274 FF2C0000 		_UNNEST
 2446              	
 2447              	/******************************************
 2448              	    $"|	( -- a u )
 2449              	 	Run time routine compiled by _". 
 2450              		Return address of a compiled string.
 2451              	hidden word used by compiler
 2452              	*****************************************/
 2453              	STRQP:
 2454 4278 504700BF 		_NEST
 2455 427c 49420000 		_ADR	DOSTR
 2456 4280 FF2C0000 		_UNNEST			// force a call to dostr
 2457              	
 2458              	
 2459              	/**********************
 2460              	    ."|	( -- )
 2461              	 	Run time routine of ." 
 2462              		Output a compiled string.
 2463              	hidden word used by compiler
 2464              	*****************************/
 2465              	DOTQP:
 2466 4284 504700BF 		_NEST
 2467 4288 49420000 		_ADR	DOSTR
 2468 428c F5410000 		_ADR	TYPEE 
 2469 4290 FF2C0000 		_UNNEST
 2470              	
 2471              	/*************************
 2472              		LPAD  ( n+ -- )
 2473              		emit n spaceS + 
 2474              		base character  
 2475              		16 -> $
 2476              		 2 -> %
 2477              		 other -> none 
 2478              	*************************/
 2479              	LPAD:
 2480 4294 504700BF 		_NEST 
ARM GAS  forth.s 			page 155


 2481 4298 31360000 		_ADR BCHR 
 2482 429c B92F0000 		_ADR  AT 
 2483 42a0 632F0000 		_QBRAN 3f 
 2483      0C430000 
 2484 42a8 19360000 		_ADR BASE 
 2485 42ac B92F0000 		_ADR AT 
 2486 42b0 AD300000 		_ADR DUPP 
 2487 42b4 232F0000 		_DOLIT 16
 2487      10000000 
 2488 42bc 39340000 		_ADR EQUAL 
 2489 42c0 632F0000 		_QBRAN 1f
 2489      E8420000 
 2490 42c8 9D300000 		_ADR DROP 
 2491 42cc 232F0000 		_DOLIT '$'
 2491      24000000 
 2492 42d4 BD300000 	0:	_ADR  SWAP 
 2493 42d8 19320000 		_ADR  ONEM 
 2494 42dc BD410000 		_ADR  SPACS 
 2495 42e0 C12D0000 		_ADR  EMIT 
 2496 42e4 FF2C0000 		_UNNEST 
 2497 42e8 232F0000 	1:  _DOLIT 2 
 2497      02000000 
 2498 42f0 39340000 		_ADR EQUAL 
 2499 42f4 632F0000 		_QBRAN 3f
 2499      0C430000 
 2500 42fc 232F0000 		_DOLIT '%'
 2500      25000000 
 2501 4304 8B2F0000 		_BRAN 0b   	
 2501      D4420000 
 2502 430c BD410000 	3:	_ADR  SPACS 
 2503 4310 FF2C0000 		_UNNEST 
 2504              	
 2505              	
 2506              	/******************************
 2507              	    .R	  ( n +n -- )
 2508              	 	Display an integer in a 
 2509              		field of n columns, 
 2510              		right justified.
 2511              	*******************************/
 2512 4314 24420000 		_HEADER DOTR,2,".R"
 2512      022E5200 
 2513 431c 504700BF 		_NEST
 2514 4320 29300000 		_ADR	TOR
 2515 4324 25390000 		_ADR    STOD 
 2516 4328 05440000 		_ADR	DTOA 
 2517 432c E52F0000 		_ADR	RFROM
 2518 4330 ED300000 		_ADR	OVER
 2519 4334 BD310000 		_ADR	SUBB
 2520 4338 95420000 		_ADR    LPAD  
 2521 433c F5410000 		_ADR	TYPEE
 2522 4340 FF2C0000 		_UNNEST
 2523              	
 2524              	
 2525              	/*************************
 2526              	    U.R	 ( u +n -- )
 2527              	 	Display an unsigned 
 2528              		integer in n column, 
ARM GAS  forth.s 			page 156


 2529              		right justified.
 2530              	***************************/
 2531 4344 18430000 		_HEADER UDOTR,3,"U.R"
 2531      03552E52 
 2532 434c 504700BF 		_NEST
 2533 4350 29300000 		_ADR    TOR 
 2534 4354 232F0000 		_DOLIT  0
 2534      00000000 
 2535 435c 05440000 		_ADR    DTOA 
 2536 4360 E52F0000 		_ADR	RFROM
 2537 4364 ED300000 		_ADR	OVER
 2538 4368 BD310000 		_ADR	SUBB
 2539 436c 95420000 		_ADR    LPAD  
 2540 4370 F5410000 		_ADR	TYPEE
 2541 4374 FF2C0000 		_UNNEST
 2542              	
 2543              	
 2544              	/************************
 2545              	    U.	  ( u -- )
 2546              	 	Display an unsigned 
 2547              		integer in free format.
 2548              	***************************/
 2549 4378 48430000 		_HEADER UDOT,2,"U."
 2549      02552E00 
 2550 4380 504700BF 		_NEST
 2551 4384 232F0000 		_DOLIT  0 
 2551      00000000 
 2552 438c E93D0000 		_ADR	BDIGS
 2553 4390 553E0000 		_ADR	DIGS
 2554 4394 B13E0000 		_ADR	EDIGS
 2555 4398 232F0000 		_DOLIT  1 
 2555      01000000 
 2556 43a0 95420000 		_ADR	LPAD  
 2557 43a4 F5410000 		_ADR	TYPEE
 2558 43a8 FF2C0000 		_UNNEST
 2559              	
 2560              	
 2561              	/************************
 2562              	    .	   ( w -- )
 2563              	 	Display an integer 
 2564              		in free format, 
 2565              		preceeded by a space.
 2566              	**************************/
 2567 43ac 7C430000 		_HEADER DOT,1,"."
 2567      012E00BF 
 2568 43b4 504700BF 		_NEST
 2569 43b8 A1410000 		_ADR    SPACE 
 2570 43bc 19360000 		_ADR	BASE
 2571 43c0 B92F0000 		_ADR	AT
 2572 43c4 232F0000 	1:	_DOLIT  10
 2572      0A000000 
 2573 43cc 55310000 		_ADR	XORR	// decimal base?
 2574 43d0 632F0000 		_QBRAN	DOT1
 2574      E0430000 
 2575 43d8 81430000 		_ADR	UDOT    // no,display unsigned
 2576 43dc FF2C0000 		_UNNEST			
 2577              	DOT1:
ARM GAS  forth.s 			page 157


 2578 43e0 25390000 		_ADR    STOD 
 2579 43e4 05440000 	    _ADR	DTOA
 2580 43e8 232F0000 		_DOLIT  1 
 2580      01000000 
 2581 43f0 95420000 		_ADR	LPAD  
 2582 43f4 F5410000 	1:	_ADR	TYPEE
 2583 43f8 FF2C0000 		_UNNEST			// yes, display signed
 2584              	
 2585              	
 2586              	/*************************
 2587              	  D>A ( d -- p u )
 2588              	  convert double integer to 
 2589              	  ASCII string in pad  
 2590              	input:
 2591              		d    int64 to convert 
 2592              	output:
 2593              		p     pointer to string  
 2594              		u     string length 
 2595              	**************************/
 2596 43fc B0430000 		_HEADER DTOA,3,"D>A" 
 2596      03443E41 
 2597 4404 504700BF 		_NEST
 2598 4408 AD300000 	    _ADR DUPP 
 2599 440c 29300000 		_ADR TOR 
 2600 4410 55330000 		_ADR DABS 
 2601 4414 E93D0000 		_ADR BDIGS
 2602 4418 553E0000 		_ADR DIGS 
 2603 441c E52F0000 		_ADR RFROM 
 2604 4420 893E0000 		_ADR SIGN  
 2605 4424 B13E0000 		_ADR EDIGS 
 2606 4428 FF2C0000 		_UNNEST 
 2607              	
 2608              	
 2609              	/*************************
 2610              	   D. ( d -- )
 2611              	   display double integer 
 2612              	**************************/
 2613 442c 00440000 		_HEADER DDOT,2,"D."
 2613      02442E00 
 2614 4434 504700BF 		_NEST
 2615 4438 A1410000 		_ADR SPACE 
 2616 443c 05440000 		_ADR DTOA 
 2617 4440 232F0000 		_DOLIT 1
 2617      01000000 
 2618 4448 95420000 		_ADR LPAD 
 2619 444c F5410000 		_ADR TYPEE
 2620 4450 FF2C0000 		_UNNEST 
 2621              	
 2622              	
 2623              	
 2624              	/***********************
 2625              		H. ( w -- )
 2626              		display integer 
 2627              		in hexadecimal 
 2628              	*********************/
 2629 4454 30440000 		_HEADER HDOT,2,"H."
 2629      02482E00 
ARM GAS  forth.s 			page 158


 2630 445c 504700BF 		_NEST 
 2631 4460 19360000 		_ADR BASE
 2632 4464 B92F0000 		_ADR AT 
 2633 4468 BD300000 		_ADR SWAP
 2634 446c 053F0000 		_ADR HEX
 2635 4470 232F0000 		_DOLIT 0 
 2635      00000000 
 2636 4478 E93D0000 		_ADR BDIGS
 2637 447c 553E0000 		_ADR DIGS
 2638 4480 B13E0000 		_ADR EDIGS
 2639 4484 A1410000 		_ADR SPACE
 2640 4488 232F0000 		_DOLIT '$'
 2640      24000000 
 2641 4490 C12D0000 		_ADR EMIT 
 2642 4494 F5410000 		_ADR TYPEE
 2643 4498 19360000 		_ADR BASE
 2644 449c A52F0000 		_ADR STORE  
 2645 44a0 FF2C0000 		_UNNEST 
 2646              	
 2647              	
 2648              	/***********************
 2649              	    ?	   ( a -- )
 2650              	 	Display the contents
 2651              		in a memory cell.
 2652              	*************************/
 2653 44a4 58440000 		_HEADER QUEST,1,"?"
 2653      013F00BF 
 2654 44ac 504700BF 		_NEST
 2655 44b0 B92F0000 		_ADR	AT
 2656 44b4 B5430000 		_ADR	DOT
 2657 44b8 FF2C0000 		_UNNEST
 2658              	
 2659              	/**************
 2660              	  Parsing
 2661              	***************/
 2662              	
 2663              	/*********************************************
 2664              	    parse	( b u c -- b u delta //  string> )
 2665              	 	Scan word delimited by c. 
 2666              		Return found string and its offset.
 2667              	hidden word used by PARSE
 2668              	**********************************************/
 2669              	PARS:
 2670 44bc 504700BF 		_NEST
 2671 44c0 3D360000 		_ADR	TEMP
 2672 44c4 A52F0000 		_ADR	STORE
 2673 44c8 ED300000 		_ADR	OVER
 2674 44cc 29300000 		_ADR	TOR
 2675 44d0 AD300000 		_ADR	DUPP
 2676 44d4 632F0000 		_QBRAN	PARS8
 2676      D0450000 
 2677 44dc 19320000 		_ADR	ONEM
 2678 44e0 3D360000 		_ADR	TEMP
 2679 44e4 B92F0000 		_ADR	AT
 2680 44e8 69320000 		_ADR	BLANK
 2681 44ec 39340000 		_ADR	EQUAL
 2682 44f0 632F0000 		_QBRAN	PARS3
ARM GAS  forth.s 			page 159


 2682      44450000 
 2683 44f8 29300000 		_ADR	TOR
 2684              	PARS1:
 2685 44fc 69320000 		_ADR	BLANK
 2686 4500 ED300000 		_ADR	OVER
 2687 4504 D92F0000 		_ADR	CAT	 // skip leading blanks 
 2688 4508 BD310000 		_ADR	SUBB
 2689 450c 1D310000 		_ADR	ZLESS
 2690 4510 BD330000 		_ADR	INVER
 2691 4514 632F0000 		_QBRAN	PARS2
 2691      40450000 
 2692 451c 09320000 		_ADR	ONEP
 2693 4520 452F0000 		_DONXT	PARS1
 2693      FC440000 
 2694 4528 E52F0000 		_ADR	RFROM
 2695 452c 9D300000 		_ADR	DROP
 2696 4530 232F0000 		_DOLIT	0
 2696      00000000 
 2697 4538 AD300000 		_ADR	DUPP
 2698 453c FF2C0000 		_UNNEST
 2699              	PARS2:
 2700 4540 E52F0000 		_ADR	RFROM
 2701              	PARS3:
 2702 4544 ED300000 		_ADR	OVER
 2703 4548 BD300000 		_ADR	SWAP
 2704 454c 29300000 		_ADR	TOR
 2705              	PARS4:
 2706 4550 3D360000 		_ADR	TEMP
 2707 4554 B92F0000 		_ADR	AT
 2708 4558 ED300000 		_ADR	OVER
 2709 455c D92F0000 		_ADR	CAT
 2710 4560 BD310000 		_ADR	SUBB // scan for delimiter
 2711 4564 3D360000 		_ADR	TEMP
 2712 4568 B92F0000 		_ADR	AT
 2713 456c 69320000 		_ADR	BLANK
 2714 4570 39340000 		_ADR	EQUAL
 2715 4574 632F0000 		_QBRAN	PARS5
 2715      80450000 
 2716 457c 1D310000 		_ADR	ZLESS
 2717              	PARS5:
 2718 4580 632F0000 		_QBRAN	PARS6
 2718      A4450000 
 2719 4588 09320000 		_ADR	ONEP
 2720 458c 452F0000 		_DONXT	PARS4
 2720      50450000 
 2721 4594 AD300000 		_ADR	DUPP
 2722 4598 29300000 		_ADR	TOR
 2723 459c 8B2F0000 		_BRAN	PARS7
 2723      B8450000 
 2724              	PARS6:
 2725 45a4 E52F0000 		_ADR	RFROM
 2726 45a8 9D300000 		_ADR	DROP
 2727 45ac AD300000 		_ADR	DUPP
 2728 45b0 09320000 		_ADR	ONEP
 2729 45b4 29300000 		_ADR	TOR
 2730              	PARS7:
 2731 45b8 ED300000 		_ADR	OVER
ARM GAS  forth.s 			page 160


 2732 45bc BD310000 		_ADR	SUBB
 2733 45c0 E52F0000 		_ADR	RFROM
 2734 45c4 E52F0000 		_ADR	RFROM
 2735 45c8 BD310000 		_ADR	SUBB
 2736 45cc FF2C0000 		_UNNEST
 2737              	PARS8:
 2738 45d0 ED300000 		_ADR	OVER
 2739 45d4 E52F0000 		_ADR	RFROM
 2740 45d8 BD310000 		_ADR	SUBB
 2741 45dc FF2C0000 		_UNNEST
 2742              	
 2743              	/************************************
 2744              	    PARSE	( c -- b u //  string> )
 2745              	 	Scan input stream and return 
 2746              		counted string delimited by c.
 2747              	************************************/
 2748 45e0 A8440000 		_HEADER PARSE,5,"PARSE"
 2748      05504152 
 2748      534500BF 
 2749 45ec 504700BF 		_NEST
 2750 45f0 29300000 		_ADR	TOR
 2751 45f4 1D3C0000 		_ADR	TIB
 2752 45f8 69360000 		_ADR	INN
 2753 45fc B92F0000 		_ADR	AT
 2754 4600 AD310000 		_ADR	PLUS			// current input buffer pointer
 2755 4604 81360000 		_ADR	NTIB
 2756 4608 B92F0000 		_ADR	AT
 2757 460c 69360000 		_ADR	INN
 2758 4610 B92F0000 		_ADR	AT
 2759 4614 BD310000 		_ADR	SUBB			// remaining count
 2760 4618 E52F0000 		_ADR	RFROM
 2761 461c BD440000 		_ADR	PARS
 2762 4620 69360000 		_ADR	INN
 2763 4624 F9340000 		_ADR	PSTOR
 2764 4628 FF2C0000 		_UNNEST
 2765              	
 2766              	/*******************************
 2767              	    .(	  ( -- )
 2768              	 	Output following string 
 2769              		up to next ) .
 2770              	******************************/
 2771 462c E4450000 		_HEADER DOTPR,2,".("
 2771      022E2800 
 2772 4634 504700BF 		_NEST
 2773 4638 232F0000 		_DOLIT	')'
 2773      29000000 
 2774 4640 ED450000 		_ADR	PARSE
 2775 4644 F5410000 		_ADR	TYPEE
 2776 4648 FF2C0000 		_UNNEST
 2777              	
 2778              	/************************
 2779              	    (	   ( -- )
 2780              	 	Ignore following 
 2781              		string up to next )
 2782              		A comment.
 2783              	************************/
 2784 464c 30460000 		_HEADER PAREN,IMEDD+1,"("
ARM GAS  forth.s 			page 161


 2784      812800BF 
 2785 4654 504700BF 		_NEST
 2786 4658 232F0000 		_DOLIT	')'
 2786      29000000 
 2787 4660 ED450000 		_ADR	PARSE
 2788 4664 F9320000 		_ADR	DDROP
 2789 4668 FF2C0000 		_UNNEST
 2790              	
 2791              	/*******************
 2792              	    \	   ( -- )
 2793              	 	Ignore following 
 2794              		text till the 
 2795              		end of line.
 2796              	********************/
 2797 466c 50460000 		_HEADER BKSLA,IMEDD+1,"\\"
 2797      815C00BF 
 2798 4674 504700BF 		_NEST
 2799 4678 81360000 		_ADR	NTIB
 2800 467c B92F0000 		_ADR	AT
 2801 4680 69360000 		_ADR	INN
 2802 4684 A52F0000 		_ADR	STORE
 2803 4688 FF2C0000 		_UNNEST
 2804              	
 2805              	/******************************
 2806              	    CHAR	( -- c )
 2807              	 	Parse next word and
 2808              		return its first character.
 2809              	*******************************/
 2810 468c 70460000 		_HEADER CHAR,4,"CHAR"
 2810      04434841 
 2810      520000BF 
 2811 4698 504700BF 		_NEST
 2812 469c 69320000 		_ADR	BLANK
 2813 46a0 ED450000 		_ADR	PARSE
 2814 46a4 9D300000 		_ADR	DROP
 2815 46a8 D92F0000 		_ADR	CAT
 2816 46ac FF2C0000 		_UNNEST
 2817              	
 2818              	/**********************************
 2819              		[CHAR] ( -- c )
 2820              		immediate version of CHAR 
 2821              	**********************************/
 2822 46b0 90460000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2822      C65B4348 
 2822      41525D00 
 2823 46bc 504700BF 		_NEST 
 2824 46c0 99460000 		_ADR CHAR
 2825 46c4 5D4F0000 		_ADR LITER 
 2826 46c8 FF2C0000 		_UNNEST 
 2827              	
 2828              	/**********************************
 2829              	    WORD	( c -- a //  string> )
 2830              	 	Parse a word from input stream
 2831              		and copy it to code dictionary.
 2832              	***********************************/
 2833 46cc B4460000 		_HEADER WORDD,4,"WORD"
 2833      04574F52 
ARM GAS  forth.s 			page 162


 2833      440000BF 
 2834 46d8 504700BF 		_NEST
 2835 46dc ED450000 		_ADR	PARSE
 2836 46e0 E53B0000 		_ADR	HERE
 2837 46e4 49320000 		_ADR	CELLP
 2838 46e8 293D0000 		_ADR	PACKS
 2839 46ec FF2C0000 		_UNNEST
 2840              	
 2841              	/********************************
 2842              	    TOKEN	( -- a //  string> )
 2843              	 	Parse a word from input 
 2844              		stream and copy it to 
 2845              		name dictionary.
 2846              	*********************************/
 2847 46f0 D0460000 		_HEADER TOKEN,5,"TOKEN"
 2847      05544F4B 
 2847      454E00BF 
 2848 46fc 504700BF 		_NEST
 2849 4700 69320000 		_ADR	BLANK
 2850 4704 D9460000 		_ADR	WORDD
 2851 4708 F1480000 		_ADR	UPPER 
 2852 470c FF2C0000 		_UNNEST
 2853              	
 2854              	/**********************
 2855              	  Dictionary search
 2856              	***********************/
 2857              	
 2858              	/*************************
 2859              	    NAME>	( na -- ca )
 2860              	 	Return a code address
 2861              		given a name address.
 2862              	**************************/
 2863 4710 F4460000 		_HEADER NAMET,5,"NAME>"
 2863      054E414D 
 2863      453E00BF 
 2864 471c 504700BF 		_NEST
 2865 4720 4D350000 		_ADR	COUNT
 2866 4724 232F0000 		_DOLIT	0x1F
 2866      1F000000 
 2867 472c 2D310000 		_ADR	ANDD
 2868 4730 AD310000 		_ADR	PLUS
 2869 4734 253B0000 		_ADR	ALGND
 2870 4738 FF2C0000 		_UNNEST
 2871              	
 2872              	/***************************************
 2873              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2874              	 	Compare u bytes in two strings. 
 2875              		Return 0 if identical.
 2876              	
 2877              	  Picatout 2020-12-01, 
 2878              	    Because of problem with .align 
 2879              		directive that doesn't fill 
 2880              		with zero's I had to change 
 2881              		the "SAME?" and "SEARCH" 
 2882              	 	words  to do a byte by byte comparison. 
 2883              	****************************************/
 2884 473c 14470000 		_HEADER SAMEQ,5,"SAME?"
ARM GAS  forth.s 			page 163


 2884      0553414D 
 2884      453F00BF 
 2885 4748 504700BF 		_NEST
 2886 474c 29300000 		_ADR	TOR
 2887 4750 8B2F0000 		_BRAN	SAME2
 2887      94470000 
 2888              	SAME1:
 2889 4758 ED300000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2890 475c 15300000 		_ADR	RAT   // a1 a2 a1 u 
 2891 4760 AD310000 		_ADR	PLUS  // a1 a2 a1+u 
 2892 4764 D92F0000 		_ADR	CAT	   // a1 a2 c1    		
 2893 4768 ED300000 		_ADR	OVER  // a1 a2 c1 a2 
 2894 476c 15300000 		_ADR	RAT    
 2895 4770 AD310000 		_ADR	PLUS    
 2896 4774 D92F0000 		_ADR	CAT	  // a1 a2 c1 c2
 2897 4778 BD310000 		_ADR	SUBB  
 2898 477c BD320000 		_ADR	QDUP
 2899 4780 632F0000 		_QBRAN	SAME2
 2899      94470000 
 2900 4788 E52F0000 		_ADR	RFROM
 2901 478c 9D300000 		_ADR	DROP
 2902 4790 FF2C0000 		_UNNEST	// strings not equal
 2903              	SAME2:
 2904 4794 452F0000 		_DONXT	SAME1
 2904      58470000 
 2905 479c 232F0000 		_DOLIT	0
 2905      00000000 
 2906 47a4 FF2C0000 		_UNNEST	// strings equal
 2907              	
 2908              	/***********************************
 2909              	    SEARCH	( a na -- ca na | a F )
 2910              	 	Search a vocabulary for a string.
 2911              		Return ca and na if succeeded.
 2912              	hidden word used by NAME?
 2913              	
 2914              	  Picatout 2020-12-01,  
 2915              		 Modified from original. 
 2916              	   See comment for word "SAME?" 
 2917              	************************************/
 2918              	SEARCH:
 2919 47a8 504700BF 		_NEST
 2920 47ac BD300000 		_ADR	SWAP			// na a	
 2921 47b0 4D350000 		_ADR	COUNT			// na a+1 count
 2922 47b4 AD300000 		_ADR	DUPP 
 2923 47b8 3D360000 		_ADR	TEMP
 2924 47bc A52F0000 		_ADR	STORE			// na a+1 count 
 2925 47c0 29300000 		_ADR  TOR		// na a+1  R: count  
 2926 47c4 BD300000 		_ADR	SWAP			// a+1 na
 2927              	SEARCH1:
 2928 47c8 AD300000 		_ADR	DUPP			// a+1 na na
 2929 47cc 632F0000 		_QBRAN	SEARCH6	// end of vocabulary
 2929      20480000 
 2930 47d4 AD300000 		_ADR	DUPP			// a+1 na na
 2931 47d8 D92F0000 		_ADR	CAT			// a+1 na name1
 2932 47dc 232F0000 		_DOLIT	MASKK
 2932      1FFFFFFF 
 2933 47e4 2D310000 		_ADR	ANDD
ARM GAS  forth.s 			page 164


 2934 47e8 15300000 		_ADR	RAT			// a+1 na name1 count 
 2935 47ec 55310000 		_ADR	XORR			// a+1 na,  same length?
 2936 47f0 632F0000 		_QBRAN	SEARCH2
 2936      08480000 
 2937 47f8 59320000 		_ADR	CELLM			// a+1 la
 2938 47fc B92F0000 		_ADR	AT			// a+1 next_na
 2939 4800 8B2F0000 		_BRAN	SEARCH1			// try next word
 2939      C8470000 
 2940              	SEARCH2:   
 2941 4808 09320000 		_ADR	ONEP			// a+1 na+1
 2942 480c 3D360000 		_ADR	TEMP
 2943 4810 B92F0000 		_ADR	AT			// a+1 na+1 count
 2944 4814 49470000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2945              	SEARCH3:	
 2946 4818 8B2F0000 		_BRAN	SEARCH4
 2946      38480000 
 2947              	SEARCH6:	
 2948 4820 E52F0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2949 4824 9D300000 		_ADR	DROP			// a+1 0
 2950 4828 BD300000 		_ADR	SWAP			// 0 a+1
 2951 482c 19320000 		_ADR	ONEM			// 0 a
 2952 4830 BD300000 		_ADR	SWAP			// a 0 
 2953 4834 FF2C0000 		_UNNEST			// return without a match
 2954              	SEARCH4:	
 2955 4838 632F0000 		_QBRAN	SEARCH5			// a+1 na+1
 2955      54480000 
 2956 4840 19320000 		_ADR	ONEM			// a+1 na
 2957 4844 59320000 		_ADR	CELLM			// a+4 la
 2958 4848 B92F0000 		_ADR	AT			// a+1 next_na
 2959 484c 8B2F0000 		_BRAN	SEARCH1			// compare next name
 2959      C8470000 
 2960              	SEARCH5:	
 2961 4854 E52F0000 		_ADR	RFROM			// a+1 na+1 count
 2962 4858 9D300000 		_ADR	DROP			// a+1 na+1
 2963 485c BD300000 		_ADR	SWAP			// na+1 a+1
 2964 4860 9D300000 		_ADR	DROP			// na+1
 2965 4864 19320000 		_ADR	ONEM			// na
 2966 4868 AD300000 		_ADR	DUPP			// na na
 2967 486c 1D470000 		_ADR	NAMET			// na ca
 2968 4870 BD300000 		_ADR	SWAP			// ca na
 2969 4874 FF2C0000 		_UNNEST			//  return with a match
 2970              	
 2971              	/********************************
 2972              	    NAME?	( a -- ca na | a F )
 2973              	 	Search all context vocabularies 
 2974              		for a string.
 2975              	***********************************/
 2976 4878 40470000 		_HEADER NAMEQ,5,"NAME?"
 2976      054E414D 
 2976      453F00BF 
 2977 4884 504700BF 		_NEST
 2978 4888 C5360000 		_ADR	CNTXT
 2979 488c B92F0000 		_ADR	AT
 2980 4890 A9470000 		_ADR	SEARCH
 2981 4894 FF2C0000 		_UNNEST
 2982              	
 2983              	/********************
ARM GAS  forth.s 			page 165


 2984              	  console input
 2985              	********************/
 2986              	
 2987              	/****************************
 2988              		ASCIZ ( a -- a+ )
 2989              		convert counted string to 
 2990              		null terminated string 
 2991              		in pad.
 2992              	*****************************/
 2993 4898 7C480000 		_HEADER ASCIZ,5,"ASCIZ" 
 2993      05415343 
 2993      495A00BF 
 2994 48a4 504700BF 		_NEST 
 2995 48a8 4D350000 		_ADR COUNT
 2996 48ac AD300000 		_ADR DUPP
 2997 48b0 29300000 		_ADR TOR 
 2998 48b4 FD3B0000 		_ADR PAD 
 2999 48b8 BD300000 		_ADR SWAP
 3000 48bc C13C0000 		_ADR MOVE  
 3001 48c0 FD3B0000 		_ADR PAD 
 3002 48c4 E52F0000 		_ADR RFROM
 3003 48c8 AD310000 		_ADR PLUS 
 3004 48cc 232F0000 		_DOLIT 0 
 3004      00000000 
 3005 48d4 BD300000 		_ADR SWAP  
 3006 48d8 C52F0000 		_ADR CSTOR
 3007 48dc FD3B0000 		_ADR PAD   
 3008 48e0 FF2C0000 		_UNNEST 
 3009              	
 3010              	/***********************
 3011              		UPPER (cstring -- cstring )
 3012              		convert to upper case in situ
 3013              	*******************************/
 3014 48e4 9C480000 		_HEADER UPPER,5,"UPPER"
 3014      05555050 
 3014      455200BF 
 3015 48f0 504700BF 		_NEST 
 3016 48f4 AD300000 		_ADR DUPP 
 3017 48f8 29300000 		_ADR TOR 
 3018 48fc 4D350000 		_ADR COUNT
 3019 4900 232F0000 		_DOLIT 0x1f
 3019      1F000000 
 3020 4908 2D310000 		_ADR ANDD
 3021 490c 29300000 		_ADR TOR 
 3022 4910 8B2F0000 		_BRAN 3f
 3022      64490000 
 3023 4918 AD300000 	1:  _ADR DUPP 
 3024 491c 4D350000 		_ADR COUNT 
 3025 4920 AD300000 		_ADR DUPP 
 3026 4924 232F0000 		_DOLIT 'a'-1
 3026      60000000 
 3027 492c B9340000 		_ADR GREAT
 3028 4930 632F0000 		_QBRAN 2f 
 3028      5C490000 
 3029 4938 AD300000 		_ADR DUPP 
 3030 493c 232F0000 		_DOLIT 'z'+1 
 3030      7B000000 
ARM GAS  forth.s 			page 166


 3031 4944 89340000 		_ADR LESS 
 3032 4948 632F0000 		_QBRAN 2f 
 3032      5C490000 
 3033 4950 232F0000 		_DOLIT 0x5f  
 3033      5F000000 
 3034 4958 2D310000 		_ADR ANDD
 3035 495c D1320000 	2:	_ADR ROT
 3036 4960 C52F0000 		_ADR CSTOR
 3037 4964 452F0000 	3:  _DONXT 1b
 3037      18490000 
 3038 496c 9D300000 		_ADR DROP 
 3039 4970 E52F0000 		_ADR RFROM
 3040 4974 FF2C0000 		_UNNEST 
 3041              	
 3042              	/**************************************
 3043              	   BKSP  ( bot eot cur -- bot eot cur )
 3044              	   Move cursor left by one character.
 3045              	hidden word used by KTAP
 3046              	***************************************/
 3047              	BKSP:
 3048 4978 504700BF 		_NEST
 3049 497c 29300000 		_ADR	TOR
 3050 4980 ED300000 		_ADR	OVER
 3051 4984 E52F0000 		_ADR	RFROM
 3052 4988 BD300000 		_ADR	SWAP
 3053 498c ED300000 		_ADR	OVER
 3054 4990 55310000 		_ADR	XORR
 3055 4994 632F0000 		_QBRAN	BACK1
 3055      C0490000 
 3056 499c 232F0000 		_DOLIT	BKSPP
 3056      08000000 
 3057 49a4 C12D0000 		_ADR	EMIT
 3058 49a8 19320000 		_ADR	ONEM
 3059 49ac 69320000 		_ADR	BLANK
 3060 49b0 C12D0000 		_ADR	EMIT
 3061 49b4 232F0000 		_DOLIT	BKSPP
 3061      08000000 
 3062 49bc C12D0000 		_ADR	EMIT
 3063              	BACK1:
 3064 49c0 FF2C0000 		  _UNNEST
 3065              	
 3066              	/****************************************
 3067              	   TAP	 ( bot eot cur c -- bot eot cur )
 3068              	   Accept and echo the key stroke 
 3069              	   and bump the cursor.
 3070              	hidden word used by KTAP 
 3071              	****************************************/
 3072              	TAP:
 3073 49c4 504700BF 		_NEST
 3074 49c8 AD300000 		_ADR	DUPP
 3075 49cc C12D0000 		_ADR	EMIT
 3076 49d0 ED300000 		_ADR	OVER
 3077 49d4 C52F0000 		_ADR	CSTOR
 3078 49d8 09320000 		_ADR	ONEP
 3079 49dc FF2C0000 		_UNNEST
 3080              	
 3081              	
ARM GAS  forth.s 			page 167


 3082              	/*******************************************
 3083              	    kTAP	( bot eot cur c -- bot eot cur )
 3084              	 	Process a key stroke, CR or backspace.
 3085              	hidden word used by ACCEPT 
 3086              	*******************************************/
 3087              	KTAP:
 3088              	TTAP:
 3089 49e0 504700BF 		_NEST
 3090 49e4 AD300000 		_ADR	DUPP
 3091 49e8 232F0000 		_DOLIT	CRR
 3091      0D000000 
 3092 49f0 55310000 		_ADR	XORR
 3093 49f4 632F0000 		_QBRAN  KTAP2
 3093      244A0000 
 3094 49fc 232F0000 		_DOLIT	BKSPP
 3094      08000000 
 3095 4a04 55310000 		_ADR	XORR
 3096 4a08 632F0000 		_QBRAN	KTAP1
 3096      1C4A0000 
 3097 4a10 69320000 		_ADR	BLANK
 3098 4a14 C5490000 		_ADR	TAP
 3099 4a18 FF2C0000 		_UNNEST
 3100              	//	.word	0			// patch
 3101              	KTAP1:
 3102 4a1c 79490000 		_ADR	BKSP
 3103 4a20 FF2C0000 		_UNNEST
 3104              	KTAP2:
 3105 4a24 9D300000 		_ADR	DROP
 3106 4a28 BD300000 		_ADR	SWAP
 3107 4a2c 9D300000 		_ADR	DROP
 3108 4a30 AD300000 		_ADR	DUPP
 3109 4a34 FF2C0000 		_UNNEST
 3110              	
 3111              	/************************************
 3112              	    ACCEPT	( b u -- b u )
 3113              	 	Accept characters to input 
 3114              		buffer. Return with actual count.
 3115              	*************************************/
 3116 4a38 E8480000 		_HEADER ACCEP,6,"ACCEPT"
 3116      06414343 
 3116      45505400 
 3117 4a44 504700BF 		_NEST
 3118 4a48 ED300000 		_ADR	OVER
 3119 4a4c AD310000 		_ADR	PLUS
 3120 4a50 ED300000 		_ADR	OVER
 3121              	ACCP1:
 3122 4a54 21330000 		_ADR	DDUP
 3123 4a58 55310000 		_ADR	XORR
 3124 4a5c 632F0000 		_QBRAN	ACCP4
 3124      9C4A0000 
 3125 4a64 9D2D0000 		_ADR	KEY
 3126 4a68 AD300000 		_ADR	DUPP
 3127 4a6c 69320000 		_ADR	BLANK
 3128 4a70 232F0000 		_DOLIT 127
 3128      7F000000 
 3129 4a78 B5370000 		_ADR	WITHI
 3130 4a7c 632F0000 		_QBRAN	ACCP2
ARM GAS  forth.s 			page 168


 3130      904A0000 
 3131 4a84 C5490000 		_ADR	TAP
 3132 4a88 8B2F0000 		_BRAN	ACCP3
 3132      944A0000 
 3133              	ACCP2:
 3134 4a90 E1490000 		_ADR	KTAP
 3135              	ACCP3:	  
 3136 4a94 8B2F0000 		_BRAN	ACCP1
 3136      544A0000 
 3137              	ACCP4:
 3138 4a9c 9D300000 		_ADR	DROP
 3139 4aa0 ED300000 		_ADR	OVER
 3140 4aa4 BD310000 		_ADR	SUBB
 3141 4aa8 FF2C0000 		_UNNEST
 3142              	
 3143              	/*****************************
 3144              	    QUERY	( -- )
 3145              	 	Accept input stream 
 3146              		to terminal input buffer.
 3147              	******************************/
 3148 4aac 3C4A0000 		_HEADER QUERY,5,"QUERY"
 3148      05515545 
 3148      525900BF 
 3149 4ab8 504700BF 		_NEST
 3150 4abc 1D3C0000 		_ADR	TIB
 3151 4ac0 232F0000 		_DOLIT 80
 3151      50000000 
 3152 4ac8 454A0000 		_ADR	ACCEP
 3153 4acc 81360000 		_ADR	NTIB
 3154 4ad0 A52F0000 		_ADR	STORE
 3155 4ad4 9D300000 		_ADR	DROP
 3156 4ad8 232F0000 		_DOLIT	0
 3156      00000000 
 3157 4ae0 69360000 		_ADR	INN
 3158 4ae4 A52F0000 		_ADR	STORE
 3159 4ae8 FF2C0000 		_UNNEST
 3160              	
 3161              	/********************
 3162              	  Error handling
 3163              	********************/
 3164              	
 3165              	/*********************
 3166              	    ABORT	( a -- )
 3167              	 	Reset data stack 
 3168              		and jump to QUIT.
 3169              	**********************/
 3170 4aec B04A0000 		_HEADER ABORT,5,"ABORT"
 3170      0541424F 
 3170      525400BF 
 3171 4af8 504700BF 		_NEST
 3172              	ABORT1: 
 3173 4afc D94B0000 		_ADR    LBRAC  
 3174 4b00 594D0000 		_ADR	PRESE
 3175 4b04 8B2F0000 		_BRAN	QUIT
 3175      944D0000 
 3176              	
 3177              	
ARM GAS  forth.s 			page 169


 3178              	/*******************************
 3179              		PRT_ABORT ( a -- )
 3180              	    print message and abort 
 3181              	input:
 3182              		a   address of counted string 	
 3183              	
 3184              	hidden word 
 3185              	*******************************/
 3186              	PRT_ABORT:
 3187 4b0c 504700BF 		_NEST 
 3188 4b10 A1410000 		_ADR SPACE 
 3189 4b14 4D350000 		_ADR COUNT 
 3190 4b18 F5410000 		_ADR TYPEE 
 3191 4b1c 232F0000 		_DOLIT '?'
 3191      3F000000 
 3192 4b24 C12D0000 		_ADR    EMIT 
 3193 4b28 29420000 		_ADR    CR 
 3194 4b2c 8B2F0000 		_BRAN   ABORT1 
 3194      FC4A0000 
 3195              	
 3196              	
 3197              	
 3198              	
 3199              	/*******************************
 3200              	    _abort"	( f -- )
 3201              	 	Run time routine of ABORT"
 3202              		Abort with a message.
 3203              	hidden used by compiler 
 3204              	********************************/
 3205              	ABORQ:
 3206 4b34 504700BF 		_NEST
 3207 4b38 49420000 		_ADR	DOSTR
 3208 4b3c D1320000 		_ADR	ROT  
 3209 4b40 632F0000 		_QBRAN	1f	// error flag
 3209      644B0000 
 3210 4b48 A1410000 		_ADR	SPACE
 3211 4b4c F5410000 		_ADR	TYPEE
 3212 4b50 232F0000 		_DOLIT	0X3F
 3212      3F000000 
 3213 4b58 C12D0000 		_ADR	EMIT
 3214 4b5c 29420000 		_ADR	CR
 3215 4b60 FD4A0000 		_ADR    ABORT1
 3216              	1:
 3217 4b64 F9320000 		_ADR	DDROP
 3218 4b68 FF2C0000 		_UNNEST			// drop message
 3219              	
 3220              	
 3221              	/************************
 3222              	  The text interpreter
 3223              	************************/
 3224              	
 3225              	/***************************
 3226              	    $INTERPRET  ( a -- )
 3227              	 	Interpret a word. 
 3228              		If failed, try to 
 3229              		convert it to an integer.
 3230              	******************************/
ARM GAS  forth.s 			page 170


 3231 4b6c F04A0000 		_HEADER INTER,10,"$INTERPRET"
 3231      0A24494E 
 3231      54455250 
 3231      52455400 
 3232 4b7c 504700BF 		_NEST
 3233 4b80 85480000 		_ADR	NAMEQ
 3234 4b84 BD320000 		_ADR	QDUP	// ?defined
 3235 4b88 632F0000 		_QBRAN	INTE1
 3235      BC4B0000 
 3236 4b90 B92F0000 		_ADR	AT
 3237 4b94 232F0000 		_DOLIT	COMPO
 3237      40000000 
 3238 4b9c 2D310000 		_ADR	ANDD	// ?compile only lexicon bits
 3239 4ba0 354B0000 		_ABORQ	13," compile only"
 3239      0D20636F 
 3239      6D70696C 
 3239      65206F6E 
 3239      6C7900BF 
 3240 4bb4 392F0000 		_ADR	EXECU
 3241 4bb8 FF2C0000 		_UNNEST			// execute defined word
 3242              	INTE1:
 3243 4bbc 75410000 		_ADR	NUMBERQ
 3244 4bc0 632F0000 		_QBRAN	INTE2
 3244      CC4B0000 
 3245 4bc8 FF2C0000 		_UNNEST
 3246              	INTE2:
 3247 4bcc 0D4B0000 		_ADR	PRT_ABORT	// error
 3248              	
 3249              	/******************************
 3250              	    [	   ( -- )
 3251              	 	Start the text interpreter.
 3252              	*******************************/
 3253 4bd0 704B0000 		_HEADER LBRAC,IMEDD+1,"["
 3253      815B00BF 
 3254 4bd8 504700BF 		_NEST
 3255 4bdc 232F0000 		_DOLIT	INTER
 3255      7C4B0000 
 3256 4be4 99360000 		_ADR	TEVAL
 3257 4be8 A52F0000 		_ADR	STORE
 3258 4bec 232F0000 		_DOLIT  0 
 3258      00000000 
 3259 4bf4 A1350000 		_ADR    STATE 
 3260 4bf8 A52F0000 		_ADR    STORE 
 3261 4bfc FF2C0000 		_UNNEST
 3262              	
 3263              	/**********************
 3264              	    .OK	 ( -- )
 3265              	 	Display "ok" only 
 3266              		while interpreting.
 3267              	************************/
 3268 4c00 D44B0000 		_HEADER DOTOK,3,".OK"
 3268      032E4F4B 
 3269 4c08 504700BF 		_NEST
 3270 4c0c 232F0000 		_DOLIT	INTER
 3270      7C4B0000 
 3271 4c14 99360000 		_ADR	TEVAL
 3272 4c18 B92F0000 		_ADR	AT
ARM GAS  forth.s 			page 171


 3273 4c1c 39340000 		_ADR	EQUAL
 3274 4c20 632F0000 		_QBRAN	DOTO1
 3274      304C0000 
 3275 4c28 85420000 		_DOTQP	3," ok"
 3275      03206F6B 
 3276              	DOTO1:
 3277 4c30 29420000 		_ADR	CR
 3278 4c34 FF2C0000 		_UNNEST
 3279              	
 3280              	/*************************
 3281              	    ?STACK	( -- )
 3282              	 	Abort if the data 
 3283              		stack underflows.
 3284              	************************/
 3285 4c38 044C0000 		_HEADER QSTAC,6,"?STACK"
 3285      063F5354 
 3285      41434B00 
 3286 4c44 504700BF 		_NEST
 3287 4c48 8D3B0000 		_ADR	DEPTH
 3288 4c4c 1D310000 		_ADR	ZLESS	// check only for underflow
 3289 4c50 354B0000 		_ABORQ	9,"underflow"
 3289      09756E64 
 3289      6572666C 
 3289      6F7700BF 
 3290 4c60 FF2C0000 		_UNNEST
 3291              	
 3292              	/*******************
 3293              	    EVAL	( -- )
 3294              	 	Interpret the 
 3295              		input stream.
 3296              	*******************/
 3297 4c64 3C4C0000 		_HEADER EVAL,4,"EVAL"
 3297      04455641 
 3297      4C0000BF 
 3298 4c70 504700BF 		_NEST
 3299              	EVAL1:
 3300 4c74 FD460000 	    _ADR	TOKEN
 3301 4c78 AD300000 		_ADR	DUPP
 3302 4c7c D92F0000 		_ADR	CAT	// ?input stream empty
 3303 4c80 632F0000 		_QBRAN	EVAL2
 3303      9C4C0000 
 3304 4c88 99360000 		_ADR	TEVAL
 3305 4c8c 713C0000 		_ADR	ATEXE
 3306 4c90 454C0000 		_ADR	QSTAC	// evaluate input, check stack
 3307 4c94 8B2F0000 		_BRAN	EVAL1
 3307      744C0000 
 3308              	EVAL2:
 3309 4c9c 9D300000 		_ADR	DROP
 3310 4ca0 094C0000 		_ADR	DOTOK
 3311 4ca4 FF2C0000 		_UNNEST	// prompt
 3312              	
 3313              	
 3314              	/******************************
 3315              		EVALUATE ( ix* a u -- jx* )
 3316              	    interpret string 
 3317              	input:
 3318              	    ix*  argument required 
ARM GAS  forth.s 			page 172


 3319              		a   address string to interpret 
 3320              		u   str length 
 3321              	output:
 3322              		jx*  evalution results 
 3323              	***********************************/
 3324 4ca8 684C0000 		_HEADER EVALUATE,8,"EVALUATE"
 3324      08455641 
 3324      4C554154 
 3324      450000BF 
 3325 4cb8 504700BF 		_NEST 
 3326              		// save original source specs
 3327 4cbc 232F0000 		_DOLIT UPP+TOIN 
 3327      2C000020 
 3328 4cc4 AD300000 		_ADR   DUPP 
 3329 4cc8 B92F0000 		_ADR  AT 
 3330 4ccc 29300000 		_ADR   TOR 
 3331 4cd0 232F0000 		_DOLIT  0
 3331      00000000 
 3332 4cd8 BD300000 		_ADR  SWAP
 3333 4cdc A52F0000 		_ADR   STORE 
 3334 4ce0 232F0000 		_DOLIT UPP+SRC 
 3334      30000020 
 3335 4ce8 35350000 		_ADR   DAT 
 3336 4cec 3D300000 		_ADR   DTOR 
 3337 4cf0 232F0000 		_DOLIT -1
 3337      FFFFFFFF 
 3338 4cf8 232F0000 		_DOLIT UPP+SRCID 
 3338      38000020 
 3339 4d00 A52F0000 		_ADR   STORE 
 3340 4d04 232F0000 		_DOLIT UPP+SRC 
 3340      30000020 
 3341 4d0c 15350000 		_ADR   DSTOR
 3342 4d10 714C0000 		_ADR   EVAL 
 3343              	    // restore original source specs 
 3344 4d14 F92F0000 		_ADR   DRFROM 
 3345 4d18 232F0000 		_DOLIT UPP+SRC 
 3345      30000020 
 3346 4d20 15350000 		_ADR   DSTOR 
 3347 4d24 E52F0000 		_ADR   RFROM 
 3348 4d28 232F0000 		_DOLIT UPP+TOIN 
 3348      2C000020 
 3349 4d30 A52F0000 		_ADR   STORE 
 3350 4d34 232F0000 		_DOLIT 0 
 3350      00000000 
 3351 4d3c 232F0000 		_DOLIT UPP+SRCID 
 3351      38000020 
 3352 4d44 A52F0000 		_ADR   STORE 
 3353 4d48 FF2C0000 		_UNNEST 
 3354              	
 3355              	
 3356              	/**********************************
 3357              	    PRESET	( -- )
 3358              	 	Reset data stack pointer 
 3359              		and the terminal input buffer.
 3360              	**********************************/
 3361 4d4c AC4C0000 		_HEADER PRESE,6,"PRESET"
 3361      06505245 
ARM GAS  forth.s 			page 173


 3361      53455400 
 3362 4d58 504700BF 		_NEST 
 3363 4d5c 232F0000 		_DOLIT SPP 
 3363      B0FE0120 
 3364 4d64 69300000 		_ADR SPSTOR
 3365 4d68 232F0000 		_DOLIT TIBB        
 3365      B0FE0120 
 3366 4d70 232F0000 		_DOLIT 0   
 3366      00000000 
 3367 4d78 232F0000 		_DOLIT UPP+SRC  
 3367      30000020 
 3368 4d80 15350000 		_ADR   DSTOR    
 3369 4d84 FF2C0000 		_UNNEST 
 3370              	
 3371              	/*********************
 3372              	    QUIT	( -- )
 3373              	 	Reset return stack 
 3374              		pointer and start 
 3375              		text interpreter.
 3376              	***********************/
 3377 4d88 504D0000 		_HEADER QUIT,4,"QUIT"
 3377      04515549 
 3377      540000BF 
 3378 4d94 232F0000 		_DOLIT RPP 
 3378      80FF0120 
 3379 4d9c 59300000 		_ADR RPSTOR 
 3380              	QUIT1:
 3381 4da0 D94B0000 		_ADR	LBRAC			// start interpretation
 3382              	QUIT2:
 3383 4da4 B94A0000 		_ADR	QUERY			// get input
 3384 4da8 714C0000 		_ADR	EVAL
 3385 4dac 8B2F0000 		_BRAN	QUIT2	// continue till error
 3385      A44D0000 
 3386              	
 3387              	/***************************
 3388              		FORGET ( <string> -- )
 3389              		forget all definition 
 3390              		starting at <string>
 3391              	****************************/
 3392 4db4 8C4D0000 		_HEADER FORGET,6,"FORGET"
 3392      06464F52 
 3392      47455400 
 3393 4dc0 504700BF 		_NEST 
 3394 4dc4 FD460000 		_ADR TOKEN 
 3395 4dc8 AD300000 		_ADR DUPP 
 3396 4dcc 632F0000 		_QBRAN 9f 
 3396      084E0000 
 3397 4dd4 85480000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3398 4dd8 BD320000 		_ADR QDUP 
 3399 4ddc 632F0000 		_QBRAN 8f
 3399      044E0000 
 3400 4de4 59320000 		_ADR CELLM // ( ca la )
 3401 4de8 AD300000 		_ADR DUPP 
 3402 4dec D9360000 		_ADR CPP   
 3403 4df0 A52F0000 		_ADR STORE
 3404 4df4 B92F0000 		_ADR AT 
 3405 4df8 05370000 		_ADR LAST 
ARM GAS  forth.s 			page 174


 3406 4dfc A52F0000 		_ADR STORE
 3407 4e00 89540000 		_ADR OVERT 
 3408 4e04 9D300000 	8:  _ADR DROP 
 3409 4e08 FF2C0000 	9:	_UNNEST 
 3410              	
 3411              		.p2align 2 
 3412              	
 3413              	/*****************
 3414              	  The compiler
 3415              	******************/
 3416              	
 3417              	/**************************************
 3418              		POSTPONE <name> ( -- )
 3419              		use to compile immediate word 
 3420              	**************************************/
 3421 4e0c B84D0000 		_HEADER POSTPONE,COMPO+IMEDD+8,"POSTPONE"
 3421      C8504F53 
 3421      54504F4E 
 3421      450000BF 
 3422 4e1c 504700BF 		_NEST 
 3423 4e20 594E0000 		_ADR ITICK
 3424 4e24 F5540000 		_ADR CALLC  
 3425 4e28 FF2C0000 		_UNNEST 
 3426              	
 3427              	
 3428              	/**************************************
 3429              	    '	   ( -- ca )
 3430              	 	Search context vocabularies 
 3431              		for the next word in input stream.
 3432              	***************************************/
 3433 4e2c 104E0000 		_HEADER TICK,1,"'"
 3433      012700BF 
 3434 4e34 504700BF 		_NEST
 3435 4e38 FD460000 		_ADR	TOKEN
 3436 4e3c 85480000 		_ADR	NAMEQ	// ?defined
 3437 4e40 632F0000 		_QBRAN	TICK1
 3437      4C4E0000 
 3438 4e48 FF2C0000 		_UNNEST	// yes, push code address
 3439              	TICK1:
 3440 4e4c 0D4B0000 		_ADR PRT_ABORT	// error
 3441              	
 3442              	/*****************************************
 3443              		['] ( -- ca )
 3444              		immediate version of ' 
 3445              	****************************************/
 3446 4e50 304E0000 		_HEADER ITICK,COMPO+IMEDD+3,"[']"
 3446      C35B275D 
 3447 4e58 504700BF 		_NEST 
 3448 4e5c 354E0000 		_ADR TICK  
 3449 4e60 FF2C0000 		_UNNEST 
 3450              	
 3451              	
 3452              	/***********************************
 3453              		FIND ( c-adr -- c-adr 0 | xt 1 | xt -1 )
 3454              		search all context for name at 
 3455              		c-adr 
 3456              	input:
ARM GAS  forth.s 			page 175


 3457              		c-adr   name 
 3458              	output:
 3459              		c-adr  0   not found 
 3460              		xt 1   found word immediate 
 3461              		xt -1  found normal word 
 3462              	***********************************/
 3463 4e64 544E0000 		_HEADER FIND,4,"FIND"
 3463      0446494E 
 3463      440000BF 
 3464 4e70 504700BF 		_NEST 
 3465 4e74 85480000 		_ADR NAMEQ 
 3466 4e78 AD300000 		_ADR DUPP 
 3467 4e7c 632F0000 		_QBRAN 9f
 3467      B04E0000 
 3468 4e84 D92F0000 		_ADR CAT 
 3469 4e88 232F0000 		_DOLIT IMEDD
 3469      80000000 
 3470 4e90 2D310000 		_ADR ANDD 
 3471 4e94 232F0000 		_DOLIT 7 
 3471      07000000 
 3472 4e9c 85310000 		_ADR RSHIFT  
 3473 4ea0 AD300000 		_ADR DUPP 
 3474 4ea4 772F0000 		_TBRAN 9f 
 3474      B04E0000 
 3475 4eac BD330000 		_ADR INVER 
 3476 4eb0 FF2C0000 	9:	_UNNEST 
 3477              	
 3478              	
 3479              	
 3480              	/***********************
 3481              	    ALLOT	( n -- )
 3482              	 	Allocate n bytes to 
 3483              		the ram area.
 3484              	************************/
 3485 4eb4 684E0000 		_HEADER ALLOT,5,"ALLOT"
 3485      05414C4C 
 3485      4F5400BF 
 3486 4ec0 504700BF 		_NEST
 3487 4ec4 D9360000 		_ADR	CPP
 3488 4ec8 F9340000 		_ADR	PSTOR
 3489 4ecc FF2C0000 		_UNNEST			// adjust code pointer
 3490              	
 3491              	/******************************
 3492              	    ,	   ( w -- )
 3493              	 	Compile an integer 
 3494              		into the code dictionary.
 3495              	******************************/
 3496 4ed0 B84E0000 		_HEADER COMMA,1,","
 3496      012C00BF 
 3497 4ed8 504700BF 		_NEST
 3498 4edc E53B0000 		_ADR	HERE
 3499 4ee0 AD300000 		_ADR	DUPP
 3500 4ee4 49320000 		_ADR	CELLP	// cell boundary
 3501 4ee8 D9360000 		_ADR	CPP
 3502 4eec A52F0000 		_ADR	STORE
 3503 4ef0 A52F0000 		_ADR	STORE
 3504 4ef4 FF2C0000 		_UNNEST	// adjust code pointer, compile
ARM GAS  forth.s 			page 176


 3505              		.p2align 2 
 3506              	
 3507              	/************************************
 3508              	    [COMPILE]   ( -- //  string> )
 3509              	 	Compile the next immediate word 
 3510              		into code dictionary.
 3511              	*************************************/
 3512 4ef8 D44E0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3512      895B434F 
 3512      4D50494C 
 3512      455D00BF 
 3513 4f08 504700BF 		_NEST
 3514 4f0c 354E0000 		_ADR	TICK
 3515 4f10 D94E0000 		_ADR	COMMA
 3516 4f14 FF2C0000 		_UNNEST
 3517              	
 3518              	/****************************
 3519              	    COMPILE	( -- )
 3520              	 	Compile the next address 
 3521              		in colon list to code 
 3522              		dictionary.
 3523              	*******************************/
 3524 4f18 FC4E0000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3524      47434F4D 
 3524      50494C45 
 3525 4f24 504700BF 		_NEST
 3526 4f28 E52F0000 		_ADR	RFROM
 3527 4f2c AD300000 		_ADR	DUPP 
 3528 4f30 B92F0000 		_ADR	AT
 3529 4f34 232F0000 		_DOLIT 1 
 3529      01000000 
 3530 4f3c 41310000 		_ADR	ORR 
 3531 4f40 D94E0000 		_ADR	COMMA 
 3532 4f44 49320000 		_ADR	CELLP 
 3533 4f48 29300000 		_ADR	TOR 
 3534 4f4c FF2C0000 		_UNNEST	// adjust return address
 3535              	
 3536              	/*************************
 3537              	    LITERAL	( w -- )
 3538              	 	Compile tos to code 
 3539              		dictionary as an 
 3540              		integer literal.
 3541              	***************************/
 3542 4f50 1C4F0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3542      874C4954 
 3542      4552414C 
 3543 4f5c 504700BF 		_NEST
 3544 4f60 232F0000 		_COMPI	DOLIT
 3544      222F0000 
 3544      F5540000 
 3545 4f6c D94E0000 		_ADR	COMMA
 3546 4f70 FF2C0000 		_UNNEST
 3547              	
 3548              	/********************
 3549              	    $,"	( -- )
 3550              	 	Compile a literal 
 3551              		string up to next " .
ARM GAS  forth.s 			page 177


 3552              	hidden word 
 3553              	************************/
 3554              	STRCQ:
 3555 4f74 504700BF 		_NEST
 3556 4f78 232F0000 		_DOLIT -4
 3556      FCFFFFFF 
 3557 4f80 D9360000 		_ADR	CPP
 3558 4f84 F9340000 		_ADR	PSTOR
 3559 4f88 232F0000 		_DOLIT	'\"'
 3559      22000000 
 3560 4f90 D9460000 		_ADR	WORDD			// move word to code dictionary
 3561 4f94 4D350000 		_ADR	COUNT
 3562 4f98 AD310000 		_ADR	PLUS
 3563 4f9c 253B0000 		_ADR	ALGND			// calculate aligned end of string
 3564 4fa0 D9360000 		_ADR	CPP
 3565 4fa4 A52F0000 		_ADR	STORE
 3566 4fa8 FF2C0000 		_UNNEST 			// adjust the code pointer
 3567              	
 3568              	/*******************
 3569              	   Structures
 3570              	*******************/
 3571              	
 3572              	/*************************
 3573              	    FOR	 ( -- a )
 3574              	 	Start a FOR-NEXT loop 
 3575              		structure in a colon 
 3576              		definition.
 3577              	**************************/
 3578 4fac 544F0000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3578      C3464F52 
 3579 4fb4 504700BF 		_NEST
 3580 4fb8 232F0000 		_COMPI	TOR
 3580      28300000 
 3580      F5540000 
 3581 4fc4 E53B0000 		_ADR	HERE
 3582 4fc8 FF2C0000 		_UNNEST
 3583              	
 3584              	/********************************
 3585              		DO ( limit start -- )
 3586              		initialise a DO...LOOP 
 3587              		or DO...+LOOP 
 3588              	********************************/
 3589 4fcc B04F0000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3589      C2444F00 
 3590 4fd4 504700BF 		_NEST
 3591 4fd8 232F0000 		_COMPI SWAP
 3591      BC300000 
 3591      F5540000 
 3592 4fe4 232F0000 		_COMPI TOR 
 3592      28300000 
 3592      F5540000 
 3593 4ff0 232F0000 		_COMPI TOR 
 3593      28300000 
 3593      F5540000 
 3594 4ffc E53B0000 		_ADR HERE 
 3595 5000 232F0000 		_DOLIT 0  // end marker used by resolve_leave 
 3595      00000000 
ARM GAS  forth.s 			page 178


 3596 5008 FF2C0000 		_UNNEST 
 3597              	
 3598              	DOPLOOP: // ( n -- R: limit counter )
 3599 500c 3246     		mov T2,TOS 
 3600 500e 57F8046B 		_POP 
 3601 5012 B8E80300 		ldmfd RSP!,{T0,T1}
 3602 5016 1044     		add T0,T2 
 3603 5018 28E90300 		stmfd RSP!,{T0,T1}
 3604 501c 8842     		cmp T0,T1 
 3605 501e 05D4     		bmi 9f 
 3606 5020 08F10808 		add RSP,#8
 3607 5024 0CF1040C 		add IP,#4
 3608 5028 FDF766BE 		_NEXT 
 3609 502c DCF800C0 	9:  ldr IP,[IP]
 3610 5030 FDF762BE 		_NEXT 
 3611              		
 3612              	/***************************
 3613              		+LOOP ( a -- )
 3614              		increment counter 
 3615              		end loop if countr>limit
 3616              	****************************/
 3617 5034 D04F0000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3617      C52B4C4F 
 3617      4F5000BF 
 3618 5040 504700BF 		_NEST 
 3619 5044 232F0000 		_COMPI DOPLOOP 
 3619      0C500000 
 3619      F5540000 
 3620 5050 85500000 		_ADR resolve_leave 
 3621 5054 D94E0000 		_ADR COMMA
 3622 5058 FF2C0000 		_UNNEST 
 3623              	
 3624              	DOLOOP: // ( -- R: limit counter )
 3625 505c D8F80000 		ldr T0,[RSP]
 3626 5060 00F10100 		add T0,#1
 3627 5064 C8F80000 		str T0,[RSP]
 3628 5068 D8F80410 		ldr T1,[RSP,#4]
 3629 506c 8842     		cmp T0,T1 
 3630 506e 05D4     		bmi 9f
 3631 5070 08F10808 		add RSP,#8  // drop counter and limit  
 3632 5074 0CF1040C 		add IP,IP,#4 // skip loop address 
 3633 5078 FDF73EBE 		_NEXT 
 3634 507c DCF800C0 	9:  ldr IP,[IP]
 3635 5080 FDF73ABE 		_NEXT 
 3636              	
 3637              	
 3638              	resolve_leave:
 3639 5084 504700BF 		_NEST
 3640 5088 BD320000 	1:	_ADR QDUP 
 3641 508c 632F0000 		_QBRAN 2f 
 3641      AC500000 
 3642 5094 E53B0000 		_ADR HERE 
 3643 5098 49320000 		_ADR CELLP 
 3644 509c BD300000 		_ADR SWAP 
 3645 50a0 A52F0000 		_ADR STORE 
 3646 50a4 8B2F0000 		_BRAN 1b 
 3646      88500000 
ARM GAS  forth.s 			page 179


 3647              	2:
 3648 50ac FF2C0000 		_UNNEST 
 3649              	
 3650              	/********************************
 3651              		LOOP ( a -- )
 3652              		increment counter 
 3653              		end loop if >= limit 
 3654              	*********************************/
 3655 50b0 38500000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3655      C44C4F4F 
 3655      500000BF 
 3656 50bc 504700BF 		_NEST 
 3657 50c0 232F0000 		_COMPI DOLOOP
 3657      5C500000 
 3657      F5540000 
 3658 50cc 85500000 		_ADR resolve_leave 
 3659 50d0 D94E0000 		_ADR COMMA  // resolve loop branch 
 3660 50d4 FF2C0000 		_UNNEST 
 3661              	
 3662              	/************************************
 3663              		UNLOOP ( -- ) ( R: limit count -- )
 3664              		remove loop parameters from rstack 
 3665              	****************************************/
 3666 50d8 B4500000 		_HEADER UNLOOP,6,"UNLOOP"
 3666      06554E4C 
 3666      4F4F5000 
 3667 50e4 08F10808 		add RSP,#2*CELLL 
 3668 50e8 FDF706BE 		_NEXT 
 3669              	
 3670              	
 3671              	/*********************************
 3672              		LEAVE ( -- ) ( R: loop-sys -- ) 
 3673              		exit inner DO...LOOP 
 3674              	**********************************/
 3675 50ec DC500000 		_HEADER LEAVE,COMPO+IMEDD+5,"LEAVE"
 3675      C54C4541 
 3675      564500BF 
 3676 50f8 504700BF 		_NEST 
 3677 50fc 232F0000 		_COMPI DOLEAVE
 3677      2C510000 
 3677      F5540000 
 3678 5108 E53B0000 		_ADR HERE
 3679 510c ED300000 		_ADR OVER 
 3680 5110 632F0000 		_QBRAN 1f
 3680      1C510000 
 3681 5118 BD300000 		_ADR SWAP 
 3682 511c 232F0000 	1:	_DOLIT 0 
 3682      00000000 
 3683 5124 D94E0000 		_ADR COMMA   
 3684 5128 FF2C0000 		_UNNEST 
 3685              	
 3686              	// LEAVE runtime
 3687              	// remove limit and counter from rstack  
 3688              	DOLEAVE:
 3689 512c 08F10808 		add RSP,#2*CELLL
 3690 5130 DCF800C0 		ldr IP,[IP] 
 3691 5134 FDF7E0BD 		_NEXT 
ARM GAS  forth.s 			page 180


 3692              	
 3693              	
 3694              	/**********************
 3695              	    BEGIN	( -- a )
 3696              	 	Start an infinite 
 3697              		or indefinite 
 3698              		loop structure.
 3699              	************************/
 3700 5138 F0500000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3700      C5424547 
 3700      494E00BF 
 3701 5144 504700BF 		_NEST
 3702 5148 E53B0000 		_ADR	HERE
 3703 514c FF2C0000 		_UNNEST
 3704              		.p2align 2 
 3705              	
 3706              	/********************
 3707              	    NEXT	( a -- )
 3708              	 	Terminate a FOR-NEXT
 3709              		loop structure.
 3710              	**************************/
 3711 5150 3C510000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3711      C44E4558 
 3711      540000BF 
 3712 515c 504700BF 		_NEST
 3713 5160 232F0000 		_COMPI	DONXT
 3713      442F0000 
 3713      F5540000 
 3714 516c D94E0000 		_ADR	COMMA
 3715 5170 FF2C0000 		_UNNEST
 3716              	
 3717              	/***************************
 3718              		I ( -- n )
 3719              		stack for loop counter 
 3720              	***************************/
 3721 5174 54510000 		_HEADER I,1+COMPO,"I"
 3721      414900BF 
 3722 517c 47F8046D 		_PUSH 
 3723 5180 D8F80060 		ldr TOS,[RSP]
 3724 5184 FDF7B8BD 		_NEXT 
 3725              	
 3726              	/****************************
 3727              		J ( -- n )
 3728              		stack outer loop counter 
 3729              	****************************/
 3730 5188 78510000 		_HEADER J,1,"J"
 3730      014A00BF 
 3731 5190 47F8046D 		_PUSH 
 3732 5194 D8F80460 		ldr TOS,[RSP,#4]
 3733 5198 FDF7AEBD 		_NEXT 
 3734              	
 3735              	/**********************
 3736              	    UNTIL	( a -- )
 3737              	 	Terminate a BEGIN-UNTIL
 3738              		indefinite loop structure.
 3739              	******************************/
 3740 519c 8C510000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
ARM GAS  forth.s 			page 181


 3740      C5554E54 
 3740      494C00BF 
 3741 51a8 504700BF 		_NEST
 3742 51ac 232F0000 		_COMPI	QBRAN
 3742      622F0000 
 3742      F5540000 
 3743 51b8 D94E0000 		_ADR	COMMA
 3744 51bc FF2C0000 		_UNNEST
 3745              	
 3746              	/**********************
 3747              	    AGAIN	( a -- )
 3748              	 	Terminate a BEGIN-AGAIN
 3749              		infinite loop structure.
 3750              	*****************************/
 3751 51c0 A0510000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3751      C5414741 
 3751      494E00BF 
 3752 51cc 504700BF 		_NEST
 3753 51d0 232F0000 		_COMPI	BRAN
 3753      8A2F0000 
 3753      F5540000 
 3754 51dc D94E0000 		_ADR	COMMA
 3755 51e0 FF2C0000 		_UNNEST
 3756              	
 3757              	/************************
 3758              	    IF	  ( -- A )
 3759              	 	Begin a conditional
 3760              		branch structure.
 3761              	**************************/
 3762 51e4 C4510000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3762      C2494600 
 3763 51ec 504700BF 		_NEST
 3764 51f0 232F0000 		_COMPI	QBRAN
 3764      622F0000 
 3764      F5540000 
 3765 51fc E53B0000 		_ADR	HERE
 3766 5200 232F0000 		_DOLIT	4
 3766      04000000 
 3767 5208 D9360000 		_ADR	CPP
 3768 520c F9340000 		_ADR	PSTOR
 3769 5210 FF2C0000 		_UNNEST
 3770              	
 3771              	/*************************
 3772              	    AHEAD	( -- A )
 3773              	 	Compile a forward 
 3774              		branch instruction.
 3775              	*************************/
 3776 5214 E8510000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3776      C5414845 
 3776      414400BF 
 3777 5220 504700BF 		_NEST
 3778 5224 232F0000 		_COMPI	BRAN
 3778      8A2F0000 
 3778      F5540000 
 3779 5230 E53B0000 		_ADR	HERE
 3780 5234 232F0000 		_DOLIT	4
 3780      04000000 
ARM GAS  forth.s 			page 182


 3781 523c D9360000 		_ADR	CPP
 3782 5240 F9340000 		_ADR	PSTOR
 3783 5244 FF2C0000 		_UNNEST
 3784              	
 3785              	/**************************
 3786              	    REPEAT	( A a -- )
 3787              	 	Terminate a BEGIN-WHILE-REPEAT
 3788              		indefinite loop.
 3789              	**********************************/
 3790 5248 18520000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3790      C6524550 
 3790      45415400 
 3791 5254 504700BF 		_NEST
 3792 5258 CD510000 		_ADR	AGAIN
 3793 525c E53B0000 		_ADR	HERE
 3794 5260 BD300000 		_ADR	SWAP
 3795 5264 A52F0000 		_ADR	STORE
 3796 5268 FF2C0000 		_UNNEST
 3797              	
 3798              	/*********************
 3799              	    THEN	( A -- )
 3800              	 	Terminate a conditional
 3801              		branch structure.
 3802              	*****************************/
 3803 526c 4C520000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3803      C4544845 
 3803      4E0000BF 
 3804 5278 504700BF 		_NEST
 3805 527c E53B0000 		_ADR	HERE
 3806 5280 BD300000 		_ADR	SWAP
 3807 5284 A52F0000 		_ADR	STORE
 3808 5288 FF2C0000 		_UNNEST
 3809              	
 3810              	/***************************
 3811              	    AFT	 ( a -- a A )
 3812              	 	Jump to THEN in a 
 3813              		FOR-AFT-THEN-NEXT loop 
 3814              		the first time through.
 3815              	*****************************/
 3816 528c 70520000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3816      C3414654 
 3817 5294 504700BF 		_NEST
 3818 5298 9D300000 		_ADR	DROP
 3819 529c 21520000 		_ADR	AHEAD
 3820 52a0 45510000 		_ADR	BEGIN
 3821 52a4 BD300000 		_ADR	SWAP
 3822 52a8 FF2C0000 		_UNNEST
 3823              	
 3824              	/**********************
 3825              	    ELSE	( A -- A )
 3826              	 	Start the false 
 3827              		clause in an 
 3828              		IF-ELSE-THEN structure.
 3829              	****************************/
 3830 52ac 90520000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3830      C4454C53 
 3830      450000BF 
ARM GAS  forth.s 			page 183


 3831 52b8 504700BF 		_NEST
 3832 52bc 21520000 		_ADR	AHEAD
 3833 52c0 BD300000 		_ADR	SWAP
 3834 52c4 79520000 		_ADR	THENN
 3835 52c8 FF2C0000 		_UNNEST
 3836              	
 3837              	/**************************
 3838              	    WHILE	( a -- A a )
 3839              	 	Conditional branch out 
 3840              		of a BEGIN-WHILE-REPEAT loop.
 3841              	*********************************/
 3842 52cc B0520000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3842      C5574849 
 3842      4C4500BF 
 3843 52d8 504700BF 		_NEST
 3844 52dc ED510000 		_ADR	IFF
 3845 52e0 BD300000 		_ADR	SWAP
 3846 52e4 FF2C0000 		_UNNEST
 3847              	
 3848              	/***********************************
 3849              	    ABORT"	( -- //  string> )
 3850              	 	Conditional abort with an 
 3851              		error message.
 3852              	***********************************/
 3853 52e8 D0520000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3853      8641424F 
 3853      52542200 
 3854 52f4 504700BF 		_NEST
 3855 52f8 232F0000 		_COMPI	ABORQ
 3855      344B0000 
 3855      F5540000 
 3856 5304 754F0000 		_ADR	STRCQ
 3857 5308 FF2C0000 		_UNNEST
 3858              	
 3859              	/******************************
 3860              	    S"	( -- //  string> )
 3861              	 	Compile an inline 
 3862              		word literal.
 3863              	*****************************/
 3864 530c EC520000 		_HEADER STRQ,IMEDD+COMPO+2,"S\""
 3864      C2532200 
 3865 5314 504700BF 		_NEST
 3866 5318 232F0000 		_COMPI	STRQP
 3866      78420000 
 3866      F5540000 
 3867 5324 754F0000 		_ADR	STRCQ
 3868 5328 FF2C0000 		_UNNEST
 3869              	
 3870              	/******************************
 3871              	    ."	( -- //  string> )
 3872              	 	Compile an inline word
 3873              		literal to be typed out 
 3874              		at run time.
 3875              	*******************************/
 3876 532c 10530000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3876      C22E2200 
 3877 5334 504700BF 		_NEST
ARM GAS  forth.s 			page 184


 3878 5338 232F0000 		_COMPI	DOTQP
 3878      84420000 
 3878      F5540000 
 3879 5344 754F0000 		_ADR	STRCQ
 3880 5348 FF2C0000 		_UNNEST
 3881              	
 3882              	/*********************
 3883              	  Name compiler
 3884              	***********************/
 3885              	
 3886              	/**************************
 3887              	    ?UNIQUE	( a -- a )
 3888              	 	Display a warning 
 3889              		message if the word 
 3890              		already exists.
 3891              	**************************/
 3892 534c 30530000 		_HEADER UNIQU,7,"?UNIQUE"
 3892      073F554E 
 3892      49515545 
 3893 5358 504700BF 		_NEST
 3894 535c AD300000 		_ADR	DUPP
 3895 5360 85480000 		_ADR	NAMEQ			// ?name exists
 3896 5364 632F0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3896      84530000 
 3897 536c 85420000 		_DOTQP	7," reDef "		// but warn the user
 3897      07207265 
 3897      44656620 
 3898 5378 ED300000 		_ADR	OVER
 3899 537c 4D350000 		_ADR	COUNT
 3900 5380 F5410000 		_ADR	TYPEE			// just in case its not planned
 3901              	UNIQ1:
 3902 5384 9D300000 		_ADR	DROP
 3903 5388 FF2C0000 		_UNNEST
 3904              	
 3905              	/***********************
 3906              	    $,n	 ( na -- )
 3907              	 	Build a new dictionary 
 3908              		name using the data at na.
 3909              	hidden word 
 3910              	*******************************/
 3911              	SNAME:
 3912 538c 504700BF 		_NEST
 3913 5390 AD300000 		_ADR	DUPP			//  na na
 3914 5394 D92F0000 		_ADR	CAT			//  ?null input
 3915 5398 632F0000 		_QBRAN	SNAM1
 3915      D4530000 
 3916 53a0 59530000 		_ADR	UNIQU			//  na
 3917 53a4 05370000 		_ADR	LAST			//  na last
 3918 53a8 B92F0000 		_ADR	AT			//  na la
 3919 53ac D94E0000 		_ADR	COMMA			//  na
 3920 53b0 AD300000 		_ADR	DUPP			//  na na
 3921 53b4 05370000 		_ADR	LAST			//  na na last
 3922 53b8 A52F0000 		_ADR	STORE			//  na , save na for vocabulary link
 3923 53bc 4D350000 		_ADR	COUNT			//  na+1 count
 3924 53c0 AD310000 		_ADR	PLUS			//  na+1+count
 3925 53c4 253B0000 		_ADR	ALGND			//  word boundary
 3926 53c8 D9360000 		_ADR	CPP
ARM GAS  forth.s 			page 185


 3927 53cc A52F0000 		_ADR	STORE			//  top of dictionary now
 3928 53d0 FF2C0000 		_UNNEST
 3929              	SNAM1:
 3930 53d4 79420000 		_ADR	STRQP
 3931 53d8 07       		.byte	7
 3932 53d9 206E616D 		.ascii " name? "
 3932      653F20
 3933 53e0 0D4B0000 		_ADR	PRT_ABORT
 3934              	
 3935              	/************************
 3936              	    $COMPILE	( a -- )
 3937              	 	Compile next word to 
 3938              		code dictionary as 
 3939              		a token or literal.
 3940              	**************************/
 3941 53e4 50530000 		_HEADER SCOMP,8,"$COMPILE"
 3941      0824434F 
 3941      4D50494C 
 3941      450000BF 
 3942 53f4 504700BF 		_NEST
 3943 53f8 85480000 		_ADR	NAMEQ
 3944 53fc BD320000 		_ADR	QDUP	// defined?
 3945 5400 632F0000 		_QBRAN	SCOM2
 3945      30540000 
 3946 5408 B92F0000 		_ADR	AT
 3947 540c 232F0000 		_DOLIT	IMEDD
 3947      80000000 
 3948 5414 2D310000 		_ADR	ANDD	// immediate?
 3949 5418 632F0000 		_QBRAN	SCOM1
 3949      28540000 
 3950 5420 392F0000 		_ADR	EXECU
 3951 5424 FF2C0000 		_UNNEST			// it's immediate, execute
 3952              	SCOM1:
 3953 5428 F5540000 		_ADR	CALLC			// it's not immediate, compile
 3954 542c FF2C0000 		_UNNEST	
 3955              	SCOM2:
 3956 5430 75410000 		_ADR	NUMBERQ 
 3957 5434 632F0000 		_QBRAN	SCOM3
 3957      44540000 
 3958 543c 5D4F0000 		_ADR	LITER
 3959 5440 FF2C0000 		_UNNEST			// compile number as integer
 3960              	SCOM3: // compilation abort 
 3961 5444 4D540000 		_ADR COLON_ABORT 
 3962 5448 0D4B0000 		_ADR	PRT_ABORT			// error
 3963              	
 3964              	/********************************
 3965              	 before aborting a compilation 
 3966              	 reset HERE and LAST
 3967              	 to previous values. 
 3968              	*******************************/
 3969              	COLON_ABORT:
 3970 544c 504700BF 		_NEST 
 3971 5450 05370000 		_ADR LAST 
 3972 5454 B92F0000 		_ADR AT 
 3973 5458 59320000 		_ADR CELLM 
 3974 545c AD300000 		_ADR DUPP 
 3975 5460 D9360000 		_ADR CPP  
ARM GAS  forth.s 			page 186


 3976 5464 A52F0000 		_ADR STORE 
 3977 5468 B92F0000 		_ADR AT 
 3978 546c 05370000 		_ADR LAST 
 3979 5470 A52F0000 		_ADR STORE 
 3980 5474 89540000 		_ADR OVERT 
 3981 5478 FF2C0000 		_UNNEST 
 3982              	
 3983              	/*********************
 3984              	    OVERT	( -- )
 3985              	 	Link a new word 
 3986              		into the current 
 3987              		vocabulary.
 3988              	**********************/
 3989 547c E8530000 		_HEADER OVERT,5,"OVERT"
 3989      054F5645 
 3989      525400BF 
 3990 5488 504700BF 		_NEST
 3991 548c 05370000 		_ADR	LAST
 3992 5490 B92F0000 		_ADR	AT
 3993 5494 C5360000 		_ADR	CNTXT
 3994 5498 A52F0000 		_ADR	STORE
 3995 549c FF2C0000 		_UNNEST
 3996              	
 3997              	/**********************
 3998              	    ;  ( -- )
 3999              	 	Terminate a colon
 4000              		definition.
 4001              	***********************/
 4002 54a0 80540000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 4002      C13B00BF 
 4003 54a8 504700BF 		_NEST
 4004 54ac 232F0000 		_DOLIT	UNNEST
 4004      FE2C0000 
 4005 54b4 F5540000 		_ADR	CALLC
 4006 54b8 D94B0000 		_ADR	LBRAC
 4007 54bc 89540000 		_ADR	OVERT
 4008 54c0 FF2C0000 		_UNNEST
 4009              	
 4010              	/******************
 4011              	    ]	   ( -- )
 4012              	 	Start compiling 
 4013              		the words in 
 4014              		the input stream.
 4015              	*********************/
 4016 54c4 A4540000 		_HEADER RBRAC,1,"]"
 4016      015D00BF 
 4017 54cc 504700BF 		_NEST
 4018 54d0 232F0000 		_DOLIT	SCOMP
 4018      F4530000 
 4019 54d8 99360000 		_ADR	TEVAL
 4020 54dc A52F0000 		_ADR	STORE
 4021 54e0 232F0000 		_DOLIT  -1
 4021      FFFFFFFF 
 4022 54e8 A1350000 		_ADR    STATE 
 4023 54ec A52F0000 		_ADR    STORE 
 4024 54f0 FF2C0000 		_UNNEST
 4025              	
ARM GAS  forth.s 			page 187


 4026              	/****************************
 4027              	    CALLC	( ca -- )
 4028              	 	compile ca.
 4029              	hidden word used by compiler
 4030              	*****************************/
 4031              	CALLC:
 4032 54f4 504700BF 		_NEST
 4033 54f8 232F0000 		_DOLIT 1 
 4033      01000000 
 4034 5500 41310000 		_ADR ORR 
 4035 5504 D94E0000 		_ADR COMMA  
 4036 5508 FF2C0000 		_UNNEST 
 4037              	
 4038              	
 4039              	/*************************
 4040              	 	:	( -- //  string> )
 4041              	 	Start a new colon 
 4042              		definition using 
 4043              		next word as its name.
 4044              	**************************/
 4045 550c C8540000 		_HEADER COLON,1,":"
 4045      013A00BF 
 4046 5514 504700BF 		_NEST
 4047 5518 FD460000 		_ADR	TOKEN
 4048 551c 8D530000 		_ADR	SNAME
 4049 5520 89540000 		_ADR    OVERT 
 4050 5524 092D0000 		_ADR	COMPI_NEST 
 4051 5528 CD540000 		_ADR	RBRAC
 4052 552c FF2C0000 		_UNNEST
 4053              	
 4054              	/*************************
 4055              	    IMMEDIATE   ( -- )
 4056              	 	Make the last compiled 
 4057              		word an immediate word.
 4058              	***************************/
 4059 5530 10550000 		_HEADER IMMED,9,"IMMEDIATE"
 4059      09494D4D 
 4059      45444941 
 4059      544500BF 
 4060 5540 504700BF 		_NEST
 4061 5544 232F0000 		_DOLIT	IMEDD
 4061      80000000 
 4062 554c 05370000 		_ADR	LAST
 4063 5550 B92F0000 		_ADR	AT
 4064 5554 B92F0000 		_ADR	AT
 4065 5558 41310000 		_ADR	ORR
 4066 555c 05370000 		_ADR	LAST
 4067 5560 B92F0000 		_ADR	AT
 4068 5564 A52F0000 		_ADR	STORE
 4069 5568 FF2C0000 		_UNNEST
 4070              	
 4071              	/******************
 4072              	  Defining words
 4073              	******************/
 4074              	
 4075              	/***********************************
 4076              	    CONSTANT	( u -- //  string> )
ARM GAS  forth.s 			page 188


 4077              	 	Compile a new constant.
 4078              	************************************/
 4079 556c 34550000 		_HEADER CONST,8,"CONSTANT"
 4079      08434F4E 
 4079      5354414E 
 4079      540000BF 
 4080 557c 504700BF 		_NEST 
 4081 5580 FD460000 		_ADR	TOKEN
 4082 5584 8D530000 		_ADR	SNAME
 4083 5588 89540000 		_ADR	OVERT
 4084 558c 092D0000 		_ADR	COMPI_NEST
 4085 5590 232F0000 		_DOLIT	DOCON
 4085      88350000 
 4086 5598 F5540000 		_ADR	CALLC
 4087 559c D94E0000 		_ADR	COMMA
 4088 55a0 232F0000 		_DOLIT	UNNEST 
 4088      FE2C0000 
 4089 55a8 F5540000 		_ADR	CALLC  
 4090 55ac FF2C0000 		_UNNEST
 4091              	
 4092              		.p2align 2 
 4093              	/****************************************
 4094              	 doDOES> ( -- a )
 4095              	 runtime action of 		 
 4096              	 leave parameter field address on stack 
 4097              	hidden word used by compiler 
 4098              	***************************************/
 4099              	DODOES:
 4100 55b0 504700BF 		_NEST 
 4101 55b4 E52F0000 		_ADR	RFROM
 4102 55b8 49320000 		_ADR	CELLP 
 4103 55bc 09320000 		_ADR	ONEP  
 4104 55c0 05370000 		_ADR LAST 
 4105 55c4 B92F0000 		_ADR AT
 4106 55c8 1D470000 		_ADR NAMET 
 4107 55cc 49320000 		_ADR CELLP 
 4108 55d0 A52F0000 		_ADR STORE  
 4109 55d4 FF2C0000 		_UNNEST 
 4110              	
 4111              		.p2align 2
 4112              	/**********************
 4113              	  DOES> ( -- )
 4114              	  compile time action
 4115              	*************************/
 4116 55d8 70550000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 4116      C5444F45 
 4116      533E00BF 
 4117 55e4 504700BF 		_NEST 
 4118 55e8 232F0000 		_DOLIT DODOES 
 4118      B0550000 
 4119 55f0 F5540000 		_ADR CALLC 
 4120 55f4 232F0000 		_DOLIT	UNNEST
 4120      FE2C0000 
 4121 55fc F5540000 		_ADR	CALLC 
 4122 5600 092D0000 		_ADR COMPI_NEST
 4123 5604 232F0000 		_DOLIT RFROM 
 4123      E42F0000 
ARM GAS  forth.s 			page 189


 4124 560c F5540000 		_ADR	CALLC
 4125 5610 FF2C0000 		_UNNEST 
 4126              	
 4127              	
 4128              	/****************************
 4129              	  DEFER@ ( "name" -- a )
 4130              	  return value of code field 
 4131              	  of defered function. 
 4132              	******************************/
 4133 5614 DC550000 		_HEADER DEFERAT,6,"DEFER@"
 4133      06444546 
 4133      45524000 
 4134 5620 504700BF 		_NEST 
 4135 5624 354E0000 		_ADR TICK
 4136 5628 49320000 		_ADR CELLP 
 4137 562c B92F0000 		_ADR AT 
 4138 5630 19320000 		_ADR ONEM 
 4139 5634 FF2C0000 		_UNNEST 
 4140              	
 4141              	/*********************************
 4142              	 DEFER! ( "name1" "name2" -- )
 4143              	 assign an action to a defered word 
 4144              	************************************/
 4145 5638 18560000 		_HEADER DEFERSTO,6,"DEFER!"
 4145      06444546 
 4145      45522100 
 4146 5644 504700BF 		_NEST 
 4147 5648 354E0000 		_ADR TICK 
 4148 564c 09320000 		_ADR ONEP 
 4149 5650 354E0000 		_ADR TICK 
 4150 5654 49320000 		_ADR CELLP 
 4151 5658 A52F0000 		_ADR STORE 
 4152 565c FF2C0000 		_UNNEST
 4153              	
 4154              	/****************************
 4155              	  DEFER ( "name" -- )
 4156              	  create a defered definition
 4157              	*****************************/
 4158 5660 3C560000 		_HEADER DEFER,5,"DEFER"
 4158      05444546 
 4158      455200BF 
 4159 566c 504700BF 		_NEST 
 4160 5670 BD560000 		_ADR CREAT 
 4161 5674 232F0000 		_DOLIT UNNEST 
 4161      FE2C0000 
 4162 567c F5540000 		_ADR CALLC 
 4163 5680 232F0000 		_DOLIT DEFER_NOP
 4163      A4560000 
 4164 5688 09320000 		_ADR ONEP 
 4165 568c 05370000 		_ADR LAST 
 4166 5690 B92F0000 		_ADR AT 
 4167 5694 1D470000 		_ADR NAMET 
 4168 5698 49320000 		_ADR CELLP 
 4169 569c A52F0000 		_ADR STORE 
 4170 56a0 FF2C0000 		_UNNEST 
 4171              	DEFER_NOP:
 4172 56a4 504700BF 		_NEST  
ARM GAS  forth.s 			page 190


 4173 56a8 212F0000 		_ADR NOP 
 4174 56ac FF2C0000 		_UNNEST 
 4175              	
 4176              	/*********************************
 4177              		:NONAME  
 4178              	/******************************
 4179              	    CREATE	( -- //  string> )
 4180              	 	Compile a new array entry 
 4181              		without allocating code space.
 4182              	***********************************/
 4183 56b0 64560000 		_HEADER CREAT,6,"CREATE"
 4183      06435245 
 4183      41544500 
 4184 56bc 504700BF 		_NEST 
 4185 56c0 FD460000 		_ADR	TOKEN
 4186 56c4 8D530000 		_ADR	SNAME
 4187 56c8 89540000 		_ADR	OVERT
 4188 56cc 092D0000 		_ADR	COMPI_NEST 
 4189 56d0 232F0000 		_DOLIT	DOVAR
 4189      7A350000 
 4190 56d8 F5540000 		_ADR	CALLC
 4191 56dc FF2C0000 		_UNNEST
 4192              	
 4193              	/*******************************
 4194              	    VARIABLE	( -- //  string> )
 4195              	 	Compile a new variable 
 4196              		initialized to 0.
 4197              	***********************************/
 4198 56e0 B4560000 		_HEADER VARIA,8,"VARIABLE"
 4198      08564152 
 4198      4941424C 
 4198      450000BF 
 4199 56f0 504700BF 		_NEST
 4200 56f4 BD560000 		_ADR	CREAT
 4201 56f8 232F0000 		_DOLIT	0
 4201      00000000 
 4202 5700 D94E0000 		_ADR	COMMA
 4203 5704 232F0000 		_DOLIT UNNEST
 4203      FE2C0000 
 4204 570c F5540000 		_ADR	CALLC  
 4205 5710 FF2C0000 		_UNNEST
 4206              	
 4207              	
 4208              	/***********
 4209              	  Tools
 4210              	***********/
 4211              	
 4212              	/*************************
 4213              	    dm+	 ( a u -- a )
 4214              	 	Dump u bytes from a , 
 4215              		leaving a+u on the stack.
 4216              		hidden word used by DUMP 
 4217              	****************************/
 4218              	DMP:
 4219 5714 504700BF 		_NEST
 4220 5718 ED300000 		_ADR	OVER
 4221 571c 232F0000 		_DOLIT	4
ARM GAS  forth.s 			page 191


 4221      04000000 
 4222 5724 4D430000 		_ADR	UDOTR			// display address
 4223 5728 232F0000 		_DOLIT  0         // don't show base char 
 4223      00000000 
 4224 5730 31360000 		_ADR    BCHR
 4225 5734 AD300000 		_ADR    DUPP
 4226 5738 B92F0000 		_ADR    AT 
 4227 573c 29300000 		_ADR    TOR      // save original value of BCHAR 
 4228 5740 A52F0000 		_ADR    STORE 
 4229 5744 A1410000 		_ADR	SPACE
 4230 5748 29300000 		_ADR	TOR			// start count down loop
 4231 574c 8B2F0000 		_BRAN	PDUM2			// skip first pass
 4231      6C570000 
 4232              	PDUM1:
 4233 5754 AD300000 	    _ADR	DUPP
 4234 5758 D92F0000 		_ADR	CAT
 4235 575c 232F0000 		_DOLIT	3
 4235      03000000 
 4236 5764 4D430000 		_ADR	UDOTR			// display numeric data
 4237 5768 09320000 		_ADR	ONEP			// increment address
 4238              	PDUM2:
 4239 576c 452F0000 	    _ADR	DONXT
 4240 5770 54570000 		.word	PDUM1	// loop till done
 4241 5774 E52F0000 		_ADR    RFROM   // restore BCHAR value 
 4242 5778 31360000 		_ADR    BCHR 
 4243 577c A52F0000 		_ADR    STORE 
 4244 5780 FF2C0000 		_UNNEST
 4245              		.p2align 2 
 4246              	//    DUMP	( a u -- )
 4247              	// 	Dump u bytes from a, in a formatted manner.
 4248              	
 4249              	/**********************
 4250              		DUMP ( a n -- )
 4251              		hex dump memory 
 4252              	*********************/
 4253 5784 E4560000 		_HEADER DUMP,4,"DUMP"
 4253      0444554D 
 4253      500000BF 
 4254 5790 504700BF 		_NEST
 4255 5794 232F0000 		_DOLIT  15 
 4255      0F000000 
 4256 579c AD310000 		_ADR    PLUS 
 4257 57a0 232F0000 		_DOLIT  0xFFFFFFF0 
 4257      F0FFFFFF 
 4258 57a8 2D310000 		_ADR    ANDD 
 4259 57ac BD300000 		_ADR    SWAP 
 4260 57b0 232F0000 		_DOLIT  0xFFFFFFFC
 4260      FCFFFFFF 
 4261 57b8 2D310000 		_ADR    ANDD 
 4262 57bc BD300000 		_ADR    SWAP 
 4263 57c0 19360000 		_ADR	BASE
 4264 57c4 B92F0000 		_ADR	AT
 4265 57c8 29300000 		_ADR	TOR
 4266 57cc 053F0000 		_ADR	HEX			// save radix,set hex
 4267 57d0 232F0000 		_DOLIT	16
 4267      10000000 
 4268 57d8 853A0000 		_ADR	SLASH			// change count to lines
ARM GAS  forth.s 			page 192


 4269 57dc 29300000 		_ADR	TOR
 4270 57e0 8B2F0000 		_BRAN	DUMP4			// start count down loop
 4270      10580000 
 4271              	DUMP1:
 4272 57e8 29420000 	    _ADR	CR
 4273 57ec 232F0000 		_DOLIT	16
 4273      10000000 
 4274 57f4 21330000 		_ADR	DDUP
 4275 57f8 15570000 		_ADR	DMP			// display numeric
 4276 57fc D1320000 		_ADR	ROT
 4277 5800 D1320000 		_ADR	ROT
 4278 5804 A1410000 		_ADR	SPACE
 4279 5808 A1410000 		_ADR	SPACE
 4280 580c F5410000 		_ADR	TYPEE			// display printable characters
 4281              	DUMP4:
 4282 5810 452F0000 	  _DONXT	DUMP1	// loop till done
 4282      E8570000 
 4283              	DUMP3:
 4284 5818 9D300000 		_ADR	DROP
 4285 581c E52F0000 		_ADR	RFROM
 4286 5820 19360000 		_ADR	BASE
 4287 5824 A52F0000 		_ADR	STORE			// restore radix
 4288 5828 FF2C0000 		_UNNEST
 4289              	
 4290              	/*******************************
 4291              	   TRACE. display in hexadecimal
 4292              	   TRACE. use a different buffer 
 4293              	   than DOT  to avoid current 
 4294              	   display overwrite.
 4295              	*******************************/ 
 4296              	TDOT: // ( u -- )
 4297 582c 504700BF 		_NEST 
 4298 5830 19360000 		_ADR BASE 
 4299 5834 B92F0000 		_ADR AT 
 4300 5838 29300000 		_ADR TOR
 4301 583c 053F0000 		_ADR HEX  
 4302 5840 AD360000 		_ADR HLD 
 4303 5844 B92F0000 		_ADR AT 
 4304 5848 29300000 		_ADR TOR   // R: base *hold 
 4305 584c E53B0000 		_ADR HERE 
 4306 5850 232F0000 		_DOLIT 160 
 4306      A0000000 
 4307 5858 AD310000 		_ADR PLUS
 4308 585c AD300000 		_ADR DUPP 
 4309 5860 29300000 		_ADR TOR  
 4310 5864 AD360000 		_ADR HLD 
 4311 5868 A52F0000 		_ADR STORE
 4312 586c 232F0000 		_DOLIT 0  
 4312      00000000 
 4313 5874 553E0000 		_ADR DIGS  
 4314 5878 9D300000 		_ADR DROP
 4315 587c 232F0000 		_DOLIT '$'
 4315      24000000 
 4316 5884 093E0000 		_ADR HOLD 
 4317 5888 AD360000 		_ADR HLD 
 4318 588c B92F0000 		_ADR AT
 4319 5890 E52F0000 		_ADR RFROM   
ARM GAS  forth.s 			page 193


 4320 5894 ED300000 		_ADR OVER 
 4321 5898 BD310000 		_ADR SUBB 
 4322 589c A1410000 		_ADR SPACE 
 4323 58a0 F5410000 		_ADR TYPEE 
 4324 58a4 E52F0000 		_ADR RFROM 
 4325 58a8 AD360000 		_ADR HLD 
 4326 58ac A52F0000 		_ADR STORE 
 4327 58b0 E52F0000 		_ADR RFROM 
 4328 58b4 19360000 		_ADR BASE 
 4329 58b8 A52F0000 		_ADR STORE 
 4330 58bc FF2C0000 		_UNNEST 
 4331              	
 4332              	/**********************
 4333              	   .S	  ( ... -- ... )
 4334              	 	Display the contents 
 4335              		of the data stack.
 4336              	*************************/
 4337 58c0 88570000 		_HEADER DOTS,2,".S"
 4337      022E5300 
 4338 58c8 504700BF 		_NEST
 4339 58cc 8D3B0000 		_ADR	DEPTH	// stack depth
 4340 58d0 29300000 		_ADR	TOR		// start count down loop
 4341 58d4 8B2F0000 		_BRAN	DOTS2  // skip first pass
 4341      E8580000 
 4342              	DOTS1:
 4343 58dc 15300000 		_ADR	RAT
 4344 58e0 B13B0000 		_ADR	PICK
 4345 58e4 2D580000 		_ADR	TDOT // index stack, display contents
 4346              	DOTS2:
 4347 58e8 452F0000 		_DONXT	DOTS1 // loop till done
 4347      DC580000 
 4348 58f0 29420000 		_ADR	CR 
 4349 58f4 FF2C0000 		_UNNEST
 4350              	
 4351              	RBASE: 
 4352 58f8 47F8046D 		_PUSH 
 4353 58fc 4FF68076 		_MOV32 TOS,RPP 
 4353      C2F20106 
 4354 5904 FDF7F8B9 		_NEXT 
 4355              	
 4356              	
 4357              	/**************************
 4358              	  R.  display return stack 
 4359              	**************************/
 4360              	RDOT: 
 4361 5908 504700BF 		_NEST 
 4362 590c F9580000 		_ADR RBASE
 4363 5910 89300000 		_ADR RPAT 
 4364 5914 BD310000 		_ADR SUBB
 4365 5918 8D320000 		_ADR CELLSL   
 4366 591c 232F0000 		_DOLIT 2
 4366      02000000 
 4367 5924 BD310000 		_ADR SUBB 
 4368 5928 29300000 		_ADR TOR
 4369 592c F9580000 		_ADR RBASE 
 4370 5930 59320000 	1:	_ADR CELLM 
 4371 5934 AD300000 		_ADR DUPP 
ARM GAS  forth.s 			page 194


 4372 5938 B92F0000 		_ADR AT 
 4373 593c 2D580000 		_ADR TDOT 
 4374 5940 E52F0000 		_ADR RFROM   
 4375 5944 19320000 		_ADR ONEM 
 4376 5948 AD300000 		_ADR DUPP
 4377 594c 29300000 		_ADR TOR 
 4378 5950 25340000 		_ADR ZEQUAL   
 4379 5954 632F0000 		_QBRAN 1b
 4379      30590000 
 4380 595c E52F0000 		_ADR RFROM  
 4381 5960 F9320000 		_ADR DDROP
 4382 5964 29420000 		_ADR CR   
 4383 5968 FF2C0000 		_UNNEST 
 4384              	
 4385              	/**************************
 4386              		TRACE ( -- )
 4387              		display stacks content 
 4388              	**************************/
 4389 596c C4580000 		_HEADER TRACE,5,"TRACE"
 4389      05545241 
 4389      434500BF 
 4390 5978 504700BF 		_NEST
 4391 597c 29420000 		_ADR CR 
 4392 5980 232F0000 		_DOLIT '>' 
 4392      3E000000 
 4393 5988 232F0000 		_DOLIT 'S'
 4393      53000000 
 4394 5990 C12D0000 		_ADR EMIT 
 4395 5994 C12D0000 		_ADR EMIT  
 4396 5998 C9580000 		_ADR DOTS
 4397 599c 232F0000 		_DOLIT '>'
 4397      3E000000 
 4398 59a4 232F0000 		_DOLIT 'R'
 4398      52000000 
 4399 59ac C12D0000 		_ADR EMIT 
 4400 59b0 C12D0000 		_ADR EMIT 
 4401 59b4 09590000 		_ADR RDOT 
 4402 59b8 FF2C0000 		_UNNEST 
 4403              	
 4404              	
 4405              	/****************************
 4406              	  >BODY  ( xt -- adr )
 4407              	  get parameter field address
 4408              	  from code field address 
 4409              	****************************/
 4410 59bc 70590000 		_HEADER TOBODY,5,">BODY"
 4410      053E424F 
 4410      445900BF 
 4411 59c8 06F10806 		add TOS,#8 
 4412 59cc FDF794B9 		_NEXT 		
 4413              	
 4414              	/*****************************
 4415              	    >NAME	( ca -- na | F )
 4416              	 	Convert code address 
 4417              		to a name address.
 4418              	*****************************/
 4419 59d0 C0590000 		_HEADER TNAME,5,">NAME"
ARM GAS  forth.s 			page 195


 4419      053E4E41 
 4419      4D4500BF 
 4420 59dc 504700BF 		_NEST
 4421 59e0 29300000 		_ADR	TOR			//  
 4422 59e4 C5360000 		_ADR	CNTXT			//  va
 4423 59e8 B92F0000 		_ADR	AT			//  na
 4424              	TNAM1:
 4425 59ec AD300000 		_ADR	DUPP			//  na na
 4426 59f0 632F0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4426      205A0000 
 4427 59f8 AD300000 		_ADR	DUPP			//  na na
 4428 59fc 1D470000 		_ADR	NAMET			//  na ca
 4429 5a00 15300000 		_ADR	RAT			//  na ca code
 4430 5a04 55310000 		_ADR	XORR			//  na f --
 4431 5a08 632F0000 		_QBRAN	TNAM2
 4431      205A0000 
 4432 5a10 59320000 		_ADR	CELLM			//  la 
 4433 5a14 B92F0000 		_ADR	AT			//  next_na
 4434 5a18 8B2F0000 		_BRAN	TNAM1
 4434      EC590000 
 4435              	TNAM2:	
 4436 5a20 E52F0000 		_ADR	RFROM
 4437 5a24 9D300000 		_ADR	DROP			//  0|na --
 4438 5a28 FF2C0000 		_UNNEST			// 0
 4439              	
 4440              	/********************************
 4441              	    .ID	 ( na -- )
 4442              	 	Display the name at address.
 4443              	********************************/
 4444 5a2c D4590000 		_HEADER DOTID,3,".ID"
 4444      032E4944 
 4445 5a34 504700BF 		_NEST
 4446 5a38 BD320000 		_ADR	QDUP			// if zero no name
 4447 5a3c 632F0000 		_QBRAN	DOTI1
 4447      5C5A0000 
 4448 5a44 4D350000 		_ADR	COUNT
 4449 5a48 232F0000 		_DOLIT	0x1F
 4449      1F000000 
 4450 5a50 2D310000 		_ADR	ANDD			// mask lexicon bits
 4451 5a54 F5410000 		_ADR	TYPEE
 4452 5a58 FF2C0000 		_UNNEST			// display name string
 4453              	DOTI1:
 4454 5a5c 85420000 		_DOTQP	9," {noName}"
 4454      09207B6E 
 4454      6F4E616D 
 4454      657D00BF 
 4455 5a6c FF2C0000 		_UNNEST
 4456              	
 4457              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4458              	.if WANT_SEE 
 4459              	/*******************************
 4460              	    SEE	 ( -- //  string> )
 4461              	 	A simple decompiler.
 4462              	*******************************/
 4463              		_HEADER SEE,3,"SEE"
 4464              		_NEST
 4465              		_ADR	TICK	//  ca --, starting address
ARM GAS  forth.s 			page 196


 4466              		_ADR	CR	
 4467              		_DOLIT	20
 4468              		_ADR	TOR
 4469              	SEE1:
 4470              		_ADR	CELLP			//  a
 4471              		_ADR	DUPP			//  a a
 4472              		_ADR	DECOMP		//  a
 4473              		_DONXT	SEE1
 4474              		_ADR	DROP
 4475              		_UNNEST
 4476              	
 4477              	/*************************
 4478              	 	DECOMPILE ( a -- )
 4479              	 	Convert code in a.  
 4480              		Display name of command or as data.
 4481              	*************************************/
 4482              		_HEADER DECOMP,9,"DECOMPILE"
 4483              		_NEST
 4484              		_ADR	DUPP			//  a a
 4485              	// 	_ADR	TOR			//  a
 4486              		_ADR	AT			//  a code
 4487              		_ADR	DUPP			//  a code code
 4488              		_DOLIT	0xF800D000 //0xF800F800
 4489              		_ADR	ANDD
 4490              		_DOLIT	0xF000D000 //0xF800F000
 4491              		_ADR	EQUAL			//  a code ?
 4492              		_ADR	INVER 
 4493              		_QBRAN	DECOM2	//  not a command
 4494              		//  a valid_code --, extract address and display name
 4495              		MOVW	IP,#0xFFE
 4496              		MOV	WP,TOS
 4497              		LSL	TOS,TOS,#21		//  get bits 22-12
 4498              		ASR	TOS,TOS,#9		//  with sign extension
 4499              		LSR	WP,WP,#15		//  get bits 11-1
 4500              		AND	WP,WP,IP		//  retain only bits 11-1
 4501              		ORR	TOS,TOS,WP		//  get bits 22-1
 4502              		NOP
 4503              		_ADR	OVER			//  a offset a
 4504              		_ADR	PLUS			//  a target-4
 4505              		_ADR	CELLP			//  a target
 4506              		_ADR	TNAME			//  a na/0 --, is it a name?
 4507              		_ADR	QDUP			//  name address or zero
 4508              		_QBRAN	DECOM1
 4509              		_ADR	SPACE			//  a na
 4510              		_ADR	DOTID			//  a --, display name
 4511              	// 	_ADR	RFROM			//  a
 4512              		_ADR	DROP
 4513              		_UNNEST
 4514              	DECOM1:	// _ADR	RFROM		//  a
 4515              		_ADR	AT			//  data
 4516              		_ADR	UDOT			//  display data
 4517              		_UNNEST
 4518              	DECOM2:
 4519              		_ADR	UDOT
 4520              	// 	_ADR	RFROM
 4521              		_ADR	DROP
 4522              		_UNNEST
ARM GAS  forth.s 			page 197


 4523              	.endif 
 4524              	
 4525              	
 4526              	/*********************
 4527              	    WORDS	( -- )
 4528              	 	Display the names 
 4529              		in the context vocabulary.
 4530              	*******************************/
 4531 5a70 305A0000 		_HEADER WORDS,5,"WORDS"
 4531      05574F52 
 4531      445300BF 
 4532 5a7c 504700BF 		_NEST
 4533 5a80 29420000 		_ADR	CR
 4534 5a84 C5360000 		_ADR	CNTXT
 4535 5a88 B92F0000 		_ADR	AT			// only in context
 4536              	WORS1:
 4537 5a8c BD320000 		_ADR	QDUP			// ?at end of list
 4538 5a90 632F0000 		_QBRAN	WORS2
 4538      B45A0000 
 4539 5a98 AD300000 		_ADR	DUPP
 4540 5a9c A1410000 		_ADR	SPACE
 4541 5aa0 355A0000 		_ADR	DOTID			// display a name
 4542 5aa4 59320000 		_ADR	CELLM
 4543 5aa8 B92F0000 		_ADR	AT
 4544 5aac 8B2F0000 		_BRAN	WORS1
 4544      8C5A0000 
 4545              	WORS2:
 4546 5ab4 FF2C0000 		_UNNEST
 4547              	
 4548              	
 4549              	/*************************
 4550              		MARK <string> ( -- )
 4551              	    create forget point 
 4552              		in dictionary 
 4553              	*************************/	
 4554 5ab8 745A0000 		_HEADER MARK,4,"MARK"
 4554      044D4152 
 4554      4B0000BF 
 4555 5ac4 504700BF 		_NEST
 4556 5ac8 BD560000 		_ADR CREAT 
 4557 5acc B1550000 		_ADR DODOES 
 4558 5ad0 FF2C0000 		_UNNEST
 4559 5ad4 504700BF 		_NEST  
 4560 5ad8 E52F0000 		_ADR RFROM 
 4561 5adc 232F0000 		_DOLIT 8
 4561      08000000 
 4562 5ae4 BD310000 		_ADR SUBB
 4563 5ae8 DD590000 		_ADR TNAME
 4564 5aec 59320000 		_ADR CELLM
 4565 5af0 B92F0000 		_ADR AT  
 4566 5af4 05370000 		_ADR LAST 
 4567 5af8 A52F0000 		_ADR STORE 
 4568 5afc 89540000 		_ADR OVERT
 4569 5b00 FF2C0000 		_UNNEST 
 4570              	
 4571              	/*********************************
 4572              		ARRAY "name" ( n -- )
ARM GAS  forth.s 			page 198


 4573              	    create an array of n elements 
 4574              	*********************************/
 4575 5b04 BC5A0000 		_HEADER ARRAY,5,"ARRAY"
 4575      05415252 
 4575      415900BF 
 4576 5b10 504700BF 		_NEST 
 4577 5b14 FD460000 		_ADR	TOKEN
 4578 5b18 8D530000 		_ADR	SNAME
 4579 5b1c 89540000 		_ADR	OVERT
 4580 5b20 092D0000 		_ADR	COMPI_NEST
 4581 5b24 232F0000 		_DOLIT	DO_ARRAY
 4581      505B0000 
 4582 5b2c F5540000 		_ADR	CALLC
 4583 5b30 232F0000 		_DOLIT	UNNEST 
 4583      FE2C0000 
 4584 5b38 F5540000 		_ADR	CALLC  
 4585 5b3c 232F0000 		_DOLIT  4 
 4585      04000000 
 4586 5b44 CD310000 		_ADR    STAR 
 4587 5b48 C14E0000 		_ADR    ALLOT 
 4588 5b4c FF2C0000 		_UNNEST 	
 4589              	
 4590              	// does> du array
 4591              	DO_ARRAY:
 4592 5b50 504700BF 		_NEST  
 4593 5b54 232F0000 		_DOLIT 4 
 4593      04000000 
 4594 5b5c CD310000 		_ADR STAR  
 4595 5b60 15300000 		_ADR RAT  
 4596 5b64 49320000 		_ADR CELLP 
 4597 5b68 AD310000 		_ADR PLUS  
 4598 5b6c FF2C0000 		_UNNEST 
 4599              	
 4600              	
 4601              	/****************
 4602              	  cold start
 4603              	*****************/
 4604              	
 4605              	/**********************************
 4606              	    VER	 ( -- n )
 4607              	 	Return the version 
 4608              		number of this implementation.
 4609              	hidden word used by COLD
 4610              	**********************************/
 4611              	VERSN:
 4612 5b70 504700BF 		_NEST
 4613 5b74 232F0000 		_DOLIT	VER*256+EXT
 4613      00010000 
 4614 5b7c FF2C0000 		_UNNEST
 4615              	
 4616              	/*********************
 4617              	    hi	  ( -- )
 4618              	 	Display the sign-on 
 4619              		message.
 4620              	***********************/
 4621 5b80 085B0000 		_HEADER HI,2,"HI"
 4621      02484900 
ARM GAS  forth.s 			page 199


 4622 5b88 504700BF 		_NEST
 4623 5b8c 29420000 		_ADR	CR	// initialize I/O
 4624 5b90 85420000 		_DOTQP	17, "beyond Jupiter, v" 
 4624      11626579 
 4624      6F6E6420 
 4624      4A757069 
 4624      7465722C 
 4625 5ba8 19360000 		_ADR	BASE
 4626 5bac B92F0000 		_ADR	AT
 4627 5bb0 053F0000 		_ADR	HEX	// save radix
 4628 5bb4 715B0000 		_ADR	VERSN
 4629 5bb8 E93D0000 		_ADR	BDIGS
 4630 5bbc 232F0000 		_DOLIT  0 
 4630      00000000 
 4631 5bc4 353E0000 		_ADR	DIG
 4632 5bc8 353E0000 		_ADR	DIG
 4633 5bcc 232F0000 		_DOLIT	'.'
 4633      2E000000 
 4634 5bd4 093E0000 		_ADR	HOLD
 4635 5bd8 553E0000 		_ADR	DIGS
 4636 5bdc B13E0000 		_ADR	EDIGS
 4637 5be0 F5410000 		_ADR	TYPEE	// format version number
 4638 5be4 19360000 		_ADR	BASE
 4639 5be8 A52F0000 		_ADR	STORE
 4640 5bec 29420000 		_ADR	CR
 4641 5bf0 FF2C0000 		_UNNEST			// restore radix
 4642              	
 4643              	/***********************
 4644              	   HI_BOTH ( -- )
 4645              	   display sign-on 
 4646              	   on both CONSOLE
 4647              	***********************/
 4648              	HI_BOTH:
 4649 5bf4 504700BF 	    _NEST 
 4650 5bf8 450A0000 		_ADR LOCAL 
 4651 5bfc 750A0000 		_ADR CONSOLE 
 4652 5c00 895B0000 		_ADR HI 
 4653 5c04 5D0A0000 		_ADR SERIAL 
 4654 5c08 750A0000 		_ADR CONSOLE 
 4655 5c0c 895B0000 		_ADR HI
 4656 5c10 FF2C0000 		_UNNEST 
 4657              	
 4658              	/**********************
 4659              	 check if PS2 keyboard 
 4660              	 present.
 4661              	**********************/
 4662              	PS2_QUERY: 
 4663 5c14 504700BF 		_NEST 
 4664 5c18 232F0000 		_DOLIT 400 
 4664      90010000 
 4665 5c20 592E0000 		_ADR PAUSE
 4666 5c24 65180000 		_ADR PS2_QKEY
 4667 5c28 632F0000 		_QBRAN 1f
 4667      445C0000 
 4668 5c30 232F0000 		_DOLIT BAT_OK 
 4668      AA000000 
 4669 5c38 55310000 		_ADR XORR 
ARM GAS  forth.s 			page 200


 4670 5c3c 632F0000 		_QBRAN 9f 
 4670      885C0000 
 4671 5c44 4D1A0000 	1:	_ADR KBD_RST
 4672 5c48 232F0000 		_DOLIT BAT_OK 
 4672      AA000000 
 4673 5c50 55310000 		_ADR XORR  
 4674 5c54 632F0000 		_QBRAN 9f  
 4674      885C0000 
 4675              	// no ps2 keyboard 
 4676              	// swith to serial console
 4677 5c5c 29420000 		_ADR CR 
 4678 5c60 85420000 		_DOTQP 25,"no PS2 keyboard detected."
 4678      196E6F20 
 4678      50533220 
 4678      6B657962 
 4678      6F617264 
 4679 5c80 5D0A0000 		_ADR SERIAL 
 4680 5c84 750A0000 		_ADR CONSOLE 
 4681 5c88 FF2C0000 	9:	_UNNEST 
 4682              	
 4683              	/*************************
 4684              	   check PA8 to 
 4685              	   select console 
 4686              	   PA8 -> low  LOCAL 
 4687              	   PA8 -> high SERIAL 
 4688              	*************************/
 4689              	IF_SENSE:
 4690 5c8c 504700BF 		_NEST 
 4691 5c90 450A0000 		_ADR LOCAL 
 4692 5c94 232F0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4692      10000240 
 4693 5c9c B92F0000 		_ADR AT 
 4694 5ca0 232F0000 		_DOLIT (1<<8)
 4694      00010000 
 4695 5ca8 2D310000 		_ADR ANDD 
 4696 5cac 632F0000 		_QBRAN 9f 
 4696      B85C0000 
 4697 5cb4 09320000 		_ADR ONEP 
 4698 5cb8 750A0000 	9:  _ADR CONSOLE 
 4699 5cbc FF2C0000 		_UNNEST 
 4700              	
 4701              	/****************************
 4702              	   display READY on active
 4703              	   console
 4704              	***************************/
 4705              	READY:
 4706 5cc0 504700BF 	    _NEST 
 4707 5cc4 85420000 		_DOTQP 5,"READY"
 4707      05524541 
 4707      445900BF 
 4708 5cd0 29420000 		_ADR  CR 
 4709 5cd4 FF2C0000 	    _UNNEST 
 4710              	
 4711              	/********************
 4712              	    COLD	( -- )
 4713              	 	The high level cold 
 4714              		start sequence.
ARM GAS  forth.s 			page 201


 4715              	**************************/
 4716 5cd8 845B0000 		.word	LINK 
 4717              		LINK = . 
 4718 5cdc 04       	_LASTN:	.byte  4
 4719 5cdd 434F4C44 		.ascii "COLD"
 4720 5ce1 0000BF   		.p2align 2	
 4721              	COLD:
 4722 5ce4 00B5FAF7 		_CALL forth_init 
 4722      27FC5DF8 
 4722      04EB
 4723 5cee DFF85CC0 		ldr IP,=COLD1 
 4724 5cf2 FDF701B8 		_NEXT
 4725 5cf6 00BF     		.p2align 2 
 4726              	COLD1:
 4727 5cf8 232F0000 		_DOLIT  0 
 4727      00000000 
 4728 5d00 8D2E0000 		_ADR ULED // turn off user LED 
 4729 5d04 232F0000 		_DOLIT	UZERO
 4729      64080000 
 4730 5d0c 232F0000 		_DOLIT	UPP
 4730      00000020 
 4731 5d14 232F0000 		_DOLIT	ULAST-UZERO
 4731      C0000000 
 4732 5d1c C13C0000 		_ADR	MOVE 			// initialize user area
 4733 5d20 594D0000 		_ADR	PRESE			// initialize stack and TIB
 4734 5d24 F91C0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4735 5d28 155C0000 		_ADR 	PS2_QUERY  
 4736 5d2c 01360000 		_ADR	TBOOT
 4737 5d30 713C0000 		_ADR	ATEXE			// application boot
 4738 5d34 89540000 		_ADR	OVERT
 4739 5d38 8D5C0000 		_ADR	IF_SENSE
 4740 5d3c C15C0000 		_ADR    READY 
 4741 5d40 8B2F0000 		_BRAN	QUIT			// start interpretation
 4741      944D0000 
 4742              	COLD2:
 4743              		.p2align 2 	
 4744              	CTOP:
 4745 5d48 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4746              	
 4747              	
 4748 5d4c F85C0000 	  .end 
ARM GAS  forth.s 			page 202


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 203


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 204


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 205


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 206


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 207


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:48     *ABS*:000000002001ff80 RPP
          macros.inc:49     *ABS*:000000002001feb0 TIBB
          macros.inc:50     *ABS*:0000000000000050 TIB_SIZE
          macros.inc:51     *ABS*:000000002001feb0 SPP
          macros.inc:52     *ABS*:0000000020018130 VID_BUFF
          macros.inc:53     *ABS*:0000000020000000 UPP
          macros.inc:54     *ABS*:0000000020000512 DTOP
          macros.inc:55     *ABS*:000000002001812c DEND
          macros.inc:56     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:58     *ABS*:0000000000000040 COMPO
          macros.inc:59     *ABS*:0000000000000080 IMEDD
          macros.inc:60     *ABS*:00000000ffffff1f MASKK
          macros.inc:62     *ABS*:0000000000000004 CELLL
          macros.inc:63     *ABS*:000000000000000a BASEE
          macros.inc:64     *ABS*:0000000000000008 VOCSS
          macros.inc:66     *ABS*:0000000000000008 BKSPP
          macros.inc:67     *ABS*:000000000000000a LF
          macros.inc:68     *ABS*:000000000000000d CRR
          macros.inc:69     *ABS*:000000000000001b ERR
          macros.inc:70     *ABS*:0000000000000027 TIC
          macros.inc:75     *ABS*:0000000000000004 RNDSEED
          macros.inc:76     *ABS*:0000000000000008 TICKS
          macros.inc:77     *ABS*:000000000000000c CD_TIMER
          macros.inc:78     *ABS*:0000000000000010 BOOT
          macros.inc:79     *ABS*:0000000000000014 STDIN
          macros.inc:80     *ABS*:0000000000000018 STDOUT
          macros.inc:81     *ABS*:000000000000001c NBASE
          macros.inc:82     *ABS*:0000000000000020 BCHAR
          macros.inc:83     *ABS*:0000000000000024 TMP
          macros.inc:84     *ABS*:0000000000000028 CSPAN
ARM GAS  forth.s 			page 208


          macros.inc:85     *ABS*:000000000000002c TOIN
          macros.inc:86     *ABS*:0000000000000030 SRC
          macros.inc:87     *ABS*:0000000000000030 NTIBB
          macros.inc:88     *ABS*:0000000000000034 TIBUF
          macros.inc:89     *ABS*:0000000000000038 SRCID
             forth.s:3297   .text:0000000000004c70 EVAL
          macros.inc:91     *ABS*:0000000000000040 VHOLD
          macros.inc:92     *ABS*:0000000000000044 CTXT
          macros.inc:93     *ABS*:0000000000000048 FORTH_CTOP
          macros.inc:94     *ABS*:000000000000004c USER_CTOP
          macros.inc:95     *ABS*:0000000000000050 LASTN
          macros.inc:96     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:97     *ABS*:0000000000000054 RX_QUEUE
          macros.inc:98     *ABS*:0000000000000064 RX_HEAD
          macros.inc:99     *ABS*:0000000000000068 RX_TAIL
          macros.inc:100    *ABS*:000000000000006c VID_CNTR
          macros.inc:101    *ABS*:0000000000000070 VID_STATE
          macros.inc:102    *ABS*:0000000000000074 VID_FIELD
          macros.inc:103    *ABS*:0000000000000078 VID_BUFFER
          macros.inc:104    *ABS*:000000000000007c KBD_STRUCT
          macros.inc:105    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:106    *ABS*:0000000000000080 KBD_QUEUE
          macros.inc:107    *ABS*:0000000000000090 KBD_QHEAD
          macros.inc:108    *ABS*:0000000000000094 KBD_QTAIL
          macros.inc:109    *ABS*:0000000000000098 ROW
          macros.inc:110    *ABS*:000000000000009c COL
          macros.inc:111    *ABS*:00000000000000a0 BK_COLOR
          macros.inc:112    *ABS*:00000000000000a4 PEN_COLOR
          macros.inc:113    *ABS*:00000000000000a8 VFPSW
          macros.inc:114    *ABS*:00000000000000ac VFBASE
          macros.inc:115    *ABS*:00000000000000b0 BEEP_DTMR
          macros.inc:116    *ABS*:00000000000000b4 CSTATE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000c6c tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000950 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001548 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002cf8 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3361   .text:0000000000004d58 PRESE
             forth.s:2465   .text:0000000000004284 DOTQP
              init.s:162    .text:0000000000000032 $t
ARM GAS  forth.s 			page 209


              init.s:163    .text:0000000000000034 $d
             forth.s:133    .text:0000000000002d44 CFSR
             forth.s:543    .text:00000000000030ac DUPP
             forth.s:478    .text:0000000000003028 TOR
             forth.s:326    .text:0000000000002f22 DOLIT
             forth.s:1208   .text:0000000000003618 BASE
             forth.s:412    .text:0000000000002fa4 STORE
             forth.s:2549   .text:0000000000004380 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:449    .text:0000000000002fe4 RFROM
             forth.s:607    .text:000000000000312c ANDD
             forth.s:367    .text:0000000000002f62 QBRAN
             forth.s:145    .text:0000000000002d64 BFAR
             forth.s:179    .text:0000000000002dc0 EMIT
             forth.s:2371   .text:00000000000041a0 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:0000000000002050 FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2417   .text:0000000000004228 CR
             forth.s:422    .text:0000000000002fb8 AT
             forth.s:673    .text:00000000000031bc SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2567   .text:00000000000043b4 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:803    .text:00000000000032bc QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:664    .text:00000000000031ac PLUS
             forth.s:1110   .text:000000000000354c COUNT
             forth.s:2399   .text:00000000000041f4 TYPEE
             forth.s:947    .text:00000000000033f4 CLZ
             forth.s:551    .text:00000000000030bc SWAP
             forth.s:655    .text:000000000000319c LSHIFT
               fpu.s:123    .text:0000000000002070 CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3377   .text:0000000000004d94 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
ARM GAS  forth.s 			page 210


              init.s:311    .text:0000000000000294 $d
             forth.s:3170   .text:0000000000004af8 ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:262    .text:0000000000002e8c ULED
             forth.s:1181   .text:00000000000035d0 MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:646    .text:0000000000003184 RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:0000000000001ff2 fpu_init
          ser-term.s:56     .text:000000000000097e ser_init
             tvout.s:74     .text:0000000000000bbc tv_init
           ps2_kbd.s:307    .text:0000000000001768 kbd_init
         spi-flash.s:41     .text:0000000000001b7c flash_spi_init
             forth.s:4721   .text:0000000000005ce4 COLD
             forth.s:83     .text:0000000000002cf0 NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:910    .text:0000000000000924 ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:4648   .text:0000000000005bf4 HI_BOTH
           ps2_kbd.s:396    .text:0000000000001864 PS2_QKEY
             tvout.s:563    .text:000000000000112c TV_EMIT
ARM GAS  forth.s 			page 211


             forth.s:3231   .text:0000000000004b7c INTER
             forth.s:4718   .text:0000000000005cdc _LASTN
             forth.s:4744   .text:0000000000005d48 CTOP
             forth.s:4717   .text:0000000000005cdc LINK
              init.s:915    .text:0000000000000924 $d
          ser-term.s:33     .text:0000000000000950 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:00000000000009d6 $d
          ser-term.s:90     .text:00000000000009da _SER_QKEY
          ser-term.s:90     .text:00000000000009e4 SER_QKEY
          ser-term.s:110    .text:0000000000000a10 $d
          ser-term.s:110    .text:0000000000000a14 _SER_EMIT
          ser-term.s:110    .text:0000000000000a20 SER_EMIT
          ser-term.s:124    .text:0000000000000a3a $d
          ser-term.s:124    .text:0000000000000a3e _LOCAL
          ser-term.s:124    .text:0000000000000a44 $t
          ser-term.s:124    .text:0000000000000a44 LOCAL
          ser-term.s:133    .text:0000000000000a50 $d
          ser-term.s:133    .text:0000000000000a54 _SERIAL
          ser-term.s:133    .text:0000000000000a5c SERIAL
          ser-term.s:142    .text:0000000000000a68 $d
          ser-term.s:142    .text:0000000000000a6c _CONSOLE
          ser-term.s:142    .text:0000000000000a74 $t
          ser-term.s:142    .text:0000000000000a74 CONSOLE
          ser-term.s:164    .text:0000000000000a94 $d
          ser-term.s:164    .text:0000000000000a98 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000aa4 ANSI_PARAM
          ser-term.s:166    .text:0000000000000aa8 $d
             forth.s:714    .text:0000000000003208 ONEP
             forth.s:1653   .text:0000000000003a4c SLMOD
             forth.s:396    .text:0000000000002f8a BRAN
             forth.s:722    .text:0000000000003218 ONEM
             forth.s:90     .text:0000000000002cfe UNNEST
          ser-term.s:191    .text:0000000000000b14 _ANSI_ESC
          ser-term.s:191    .text:0000000000000b1c ANSI_ESC
          ser-term.s:193    .text:0000000000000b20 $d
          ser-term.s:203    .text:0000000000000b40 _SER_AT
          ser-term.s:203    .text:0000000000000b48 SER_AT
          ser-term.s:205    .text:0000000000000b4c $d
          ser-term.s:219    .text:0000000000000b7c _SER_CLS
          ser-term.s:219    .text:0000000000000b84 $t
          ser-term.s:219    .text:0000000000000b84 SER_CLS
          ser-term.s:221    .text:0000000000000b88 $d
          ser-term.s:228    .text:0000000000000bac $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
ARM GAS  forth.s 			page 212


             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000bbc $t
             tvout.s:150    .text:0000000000000c98 state_vsync
             tvout.s:191    .text:0000000000000cec state_pre_video
             tvout.s:202    .text:0000000000000cfe state_video_out
             tvout.s:237    .text:0000000000000d5c state_post_video
             tvout.s:254    .text:0000000000000d82 tv_isr_exit
             tvout.s:180    .text:0000000000000cd2 sync_end
             tvout.s:246    .text:0000000000000d6e frame_end
             tvout.s:264    .text:0000000000000d84 $d
             tvout.s:264    .text:0000000000000d88 _BACKCOLOR
             tvout.s:264    .text:0000000000000d94 BACKCOLOR
             tvout.s:271    .text:0000000000000da0 $d
             tvout.s:271    .text:0000000000000da4 _PENCOLOR
             tvout.s:271    .text:0000000000000dae $t
             tvout.s:271    .text:0000000000000db0 PENCOLOR
             tvout.s:278    .text:0000000000000dbc $d
             tvout.s:278    .text:0000000000000dc0 _CURSOR_COL
             tvout.s:278    .text:0000000000000dc8 CURSOR_COL
             tvout.s:285    .text:0000000000000dd4 $d
             tvout.s:285    .text:0000000000000dd8 _CURSOR_ROW
             tvout.s:285    .text:0000000000000ddc $t
             tvout.s:285    .text:0000000000000ddc CURSOR_ROW
             tvout.s:292    .text:0000000000000de8 $d
             tvout.s:292    .text:0000000000000dec _ROWY
             tvout.s:292    .text:0000000000000df2 $t
             tvout.s:292    .text:0000000000000df4 ROWY
             tvout.s:299    .text:0000000000000e00 $d
             tvout.s:299    .text:0000000000000e04 _COLX
             tvout.s:299    .text:0000000000000e0a $t
             tvout.s:299    .text:0000000000000e0c COLX
             tvout.s:306    .text:0000000000000e18 $d
             tvout.s:306    .text:0000000000000e1c _FONT
             tvout.s:306    .text:0000000000000e24 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000e30 $d
             tvout.s:313    .text:0000000000000e34 _VIDBUFF
             tvout.s:313    .text:0000000000000e3c $t
             tvout.s:313    .text:0000000000000e3c VIDBUFF
             tvout.s:325    .text:0000000000000e46 $d
             tvout.s:325    .text:0000000000000e4a _PLOT
ARM GAS  forth.s 			page 213


             tvout.s:325    .text:0000000000000e50 PLOT
             tvout.s:373    .text:0000000000000ed4 plot_op
             tvout.s:341    .text:0000000000000e7c op_back
             tvout.s:350    .text:0000000000000e96 op_pen
             tvout.s:359    .text:0000000000000eb0 op_invert
             tvout.s:363    .text:0000000000000eb8 op_xor
             tvout.s:373    .text:0000000000000ed4 $d
             tvout.s:378    .text:0000000000000edc _VSYNC
             tvout.s:378    .text:0000000000000ee2 $t
             tvout.s:378    .text:0000000000000ee4 VSYNC
             tvout.s:386    .text:0000000000000eee $d
             tvout.s:386    .text:0000000000000ef2 _CLS
             tvout.s:386    .text:0000000000000ef6 $t
             tvout.s:386    .text:0000000000000ef8 CLS
             tvout.s:410    .text:0000000000000f3a $d
             tvout.s:410    .text:0000000000000f3e _CLRLINE
             tvout.s:410    .text:0000000000000f46 $t
             tvout.s:410    .text:0000000000000f48 CLRLINE
             tvout.s:412    .text:0000000000000f4c $d
             forth.s:682    .text:00000000000031cc STAR
             forth.s:1947   .text:0000000000003d08 FILL
             tvout.s:427    .text:0000000000000f80 _SCROLLUP
             tvout.s:427    .text:0000000000000f8c SCROLLUP
             tvout.s:429    .text:0000000000000f90 $d
             forth.s:1915   .text:0000000000003cc0 MOVE
             tvout.s:448    .text:0000000000000fd8 _SCROLLDOWN
             tvout.s:448    .text:0000000000000fe4 SCROLLDOWN
             tvout.s:450    .text:0000000000000fe8 $d
             tvout.s:467    .text:0000000000001028 _TV_CRLF
             tvout.s:467    .text:0000000000001030 $t
             tvout.s:467    .text:0000000000001030 TV_CRLF
             tvout.s:482    .text:0000000000001052 $d
             tvout.s:482    .text:0000000000001056 _RIGHT
             tvout.s:482    .text:000000000000105c $t
             tvout.s:482    .text:000000000000105c RIGHT
             tvout.s:495    .text:0000000000001070 $d
             tvout.s:495    .text:0000000000001074 _LEFT
             tvout.s:495    .text:000000000000107c LEFT
             tvout.s:511    .text:00000000000010a8 FONT_PIXEL
             tvout.s:518    .text:00000000000010b8 INCR_X
             tvout.s:525    .text:00000000000010c4 NEXT_PIXEL
             tvout.s:534    .text:00000000000010cc CHAR_ROW
             tvout.s:536    .text:00000000000010d0 $d
             forth.s:853    .text:0000000000003320 DDUP
             forth.s:469    .text:0000000000003014 RAT
             forth.s:348    .text:0000000000002f44 DONXT
             forth.s:844    .text:000000000000330c TDROP
             tvout.s:551    .text:000000000000110c CHAR_FONT
             tvout.s:552    .text:000000000000110c $t
             tvout.s:563    .text:0000000000001120 $d
             tvout.s:563    .text:0000000000001124 _TV_EMIT
             tvout.s:563    .text:000000000000112c $t
             tvout.s:565    .text:0000000000001130 $d
             forth.s:1006   .text:0000000000003470 ULESS
             tvout.s:593    .text:00000000000011b4 CTRL_KEY
             forth.s:813    .text:00000000000032d0 ROT
             forth.s:440    .text:0000000000002fd8 CAT
ARM GAS  forth.s 			page 214


             tvout.s:660    .text:000000000000129c SHOW_CURSOR
             tvout.s:691    .text:0000000000001324 HIDE_CURSOR
             forth.s:981    .text:0000000000003438 EQUAL
             tvout.s:650    .text:000000000000127c BACK_SPACE
             forth.s:535    .text:000000000000309c DROP
             tvout.s:618    .text:0000000000001224 CAR_RET
             tvout.s:629    .text:000000000000123c LN_FEED
             tvout.s:619    .text:0000000000001224 $t
             tvout.s:620    .text:0000000000001228 $d
             tvout.s:630    .text:000000000000123c $t
             tvout.s:631    .text:0000000000001240 $d
             forth.s:625    .text:0000000000003154 XORR
             tvout.s:651    .text:000000000000127c $t
             tvout.s:652    .text:0000000000001280 $d
             tvout.s:660    .text:0000000000001290 _SHOW_CURSOR
             tvout.s:660    .text:000000000000129c $t
             tvout.s:663    .text:00000000000012a0 $d
             forth.s:795    .text:00000000000032ac TWOSL
             forth.s:430    .text:0000000000002fc4 CSTOR
             forth.s:835    .text:00000000000032f8 DDROP
             tvout.s:691    .text:0000000000001318 _HIDE_CURSOR
             tvout.s:691    .text:0000000000001324 $t
             tvout.s:694    .text:0000000000001328 $d
             forth.s:616    .text:0000000000003140 ORR
             tvout.s:704    .text:0000000000001350 _TV_AT
             tvout.s:704    .text:0000000000001356 $t
             tvout.s:704    .text:0000000000001358 TV_AT
             tvout.s:719    .text:000000000000137c $d
             tvout.s:719    .text:0000000000001380 _INPUT
             tvout.s:719    .text:0000000000001386 $t
             tvout.s:719    .text:0000000000001388 INPUT
             tvout.s:721    .text:000000000000138c $d
             forth.s:1835   .text:0000000000003bfc PAD
             forth.s:3116   .text:0000000000004a44 ACCEP
             forth.s:576    .text:00000000000030ec OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:00000000000013b8 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
ARM GAS  forth.s 			page 215


       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
ARM GAS  forth.s 			page 216


       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
ARM GAS  forth.s 			page 217


         mcSaite.inc:7      .text:00000000000013c4 sc_ascii
         mcSaite.inc:100    .text:0000000000001478 shifted
         mcSaite.inc:151    .text:00000000000014d8 altchar
         mcSaite.inc:167    .text:00000000000014e8 extended
         mcSaite.inc:191    .text:0000000000001510 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000007d KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:000000000000007c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007f KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:0000000000001546 $t
           ps2_kbd.s:179    .text:0000000000001672 send_bit
           ps2_kbd.s:107    .text:00000000000015a8 start_bit
           ps2_kbd.s:118    .text:00000000000015cc parity_bit
           ps2_kbd.s:125    .text:00000000000015e0 stop_bit
           ps2_kbd.s:152    .text:0000000000001636 store_code
           ps2_kbd.s:253    .text:0000000000001706 do_async_key
           ps2_kbd.s:204    .text:00000000000016b6 send_parity
           ps2_kbd.s:211    .text:00000000000016c8 send_stop
           ps2_kbd.s:218    .text:00000000000016d2 rx_ack_bit
           ps2_kbd.s:236    .text:00000000000016f2 is_async_key
           ps2_kbd.s:286    .text:0000000000001756 async_keys
           ps2_kbd.s:378    .text:000000000000183c table_scan
           ps2_kbd.s:260    .text:0000000000001718 set_async_key
           ps2_kbd.s:295    .text:0000000000001764 async_jump
           ps2_kbd.s:265    .text:0000000000001726 shift_key
           ps2_kbd.s:273    .text:0000000000001736 set_reset
           ps2_kbd.s:268    .text:000000000000172c ctrl_key
           ps2_kbd.s:271    .text:0000000000001732 alt_key
           ps2_kbd.s:287    .text:0000000000001756 $d
           ps2_kbd.s:340    .text:00000000000017e4 $d
           ps2_kbd.s:340    .text:00000000000017e8 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000017f2 $t
           ps2_kbd.s:340    .text:00000000000017f4 KEY_ASYNC
           ps2_kbd.s:350    .text:0000000000001804 keycode
           ps2_kbd.s:365    .text:000000000000182c wait_code
           ps2_kbd.s:396    .text:0000000000001856 $d
           ps2_kbd.s:396    .text:000000000000185a _PS2_QKEY
           ps2_kbd.s:416    .text:00000000000018b0 inkey_exit
           ps2_kbd.s:418    .text:00000000000018b4 pause_key
           ps2_kbd.s:427    .text:00000000000018ca do_modifiers
           ps2_kbd.s:436    .text:00000000000018e2 shift_down
           ps2_kbd.s:440    .text:00000000000018e8 altchar_down
           ps2_kbd.s:444    .text:00000000000018ee ctrl_down
           ps2_kbd.s:452    .text:000000000000190a do_capslock
           ps2_kbd.s:478    .text:000000000000192e kbd_send
           ps2_kbd.s:553    .text:0000000000001a22 kbd_clear_queue
ARM GAS  forth.s 			page 218


           ps2_kbd.s:567    .text:0000000000001a40 $d
           ps2_kbd.s:567    .text:0000000000001a44 _KBD_RST
           ps2_kbd.s:567    .text:0000000000001a4c $t
           ps2_kbd.s:567    .text:0000000000001a4c KBD_RST
           ps2_kbd.s:591    .text:0000000000001a96 $d
           ps2_kbd.s:591    .text:0000000000001a9a _KBD_LED
           ps2_kbd.s:591    .text:0000000000001aa2 $t
           ps2_kbd.s:591    .text:0000000000001aa4 KBD_LED
           ps2_kbd.s:616    .text:0000000000001af8 $d
           ps2_kbd.s:616    .text:0000000000001afc _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001b08 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001b32 $d
           ps2_kbd.s:633    .text:0000000000001b36 _WKEY
           ps2_kbd.s:633    .text:0000000000001b40 WKEY
           ps2_kbd.s:635    .text:0000000000001b44 $d
           ps2_kbd.s:640    .text:0000000000001b5c $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001b7c $t
         spi-flash.s:85     .text:0000000000001c1e $d
         spi-flash.s:85     .text:0000000000001c22 _CHIP_SEL
         spi-flash.s:85     .text:0000000000001c2c CHIP_SEL
         spi-flash.s:97     .text:0000000000001c4a $d
         spi-flash.s:97     .text:0000000000001c4e _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001c58 $t
         spi-flash.s:97     .text:0000000000001c58 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001c86 $d
         spi-flash.s:113    .text:0000000000001c8a _RD_BYTE
         spi-flash.s:113    .text:0000000000001c92 $t
         spi-flash.s:113    .text:0000000000001c94 RD_BYTE
         spi-flash.s:133    .text:0000000000001cbc $d
         spi-flash.s:133    .text:0000000000001cc0 _WR_BYTE
         spi-flash.s:133    .text:0000000000001cc8 $t
         spi-flash.s:133    .text:0000000000001cc8 WR_BYTE
         spi-flash.s:151    .text:0000000000001cec $d
         spi-flash.s:151    .text:0000000000001cf0 _WR_DIS
         spi-flash.s:151    .text:0000000000001cf8 WR_DIS
         spi-flash.s:153    .text:0000000000001cfc $d
         spi-flash.s:163    .text:0000000000001d18 _WR_ENBL
         spi-flash.s:163    .text:0000000000001d20 $t
         spi-flash.s:163    .text:0000000000001d20 WR_ENBL
         spi-flash.s:165    .text:0000000000001d24 $d
         spi-flash.s:175    .text:0000000000001d40 _RD_SR
         spi-flash.s:175    .text:0000000000001d46 $t
         spi-flash.s:175    .text:0000000000001d48 RD_SR
         spi-flash.s:177    .text:0000000000001d4c $d
         spi-flash.s:185    .text:0000000000001d70 sr_cmd
         spi-flash.s:191    .text:0000000000001d77 _SEND_ADR
         spi-flash.s:191    .text:0000000000001d80 $t
         spi-flash.s:191    .text:0000000000001d80 SEND_ADR
         spi-flash.s:193    .text:0000000000001d84 $d
         spi-flash.s:208    .text:0000000000001db8 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001dc2 $t
         spi-flash.s:208    .text:0000000000001dc4 WAIT_DONE
         spi-flash.s:210    .text:0000000000001dc8 $d
ARM GAS  forth.s 			page 219


         spi-flash.s:223    .text:0000000000001df8 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001e02 $t
         spi-flash.s:223    .text:0000000000001e04 ERASE_BLK
         spi-flash.s:225    .text:0000000000001e08 $d
         spi-flash.s:238    .text:0000000000001e30 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001e3c ERASE_CHIP
         spi-flash.s:240    .text:0000000000001e40 $d
         spi-flash.s:256    .text:0000000000001e70 _RD_BLK
         spi-flash.s:256    .text:0000000000001e78 RD_BLK
         spi-flash.s:258    .text:0000000000001e7c $d
         spi-flash.s:278    .text:0000000000001ec4 _WR_BLK
         spi-flash.s:278    .text:0000000000001ecc WR_BLK
         spi-flash.s:280    .text:0000000000001ed0 $d
             forth.s:2629   .text:000000000000445c HDOT
         spi-flash.s:316    .text:0000000000001f28 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001f34 $t
         spi-flash.s:316    .text:0000000000001f34 SEARCH_FILE
         spi-flash.s:319    .text:0000000000001f38 $d
         spi-flash.s:325    .text:0000000000001f40 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001f4c ERASE_FILE
         spi-flash.s:328    .text:0000000000001f50 $d
         spi-flash.s:334    .text:0000000000001f58 _DIR
         spi-flash.s:334    .text:0000000000001f5c $t
         spi-flash.s:334    .text:0000000000001f5c DIR
         spi-flash.s:337    .text:0000000000001f60 $d
         spi-flash.s:343    .text:0000000000001f68 _SAVE
         spi-flash.s:343    .text:0000000000001f70 SAVE
         spi-flash.s:346    .text:0000000000001f74 $d
         spi-flash.s:352    .text:0000000000001f7c _LOAD
         spi-flash.s:352    .text:0000000000001f84 LOAD
         spi-flash.s:355    .text:0000000000001f88 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000001fb0 p10
               fpu.s:59     .text:0000000000001fdc _PWR10
               fpu.s:59     .text:0000000000001fe2 $t
               fpu.s:59     .text:0000000000001fe4 PWR10
               fpu.s:90     .text:0000000000002010 $d
               fpu.s:90     .text:0000000000002014 _FDI
               fpu.s:90     .text:0000000000002018 $t
               fpu.s:90     .text:0000000000002018 FDI
               fpu.s:100    .text:000000000000202a $d
               fpu.s:100    .text:000000000000202e _FEI
               fpu.s:100    .text:0000000000002032 $t
               fpu.s:100    .text:0000000000002034 FEI
               fpu.s:110    .text:0000000000002046 $d
               fpu.s:110    .text:000000000000204a _FPSCR
               fpu.s:110    .text:0000000000002050 $t
               fpu.s:123    .text:0000000000002060 $d
               fpu.s:123    .text:0000000000002064 _CLR_FPSCR
               fpu.s:123    .text:000000000000206e $t
               fpu.s:136    .text:0000000000002088 $d
               fpu.s:136    .text:000000000000208c _TOS0
               fpu.s:136    .text:0000000000002090 $t
               fpu.s:136    .text:0000000000002090 TOS0
ARM GAS  forth.s 			page 220


               fpu.s:145    .text:000000000000209c $d
               fpu.s:145    .text:00000000000020a0 _TOS1
               fpu.s:145    .text:00000000000020a4 $t
               fpu.s:145    .text:00000000000020a4 TOS1
               fpu.s:154    .text:00000000000020b0 $d
               fpu.s:154    .text:00000000000020b4 _TOS2
               fpu.s:154    .text:00000000000020b8 $t
               fpu.s:154    .text:00000000000020b8 TOS2
               fpu.s:163    .text:00000000000020c4 $d
               fpu.s:163    .text:00000000000020c8 _S0FROM
               fpu.s:163    .text:00000000000020cc $t
               fpu.s:163    .text:00000000000020cc S0FROM
               fpu.s:172    .text:00000000000020d8 $d
               fpu.s:172    .text:00000000000020dc _S1FROM
               fpu.s:172    .text:00000000000020e0 $t
               fpu.s:172    .text:00000000000020e0 S1FROM
               fpu.s:181    .text:00000000000020ec $d
               fpu.s:181    .text:00000000000020f0 _S2FROM
               fpu.s:181    .text:00000000000020f4 $t
               fpu.s:181    .text:00000000000020f4 S2FROM
               fpu.s:192    .text:0000000000002100 $d
               fpu.s:192    .text:0000000000002104 _FTOS
               fpu.s:192    .text:0000000000002108 $t
               fpu.s:192    .text:0000000000002108 FTOS
               fpu.s:202    .text:0000000000002118 $d
               fpu.s:202    .text:000000000000211c _TRUNC
               fpu.s:202    .text:0000000000002122 $t
               fpu.s:202    .text:0000000000002124 TRUNC
               fpu.s:212    .text:0000000000002134 $d
               fpu.s:212    .text:0000000000002138 _STOF
               fpu.s:212    .text:000000000000213c $t
               fpu.s:212    .text:000000000000213c STOF
               fpu.s:222    .text:000000000000214c $d
               fpu.s:222    .text:0000000000002150 _FPLUS
               fpu.s:222    .text:0000000000002154 FPLUS
               fpu.s:235    .text:000000000000216c $d
               fpu.s:235    .text:0000000000002170 _FSUBB
               fpu.s:235    .text:0000000000002174 FSUBB
               fpu.s:249    .text:000000000000218c $d
               fpu.s:249    .text:0000000000002190 _FSTAR
               fpu.s:249    .text:0000000000002194 FSTAR
               fpu.s:262    .text:00000000000021ac $d
               fpu.s:262    .text:00000000000021b0 _FSLH
               fpu.s:262    .text:00000000000021b4 FSLH
               fpu.s:275    .text:00000000000021cc $d
               fpu.s:275    .text:00000000000021d0 _FNEG
               fpu.s:275    .text:00000000000021d8 $t
               fpu.s:275    .text:00000000000021d8 FNEG
               fpu.s:285    .text:00000000000021e8 $d
               fpu.s:285    .text:00000000000021ec _FABS
               fpu.s:285    .text:00000000000021f4 FABS
               fpu.s:297    .text:0000000000002208 $d
               fpu.s:297    .text:000000000000220c _SQRT
               fpu.s:297    .text:0000000000002214 SQRT
               fpu.s:307    .text:0000000000002224 $d
               fpu.s:307    .text:0000000000002228 _FZLESS
               fpu.s:307    .text:000000000000222c $t
ARM GAS  forth.s 			page 221


               fpu.s:307    .text:000000000000222c FZLESS
               fpu.s:319    .text:0000000000002244 $d
               fpu.s:319    .text:0000000000002248 _FGREAT
               fpu.s:319    .text:000000000000224c FGREAT
               fpu.s:321    .text:0000000000002250 $d
             forth.s:921    .text:00000000000033bc INVER
               fpu.s:330    .text:0000000000002264 _FLESS
               fpu.s:330    .text:0000000000002268 FLESS
               fpu.s:332    .text:000000000000226c $d
               fpu.s:340    .text:000000000000227c _FMIN
               fpu.s:340    .text:0000000000002284 FMIN
               fpu.s:342    .text:0000000000002288 $d
               fpu.s:353    .text:00000000000022ac _FMAX
               fpu.s:353    .text:00000000000022b4 FMAX
               fpu.s:355    .text:00000000000022b8 $d
               fpu.s:368    .text:00000000000022dc _FSIGN
               fpu.s:368    .text:00000000000022e2 $t
               fpu.s:368    .text:00000000000022e4 FSIGN
               fpu.s:379    .text:00000000000022f8 $d
               fpu.s:379    .text:00000000000022fc _FEXP
               fpu.s:379    .text:0000000000002304 FEXP
               fpu.s:390    .text:000000000000231c $d
               fpu.s:390    .text:0000000000002320 _FMANT
               fpu.s:390    .text:0000000000002326 $t
               fpu.s:390    .text:0000000000002328 FMANT
               fpu.s:403    .text:0000000000002344 $d
               fpu.s:403    .text:0000000000002348 _PI
               fpu.s:403    .text:000000000000234c PI
               fpu.s:412    .text:000000000000235c $d
               fpu.s:412    .text:0000000000002360 _LN2
               fpu.s:412    .text:0000000000002364 $t
               fpu.s:412    .text:0000000000002364 LN2
               fpu.s:421    .text:0000000000002374 $d
               fpu.s:421    .text:0000000000002378 _LN10
               fpu.s:421    .text:0000000000002380 LN10
               fpu.s:431    .text:0000000000002390 $d
               fpu.s:431    .text:0000000000002394 _LOG2
               fpu.s:431    .text:000000000000239c LOG2
               fpu.s:441    .text:00000000000023ac $d
               fpu.s:441    .text:00000000000023b0 _LOG2TO10
               fpu.s:441    .text:00000000000023b8 $t
               fpu.s:441    .text:00000000000023b8 LOG2TO10
               fpu.s:443    .text:00000000000023bc $d
             forth.s:599    .text:000000000000311c ZLESS
               fpu.s:453    .text:00000000000023e8 $d
            strtof.s:29     .text:00000000000023f4 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:000000000000240c p10p2at
            strtof.s:44     .text:000000000000240c $t
            strtof.s:45     .text:0000000000002410 $d
            strtof.s:57     .text:0000000000002430 bit_state
            strtof.s:58     .text:0000000000002430 $t
            strtof.s:59     .text:0000000000002434 $d
             forth.s:1796   .text:0000000000003bb0 PICK
ARM GAS  forth.s 			page 222


            strtof.s:76     .text:0000000000002454 mant_div
            strtof.s:77     .text:0000000000002454 $t
            strtof.s:78     .text:0000000000002458 $d
            strtof.s:79     .text:000000000000245c div_loop
             forth.s:1042   .text:00000000000034b8 GREAT
            strtof.s:107    .text:00000000000024a8 mant_mult
            strtof.s:108    .text:00000000000024a8 $t
            strtof.s:109    .text:00000000000024ac $d
            strtof.s:110    .text:00000000000024b0 mult_loop
            strtof.s:134    .text:00000000000024fc exp_adjust
            strtof.s:135    .text:00000000000024fc $t
            strtof.s:136    .text:0000000000002500 $d
             forth.s:824    .text:00000000000032e4 NROT
            strtof.s:148    .text:000000000000253c pos_exp
             forth.s:937    .text:00000000000033e0 ABSS
            strtof.s:159    .text:000000000000254c integer
            strtof.s:160    .text:000000000000254c $t
            strtof.s:161    .text:0000000000002550 $d
             forth.s:561    .text:00000000000030d0 DSWAP
             forth.s:2214   .text:0000000000003fd4 TONBR
             forth.s:487    .text:000000000000303c DTOR
             forth.s:458    .text:0000000000002ff8 DRFROM
            strtof.s:178    .text:000000000000257c decimals
            strtof.s:179    .text:000000000000257c $t
            strtof.s:180    .text:0000000000002580 $d
             forth.s:1065   .text:00000000000034e4 MIN
            strtof.s:204    .text:00000000000025d4 exponent
            strtof.s:205    .text:00000000000025d4 $t
            strtof.s:206    .text:00000000000025d8 $d
             forth.s:2267   .text:000000000000406a NEGQ
             forth.s:929    .text:00000000000033d0 NEGAT
            strtof.s:226    .text:0000000000002614 _FLOATQ
            strtof.s:226    .text:000000000000261c FLOATQ
            strtof.s:230    .text:0000000000002620 $d
             forth.s:2162   .text:0000000000003f48 DECIM
             forth.s:381    .text:0000000000002f76 TBRAN
            strtof.s:258    .text:00000000000026a0 expect_dot
             forth.s:2247   .text:0000000000004048 CHARQ
            strtof.s:262    .text:00000000000026b4 get_fraction
            strtof.s:279    .text:0000000000002708 get_exponent
            strtof.s:297    .text:000000000000275c error2
             forth.s:2179   .text:0000000000003f6c DIGTQ
            strtof.s:284    .text:000000000000271c build_float
            strtof.s:305    .text:000000000000277c error4
            strtof.s:311    .text:0000000000002790 restore_base
            strtof.s:309    .text:0000000000002788 e4
            strtof.s:300    .text:0000000000002768 error3
              ftoa.s:28     .text:00000000000027a0 rounding
              ftoa.s:48     .text:00000000000027c8 _ROUND
              ftoa.s:48     .text:00000000000027ce $t
              ftoa.s:48     .text:00000000000027d0 ROUND
              ftoa.s:50     .text:00000000000027d4 $d
             forth.s:1054   .text:00000000000034d0 MAX
              ftoa.s:67     .text:0000000000002814 _CSTOP
              ftoa.s:67     .text:0000000000002818 $t
              ftoa.s:67     .text:0000000000002818 CSTOP
              ftoa.s:79     .text:0000000000002824 ITOA
ARM GAS  forth.s 			page 223


              ftoa.s:81     .text:0000000000002828 $d
             forth.s:1510   .text:0000000000003924 STOD
             forth.s:876    .text:0000000000003354 DABS
             forth.s:2025   .text:0000000000003de8 BDIGS
             forth.s:2069   .text:0000000000003e54 DIGS
             forth.s:2087   .text:0000000000003e88 SIGN
             forth.s:2101   .text:0000000000003eb0 EDIGS
             forth.s:1895   .text:0000000000003c90 CMOVE
              ftoa.s:114    .text:000000000000287c _SCALEUP
              ftoa.s:114    .text:0000000000002884 $t
              ftoa.s:114    .text:0000000000002884 SCALEUP
              ftoa.s:116    .text:0000000000002888 $d
              ftoa.s:148    .text:00000000000028e4 _SCALEDOWN
              ftoa.s:148    .text:00000000000028ee $t
              ftoa.s:148    .text:00000000000028f0 SCALEDOWN
              ftoa.s:150    .text:00000000000028f4 $d
              ftoa.s:181    .text:000000000000294c EPART
              ftoa.s:182    .text:000000000000294c $t
              ftoa.s:183    .text:0000000000002950 $d
              ftoa.s:206    .text:0000000000002980 FPART
              ftoa.s:207    .text:0000000000002980 $t
              ftoa.s:208    .text:0000000000002984 $d
              ftoa.s:255    .text:0000000000002a24 IPART
              ftoa.s:256    .text:0000000000002a24 $t
              ftoa.s:257    .text:0000000000002a28 $d
              ftoa.s:313    .text:0000000000002ae8 _FTOA
              ftoa.s:313    .text:0000000000002aec $t
              ftoa.s:313    .text:0000000000002aec FTOA
              ftoa.s:315    .text:0000000000002af0 $d
              ftoa.s:365    .text:0000000000002bd0 nan
             forth.s:762    .text:0000000000003268 BLANK
              ftoa.s:348    .text:0000000000002b80 zdz
              ftoa.s:387    .text:0000000000002c3c infinity
              ftoa.s:412    .text:0000000000002c84 _FDOT
              ftoa.s:412    .text:0000000000002c88 FDOT
              ftoa.s:415    .text:0000000000002c8c $d
             forth.s:1824   .text:0000000000003be4 HERE
             forth.s:3485   .text:0000000000004ec0 ALLOT
             forth.s:80     .text:0000000000002cf0 $t
             forth.s:104    .text:0000000000002d08 COMPI_NEST
             forth.s:117    .text:0000000000002d26 TSTDIN
             forth.s:124    .text:0000000000002d30 TSTDOUT
             forth.s:133    .text:0000000000002d3a $d
             forth.s:133    .text:0000000000002d3e _CFSR
             forth.s:145    .text:0000000000002d5a $d
             forth.s:145    .text:0000000000002d5e _BFAR
             forth.s:157    .text:0000000000002d7a $d
             forth.s:157    .text:0000000000002d7e _QKEY
             forth.s:157    .text:0000000000002d84 QKEY
             forth.s:159    .text:0000000000002d88 $d
             forth.s:1882   .text:0000000000003c70 ATEXE
             forth.s:167    .text:0000000000002d98 _KEY
             forth.s:167    .text:0000000000002d9c $t
             forth.s:167    .text:0000000000002d9c KEY
             forth.s:169    .text:0000000000002da0 KEY1
             forth.s:170    .text:0000000000002da0 $d
             forth.s:179    .text:0000000000002db8 _EMIT
ARM GAS  forth.s 			page 224


             forth.s:181    .text:0000000000002dc4 $d
             forth.s:215    .text:0000000000002dd4 _RAND
             forth.s:215    .text:0000000000002ddc RAND
             forth.s:217    .text:0000000000002de0 $d
             forth.s:1172   .text:00000000000035b8 SEED
             forth.s:1666   .text:0000000000003a6c MODD
             forth.s:246    .text:0000000000002e50 _PAUSE
             forth.s:246    .text:0000000000002e56 $t
             forth.s:246    .text:0000000000002e58 PAUSE
             forth.s:248    .text:0000000000002e5c $d
             forth.s:1190   .text:00000000000035e8 TIMER
             forth.s:250    .text:0000000000002e64 PAUSE_LOOP
             forth.s:255    .text:0000000000002e7c PAUSE_EXIT
             forth.s:262    .text:0000000000002e84 _ULED
             forth.s:271    .text:0000000000002ea8 ULED_OFF
             forth.s:279    .text:0000000000002eac $d
             forth.s:279    .text:0000000000002eb0 _JOYSTK
             forth.s:279    .text:0000000000002eb8 JOYSTK
             forth.s:281    .text:0000000000002ebc $d
             forth.s:293    .text:0000000000002edc _BEEP
             forth.s:293    .text:0000000000002ee4 BEEP
             forth.s:318    .text:0000000000002f18 $d
             forth.s:318    .text:0000000000002f1c _NOP
             forth.s:318    .text:0000000000002f20 $t
             forth.s:318    .text:0000000000002f20 NOP
             forth.s:335    .text:0000000000002f2c $d
             forth.s:335    .text:0000000000002f30 _EXECU
             forth.s:335    .text:0000000000002f38 $t
             forth.s:335    .text:0000000000002f38 EXECU
             forth.s:355    .text:0000000000002f54 NEXT1
             forth.s:373    .text:0000000000002f70 QBRAN1
             forth.s:404    .text:0000000000002f90 $d
             forth.s:404    .text:0000000000002f94 _EXIT
             forth.s:404    .text:0000000000002f9c EXIT
             forth.s:412    .text:0000000000002f9e $d
             forth.s:412    .text:0000000000002fa2 _STORE
             forth.s:412    .text:0000000000002fa4 $t
             forth.s:422    .text:0000000000002fb0 $d
             forth.s:422    .text:0000000000002fb4 _AT
             forth.s:422    .text:0000000000002fb6 $t
             forth.s:430    .text:0000000000002fbc $d
             forth.s:430    .text:0000000000002fc0 _CSTOR
             forth.s:440    .text:0000000000002fd0 $d
             forth.s:440    .text:0000000000002fd4 _CAT
             forth.s:449    .text:0000000000002fdc $d
             forth.s:449    .text:0000000000002fe0 _RFROM
             forth.s:458    .text:0000000000002fee $d
             forth.s:458    .text:0000000000002ff2 _DRFROM
             forth.s:458    .text:0000000000002ff6 $t
             forth.s:469    .text:000000000000300a $d
             forth.s:469    .text:000000000000300e _RAT
             forth.s:478    .text:000000000000301e $d
             forth.s:478    .text:0000000000003022 _TOR
             forth.s:487    .text:0000000000003032 $d
             forth.s:487    .text:0000000000003036 _DTOR
             forth.s:487    .text:000000000000303a $t
             forth.s:499    .text:000000000000304e $d
ARM GAS  forth.s 			page 225


             forth.s:499    .text:0000000000003052 _RPSTOR
             forth.s:499    .text:0000000000003056 $t
             forth.s:499    .text:0000000000003058 RPSTOR
             forth.s:508    .text:0000000000003060 $d
             forth.s:508    .text:0000000000003064 _SPSTOR
             forth.s:508    .text:0000000000003068 $t
             forth.s:508    .text:0000000000003068 SPSTOR
             forth.s:517    .text:0000000000003070 $d
             forth.s:517    .text:0000000000003074 _SPAT
             forth.s:517    .text:0000000000003078 $t
             forth.s:517    .text:0000000000003078 SPAT
             forth.s:526    .text:0000000000003080 $d
             forth.s:526    .text:0000000000003084 _RPAT
             forth.s:526    .text:0000000000003088 $t
             forth.s:526    .text:0000000000003088 RPAT
             forth.s:535    .text:0000000000003090 $d
             forth.s:535    .text:0000000000003094 _DROP
             forth.s:543    .text:00000000000030a2 $d
             forth.s:543    .text:00000000000030a6 _DUPP
             forth.s:543    .text:00000000000030aa $t
             forth.s:551    .text:00000000000030b2 $d
             forth.s:551    .text:00000000000030b6 _SWAP
             forth.s:561    .text:00000000000030c4 $d
             forth.s:561    .text:00000000000030c8 _DSWAP
             forth.s:561    .text:00000000000030ce $t
             forth.s:576    .text:00000000000030e0 $d
             forth.s:576    .text:00000000000030e4 _OVER
             forth.s:585    .text:00000000000030f4 $d
             forth.s:585    .text:00000000000030f8 _DOVER
             forth.s:585    .text:00000000000030fe $t
             forth.s:585    .text:0000000000003100 DOVER
             forth.s:599    .text:0000000000003112 $d
             forth.s:599    .text:0000000000003116 _ZLESS
             forth.s:607    .text:0000000000003122 $d
             forth.s:607    .text:0000000000003126 _ANDD
             forth.s:607    .text:000000000000312a $t
             forth.s:616    .text:0000000000003136 $d
             forth.s:616    .text:000000000000313a _ORR
             forth.s:625    .text:000000000000314a $d
             forth.s:625    .text:000000000000314e _XORR
             forth.s:625    .text:0000000000003152 $t
             forth.s:634    .text:000000000000315e $d
             forth.s:634    .text:0000000000003162 _UPLUS
             forth.s:634    .text:0000000000003166 $t
             forth.s:634    .text:0000000000003168 UPLUS
             forth.s:646    .text:0000000000003178 $d
             forth.s:646    .text:000000000000317c _RSHIFT
             forth.s:655    .text:000000000000318e $d
             forth.s:655    .text:0000000000003192 _LSHIFT
             forth.s:664    .text:00000000000031a6 $d
             forth.s:664    .text:00000000000031aa _PLUS
             forth.s:664    .text:00000000000031ac $t
             forth.s:673    .text:00000000000031b4 $d
             forth.s:673    .text:00000000000031b8 _SUBB
             forth.s:673    .text:00000000000031ba $t
             forth.s:682    .text:00000000000031c6 $d
             forth.s:682    .text:00000000000031ca _STAR
ARM GAS  forth.s 			page 226


             forth.s:682    .text:00000000000031cc $t
             forth.s:691    .text:00000000000031d6 $d
             forth.s:691    .text:00000000000031da _UMSTA
             forth.s:691    .text:00000000000031de $t
             forth.s:691    .text:00000000000031e0 UMSTA
             forth.s:703    .text:00000000000031ec $d
             forth.s:703    .text:00000000000031f0 _MSTAR
             forth.s:703    .text:00000000000031f4 MSTAR
             forth.s:714    .text:0000000000003200 $d
             forth.s:714    .text:0000000000003204 _ONEP
             forth.s:722    .text:000000000000320e $d
             forth.s:722    .text:0000000000003212 _ONEM
             forth.s:730    .text:000000000000321e $d
             forth.s:730    .text:0000000000003222 _TWOP
             forth.s:730    .text:0000000000003228 TWOP
             forth.s:738    .text:000000000000322e $d
             forth.s:738    .text:0000000000003232 _TWOM
             forth.s:738    .text:0000000000003238 TWOM
             forth.s:746    .text:000000000000323e $d
             forth.s:746    .text:0000000000003242 _CELLP
             forth.s:746    .text:0000000000003248 $t
             forth.s:746    .text:0000000000003248 CELLP
             forth.s:754    .text:000000000000324e $d
             forth.s:754    .text:0000000000003252 _CELLM
             forth.s:754    .text:0000000000003258 $t
             forth.s:754    .text:0000000000003258 CELLM
             forth.s:762    .text:000000000000325e $d
             forth.s:762    .text:0000000000003262 _BLANK
             forth.s:771    .text:0000000000003272 $d
             forth.s:771    .text:0000000000003276 _CELLS
             forth.s:771    .text:000000000000327c $t
             forth.s:771    .text:000000000000327c CELLS
             forth.s:779    .text:0000000000003282 $d
             forth.s:779    .text:0000000000003286 _CELLSL
             forth.s:779    .text:000000000000328c $t
             forth.s:779    .text:000000000000328c CELLSL
             forth.s:787    .text:0000000000003292 $d
             forth.s:787    .text:0000000000003296 _TWOST
             forth.s:787    .text:000000000000329c TWOST
             forth.s:795    .text:00000000000032a2 $d
             forth.s:795    .text:00000000000032a6 _TWOSL
             forth.s:803    .text:00000000000032b2 $d
             forth.s:803    .text:00000000000032b6 _QDUP
             forth.s:813    .text:00000000000032c6 $d
             forth.s:813    .text:00000000000032ca _ROT
             forth.s:813    .text:00000000000032ce $t
             forth.s:824    .text:00000000000032da $d
             forth.s:824    .text:00000000000032de _NROT
             forth.s:835    .text:00000000000032ee $d
             forth.s:835    .text:00000000000032f2 _DDROP
             forth.s:835    .text:00000000000032f8 $t
             forth.s:844    .text:0000000000003302 $d
             forth.s:844    .text:0000000000003306 _TDROP
             forth.s:844    .text:000000000000330c $t
             forth.s:853    .text:0000000000003316 $d
             forth.s:853    .text:000000000000331a _DDUP
             forth.s:863    .text:000000000000332c $d
ARM GAS  forth.s 			page 227


             forth.s:863    .text:0000000000003330 _DPLUS
             forth.s:863    .text:0000000000003334 DPLUS
             forth.s:876    .text:0000000000003348 $d
             forth.s:876    .text:000000000000334c _DABS
             forth.s:892    .text:0000000000003370 $d
             forth.s:892    .text:0000000000003374 _UDGREAT
             forth.s:892    .text:0000000000003378 $t
             forth.s:892    .text:0000000000003378 UDGREAT
             forth.s:909    .text:0000000000003394 $d
             forth.s:909    .text:0000000000003398 _DZEQUAL
             forth.s:909    .text:000000000000339c $t
             forth.s:909    .text:000000000000339c DZEQUAL
             forth.s:921    .text:00000000000033ae $d
             forth.s:921    .text:00000000000033b2 _INVER
             forth.s:929    .text:00000000000033c2 $d
             forth.s:929    .text:00000000000033c6 _NEGAT
             forth.s:937    .text:00000000000033d6 $d
             forth.s:937    .text:00000000000033da _ABSS
             forth.s:937    .text:00000000000033de $t
             forth.s:947    .text:00000000000033ea $d
             forth.s:947    .text:00000000000033ee _CLZ
             forth.s:947    .text:00000000000033f2 $t
             forth.s:955    .text:00000000000033fa $d
             forth.s:955    .text:00000000000033fe _CTZ
             forth.s:955    .text:0000000000003402 $t
             forth.s:955    .text:0000000000003404 CTZ
             forth.s:970    .text:000000000000341c $d
             forth.s:970    .text:0000000000003420 _ZEQUAL
             forth.s:970    .text:0000000000003424 ZEQUAL
             forth.s:981    .text:0000000000003432 $d
             forth.s:981    .text:0000000000003436 _EQUAL
             forth.s:981    .text:0000000000003438 $t
             forth.s:993    .text:0000000000003448 $d
             forth.s:993    .text:000000000000344c _DIFF
             forth.s:993    .text:0000000000003450 DIFF
             forth.s:1006   .text:0000000000003468 $d
             forth.s:1006   .text:000000000000346c _ULESS
             forth.s:1018   .text:0000000000003480 $d
             forth.s:1018   .text:0000000000003484 _LESS
             forth.s:1018   .text:0000000000003486 $t
             forth.s:1018   .text:0000000000003488 LESS
             forth.s:1030   .text:0000000000003498 $d
             forth.s:1030   .text:000000000000349c _UGREAT
             forth.s:1030   .text:00000000000034a0 UGREAT
             forth.s:1042   .text:00000000000034b0 $d
             forth.s:1042   .text:00000000000034b4 _GREAT
             forth.s:1042   .text:00000000000034b6 $t
             forth.s:1054   .text:00000000000034c8 $d
             forth.s:1054   .text:00000000000034cc _MAX
             forth.s:1054   .text:00000000000034d0 $t
             forth.s:1065   .text:00000000000034dc $d
             forth.s:1065   .text:00000000000034e0 _MIN
             forth.s:1065   .text:00000000000034e4 $t
             forth.s:1076   .text:00000000000034f0 $d
             forth.s:1076   .text:00000000000034f4 _PSTOR
             forth.s:1076   .text:00000000000034f8 PSTOR
             forth.s:1088   .text:000000000000350a $d
ARM GAS  forth.s 			page 228


             forth.s:1088   .text:000000000000350e _DSTOR
             forth.s:1088   .text:0000000000003514 DSTOR
             forth.s:1100   .text:000000000000352a $d
             forth.s:1100   .text:000000000000352e _DAT
             forth.s:1100   .text:0000000000003534 DAT
             forth.s:1110   .text:0000000000003540 $d
             forth.s:1110   .text:0000000000003544 _COUNT
             forth.s:1110   .text:000000000000354a $t
             forth.s:1120   .text:000000000000355a $d
             forth.s:1120   .text:000000000000355e _DNEGA
             forth.s:1120   .text:0000000000003566 $t
             forth.s:1120   .text:0000000000003568 DNEGA
             forth.s:1137   .text:000000000000357a DOVAR
             forth.s:1148   .text:0000000000003588 DOCON
             forth.s:1163   .text:0000000000003594 $d
             forth.s:1163   .text:0000000000003598 _STATE
             forth.s:1163   .text:000000000000359e $t
             forth.s:1163   .text:00000000000035a0 STATE
             forth.s:1172   .text:00000000000035ac $d
             forth.s:1172   .text:00000000000035b0 _SEED
             forth.s:1181   .text:00000000000035c4 $d
             forth.s:1181   .text:00000000000035c8 _MSEC
             forth.s:1190   .text:00000000000035dc $d
             forth.s:1190   .text:00000000000035e0 _TIMER
             forth.s:1190   .text:00000000000035e6 $t
             forth.s:1199   .text:00000000000035f4 $d
             forth.s:1199   .text:00000000000035f8 _TBOOT
             forth.s:1199   .text:00000000000035fe $t
             forth.s:1199   .text:0000000000003600 TBOOT
             forth.s:1208   .text:000000000000360c $d
             forth.s:1208   .text:0000000000003610 _BASE
             forth.s:1219   .text:0000000000003624 $d
             forth.s:1219   .text:0000000000003628 _BCHR
             forth.s:1219   .text:000000000000362e $t
             forth.s:1219   .text:0000000000003630 BCHR
             forth.s:1229   .text:000000000000363c TEMP
             forth.s:1238   .text:0000000000003648 $d
             forth.s:1238   .text:000000000000364c _SPAN
             forth.s:1238   .text:0000000000003654 SPAN
             forth.s:1247   .text:0000000000003660 $d
             forth.s:1247   .text:0000000000003664 _INN
             forth.s:1247   .text:0000000000003668 $t
             forth.s:1247   .text:0000000000003668 INN
             forth.s:1257   .text:0000000000003674 $d
             forth.s:1257   .text:0000000000003678 _NTIB
             forth.s:1257   .text:0000000000003680 NTIB
             forth.s:1266   .text:000000000000368c $d
             forth.s:1266   .text:0000000000003690 _TEVAL
             forth.s:1266   .text:0000000000003696 $t
             forth.s:1266   .text:0000000000003698 TEVAL
             forth.s:1276   .text:00000000000036a4 $d
             forth.s:1276   .text:00000000000036a8 _HLD
             forth.s:1276   .text:00000000000036ac $t
             forth.s:1276   .text:00000000000036ac HLD
             forth.s:1286   .text:00000000000036b8 $d
             forth.s:1286   .text:00000000000036bc _CNTXT
             forth.s:1286   .text:00000000000036c4 $t
ARM GAS  forth.s 			page 229


             forth.s:1286   .text:00000000000036c4 CNTXT
             forth.s:1287   .text:00000000000036c4 CRRNT
             forth.s:1297   .text:00000000000036d0 $d
             forth.s:1297   .text:00000000000036d4 _CPP
             forth.s:1297   .text:00000000000036d8 CPP
             forth.s:1307   .text:00000000000036e4 $d
             forth.s:1307   .text:00000000000036e8 _FCP
             forth.s:1307   .text:00000000000036ec $t
             forth.s:1307   .text:00000000000036ec FCP
             forth.s:1317   .text:00000000000036f8 $d
             forth.s:1317   .text:00000000000036fc _LAST
             forth.s:1317   .text:0000000000003704 LAST
             forth.s:1331   .text:0000000000003710 $d
             forth.s:1331   .text:0000000000003714 _USER_BEGIN
             forth.s:1331   .text:0000000000003720 USER_BEGIN
             forth.s:1335   .text:000000000000372c USR_BGN_ADR
             forth.s:1336   .text:000000000000372c $d
             forth.s:1342   .text:0000000000003734 _USER_END
             forth.s:1342   .text:0000000000003740 USER_END
             forth.s:1346   .text:000000000000374c USER_END_ADR
             forth.s:1347   .text:000000000000374c $d
             forth.s:1353   .text:0000000000003754 _MAXINT
             forth.s:1353   .text:000000000000375c $t
             forth.s:1353   .text:000000000000375c MAXINT
             forth.s:1362   .text:000000000000376c $d
             forth.s:1362   .text:0000000000003770 _MININT
             forth.s:1362   .text:0000000000003778 $t
             forth.s:1362   .text:0000000000003778 MININT
             forth.s:1371   .text:0000000000003788 $d
             forth.s:1371   .text:000000000000378c _MAXUINT
             forth.s:1371   .text:0000000000003798 MAXUINT
             forth.s:1386   .text:00000000000037a8 $d
             forth.s:1386   .text:00000000000037ac _WITHI
             forth.s:1386   .text:00000000000037b4 WITHI
             forth.s:1388   .text:00000000000037b8 $d
             forth.s:1403   .text:00000000000037d8 _UMMOD
             forth.s:1403   .text:00000000000037e0 UMMOD
             forth.s:1407   .text:00000000000037ea UMMOD0
             forth.s:1414   .text:00000000000037fa UMMOD1
             forth.s:1420   .text:0000000000003804 UMMOD2
             forth.s:1433   .text:0000000000003810 $d
             forth.s:1433   .text:0000000000003814 _MSMOD
             forth.s:1433   .text:000000000000381c MSMOD
             forth.s:1435   .text:0000000000003820 $d
             forth.s:1444   .text:0000000000003848 MMOD1
             forth.s:1451   .text:0000000000003864 MMOD2
             forth.s:1459   .text:0000000000003884 MMOD3
             forth.s:1473   .text:000000000000388c _SMSLSHREM
             forth.s:1473   .text:0000000000003894 SMSLSHREM
             forth.s:1475   .text:0000000000003898 $d
             forth.s:1510   .text:0000000000003920 _STOD
             forth.s:1510   .text:0000000000003924 $t
             forth.s:1519   .text:0000000000003930 $d
             forth.s:1519   .text:0000000000003934 _D2STAR
             forth.s:1519   .text:0000000000003938 $t
             forth.s:1519   .text:0000000000003938 D2STAR
             forth.s:1531   .text:000000000000394a $d
ARM GAS  forth.s 			page 230


             forth.s:1531   .text:000000000000394e _D2SL
             forth.s:1531   .text:0000000000003952 $t
             forth.s:1531   .text:0000000000003954 D2SL
             forth.s:1546   .text:0000000000003962 $d
             forth.s:1546   .text:0000000000003966 _DSLMOD
             forth.s:1546   .text:000000000000396c $t
             forth.s:1546   .text:000000000000396c DSLMOD
             forth.s:1582   .text:00000000000039b8 $d
             forth.s:1582   .text:00000000000039bc _DSLASH
             forth.s:1582   .text:00000000000039c0 DSLASH
             forth.s:1584   .text:00000000000039c4 $d
             forth.s:1604   .text:0000000000003a08 _DSTAR
             forth.s:1604   .text:0000000000003a0c DSTAR
             forth.s:1653   .text:0000000000003a42 $d
             forth.s:1653   .text:0000000000003a46 _SLMOD
             forth.s:1655   .text:0000000000003a50 $d
             forth.s:1666   .text:0000000000003a68 _MODD
             forth.s:1666   .text:0000000000003a6c $t
             forth.s:1668   .text:0000000000003a70 $d
             forth.s:1677   .text:0000000000003a80 _SLASH
             forth.s:1677   .text:0000000000003a82 $t
             forth.s:1677   .text:0000000000003a84 SLASH
             forth.s:1679   .text:0000000000003a88 $d
             forth.s:1690   .text:0000000000003a9c _SSMOD
             forth.s:1690   .text:0000000000003aa2 $t
             forth.s:1690   .text:0000000000003aa4 SSMOD
             forth.s:1692   .text:0000000000003aa8 $d
             forth.s:1704   .text:0000000000003ac0 _STASL
             forth.s:1704   .text:0000000000003ac4 STASL
             forth.s:1706   .text:0000000000003ac8 $d
             forth.s:1720   .text:0000000000003adc _CHARP
             forth.s:1720   .text:0000000000003ae2 $t
             forth.s:1720   .text:0000000000003ae4 CHARP
             forth.s:1730   .text:0000000000003aec $d
             forth.s:1730   .text:0000000000003af0 _CHARS
             forth.s:1730   .text:0000000000003af6 $t
             forth.s:1730   .text:0000000000003af8 CHARS
             forth.s:1740   .text:0000000000003afc $d
             forth.s:1740   .text:0000000000003b00 _ALIGN
             forth.s:1740   .text:0000000000003b06 $t
             forth.s:1740   .text:0000000000003b08 ALIGN
             forth.s:1753   .text:0000000000003b18 $d
             forth.s:1753   .text:0000000000003b1c _ALGND
             forth.s:1753   .text:0000000000003b24 $t
             forth.s:1753   .text:0000000000003b24 ALGND
             forth.s:1764   .text:0000000000003b34 $d
             forth.s:1764   .text:0000000000003b38 _TCHAR
             forth.s:1764   .text:0000000000003b3e $t
             forth.s:1764   .text:0000000000003b40 TCHAR
             forth.s:1766   .text:0000000000003b44 $d
             forth.s:1776   .text:0000000000003b7c TCHA1
             forth.s:1784   .text:0000000000003b84 _DEPTH
             forth.s:1784   .text:0000000000003b8a $t
             forth.s:1784   .text:0000000000003b8c DEPTH
             forth.s:1796   .text:0000000000003ba4 $d
             forth.s:1796   .text:0000000000003ba8 _PICK
             forth.s:1807   .text:0000000000003bba $d
ARM GAS  forth.s 			page 231


             forth.s:1807   .text:0000000000003bbe _PUT
             forth.s:1807   .text:0000000000003bc2 $t
             forth.s:1807   .text:0000000000003bc4 PUT
             forth.s:1824   .text:0000000000003bd8 $d
             forth.s:1824   .text:0000000000003bdc _HERE
             forth.s:1826   .text:0000000000003be8 $d
             forth.s:1835   .text:0000000000003bf8 _PAD
             forth.s:1835   .text:0000000000003bfc $t
             forth.s:1837   .text:0000000000003c00 $d
             forth.s:1848   .text:0000000000003c18 _TIB
             forth.s:1848   .text:0000000000003c1c $t
             forth.s:1848   .text:0000000000003c1c TIB
             forth.s:1859   .text:0000000000003c26 $d
             forth.s:1859   .text:0000000000003c2a _SOURCID
             forth.s:1859   .text:0000000000003c34 $t
             forth.s:1859   .text:0000000000003c34 SOURCID
             forth.s:1871   .text:0000000000003c3e $d
             forth.s:1871   .text:0000000000003c42 _SOURCE
             forth.s:1871   .text:0000000000003c4c SOURCE
             forth.s:1873   .text:0000000000003c50 $d
             forth.s:1882   .text:0000000000003c64 _ATEXE
             forth.s:1895   .text:0000000000003c84 $d
             forth.s:1895   .text:0000000000003c88 _CMOVE
             forth.s:1895   .text:0000000000003c8e $t
             forth.s:1902   .text:0000000000003ca2 CMOV1
             forth.s:1899   .text:0000000000003c9a CMOV0
             forth.s:1907   .text:0000000000003cac CMOV2
             forth.s:1915   .text:0000000000003cb4 $d
             forth.s:1915   .text:0000000000003cb8 _MOVE
             forth.s:1933   .text:0000000000003cea MOVE1
             forth.s:1930   .text:0000000000003ce6 MOVE3
             forth.s:1927   .text:0000000000003ce2 MOVE0
             forth.s:1938   .text:0000000000003cf4 MOVE2
             forth.s:1947   .text:0000000000003cfc $d
             forth.s:1947   .text:0000000000003d00 _FILL
             forth.s:1955   .text:0000000000003d16 FILL2
             forth.s:1951   .text:0000000000003d0e FILL1
             forth.s:1965   .text:0000000000003d1e $d
             forth.s:1965   .text:0000000000003d22 _PACKS
             forth.s:1965   .text:0000000000003d28 $t
             forth.s:1965   .text:0000000000003d28 PACKS
             forth.s:1967   .text:0000000000003d2c $d
             forth.s:1996   .text:0000000000003d84 _DIGIT
             forth.s:1996   .text:0000000000003d8a $t
             forth.s:1996   .text:0000000000003d8c DIGIT
             forth.s:1998   .text:0000000000003d90 $d
             forth.s:2013   .text:0000000000003dc4 _EXTRC
             forth.s:2013   .text:0000000000003dcc $t
             forth.s:2013   .text:0000000000003dcc EXTRC
             forth.s:2015   .text:0000000000003dd0 $d
             forth.s:2025   .text:0000000000003de4 _BDIGS
             forth.s:2027   .text:0000000000003dec $d
             forth.s:2037   .text:0000000000003e00 _HOLD
             forth.s:2037   .text:0000000000003e08 HOLD
             forth.s:2039   .text:0000000000003e0c $d
             forth.s:2055   .text:0000000000003e30 _DIG
             forth.s:2055   .text:0000000000003e32 $t
ARM GAS  forth.s 			page 232


             forth.s:2055   .text:0000000000003e34 DIG
             forth.s:2057   .text:0000000000003e38 $d
             forth.s:2069   .text:0000000000003e50 _DIGS
             forth.s:2071   .text:0000000000003e58 DIGS1
             forth.s:2072   .text:0000000000003e58 $d
             forth.s:2077   .text:0000000000003e74 DIGS2
             forth.s:2087   .text:0000000000003e80 _SIGN
             forth.s:2089   .text:0000000000003e8c $d
             forth.s:2093   .text:0000000000003ea4 SIGN1
             forth.s:2101   .text:0000000000003eac _EDIGS
             forth.s:2103   .text:0000000000003eb4 $d
             forth.s:2118   .text:0000000000003ed0 STRR
             forth.s:2119   .text:0000000000003ed0 $t
             forth.s:2120   .text:0000000000003ed4 $d
             forth.s:2137   .text:0000000000003f00 _HEX
             forth.s:2137   .text:0000000000003f04 $t
             forth.s:2137   .text:0000000000003f04 HEX
             forth.s:2139   .text:0000000000003f08 $d
             forth.s:2150   .text:0000000000003f20 _BIN
             forth.s:2150   .text:0000000000003f24 $t
             forth.s:2150   .text:0000000000003f24 BIN
             forth.s:2152   .text:0000000000003f28 $d
             forth.s:2162   .text:0000000000003f40 _DECIM
             forth.s:2162   .text:0000000000003f48 $t
             forth.s:2164   .text:0000000000003f4c $d
             forth.s:2179   .text:0000000000003f64 _DIGTQ
             forth.s:2181   .text:0000000000003f70 $d
             forth.s:2194   .text:0000000000003fb8 DGTQ1
             forth.s:2214   .text:0000000000003fcc _TONBR
             forth.s:2214   .text:0000000000003fd4 $t
             forth.s:2216   .text:0000000000003fd8 $d
             forth.s:2248   .text:0000000000004048 $t
             forth.s:2296   .text:0000000000004094 $d
             forth.s:2296   .text:0000000000004098 _INTQ
             forth.s:2296   .text:00000000000040a0 INTQ
             forth.s:2299   .text:00000000000040a4 $d
             forth.s:2351   .text:000000000000416c _NUMBERQ
             forth.s:2351   .text:0000000000004174 $t
             forth.s:2351   .text:0000000000004174 NUMBERQ
             forth.s:2353   .text:0000000000004178 $d
             forth.s:2371   .text:0000000000004198 _SPACE
             forth.s:2371   .text:000000000000419e $t
             forth.s:2373   .text:00000000000041a4 $d
             forth.s:2382   .text:00000000000041b4 _SPACS
             forth.s:2382   .text:00000000000041bc SPACS
             forth.s:2384   .text:00000000000041c0 $d
             forth.s:2390   .text:00000000000041dc CHAR2
             forth.s:2388   .text:00000000000041d8 CHAR1
             forth.s:2399   .text:00000000000041ec _TYPEE
             forth.s:2401   .text:00000000000041f8 $d
             forth.s:2407   .text:0000000000004210 TYPE2
             forth.s:2403   .text:0000000000004204 TYPE1
             forth.s:2417   .text:0000000000004224 _CR
             forth.s:2419   .text:000000000000422c $d
             forth.s:2431   .text:0000000000004248 DOSTR
             forth.s:2432   .text:0000000000004248 $t
             forth.s:2434   .text:000000000000424c $d
ARM GAS  forth.s 			page 233


             forth.s:2453   .text:0000000000004278 STRQP
             forth.s:2454   .text:0000000000004278 $t
             forth.s:2455   .text:000000000000427c $d
             forth.s:2466   .text:0000000000004284 $t
             forth.s:2467   .text:0000000000004288 $d
             forth.s:2479   .text:0000000000004294 LPAD
             forth.s:2480   .text:0000000000004294 $t
             forth.s:2481   .text:0000000000004298 $d
             forth.s:2512   .text:0000000000004318 _DOTR
             forth.s:2512   .text:000000000000431c DOTR
             forth.s:2514   .text:0000000000004320 $d
             forth.s:2596   .text:0000000000004404 DTOA
             forth.s:2531   .text:0000000000004348 _UDOTR
             forth.s:2531   .text:000000000000434c $t
             forth.s:2531   .text:000000000000434c UDOTR
             forth.s:2533   .text:0000000000004350 $d
             forth.s:2549   .text:000000000000437c _UDOT
             forth.s:2551   .text:0000000000004384 $d
             forth.s:2567   .text:00000000000043b0 _DOT
             forth.s:2567   .text:00000000000043b2 $t
             forth.s:2569   .text:00000000000043b8 $d
             forth.s:2577   .text:00000000000043e0 DOT1
             forth.s:2596   .text:0000000000004400 _DTOA
             forth.s:2596   .text:0000000000004404 $t
             forth.s:2598   .text:0000000000004408 $d
             forth.s:2613   .text:0000000000004430 _DDOT
             forth.s:2613   .text:0000000000004434 DDOT
             forth.s:2615   .text:0000000000004438 $d
             forth.s:2629   .text:0000000000004458 _HDOT
             forth.s:2631   .text:0000000000004460 $d
             forth.s:2653   .text:00000000000044a8 _QUEST
             forth.s:2653   .text:00000000000044aa $t
             forth.s:2653   .text:00000000000044ac QUEST
             forth.s:2655   .text:00000000000044b0 $d
             forth.s:2669   .text:00000000000044bc PARS
             forth.s:2670   .text:00000000000044bc $t
             forth.s:2671   .text:00000000000044c0 $d
             forth.s:2737   .text:00000000000045d0 PARS8
             forth.s:2701   .text:0000000000004544 PARS3
             forth.s:2684   .text:00000000000044fc PARS1
             forth.s:2699   .text:0000000000004540 PARS2
             forth.s:2705   .text:0000000000004550 PARS4
             forth.s:2717   .text:0000000000004580 PARS5
             forth.s:2724   .text:00000000000045a4 PARS6
             forth.s:2730   .text:00000000000045b8 PARS7
             forth.s:2748   .text:00000000000045e4 _PARSE
             forth.s:2748   .text:00000000000045ea $t
             forth.s:2748   .text:00000000000045ec PARSE
             forth.s:2750   .text:00000000000045f0 $d
             forth.s:2771   .text:0000000000004630 _DOTPR
             forth.s:2771   .text:0000000000004634 DOTPR
             forth.s:2773   .text:0000000000004638 $d
             forth.s:2784   .text:0000000000004650 _PAREN
             forth.s:2784   .text:0000000000004652 $t
             forth.s:2784   .text:0000000000004654 PAREN
             forth.s:2786   .text:0000000000004658 $d
             forth.s:2797   .text:0000000000004670 _BKSLA
ARM GAS  forth.s 			page 234


             forth.s:2797   .text:0000000000004672 $t
             forth.s:2797   .text:0000000000004674 BKSLA
             forth.s:2799   .text:0000000000004678 $d
             forth.s:2810   .text:0000000000004690 _CHAR
             forth.s:2810   .text:0000000000004698 CHAR
             forth.s:2812   .text:000000000000469c $d
             forth.s:2822   .text:00000000000046b4 _IMCHAR
             forth.s:2822   .text:00000000000046bc IMCHAR
             forth.s:2824   .text:00000000000046c0 $d
             forth.s:3542   .text:0000000000004f5c LITER
             forth.s:2833   .text:00000000000046d0 _WORDD
             forth.s:2833   .text:00000000000046d8 WORDD
             forth.s:2835   .text:00000000000046dc $d
             forth.s:2847   .text:00000000000046f4 _TOKEN
             forth.s:2847   .text:00000000000046fa $t
             forth.s:2847   .text:00000000000046fc TOKEN
             forth.s:2849   .text:0000000000004700 $d
             forth.s:3014   .text:00000000000048f0 UPPER
             forth.s:2863   .text:0000000000004714 _NAMET
             forth.s:2863   .text:000000000000471a $t
             forth.s:2863   .text:000000000000471c NAMET
             forth.s:2865   .text:0000000000004720 $d
             forth.s:2884   .text:0000000000004740 _SAMEQ
             forth.s:2884   .text:0000000000004746 $t
             forth.s:2884   .text:0000000000004748 SAMEQ
             forth.s:2886   .text:000000000000474c $d
             forth.s:2903   .text:0000000000004794 SAME2
             forth.s:2888   .text:0000000000004758 SAME1
             forth.s:2918   .text:00000000000047a8 SEARCH
             forth.s:2919   .text:00000000000047a8 $t
             forth.s:2920   .text:00000000000047ac $d
             forth.s:2927   .text:00000000000047c8 SEARCH1
             forth.s:2947   .text:0000000000004820 SEARCH6
             forth.s:2940   .text:0000000000004808 SEARCH2
             forth.s:2945   .text:0000000000004818 SEARCH3
             forth.s:2954   .text:0000000000004838 SEARCH4
             forth.s:2960   .text:0000000000004854 SEARCH5
             forth.s:2976   .text:000000000000487c _NAMEQ
             forth.s:2976   .text:0000000000004882 $t
             forth.s:2976   .text:0000000000004884 NAMEQ
             forth.s:2978   .text:0000000000004888 $d
             forth.s:2993   .text:000000000000489c _ASCIZ
             forth.s:2993   .text:00000000000048a2 $t
             forth.s:2993   .text:00000000000048a4 ASCIZ
             forth.s:2995   .text:00000000000048a8 $d
             forth.s:3014   .text:00000000000048e8 _UPPER
             forth.s:3014   .text:00000000000048ee $t
             forth.s:3016   .text:00000000000048f4 $d
             forth.s:3047   .text:0000000000004978 BKSP
             forth.s:3048   .text:0000000000004978 $t
             forth.s:3049   .text:000000000000497c $d
             forth.s:3063   .text:00000000000049c0 BACK1
             forth.s:3072   .text:00000000000049c4 TAP
             forth.s:3073   .text:00000000000049c4 $t
             forth.s:3074   .text:00000000000049c8 $d
             forth.s:3087   .text:00000000000049e0 KTAP
             forth.s:3088   .text:00000000000049e0 TTAP
ARM GAS  forth.s 			page 235


             forth.s:3089   .text:00000000000049e0 $t
             forth.s:3090   .text:00000000000049e4 $d
             forth.s:3104   .text:0000000000004a24 KTAP2
             forth.s:3101   .text:0000000000004a1c KTAP1
             forth.s:3116   .text:0000000000004a3c _ACCEP
             forth.s:3118   .text:0000000000004a48 $d
             forth.s:3121   .text:0000000000004a54 ACCP1
             forth.s:3137   .text:0000000000004a9c ACCP4
             forth.s:3133   .text:0000000000004a90 ACCP2
             forth.s:3135   .text:0000000000004a94 ACCP3
             forth.s:3148   .text:0000000000004ab0 _QUERY
             forth.s:3148   .text:0000000000004ab6 $t
             forth.s:3148   .text:0000000000004ab8 QUERY
             forth.s:3150   .text:0000000000004abc $d
             forth.s:3170   .text:0000000000004af0 _ABORT
             forth.s:3170   .text:0000000000004af6 $t
             forth.s:3172   .text:0000000000004afc ABORT1
             forth.s:3173   .text:0000000000004afc $d
             forth.s:3253   .text:0000000000004bd8 LBRAC
             forth.s:3186   .text:0000000000004b0c PRT_ABORT
             forth.s:3187   .text:0000000000004b0c $t
             forth.s:3188   .text:0000000000004b10 $d
             forth.s:3205   .text:0000000000004b34 ABORQ
             forth.s:3206   .text:0000000000004b34 $t
             forth.s:3207   .text:0000000000004b38 $d
             forth.s:3231   .text:0000000000004b70 _INTER
             forth.s:3233   .text:0000000000004b80 $d
             forth.s:3242   .text:0000000000004bbc INTE1
             forth.s:3239   .text:0000000000004bb2 $t
             forth.s:3240   .text:0000000000004bb4 $d
             forth.s:3246   .text:0000000000004bcc INTE2
             forth.s:3253   .text:0000000000004bd4 _LBRAC
             forth.s:3253   .text:0000000000004bd6 $t
             forth.s:3255   .text:0000000000004bdc $d
             forth.s:3268   .text:0000000000004c04 _DOTOK
             forth.s:3268   .text:0000000000004c08 $t
             forth.s:3268   .text:0000000000004c08 DOTOK
             forth.s:3270   .text:0000000000004c0c $d
             forth.s:3276   .text:0000000000004c30 DOTO1
             forth.s:3277   .text:0000000000004c30 $d
             forth.s:3285   .text:0000000000004c3c _QSTAC
             forth.s:3285   .text:0000000000004c44 QSTAC
             forth.s:3287   .text:0000000000004c48 $d
             forth.s:3289   .text:0000000000004c5e $t
             forth.s:3290   .text:0000000000004c60 $d
             forth.s:3297   .text:0000000000004c68 _EVAL
             forth.s:3299   .text:0000000000004c74 EVAL1
             forth.s:3300   .text:0000000000004c74 $d
             forth.s:3308   .text:0000000000004c9c EVAL2
             forth.s:3324   .text:0000000000004cac _EVALUATE
             forth.s:3324   .text:0000000000004cb8 EVALUATE
             forth.s:3327   .text:0000000000004cbc $d
             forth.s:3361   .text:0000000000004d50 _PRESE
             forth.s:3363   .text:0000000000004d5c $d
             forth.s:3377   .text:0000000000004d8c _QUIT
             forth.s:3378   .text:0000000000004d94 $d
             forth.s:3380   .text:0000000000004da0 QUIT1
ARM GAS  forth.s 			page 236


             forth.s:3382   .text:0000000000004da4 QUIT2
             forth.s:3392   .text:0000000000004db8 _FORGET
             forth.s:3392   .text:0000000000004dc0 FORGET
             forth.s:3394   .text:0000000000004dc4 $d
             forth.s:3989   .text:0000000000005488 OVERT
             forth.s:3421   .text:0000000000004e0c $d
             forth.s:3421   .text:0000000000004e10 _POSTPONE
             forth.s:3421   .text:0000000000004e1c POSTPONE
             forth.s:3423   .text:0000000000004e20 $d
             forth.s:3446   .text:0000000000004e58 ITICK
             forth.s:4031   .text:00000000000054f4 CALLC
             forth.s:3433   .text:0000000000004e30 _TICK
             forth.s:3433   .text:0000000000004e32 $t
             forth.s:3433   .text:0000000000004e34 TICK
             forth.s:3435   .text:0000000000004e38 $d
             forth.s:3439   .text:0000000000004e4c TICK1
             forth.s:3446   .text:0000000000004e54 _ITICK
             forth.s:3446   .text:0000000000004e58 $t
             forth.s:3448   .text:0000000000004e5c $d
             forth.s:3463   .text:0000000000004e68 _FIND
             forth.s:3463   .text:0000000000004e70 FIND
             forth.s:3465   .text:0000000000004e74 $d
             forth.s:3485   .text:0000000000004eb8 _ALLOT
             forth.s:3485   .text:0000000000004ebe $t
             forth.s:3487   .text:0000000000004ec4 $d
             forth.s:3496   .text:0000000000004ed4 _COMMA
             forth.s:3496   .text:0000000000004ed6 $t
             forth.s:3496   .text:0000000000004ed8 COMMA
             forth.s:3498   .text:0000000000004edc $d
             forth.s:3512   .text:0000000000004ef8 $d
             forth.s:3512   .text:0000000000004efc _BCOMP
             forth.s:3512   .text:0000000000004f06 $t
             forth.s:3512   .text:0000000000004f08 BCOMP
             forth.s:3514   .text:0000000000004f0c $d
             forth.s:3524   .text:0000000000004f1c _COMPI
             forth.s:3524   .text:0000000000004f24 $t
             forth.s:3524   .text:0000000000004f24 COMPI
             forth.s:3526   .text:0000000000004f28 $d
             forth.s:3542   .text:0000000000004f54 _LITER
             forth.s:3542   .text:0000000000004f5c $t
             forth.s:3544   .text:0000000000004f60 $d
             forth.s:3554   .text:0000000000004f74 STRCQ
             forth.s:3555   .text:0000000000004f74 $t
             forth.s:3556   .text:0000000000004f78 $d
             forth.s:3578   .text:0000000000004fb0 _FOR
             forth.s:3578   .text:0000000000004fb4 $t
             forth.s:3578   .text:0000000000004fb4 FOR
             forth.s:3580   .text:0000000000004fb8 $d
             forth.s:3589   .text:0000000000004fd0 _DO
             forth.s:3589   .text:0000000000004fd4 DO
             forth.s:3591   .text:0000000000004fd8 $d
             forth.s:3598   .text:000000000000500c DOPLOOP
             forth.s:3599   .text:000000000000500c $t
             forth.s:3617   .text:0000000000005034 $d
             forth.s:3617   .text:0000000000005038 _PLOOP
             forth.s:3617   .text:000000000000503e $t
             forth.s:3617   .text:0000000000005040 PLOOP
ARM GAS  forth.s 			page 237


             forth.s:3619   .text:0000000000005044 $d
             forth.s:3638   .text:0000000000005084 resolve_leave
             forth.s:3624   .text:000000000000505c DOLOOP
             forth.s:3625   .text:000000000000505c $t
             forth.s:3640   .text:0000000000005088 $d
             forth.s:3655   .text:00000000000050b4 _LOOP
             forth.s:3655   .text:00000000000050bc LOOP
             forth.s:3657   .text:00000000000050c0 $d
             forth.s:3666   .text:00000000000050dc _UNLOOP
             forth.s:3666   .text:00000000000050e4 UNLOOP
             forth.s:3675   .text:00000000000050ec $d
             forth.s:3675   .text:00000000000050f0 _LEAVE
             forth.s:3675   .text:00000000000050f6 $t
             forth.s:3675   .text:00000000000050f8 LEAVE
             forth.s:3677   .text:00000000000050fc $d
             forth.s:3688   .text:000000000000512c DOLEAVE
             forth.s:3689   .text:000000000000512c $t
             forth.s:3700   .text:0000000000005138 $d
             forth.s:3700   .text:000000000000513c _BEGIN
             forth.s:3700   .text:0000000000005142 $t
             forth.s:3700   .text:0000000000005144 BEGIN
             forth.s:3702   .text:0000000000005148 $d
             forth.s:3711   .text:0000000000005150 $d
             forth.s:3711   .text:0000000000005154 _FNEXT
             forth.s:3711   .text:000000000000515c FNEXT
             forth.s:3713   .text:0000000000005160 $d
             forth.s:3721   .text:0000000000005178 _I
             forth.s:3721   .text:000000000000517a $t
             forth.s:3721   .text:000000000000517c I
             forth.s:3730   .text:0000000000005188 $d
             forth.s:3730   .text:000000000000518c _J
             forth.s:3730   .text:000000000000518e $t
             forth.s:3730   .text:0000000000005190 J
             forth.s:3740   .text:000000000000519c $d
             forth.s:3740   .text:00000000000051a0 _UNTIL
             forth.s:3740   .text:00000000000051a6 $t
             forth.s:3740   .text:00000000000051a8 UNTIL
             forth.s:3742   .text:00000000000051ac $d
             forth.s:3751   .text:00000000000051c4 _AGAIN
             forth.s:3751   .text:00000000000051ca $t
             forth.s:3751   .text:00000000000051cc AGAIN
             forth.s:3753   .text:00000000000051d0 $d
             forth.s:3762   .text:00000000000051e8 _IFF
             forth.s:3762   .text:00000000000051ec IFF
             forth.s:3764   .text:00000000000051f0 $d
             forth.s:3776   .text:0000000000005218 _AHEAD
             forth.s:3776   .text:000000000000521e $t
             forth.s:3776   .text:0000000000005220 AHEAD
             forth.s:3778   .text:0000000000005224 $d
             forth.s:3790   .text:000000000000524c _REPEA
             forth.s:3790   .text:0000000000005254 REPEA
             forth.s:3792   .text:0000000000005258 $d
             forth.s:3803   .text:0000000000005270 _THENN
             forth.s:3803   .text:0000000000005278 THENN
             forth.s:3805   .text:000000000000527c $d
             forth.s:3816   .text:0000000000005290 _AFT
             forth.s:3816   .text:0000000000005294 $t
ARM GAS  forth.s 			page 238


             forth.s:3816   .text:0000000000005294 AFT
             forth.s:3818   .text:0000000000005298 $d
             forth.s:3830   .text:00000000000052b0 _ELSEE
             forth.s:3830   .text:00000000000052b8 ELSEE
             forth.s:3832   .text:00000000000052bc $d
             forth.s:3842   .text:00000000000052d0 _WHILE
             forth.s:3842   .text:00000000000052d6 $t
             forth.s:3842   .text:00000000000052d8 WHILE
             forth.s:3844   .text:00000000000052dc $d
             forth.s:3853   .text:00000000000052ec _ABRTQ
             forth.s:3853   .text:00000000000052f4 ABRTQ
             forth.s:3855   .text:00000000000052f8 $d
             forth.s:3864   .text:0000000000005310 _STRQ
             forth.s:3864   .text:0000000000005314 STRQ
             forth.s:3866   .text:0000000000005318 $d
             forth.s:3876   .text:0000000000005330 _DOTQ
             forth.s:3876   .text:0000000000005334 DOTQ
             forth.s:3878   .text:0000000000005338 $d
             forth.s:3892   .text:0000000000005350 _UNIQU
             forth.s:3892   .text:0000000000005358 $t
             forth.s:3892   .text:0000000000005358 UNIQU
             forth.s:3894   .text:000000000000535c $d
             forth.s:3901   .text:0000000000005384 UNIQ1
             forth.s:3898   .text:0000000000005378 $d
             forth.s:3911   .text:000000000000538c SNAME
             forth.s:3912   .text:000000000000538c $t
             forth.s:3913   .text:0000000000005390 $d
             forth.s:3929   .text:00000000000053d4 SNAM1
             forth.s:3941   .text:00000000000053e8 _SCOMP
             forth.s:3941   .text:00000000000053f4 SCOMP
             forth.s:3943   .text:00000000000053f8 $d
             forth.s:3955   .text:0000000000005430 SCOM2
             forth.s:3952   .text:0000000000005428 SCOM1
             forth.s:3960   .text:0000000000005444 SCOM3
             forth.s:3969   .text:000000000000544c COLON_ABORT
             forth.s:3970   .text:000000000000544c $t
             forth.s:3971   .text:0000000000005450 $d
             forth.s:3989   .text:0000000000005480 _OVERT
             forth.s:3989   .text:0000000000005486 $t
             forth.s:3991   .text:000000000000548c $d
             forth.s:4002   .text:00000000000054a4 _SEMIS
             forth.s:4002   .text:00000000000054a6 $t
             forth.s:4002   .text:00000000000054a8 SEMIS
             forth.s:4004   .text:00000000000054ac $d
             forth.s:4016   .text:00000000000054c8 _RBRAC
             forth.s:4016   .text:00000000000054ca $t
             forth.s:4016   .text:00000000000054cc RBRAC
             forth.s:4018   .text:00000000000054d0 $d
             forth.s:4032   .text:00000000000054f4 $t
             forth.s:4033   .text:00000000000054f8 $d
             forth.s:4045   .text:0000000000005510 _COLON
             forth.s:4045   .text:0000000000005512 $t
             forth.s:4045   .text:0000000000005514 COLON
             forth.s:4047   .text:0000000000005518 $d
             forth.s:4059   .text:0000000000005534 _IMMED
             forth.s:4059   .text:000000000000553e $t
             forth.s:4059   .text:0000000000005540 IMMED
ARM GAS  forth.s 			page 239


             forth.s:4061   .text:0000000000005544 $d
             forth.s:4079   .text:0000000000005570 _CONST
             forth.s:4079   .text:000000000000557c CONST
             forth.s:4081   .text:0000000000005580 $d
             forth.s:4092   .text:00000000000055b0 $t
             forth.s:4099   .text:00000000000055b0 DODOES
             forth.s:4101   .text:00000000000055b4 $d
             forth.s:4116   .text:00000000000055d8 $d
             forth.s:4116   .text:00000000000055dc _DOES
             forth.s:4116   .text:00000000000055e2 $t
             forth.s:4116   .text:00000000000055e4 DOES
             forth.s:4118   .text:00000000000055e8 $d
             forth.s:4133   .text:0000000000005618 _DEFERAT
             forth.s:4133   .text:0000000000005620 DEFERAT
             forth.s:4135   .text:0000000000005624 $d
             forth.s:4145   .text:000000000000563c _DEFERSTO
             forth.s:4145   .text:0000000000005644 DEFERSTO
             forth.s:4147   .text:0000000000005648 $d
             forth.s:4158   .text:0000000000005664 _DEFER
             forth.s:4158   .text:000000000000566a $t
             forth.s:4158   .text:000000000000566c DEFER
             forth.s:4160   .text:0000000000005670 $d
             forth.s:4183   .text:00000000000056bc CREAT
             forth.s:4171   .text:00000000000056a4 DEFER_NOP
             forth.s:4172   .text:00000000000056a4 $t
             forth.s:4173   .text:00000000000056a8 $d
             forth.s:4183   .text:00000000000056b4 _CREAT
             forth.s:4185   .text:00000000000056c0 $d
             forth.s:4198   .text:00000000000056e4 _VARIA
             forth.s:4198   .text:00000000000056f0 VARIA
             forth.s:4200   .text:00000000000056f4 $d
             forth.s:4218   .text:0000000000005714 DMP
             forth.s:4219   .text:0000000000005714 $t
             forth.s:4220   .text:0000000000005718 $d
             forth.s:4238   .text:000000000000576c PDUM2
             forth.s:4232   .text:0000000000005754 PDUM1
             forth.s:4253   .text:0000000000005784 $d
             forth.s:4253   .text:0000000000005788 _DUMP
             forth.s:4253   .text:0000000000005790 DUMP
             forth.s:4255   .text:0000000000005794 $d
             forth.s:4281   .text:0000000000005810 DUMP4
             forth.s:4271   .text:00000000000057e8 DUMP1
             forth.s:4283   .text:0000000000005818 DUMP3
             forth.s:4296   .text:000000000000582c TDOT
             forth.s:4297   .text:000000000000582c $t
             forth.s:4298   .text:0000000000005830 $d
             forth.s:4337   .text:00000000000058c4 _DOTS
             forth.s:4337   .text:00000000000058c8 DOTS
             forth.s:4339   .text:00000000000058cc $d
             forth.s:4346   .text:00000000000058e8 DOTS2
             forth.s:4342   .text:00000000000058dc DOTS1
             forth.s:4351   .text:00000000000058f8 RBASE
             forth.s:4352   .text:00000000000058f8 $t
             forth.s:4360   .text:0000000000005908 RDOT
             forth.s:4362   .text:000000000000590c $d
             forth.s:4389   .text:0000000000005970 _TRACE
             forth.s:4389   .text:0000000000005976 $t
ARM GAS  forth.s 			page 240


             forth.s:4389   .text:0000000000005978 TRACE
             forth.s:4391   .text:000000000000597c $d
             forth.s:4410   .text:00000000000059c0 _TOBODY
             forth.s:4410   .text:00000000000059c6 $t
             forth.s:4410   .text:00000000000059c8 TOBODY
             forth.s:4419   .text:00000000000059d0 $d
             forth.s:4419   .text:00000000000059d4 _TNAME
             forth.s:4419   .text:00000000000059da $t
             forth.s:4419   .text:00000000000059dc TNAME
             forth.s:4421   .text:00000000000059e0 $d
             forth.s:4424   .text:00000000000059ec TNAM1
             forth.s:4435   .text:0000000000005a20 TNAM2
             forth.s:4444   .text:0000000000005a30 _DOTID
             forth.s:4444   .text:0000000000005a34 $t
             forth.s:4444   .text:0000000000005a34 DOTID
             forth.s:4446   .text:0000000000005a38 $d
             forth.s:4453   .text:0000000000005a5c DOTI1
             forth.s:4454   .text:0000000000005a6a $t
             forth.s:4455   .text:0000000000005a6c $d
             forth.s:4457   *ABS*:0000000000000000 WANT_SEE
             forth.s:4531   .text:0000000000005a74 _WORDS
             forth.s:4531   .text:0000000000005a7a $t
             forth.s:4531   .text:0000000000005a7c WORDS
             forth.s:4533   .text:0000000000005a80 $d
             forth.s:4536   .text:0000000000005a8c WORS1
             forth.s:4545   .text:0000000000005ab4 WORS2
             forth.s:4554   .text:0000000000005abc _MARK
             forth.s:4554   .text:0000000000005ac4 MARK
             forth.s:4556   .text:0000000000005ac8 $d
             forth.s:4559   .text:0000000000005ad4 $t
             forth.s:4560   .text:0000000000005ad8 $d
             forth.s:4575   .text:0000000000005b08 _ARRAY
             forth.s:4575   .text:0000000000005b0e $t
             forth.s:4575   .text:0000000000005b10 ARRAY
             forth.s:4577   .text:0000000000005b14 $d
             forth.s:4591   .text:0000000000005b50 DO_ARRAY
             forth.s:4592   .text:0000000000005b50 $t
             forth.s:4593   .text:0000000000005b54 $d
             forth.s:4611   .text:0000000000005b70 VERSN
             forth.s:4612   .text:0000000000005b70 $t
             forth.s:4613   .text:0000000000005b74 $d
             forth.s:4621   .text:0000000000005b84 _HI
             forth.s:4621   .text:0000000000005b88 HI
             forth.s:4623   .text:0000000000005b8c $d
             forth.s:4624   .text:0000000000005ba6 $t
             forth.s:4625   .text:0000000000005ba8 $d
             forth.s:4649   .text:0000000000005bf4 $t
             forth.s:4650   .text:0000000000005bf8 $d
             forth.s:4662   .text:0000000000005c14 PS2_QUERY
             forth.s:4663   .text:0000000000005c14 $t
             forth.s:4664   .text:0000000000005c18 $d
             forth.s:4678   .text:0000000000005c7e $t
             forth.s:4679   .text:0000000000005c80 $d
             forth.s:4689   .text:0000000000005c8c IF_SENSE
             forth.s:4690   .text:0000000000005c8c $t
             forth.s:4691   .text:0000000000005c90 $d
             forth.s:4705   .text:0000000000005cc0 READY
ARM GAS  forth.s 			page 241


             forth.s:4706   .text:0000000000005cc0 $t
             forth.s:4707   .text:0000000000005cc4 $d
             forth.s:4707   .text:0000000000005cce $t
             forth.s:4708   .text:0000000000005cd0 $d
             forth.s:4726   .text:0000000000005cf8 COLD1
             forth.s:4727   .text:0000000000005cf8 $d
             forth.s:4742   .text:0000000000005d48 COLD2
             forth.s:4745   .text:0000000000005d48 $d
             forth.s:4748   .text:0000000000005d4c $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
          ser-term.s:90     .text:00000000000009e3 $d
          ser-term.s:90     .text:00000000000009e4 $t
          ser-term.s:110    .text:0000000000000a1d $d
          ser-term.s:110    .text:0000000000000a1e $t
          ser-term.s:133    .text:0000000000000a5b $d
          ser-term.s:133    .text:0000000000000a5c $t
          ser-term.s:164    .text:0000000000000aa3 $d
          ser-term.s:164    .text:0000000000000aa4 $t
          ser-term.s:191    .text:0000000000000b19 $d
          ser-term.s:191    .text:0000000000000b1a $t
          ser-term.s:203    .text:0000000000000b47 $d
          ser-term.s:203    .text:0000000000000b48 $t
             tvout.s:264    .text:0000000000000d93 $d
             tvout.s:264    .text:0000000000000d94 $t
             tvout.s:278    .text:0000000000000dc7 $d
             tvout.s:278    .text:0000000000000dc8 $t
             tvout.s:306    .text:0000000000000e21 $d
             tvout.s:306    .text:0000000000000e22 $t
             tvout.s:325    .text:0000000000000e4f $d
             tvout.s:325    .text:0000000000000e50 $t
             tvout.s:427    .text:0000000000000f89 $d
             tvout.s:427    .text:0000000000000f8a $t
             tvout.s:448    .text:0000000000000fe3 $d
             tvout.s:448    .text:0000000000000fe4 $t
             tvout.s:495    .text:0000000000001079 $d
             tvout.s:495    .text:000000000000107a $t
           ps2_kbd.s:307    .text:0000000000001767 $d
           ps2_kbd.s:307    .text:0000000000001768 $t
           ps2_kbd.s:396    .text:0000000000001863 $d
           ps2_kbd.s:396    .text:0000000000001864 $t
           ps2_kbd.s:616    .text:0000000000001b05 $d
           ps2_kbd.s:616    .text:0000000000001b06 $t
           ps2_kbd.s:633    .text:0000000000001b3f $d
           ps2_kbd.s:633    .text:0000000000001b40 $t
         spi-flash.s:85     .text:0000000000001c2b $d
         spi-flash.s:85     .text:0000000000001c2c $t
ARM GAS  forth.s 			page 242


         spi-flash.s:151    .text:0000000000001cf7 $d
         spi-flash.s:151    .text:0000000000001cf8 $t
         spi-flash.s:238    .text:0000000000001e3b $d
         spi-flash.s:238    .text:0000000000001e3c $t
         spi-flash.s:256    .text:0000000000001e77 $d
         spi-flash.s:256    .text:0000000000001e78 $t
         spi-flash.s:278    .text:0000000000001ecb $d
         spi-flash.s:278    .text:0000000000001ecc $t
         spi-flash.s:325    .text:0000000000001f4b $d
         spi-flash.s:325    .text:0000000000001f4c $t
         spi-flash.s:343    .text:0000000000001f6d $d
         spi-flash.s:343    .text:0000000000001f6e $t
         spi-flash.s:352    .text:0000000000001f81 $d
         spi-flash.s:352    .text:0000000000001f82 $t
               fpu.s:222    .text:0000000000002153 $d
               fpu.s:222    .text:0000000000002154 $t
               fpu.s:235    .text:0000000000002173 $d
               fpu.s:235    .text:0000000000002174 $t
               fpu.s:249    .text:0000000000002193 $d
               fpu.s:249    .text:0000000000002194 $t
               fpu.s:262    .text:00000000000021b3 $d
               fpu.s:262    .text:00000000000021b4 $t
               fpu.s:285    .text:00000000000021f1 $d
               fpu.s:285    .text:00000000000021f2 $t
               fpu.s:297    .text:0000000000002211 $d
               fpu.s:297    .text:0000000000002212 $t
               fpu.s:319    .text:000000000000224b $d
               fpu.s:319    .text:000000000000224c $t
               fpu.s:330    .text:0000000000002267 $d
               fpu.s:330    .text:0000000000002268 $t
               fpu.s:340    .text:0000000000002281 $d
               fpu.s:340    .text:0000000000002282 $t
               fpu.s:353    .text:00000000000022b1 $d
               fpu.s:353    .text:00000000000022b2 $t
               fpu.s:379    .text:0000000000002301 $d
               fpu.s:379    .text:0000000000002302 $t
               fpu.s:403    .text:000000000000234b $d
               fpu.s:403    .text:000000000000234c $t
               fpu.s:421    .text:000000000000237d $d
               fpu.s:421    .text:000000000000237e $t
               fpu.s:431    .text:0000000000002399 $d
               fpu.s:431    .text:000000000000239a $t
            strtof.s:226    .text:000000000000261b $d
            strtof.s:226    .text:000000000000261c $t
              ftoa.s:412    .text:0000000000002c87 $d
              ftoa.s:412    .text:0000000000002c88 $t
             forth.s:133    .text:0000000000002d43 $d
             forth.s:133    .text:0000000000002d44 $t
             forth.s:145    .text:0000000000002d63 $d
             forth.s:145    .text:0000000000002d64 $t
             forth.s:157    .text:0000000000002d83 $d
             forth.s:157    .text:0000000000002d84 $t
             forth.s:179    .text:0000000000002dbd $d
             forth.s:179    .text:0000000000002dbe $t
             forth.s:215    .text:0000000000002ddb $d
             forth.s:215    .text:0000000000002ddc $t
             forth.s:262    .text:0000000000002e89 $d
ARM GAS  forth.s 			page 243


             forth.s:262    .text:0000000000002e8a $t
             forth.s:279    .text:0000000000002eb7 $d
             forth.s:279    .text:0000000000002eb8 $t
             forth.s:293    .text:0000000000002ee1 $d
             forth.s:293    .text:0000000000002ee2 $t
             forth.s:404    .text:0000000000002f99 $d
             forth.s:404    .text:0000000000002f9a $t
             forth.s:430    .text:0000000000002fc3 $d
             forth.s:430    .text:0000000000002fc4 $t
             forth.s:440    .text:0000000000002fd7 $d
             forth.s:440    .text:0000000000002fd8 $t
             forth.s:449    .text:0000000000002fe3 $d
             forth.s:449    .text:0000000000002fe4 $t
             forth.s:469    .text:0000000000003011 $d
             forth.s:469    .text:0000000000003012 $t
             forth.s:478    .text:0000000000003025 $d
             forth.s:478    .text:0000000000003026 $t
             forth.s:535    .text:0000000000003099 $d
             forth.s:535    .text:000000000000309a $t
             forth.s:551    .text:00000000000030bb $d
             forth.s:551    .text:00000000000030bc $t
             forth.s:576    .text:00000000000030e9 $d
             forth.s:576    .text:00000000000030ea $t
             forth.s:599    .text:0000000000003119 $d
             forth.s:599    .text:000000000000311a $t
             forth.s:616    .text:000000000000313d $d
             forth.s:616    .text:000000000000313e $t
             forth.s:646    .text:0000000000003183 $d
             forth.s:646    .text:0000000000003184 $t
             forth.s:655    .text:0000000000003199 $d
             forth.s:655    .text:000000000000319a $t
             forth.s:703    .text:00000000000031f3 $d
             forth.s:703    .text:00000000000031f4 $t
             forth.s:714    .text:0000000000003207 $d
             forth.s:714    .text:0000000000003208 $t
             forth.s:722    .text:0000000000003215 $d
             forth.s:722    .text:0000000000003216 $t
             forth.s:730    .text:0000000000003225 $d
             forth.s:730    .text:0000000000003226 $t
             forth.s:738    .text:0000000000003235 $d
             forth.s:738    .text:0000000000003236 $t
             forth.s:762    .text:0000000000003265 $d
             forth.s:762    .text:0000000000003266 $t
             forth.s:787    .text:0000000000003299 $d
             forth.s:787    .text:000000000000329a $t
             forth.s:795    .text:00000000000032a9 $d
             forth.s:795    .text:00000000000032aa $t
             forth.s:803    .text:00000000000032bb $d
             forth.s:803    .text:00000000000032bc $t
             forth.s:824    .text:00000000000032e3 $d
             forth.s:824    .text:00000000000032e4 $t
             forth.s:853    .text:000000000000331f $d
             forth.s:853    .text:0000000000003320 $t
             forth.s:863    .text:0000000000003333 $d
             forth.s:863    .text:0000000000003334 $t
             forth.s:876    .text:0000000000003351 $d
             forth.s:876    .text:0000000000003352 $t
ARM GAS  forth.s 			page 244


             forth.s:921    .text:00000000000033b9 $d
             forth.s:921    .text:00000000000033ba $t
             forth.s:929    .text:00000000000033cd $d
             forth.s:929    .text:00000000000033ce $t
             forth.s:970    .text:0000000000003423 $d
             forth.s:970    .text:0000000000003424 $t
             forth.s:993    .text:000000000000344f $d
             forth.s:993    .text:0000000000003450 $t
             forth.s:1006   .text:000000000000346f $d
             forth.s:1006   .text:0000000000003470 $t
             forth.s:1030   .text:000000000000349f $d
             forth.s:1030   .text:00000000000034a0 $t
             forth.s:1076   .text:00000000000034f7 $d
             forth.s:1076   .text:00000000000034f8 $t
             forth.s:1088   .text:0000000000003511 $d
             forth.s:1088   .text:0000000000003512 $t
             forth.s:1100   .text:0000000000003531 $d
             forth.s:1100   .text:0000000000003532 $t
             forth.s:1172   .text:00000000000035b5 $d
             forth.s:1172   .text:00000000000035b6 $t
             forth.s:1181   .text:00000000000035cd $d
             forth.s:1181   .text:00000000000035ce $t
             forth.s:1208   .text:0000000000003615 $d
             forth.s:1208   .text:0000000000003616 $t
             forth.s:1238   .text:0000000000003651 $d
             forth.s:1238   .text:0000000000003652 $t
             forth.s:1257   .text:000000000000367d $d
             forth.s:1257   .text:000000000000367e $t
             forth.s:1297   .text:00000000000036d7 $d
             forth.s:1297   .text:00000000000036d8 $t
             forth.s:1317   .text:0000000000003701 $d
             forth.s:1317   .text:0000000000003702 $t
             forth.s:1331   .text:000000000000371f $d
             forth.s:1331   .text:0000000000003720 $t
             forth.s:1342   .text:000000000000373d $d
             forth.s:1342   .text:000000000000373e $t
             forth.s:1371   .text:0000000000003795 $d
             forth.s:1371   .text:0000000000003796 $t
             forth.s:1386   .text:00000000000037b3 $d
             forth.s:1386   .text:00000000000037b4 $t
             forth.s:1403   .text:00000000000037df $d
             forth.s:1403   .text:00000000000037e0 $t
             forth.s:1433   .text:000000000000381b $d
             forth.s:1433   .text:000000000000381c $t
             forth.s:1473   .text:0000000000003893 $d
             forth.s:1473   .text:0000000000003894 $t
             forth.s:1582   .text:00000000000039bf $d
             forth.s:1582   .text:00000000000039c0 $t
             forth.s:1604   .text:0000000000003a0b $d
             forth.s:1604   .text:0000000000003a0c $t
             forth.s:1653   .text:0000000000003a4b $d
             forth.s:1653   .text:0000000000003a4c $t
             forth.s:1704   .text:0000000000003ac3 $d
             forth.s:1704   .text:0000000000003ac4 $t
             forth.s:1796   .text:0000000000003bad $d
             forth.s:1796   .text:0000000000003bae $t
             forth.s:1824   .text:0000000000003be1 $d
ARM GAS  forth.s 			page 245


             forth.s:1824   .text:0000000000003be2 $t
             forth.s:1871   .text:0000000000003c49 $d
             forth.s:1871   .text:0000000000003c4a $t
             forth.s:1882   .text:0000000000003c6d $d
             forth.s:1882   .text:0000000000003c6e $t
             forth.s:1915   .text:0000000000003cbd $d
             forth.s:1915   .text:0000000000003cbe $t
             forth.s:1947   .text:0000000000003d05 $d
             forth.s:1947   .text:0000000000003d06 $t
             forth.s:2025   .text:0000000000003de7 $d
             forth.s:2025   .text:0000000000003de8 $t
             forth.s:2037   .text:0000000000003e05 $d
             forth.s:2037   .text:0000000000003e06 $t
             forth.s:2069   .text:0000000000003e53 $d
             forth.s:2069   .text:0000000000003e54 $t
             forth.s:2087   .text:0000000000003e85 $d
             forth.s:2087   .text:0000000000003e86 $t
             forth.s:2101   .text:0000000000003eaf $d
             forth.s:2101   .text:0000000000003eb0 $t
             forth.s:2179   .text:0000000000003f6b $d
             forth.s:2179   .text:0000000000003f6c $t
             forth.s:2296   .text:000000000000409d $d
             forth.s:2296   .text:000000000000409e $t
             forth.s:2382   .text:00000000000041bb $d
             forth.s:2382   .text:00000000000041bc $t
             forth.s:2399   .text:00000000000041f1 $d
             forth.s:2399   .text:00000000000041f2 $t
             forth.s:2417   .text:0000000000004227 $d
             forth.s:2417   .text:0000000000004228 $t
             forth.s:2512   .text:000000000000431b $d
             forth.s:2512   .text:000000000000431c $t
             forth.s:2549   .text:000000000000437f $d
             forth.s:2549   .text:0000000000004380 $t
             forth.s:2613   .text:0000000000004433 $d
             forth.s:2613   .text:0000000000004434 $t
             forth.s:2629   .text:000000000000445b $d
             forth.s:2629   .text:000000000000445c $t
             forth.s:2771   .text:0000000000004633 $d
             forth.s:2771   .text:0000000000004634 $t
             forth.s:2810   .text:0000000000004695 $d
             forth.s:2810   .text:0000000000004696 $t
             forth.s:2822   .text:00000000000046bb $d
             forth.s:2822   .text:00000000000046bc $t
             forth.s:2833   .text:00000000000046d5 $d
             forth.s:2833   .text:00000000000046d6 $t
             forth.s:3116   .text:0000000000004a43 $d
             forth.s:3116   .text:0000000000004a44 $t
             forth.s:3231   .text:0000000000004b7b $d
             forth.s:3231   .text:0000000000004b7c $t
             forth.s:3285   .text:0000000000004c43 $d
             forth.s:3285   .text:0000000000004c44 $t
             forth.s:3297   .text:0000000000004c6d $d
             forth.s:3297   .text:0000000000004c6e $t
             forth.s:3324   .text:0000000000004cb5 $d
             forth.s:3324   .text:0000000000004cb6 $t
             forth.s:3361   .text:0000000000004d57 $d
             forth.s:3361   .text:0000000000004d58 $t
ARM GAS  forth.s 			page 246


             forth.s:3377   .text:0000000000004d91 $d
             forth.s:3377   .text:0000000000004d92 $t
             forth.s:3392   .text:0000000000004dbf $d
             forth.s:3392   .text:0000000000004dc0 $t
             forth.s:3421   .text:0000000000004e19 $d
             forth.s:3421   .text:0000000000004e1a $t
             forth.s:3463   .text:0000000000004e6d $d
             forth.s:3463   .text:0000000000004e6e $t
             forth.s:3589   .text:0000000000004fd3 $d
             forth.s:3589   .text:0000000000004fd4 $t
             forth.s:3655   .text:00000000000050b9 $d
             forth.s:3655   .text:00000000000050ba $t
             forth.s:3666   .text:00000000000050e3 $d
             forth.s:3666   .text:00000000000050e4 $t
             forth.s:3711   .text:0000000000005159 $d
             forth.s:3711   .text:000000000000515a $t
             forth.s:3762   .text:00000000000051eb $d
             forth.s:3762   .text:00000000000051ec $t
             forth.s:3790   .text:0000000000005253 $d
             forth.s:3790   .text:0000000000005254 $t
             forth.s:3803   .text:0000000000005275 $d
             forth.s:3803   .text:0000000000005276 $t
             forth.s:3830   .text:00000000000052b5 $d
             forth.s:3830   .text:00000000000052b6 $t
             forth.s:3853   .text:00000000000052f3 $d
             forth.s:3853   .text:00000000000052f4 $t
             forth.s:3864   .text:0000000000005313 $d
             forth.s:3864   .text:0000000000005314 $t
             forth.s:3876   .text:0000000000005333 $d
             forth.s:3876   .text:0000000000005334 $t
             forth.s:3941   .text:00000000000053f1 $d
             forth.s:3941   .text:00000000000053f2 $t
             forth.s:4079   .text:0000000000005579 $d
             forth.s:4079   .text:000000000000557a $t
             forth.s:4133   .text:000000000000561f $d
             forth.s:4133   .text:0000000000005620 $t
             forth.s:4145   .text:0000000000005643 $d
             forth.s:4145   .text:0000000000005644 $t
             forth.s:4183   .text:00000000000056bb $d
             forth.s:4183   .text:00000000000056bc $t
             forth.s:4198   .text:00000000000056ed $d
             forth.s:4198   .text:00000000000056ee $t
             forth.s:4253   .text:000000000000578d $d
             forth.s:4253   .text:000000000000578e $t
             forth.s:4337   .text:00000000000058c7 $d
             forth.s:4337   .text:00000000000058c8 $t
             forth.s:4554   .text:0000000000005ac1 $d
             forth.s:4554   .text:0000000000005ac2 $t
             forth.s:4621   .text:0000000000005b87 $d
             forth.s:4621   .text:0000000000005b88 $t
             forth.s:4720   .text:0000000000005ce1 $d
             forth.s:4720   .text:0000000000005ce2 $t

UNDEFINED SYMBOLS
_mstack
